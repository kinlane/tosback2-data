
/* Comment Generated by Combres - Resource '~/js/kbb/social/jquery.social.js' (Mode: Static) */
KBB.modules.social = (function () {
    var _this,
        _gig;

    return {
        init: function () {
            _this = this;
            $('.social[id]').each(this.socialBar.init);
        },
        gigyaConfig: {
            moreEnabledProviders: 'linkedIn,digg,reddit,stumbleupon,delicious,tumblr,orkut',
            showEmailButton: false
        },
        /*  The socialBar will assist the jQuery plugin $.social(). It will allow a DOM element to configure a social-bar 
        via data attributes. It will also wire up click handlers for Omniture. 
        By including this JS file on a page, any DOM element marked with a class of 'social' will be rendered
        as Gigya social bar. Although not required, configurable options can be found below. For further documentation
        please see http://developers.gigya.com/020_Client_API/020_Methods/socialize.showShareBarUI */
        socialBar: (function () {
            return {
                init: function () {
                    var me = $(this),
                        settings = {},
                        buttons = me.data('social-buttons'),
                        iconsOnly = me.data('social-icons-only'),
                        showCounts = me.data('social-show-counts'),
                        cid = me.data('social-cid'),
                        link = me.data('social-link') || me.attr('href'),
                        title = me.data('social-title') || me.attr('title'),
                        image = me.data('social-media-url') || me.data('social-image') || me.attr('src'),
                        mediaType = me.data('social-media-type'),
                        description = me.data('social-description'),
                        lazyShow = me.data('social-lazy-show');

                    _gig = gigya.services.socialize;

                    if (typeof buttons !== 'undefined') { settings.shareButtons = _this.socialBar.getCustomButtons(buttons); }
                    if (typeof iconsOnly !== 'undefined') { settings.iconsOnly = iconsOnly; }
                    if (typeof showCounts !== 'undefined') { settings.showCounts = showCounts == true ? 'right' : showCounts; }
                    if (typeof link !== 'undefined') { settings.link = link; }
                    if (typeof title !== 'undefined') { settings.title = title; }
                    if (typeof image !== 'undefined') { settings.image = image; }
                    if (typeof mediaType !== 'undefined') { settings.mediaType = mediaType; }
                    if (typeof description !== 'undefined') { settings.description = description; }
                    if (typeof cid !== 'undefined') {
                        settings.cid = $.tmpl(cid).text().toLowerCase();
                        settings.onSendDone = _this.socialBar.createOnSendDoneHandler(settings.cid, me);
                        settings.onShareButtonClicked = _this.socialBar.createOnShareButtonClickedHandler(settings.cid, me);
                    }

                    if (!(typeof iconsOnly !== 'undefined' && iconsOnly) && (typeof showCounts === 'undefined' || showCounts === 'right')) {
                        me.addClass('right-count');
                    }

                    if (typeof lazyShow !== 'undefined') {
                        settings.onLoad = function () { (lazyShow == true ? me : $('#' + lazyShow)).show(); };
                    }

                    me.social(settings);
                },
                getCustomButtons: function (buttonString) {
                    var buttons = buttonString.split(',');
                    var buttonArray = [];
                    for (var i = 0; i < buttons.length; i++) {
                        var button = { provider: buttons[i] };
                        if (buttons[i].toLowerCase() === 'share') {
                            button['iconImgUp'] = 'http://cdn.gigya.com/gs/i/sharebar/icons/share3.png';
                        }
                        if (buttons[i].toLowerCase() === 'twitter-tweet') {
                            button['related'] = 'KelleyBlueBook';
                            button['via'] = "KelleyBlueBook";
                        }
                        buttonArray.push(button);
                    }
                    return buttonArray;
                },
                createOnShareButtonClickedHandler: function (cid, obj) {
                    return function (e) {
                        if (e.shareItem && e.shareItem.provider) {
                            PartnerLink(e.shareItem.provider, cid, '', obj);
                        }
                    }
                },
                createOnSendDoneHandler: function (cid, obj) {
                    return function (e) {
                        if (e.providers) {
                            var providers = e.providers.split(',');
                            for (i = 0; i < providers.length; i++) {
                                PartnerLink(providers[i], cid + '_confirm', '', obj);
                            }
                        }
                    }
                }
            }
        } ()),
        Providers: { Facebook: 'facebook', Twitter: 'twitter', Google: 'google' },
        GetCounts: function (provider) {
            _gig.getProviderShareCounts(this.gigyaConfig, { callback:
            function (data) {
                if (provider && data && data.errorCode === 0 && data.shareCounts) {
                    for (var p in data.shareCounts) {
                        if (p == provider) {
                            data = data.shareCounts[p];
                            break;
                        }
                    }
                }
                KBB.events.fire('Social.OnGetCountsComplete', data)
            }
            });
        },
        OnGetCountsComplete: function (cb) {
            KBB.events.on('Social.OnGetCountsComplete', cb);
        }
    };
} ());

(function ($) {
    //Creates a social bar with Gigya
    function Social(el, options) {

        //Defaults:
        this.defaults = {
            containerID: el.id,
            shareButtons: 'facebook-like,google-plusone,twitter-tweet,share',
            iconsOnly: false,
            showCounts: 'right', /* top, right, none */
            cid: '',
            link: '',
            title: '',
            image: '',
            mediaType: 'image',
            description: '',
            onSendDone: null,
            onShareButtonClicked: null
        };

        //Extending options:
        this.opts = $.extend({}, this.defaults, options);

        //Privates:
        this.$el = $(el);
        this._gig = gigya.services.socialize;

        this._isUserActionDefined = this.opts.link || this.opts.title || this.opts.description || this.opts.image;
        this.opts.userAction = this._isUserActionDefined ? new this._gig.UserAction() : KBB.social.openGraphUserAction;

        if (!this.opts.userAction) {
            KBB.log('No UserAction defined for Social plugin, please provide at least a link, title, description and/or image. Or, render a KBB.social.openGraphUserAction using Html.RenderGigyaUserAction().');
            return;
        }
        if (this._isUserActionDefined) {
            this.opts.link = this.opts.link || self.location;
            this.opts.title = this.opts.title || document.title;
            this.opts.userAction.addActionLink(this.opts.title, this.opts.link);
            this.opts.userAction.setLinkBack(this.opts.link);
            this.opts.userAction.setTitle(this.opts.title);
            if (this.opts.description) {
                this.opts.userAction.setDescription(this.opts.description);
            }
            if (this.opts.image) {
                this.opts.userAction.addMediaItem({ type: this.opts.mediaType, src: this.opts.image, href: this.opts.link });
            }
        }

        if (this.opts.iconsOnly || this.opts.iconsOnly == 'true') {
            if (typeof options.shareButtons === 'undefined') {
                this.opts.shareButtons = 'facebook,google-plusone,twitter,share';
            }
            if (typeof options.showCounts === 'undefined') {
                this.opts.showCounts = 'none';
            }
        }

        if (typeof options.showCounts !== 'undefined') {
            this.opts.showCounts = !options.showCounts ? 'none' : options.showCounts;
        }
    }

    // Separate functionality from object creation
    Social.prototype = {
        init: function () {
            var _this = this;

            if (!_this.opts.containerID) {
                KBB.log('Social element needs an id');
            }

            _this._gig.showShareBarUI(KBB.modules.social.gigyaConfig, _this.opts);
        }
    };

    // The actual plugin
    $.fn.social = function (options) {
        if (this.length) {
            this.each(function () {
                var rev = new Social(this, options);
                rev.init();
                $(this).data('social', rev);
            });
        }
    };
})(jQuery);

;


/* Comment Generated by Combres - Resource '~/js/kbb/social/kbb.mykbb.js' (Mode: Static) */
KBB.modules.myKbb = (function () {
    var currentKey = Math.round(new Date().getTime()),
        loginService = $('#Login-service').val() + '?jsoncallback=?',
        logoutService = $("#Logout-service").val(),
        personalizationService = $('#Personalizaton-service').val(),
        setRecentlyViewedService = $('#Set-recently-viewed-service').val(),
        forgotPasswordService = $('#Forgot-password-service').val() + '?jsoncallback=?',
        signUpService = $("#Create-account-service").val() + "?jsoncallback=?",
        saveVehicleService = $('#Save-vehicle-service').val(),
        removeService = $('#Remove-vehicle-service').val(),
        redirectUrl = $('#Signout-redirect-url').val(),
        _isMyKbbUser = isMyKBBUser || false;

    return {
        isAuthenticated: _isMyKbbUser,
        currentUser: null,
        init: function () {
            personalizationService = KBB.helpers.appendUrlParameter(personalizationService, 'r', currentKey);
            if (this.isAuthenticated) {
                this.getPersonalizationData();
            }
        },
        isAuthenticationRequired: $('#Requires-auth').val() == 'true',
        signIn: function (un, pw, remember, cb) {
            var email = un || $('#sign-in-email').val(),
                password = pw || $('#sign-in-password').val(),
                rememberme = $('#sign-in-remember-me').is(':checked');

            if (typeof remember !== 'undefined') {
                rememberme = remember;
            }

            $.postJSON(loginService, { email: email, password: password, rememberme: rememberme, redirect: false }, function (result) {
                if (KBB.modules.myKbb.isAuthenticated !== result.data.success) {
                    KBB.events.fire('MyKbb.OnLogin');
                    KBB.modules.myKbb.getPersonalizationData();
                }
                if (cb && $.isFunction(cb)) {
                    cb(result.data);
                }
            });
        },
        signOut: function (cb) {
            if (!KBB.modules.myKbb.isAuthenticated) { return; }

            $.postJSON(logoutService, null, function () {
                if (KBB.modules.myKbb.isAuthenticationRequired) {
                    self.location.href = redirectUrl;
                    return;
                }
                KBB.modules.myKbb.getPersonalizationData();
                if ($.isFunction(cb)) {
                    cb();
                }
            });
        },
        forgotPassword: function (email, cb) {
            $.postJSON(forgotPasswordService, { email: email, redirect: false }, function (result) {
                if (cb && $.isFunction(cb)) {
                    cb(result.data);
                }
            });
        },
        getPersonalizationData: function (cb) {
            $.ajax({
                url: personalizationService,
                cache: false,
                success: function (data) {
                    var oldAuthenticationState = KBB.modules.myKbb.isAuthenticated;

                    KBB.modules.myKbb.currentUser = data.User;
                    KBB.modules.myKbb.isAuthenticated = data.IsAuthenticated;

                    if (oldAuthenticationState !== data.IsAuthenticated) {
                        KBB.events.fire('MyKbb.OnAuthenticationChanged', data);
                    }

                    KBB.events.fire('MyKbb.OnGetPersonalizationDataComplete', data);

                    if ($.isFunction(cb)) {
                        cb(data);
                    }
                }
            });
        },
        signUp: function (email, password, profilename, isOptForUpdatesChecked) {
            var params = {
                email: email,
                password: password,
                displayname: profilename,
                emailoptin: isOptForUpdatesChecked,
                redirect: false
            };
            $.postJSON(signUpService, params, function (result) {
                if (result.data.success) {
                    KBB.modules.myKbb.getPersonalizationData();
                }
                KBB.events.fire('MyKbb.OnSignUpComplete', result.data);
            });
        },
        //Example: '123456-UsedCar|432156-NewCar|654321-NewCar'
        saveVehicles: function (vehicles, cb) {
            this.saveVehicle({ list: vehicles }, cb);
        },
        /*        
        saveVehicle accepts a list of vehicle ids and class: { list: '123456-UsedCar|432156-NewCar|654321-NewCar' }.
        Or, an object like:
        { 
        vehicleid: '123456', 
        vehicleclass: 'UsedCar', 
        [intent: 'buy-used',]
        [mileage: '3000',]
        [selectionhistory: '23456|true|54321|false',] 
        [condition: 'good']
        }
        */
        saveVehicle: function (vehicleInfo, cb) {
            if (!vehicleInfo) {
                return;
            }

            var _cb = function (data) {
                if (data && data.success) {
                    KBB.modules.myKbb.getPersonalizationData();
                }
                KBB.events.fire('MyKbb.OnSaveVehicleComplete', data);
                if ($.isFunction(cb)) {
                    cb(data);
                }
            };

            $.getJSON(saveVehicleService, vehicleInfo, _cb);
        },
        removeVehicles: function (vehicleIdList, cb) {
            if (!vehicleIdList) return;
            var ids = $.isArray(vehicleIdList) ? vehicleIdList.join("|") : vehicleIdList;

            var _cb = function (data) {
                if (data && data.success) {
                    KBB.modules.myKbb.getPersonalizationData();
                }
                KBB.events.fire('MyKbb.OnRemoveVehiclesComplete', data);
                if ($.isFunction(cb)) {
                    cb(data);
                }
            };

            $.postJSON(removeService, { list: ids }, _cb);
        },
        saveRecentlyViewed: function (vehicleId, price, intent, success) {
            var data = { vehicleId: vehicleId };

            if (price && price > 0)
                data.price = price;
            if (intent && intent.length)
                data.intent = intent;

            $.postJSON(setRecentlyViewedService, data, function (result) {
                if ($.isFunction(success)) {
                    success(result);
                }
                KBB.events.fire('MyKbb.OnRecentlyViewedAdded', result);
            });
        },
        /* { IsAuthenticated: [bool], User: { DisplayName: [string] } } and more... debug and see for yourself */
        onAuthenticationChange: function (cb) {
            KBB.events.on('MyKbb.OnAuthenticationChanged', cb);
        },
        /* { success: [bool], User: { DisplayName: [string] } } */
        onGetPersonalizationDataComplete: function (cb) {
            KBB.events.on('MyKbb.OnGetPersonalizationDataComplete', cb);
        },
        onSignUpComplete: function (cb) {
            KBB.events.on('MyKbb.OnSignUpComplete', cb);
        },
        onSaveVehicleComplete: function (cb) {
            KBB.events.on('MyKbb.OnSaveVehicleComplete', cb);
        },
        onRemoveVehicleComplete: function (cb) {
            KBB.events.on('MyKbb.OnRemoveVehicleComplete', cb);
        }
    };
} ());;


/* Comment Generated by Combres - Resource '~/js/kbb/social/kbb.headershare.js' (Mode: Static) */
KBB.validation = function (options) {
    var defaults = {
        parent: [],
        errorMessageClass: 'validation-error',
        fieldErrorClass: 'errortitle',
        emailValidationService: $('#Email-validator-service').val()
    },
        opts = $.extend({}, defaults, options),
        errorContainer = $('.{0}'.format(opts.errorMessageClass), opts.parent);

    if (!opts.parent.length) {
        KBB.log('A parent attribute is required for the KBB.validator');
    }

    return {
        ShowError: function (message, field) {
            if (message) {
                errorContainer.html(message);
            }

            errorContainer.show();

            if (typeof field !== 'undefined' && field.length && $(field).length) {
                this.AddFieldError(field);
            }
        },
        AddFieldError: function (field) {
            field = $(field);
            if (field.length) {
                field.siblings('label').addClass(opts.fieldErrorClass);
            }
        },
        RemoveFieldError: function (field) {
            field = $(field);
            if (field.length) {
                field.siblings('label').removeClass(opts.fieldErrorClass);
            }
        },
        ClearErrors: function () {
            var erFieldSel = 'label.{0}'.format(opts.fieldErrorClass);

            errorContainer.html('').hide();
            $(erFieldSel, opts.parent).removeClass(opts.fieldErrorClass);
        },
        ValidEmailFormat: function (email) {
            if (!email) { return false; }
            var regEmail = /^([A-Za-z0-9_\-\.\+])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;
            return regEmail.test(email);
        },
        ValidProfileName: function (name) {
            var regexName = /(^[a-zA-Z0-9]+)$/;
            return regexName.test(name);
        },
        EmailExists: function (email) {
            var success = false;
            $.postJSON(opts.emailValidationService, { email: email }, function (result) {
                success = result;
            }, false);
            return success;
        },
        ValidAllInputsArePopulated: function (message, inputSelector) {
            var me = this,
                missingCount = 0;

            opts.parent.find(inputSelector || 'input').each(function () {
                var field = $(this);
                if (field.val() === '') {
                    me.ShowError(field.attr('title'), field);
                    missingCount++;
                }
            });

            if (missingCount > 1) {
                if (message !== false) {
                    me.ShowError(message || 'Please enter all required information');
                }
                return false;
            }
            return true;
        }
    };
};

KBB.modules.headerShare = (function () {
    var _this,
        panels = [],
        container = $('#sign-in-message'),
        isInitialLoad = true,
        eachPanel = function (cb) {
            for (var i = 0; i < panels.length; i++) {
                if (cb(panels[i], i) === false) {
                    break;
                }
            }
        };

    return {
        init: function () {
            _this = this;
            panels = [
                this.userOptionsMenu,
                this.signInPopUp,
                this.zipCodePopUp,
                this.signUpPopUp,
                this.signUpCompletePopUp
            ];
            eachPanel(this.initPanel);

            if (!KBB.modules.myKbb.isAuthenticated) {
                this.authenticationChange({ IsAuthenticated: false });
            }

            KBB.modules.myKbb.onAuthenticationChange(this.authenticationChange);
            KBB.modules.myKbb.onGetPersonalizationDataComplete(this.getPersonalizationData);

        },
        authenticationChange: function (data) {
            if (!data) return;
            container.html($('#sign-in-message-template').tmpl(data)).show();
            $('#Header-signin').show();
        },
        getPersonalizationData: function (data) {
            if (isInitialLoad && data.IsAuthenticated) {
                _this.authenticationChange(data);
                isInitialLoad = false;
            }
            $('#saved-vehicle-count').html('({0})'.format(data.SavedVehicleCount));
        },
        initPanel: function (p, i) {
            p.init();
            p.trigger.live('click', function (ev) {
                ev.stopPropagation();
                _this.showPanel(p);
            });
        },
        showPanel: function (panel, e) {
            if (e && e.stopPropagation) {
                e.stopPropagation();
            }
            $(document).unbind('click.headerShare');
            eachPanel(function (p) {
                var isHidden = !p.element.is(':visible');
                if (p === panel) {
                    $(document).bind('click.headerShare', function (e) {
                        var isAnyTrigger = false;
                        eachPanel(function (pa) {
                            $(pa.trigger.selector).each(function (ind, t) {
                                if (e.currentTarget === t) {
                                    isAnyTrigger = true;
                                    return false;
                                }
                            });
                            if (isAnyTrigger) { return false; }
                        });
                        if (p.element[0] !== e.currentTarget && !isAnyTrigger) {
                            var isChildOf = false;
                            $(e.target).parents().each(function (i, c) {
                                if (c === p.element[0]) {
                                    isChildOf = true;
                                    return false;
                                }
                            });
                            if (!isChildOf) {
                                _this.hideAll();
                            }
                        }
                    });
                }
                p.element.toggle(p === panel && isHidden);
                if ($.isFunction(p.onToggle)) {
                    p.onToggle.call(this, e, isHidden);
                }
            });
        },
        hideAll: function () {
            _this.showPanel();
        }
    };
} ());

KBB.modules.headerShare.userOptionsMenu = (function () {
    var base = KBB.modules.headerShare;
    return {
        element: $('#User-menu-options'),
        trigger: $('#sign-in-name-header'),
        init: function () {
            $('#sign-out-option').click(this.signOutClick);
            $('#saved-vehicles-option').click(this.savedVehiclesClick);
        },
        signOutClick: function (e) {
            KBB.modules.myKbb.signOut(function () {
                base.hideAll();
            });
        },
        savedVehiclesClick: function (e) {
            if (KBB.modules.socialToolbar) {
                KBB.modules.socialToolbar.panels.savedVehicles.Show(e);
                e.preventDefault();
            }
        },
        Show: function (e) {
            base.showPanel(base.userOptionsMenu, e);
            window.scrollTo(_this.element.scrollTop, 0);
        }
    };
} ());

KBB.modules.headerShare.zipCodePopUp = (function () {
    var _this,
        input = $('#zipcode-input-header'),
        btn = $('#zipcode-update-btn'),
        base = KBB.modules.headerShare,
        el = $('#ZipCode-pop');

    $('#ZipCode-pop .validation-error').hide();
    $('#ZipCode-pop .cookie-error').hide();

    if (!KBB.cookies.enabled()) {
        $('#ZipCode-pop .section-title').hide();
        $('#ZipCode-pop .cookie-error').show();
        $('#zipcode-input-header').prop("disabled", true);
    }

    $(window).on('zipUpdated.headerShare', function () {
        window.location.reload(true);
    });

    return {
        element: el,
        trigger: $('#zip-code-header, #change-zip-option'),
        init: function () {
            _this = this;
            if (KBB.cookies.enabled()) {
                btn.click(this.updateZip);
                input.keypress(this.updateZip);
            }
        },
        updateZip: function (e) {
            if (e.target == input[0] && e.keyCode != '13') {
                return;
            }
            var zip = input.val();
            if (!KBB.zip.set(zip)) {
                _this.validator.ShowError();
                return;
            }

            $(window).trigger('zipUpdated.headerShare', zip, e);
        },
        onToggle: function (e, isShow) {
            if (isShow) {
                input.select();
            }
        },
        validator: KBB.validation({ parent: el }),
        Show: function (e) {
            base.showPanel(_this, e);
            window.scrollTo(_this.element.scrollTop, 0);
        }
    };
} ());

KBB.modules.headerShare.signUpPopUp = (function () {
    var _this,
        base = KBB.modules.headerShare,
        btn = $('#sign-up-btn-header'),
        el = $('#Sign-up-pop'),
        loading = function (isLoading) {
            btn.toggle(!isLoading);
            $('#sign-up-loading').toggle(isLoading);
        },
        messages = {
            mismatchEmail: 'The Email Addresses and Confirm Email Address fields must match.',
            invalidEmail: 'Please enter a valid email address.',
            mismatchPassword: 'The Password and Confirm Password fields must match.',
            invalidPassword: 'Passwords must be at least 6 characters in length.',
            invalidProfileName: 'Your Profile Name must be at least 6 characters in length.',
            termsNotChecked: 'You must accept the Terms of Use.',
            invalidProfileNameSpecial: 'Your Profile Name may not contain special characters.',
            emailExists: 'An account for email {0} already exists'
        },
        termsOfUse = $('#Sign-up-pop .terms-of-use-overlay');

    return {
        element: el,
        trigger: $('#sign-up-header'),
        init: function () {
            _this = this;
            btn.click(this.signUp);
            KBB.modules.myKbb.onSignUpComplete(this.signUpComplete);

            $("#termsOfUseLink").click(this.showTermsOfUse);

        },
        showTermsOfUse: function () {
            termsOfUse.find('iframe').attr('src', $('#Terms-of-use-url').val());
            termsOfUse.jqm({ modal: true, overlay: 70, toTop: true })
                .css("top", $(document).scrollTop() + 170)
                .jqmShow()
                .jqmAddClose($('.close'));
            return false;
        },
        signUp: function (e) {
            var email = $('#sign-up-email-header').val(),
                email2 = $('#sign-up-email2-header').val(),
                password = $('#sign-up-password-header').val(),
                password2 = $('#sign-up-password2-header').val(),
                profilename = $('#sign-up-profile-name-header').val(),
                termsofuse = $('#terms-of-use-header').is(':checked'),
                emailoptin = $('#email-opt-in-header').is(':checked'),
                validator = KBB.modules.headerShare.signUpPopUp.validator,
                isValid = false;

            loading(true);

            validator.ClearErrors();

            if (!validator.ValidAllInputsArePopulated()) {
            } else if (email !== email2) {
                validator.ShowErrormismatchEmail(messages.mismatchEmail, '#sign-up-email-header, #sign-up-email2-header');
            } else if (!validator.ValidEmailFormat(email)) {
                validator.ShowError(messages.invalidEmail, '#sign-up-email-header');
            } else if (password != password2) {
                validator.ShowError(messages.mismatchPassword, '#sign-up-password-header, #sign-up-password2-header');
            } else if ($.trim(password).length < 6) {
                validator.ShowError(messages.invalidPassword, '#sign-up-password-header');
            } else if ($.trim(profilename).length < 6) {
                validator.ShowError(messages.invalidProfileName, '#sign-up-profile-name-header');
            } else if (!termsofuse) {
                validator.ShowError(messages.termsNotChecked, '#terms-of-use-header');
            } else if (!validator.ValidProfileName(profilename)) {
                validator.ShowError(messages.invalidProfileNameSpecial, '#sign-up-profile-name-header');
            } else if (validator.EmailExists(email)) {
                validator.ShowError(messages.emailExists.format(email), '#sign-up-email-header');
            } else {
                isValid = true;
                KBB.modules.myKbb.signUp(email, password, profilename, emailoptin);
            }
            if (!isValid) {
                loading(false);
            }
        },
        signUpComplete: function (data) {
            loading(false);
            if (!data.success) {
                _this.validator.ShowError(data.errormessage, '#sign-up-{0}'.format(data.field));
            } else {
                base.showPanel(base.signUpCompletePopUp);
            }
        },
        validator: KBB.validation({ parent: el }),
        Show: function (e) {
            base.showPanel(_this, e);
            window.scrollTo(_this.element.scrollTop, 0);
        }
    };
} ());

KBB.modules.headerShare.signUpCompletePopUp = (function () {
    return {
        element: $('#Sign-up-complete-pop'),
        trigger: $([]),
        init: function () { }
    }
} ());
KBB.modules.headerShare.signInPopUp = (function () {
    var _this,
        base = KBB.modules.headerShare,
        el = $('#sign-in-popup-header'),
        messages = {
            invalidEmail: 'Please enter a valid email address.',
            emailExists: 'The email address you’ve entered is not associated with a KBB.com account',
            forgotPassword: 'An email has been sent to {0} with your new password.',
            validateEmail: 'The email address or password you’ve entered is not valid.'
        },
        selectors = {
            email: '#sign-in-email-header',
            pass: '#sign-in-password-header',
            remember: '#sign-in-remember-me-header'
        };
    return {
        element: el,
        trigger: $('#sign-in-header, #account-already-header'),
        init: function () {
            _this = this;
            $('.sign', '#sign-in-form-header').click(this.signIn);
            $('input', '#sign-in-form-header ').keypress(function (event) {
                if (event.keyCode == '13') {
                    _this.signIn();
                }
            });

            $('a.forgot-email-btn', this.element).click(this.forgotPassword);
            $('#forgot-email-header').keypress(function (event) {
                if (event.keyCode == '13') {
                    _this.forgotPassword();
                }
            });

            $('.forgot-password-link', this.element).click(_this.toggleForgotPassword);
        },
        signIn: function (e) {
            var email = $(selectors.email).val(),
                pass = $(selectors.pass).val(),
                remember = $(selectors.remember).is(':checked'),
                isValid = _this.validate(email);

            if (!isValid) {
                return;
            }

            KBB.modules.myKbb.signIn(email, pass, remember, _this.authenticationComplete);
        },
        forgotPassword: function (e) {
            $('#Forgot-password-message').text("");
            var email = $('#forgot-email-header').val(),
                isValid = _this.validateForgotPassword(email);

            if (isValid) {
                KBB.modules.myKbb.forgotPassword(email, function (data) {
                    _this.forgotPasswordComplete(data);
                });
            }
        },
        validate: function (email) {
            var missingcount = 0;

            this.validator.ClearErrors();

            if (!this.validator.ValidAllInputsArePopulated()) {
            } else if (!this.validator.ValidEmailFormat(email)) {
                _this.validator.ShowError(messages.invalidEmail, selectors.email);
            } else if (!this.validator.EmailExists(email)) {
                _this.validator.ShowError(messages.validateEmail, selectors.email);
            } else {
                return true;
            }

            return false;
        },
        authenticationComplete: function (result) {
            if (result.success) {
                base.hideAll();
            } else {
                _this.validator.ShowError(result.errormessage, '#sign-in-{0}-header'.format(result.field));
            }
        },
        forgotPasswordComplete: function (result) {
            var validator = new KBB.validation({ parent: $('#Forgot-password') });
            if (result.success) {
                $('#Forgot-password-message').text(result.errormessage);
            } else {
                validator.ShowError(result.errormessage, '#Social-popup .forgot-password');
            }
        },
        validateForgotPassword: function (email) {
            var validator = new KBB.validation({ parent: $('#Forgot-password') });
            validator.ClearErrors();

            if (!validator.ValidEmailFormat(email)) {
                validator.ShowError(messages.invalidEmail);
            } else if (!validator.EmailExists(email)) {
                validator.ShowError(messages.emailExists);
            } else {
                return true;
            }

            return false;
        },
        toggleForgotPassword: function (e, show) {
            show = typeof show === typeof true ? show : true;
            $('.sign-in-form', _this.element).toggle(!show);
            $('.forgot-password', _this.element).toggle(show);
            $('#Forgot-password .validation-error').html('');
        },
        onToggle: function (e, isShow) {
            if (isShow) {
                $(selectors.email).select().focus();
            } else {
                _this.toggleForgotPassword(e, false);
            }
        },
        validator: KBB.validation({ parent: el }),
        Show: function (e) {
            base.showPanel(_this, e);
            window.scrollTo(_this.element.scrollTop, 0);
        }
    };
} ());
