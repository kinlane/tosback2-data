--Do not remove this if you are using--
Original Author: Remiz Rahnas
Original Author URL: http://www.htmlremix.com
Published date: 2008/09/24

Changes by Nick Fetchak:
- IE8 standards mode compatibility
- VML elements now positioned behind original box rather than inside of it - should be less prone to breakage
- Added partial support for 'box-shadow' style
- Checks for VML support before doing anything
- Updates VML element size and position via timer and also via window resize event
Published date : 2009/11/19
http://fetchak.com/ie-css3


<public:attach event="oncontentready" onevent="oncontentready('v08vnSVo78t4JfjH')" />
<script type="text/javascript">

timer_length = 200; // Milliseconds

// supportsVml() borrowed from http://stackoverflow.com/questions/654112/how-do-you-detect-support-for-vml-or-svg-in-a-browser
function supportsVml() {
	if (typeof supportsVml.supported == "undefined") {
		var a = document.body.appendChild(document.createElement('div'));
		a.innerHTML = '<v:shape id="vml_flag1" adj="1" />';
		var b = a.firstChild;
		b.style.behavior = "url(#default#VML)";
		supportsVml.supported = b ? typeof b.adj == "object": true;
		a.parentNode.removeChild(a);
	}
	return supportsVml.supported
}

// findPos() borrowed from http://www.quirksmode.org/js/findpos.html
function findPos(obj) {
	var curleft = curtop = 0;
	if (obj.offsetParent) {
		do {
			curleft += obj.offsetLeft;
			curtop += obj.offsetTop;
			obj = obj.offsetParent
			// Changed from original code
			// break if parent has absolute position
			if (obj && obj.style.position == 'absolute') break;
			// End Changed
		} while (obj);
	}

	return({
		'x': curleft,
		'y': curtop
	});
}

function createShadow(dummy_element,element, vml_parent) {
	var style = element.currentStyle['-moz-box-shadow'] || element.currentStyle['-webkit-box-shadow'] || element.currentStyle['box-shadow'] || '';	
	var match = style.match(/^(\d+)px (\d+)px (\d+)px/);
	if (!match) { return(false); }

	var shadow = document.createElement('v:roundrect');
	shadow.userAttrs = {
		'x': parseInt(RegExp.$1 || 0),
		'y': parseInt(RegExp.$2 || 0),
		'radius': parseInt(RegExp.$3 || 0) / 2
	};
	shadow.position_offset = {
		'y': (0 - vml_parent.pos_ieCSS3.y - shadow.userAttrs.radius + shadow.userAttrs.y),
		'x': (0 - vml_parent.pos_ieCSS3.x - shadow.userAttrs.radius + shadow.userAttrs.x)
	};
	shadow.size_offset = {
		'width': 0,
		'height': 0
	};
	shadow.arcsize = element.arcSize +'px';
	shadow.style.display = 'block';
	shadow.style.position = 'absolute';
	shadow.style.top = (element.pos_ieCSS3.y + shadow.position_offset.y) +'px';
	shadow.style.left = (element.pos_ieCSS3.x + shadow.position_offset.x) +'px';
	shadow.style.width = element.offsetWidth +'px';
	shadow.style.height = element.offsetHeight +'px';
	shadow.style.antialias = true;
	shadow.className = 'vml_box_shadow';
	shadow.style.zIndex = element.zIndex - 1;
	shadow.style.filter = 'progid:DXImageTransform.Microsoft.Blur(pixelRadius='+ shadow.userAttrs.radius +',makeShadow=true,shadowOpacity=1)';

	element.parentNode.appendChild(shadow);
	//element.parentNode.insertBefore(shadow, element.element);
	// For window resizing
	dummy_element.element.vml.push(shadow);

	return(true);
}

function createBorderRect(dummy_element,element, vml_parent) {
	if (isNaN(element.borderRadius)) { return(false); }

	element.style.borderColor = 'transparent';
	element.style.background = 'transparent';

	var rect = document.createElement('v:roundrect');
	rect.position_offset = {
		'y': (0.5 * element.strokeWeight) - vml_parent.pos_ieCSS3.y,
		'x': (0.5 * element.strokeWeight) - vml_parent.pos_ieCSS3.x
	};
	rect.size_offset = {
		'width': 1 - element.strokeWeight,
		'height': 1 - element.strokeWeight
	};	
	rect.arcsize = element.arcSize +'px';
	rect.strokecolor = element.strokeColor;
	rect.strokeWeight = element.strokeWeight +'px';	
	rect.stroked = element.stroked;
	rect.className = 'vml_border_radius';
	rect.style.position = 'absolute';
	rect.style.top = (element.pos_ieCSS3.y + rect.position_offset.y) +'px';
	rect.style.left = (element.pos_ieCSS3.x + rect.position_offset.x) +'px';

	//rect.style.width = (element.offsetWidth + rect.size_offset.width) +'px';
	rect.style.width = (dummy_element.parentNode.clientWidth + rect.size_offset.width) +'px';	
	
	//rect.style.height = (element.offsetHeight + rect.size_offset.height) +'px';
	rect.style.height = (dummy_element.parentNode.clientHeight - 8 + rect.size_offset.height) +'px';
	
	rect.style.antialias = true;
	rect.style.zIndex = element.zIndex - 1;	
	
	var fill = document.createElement('v:fill');
	fill.color = element.fillColor;
	fill.src = element.fillSrc;
	fill.className = 'vml_border_radius_fill';
	fill.type = 'tile';
	rect.appendChild(fill);
	
	// Hack: IE6 doesn't support transparent borders, use padding to offset original element
	isIE6 = /msie|MSIE 6/.test(navigator.userAgent);
	if (isIE6 && (element.strokeWeight > 0)) {
		element.style.borderStyle = 'none';
		element.style.paddingTop = parseInt(element.currentStyle.paddingTop || 0) + element.strokeWeight;
		element.style.paddingBottom = parseInt(element.currentStyle.paddingBottom || 0) + element.strokeWeight;
	}

	element.parentNode.appendChild(rect);
	
	rect.style.display = 'block';
	
	//element.parentNode.insertBefore(rect, element.element);

	// For window resizing
	dummy_element.element.vml.push(rect);	
	return(true);
}

function oncontentready(classID) {
    if (!supportsVml()) { return(false); }

	if (this.parentNode.getElementsByTagName('roundrect').length != 0) { return(false); }
	//find the element that actually shows shadow and rounded corner
	var el=this;			
	for (var i=0; i<this.parentNode.children.length; i++){
		el =  this.parentNode.children[i];
		
		//if (el.tagName == 'DIV' && el.currentStyle['-moz-border-radius']){
		if (el.className=='csvalidation_error'){				
			break;
		}	
	}
  if (el.className.match(classID)) { return(false); }
	el.className = el.className.concat(' ', classID);
	// Add a namespace for VML (IE8 requires it)
	if (!document.namespaces.v) { document.namespaces.add("v", "urn:schemas-microsoft-com:vml"); }

	// Check to see if we've run once before on this page
	if (typeof(window.ieCSS3) == 'undefined') {
		// Create global ieCSS3 object
		window.ieCSS3 = {
			'vmlified_elements': new Array(),
			'update_timer': setInterval(updatePositionAndSize, timer_length)
		};

		if (typeof(window.onresize) == 'function') { window.ieCSS3.previous_onresize = window.onresize; }

		// Attach window resize event
		window.onresize = updatePositionAndSize;
	}

	// These attrs are for the script and have no meaning to the browser:	
	/*el.borderRadius = parseInt(el.currentStyle['-moz-border-radius'] ||
	                             el.currentStyle['-webkit-border-radius'] ||
	                             el.currentStyle['border-radius'] ||
	                             el.currentStyle['-khtml-border-radius']);*/								 
	el.borderRadius=6;								 
	
	//el.arcSize = Math.min(el.borderRadius / Math.min(el.offsetWidth, el.offsetHeight), 1);
	el.arcSize = Math.min(el.borderRadius / Math.min(this.parentNode.clientWidth, this.parentNode.clientHeight), 1);
	el.fillColor = el.currentStyle.backgroundColor;	
	el.fillSrc = el.currentStyle.backgroundImage.replace(/^url\("(.+)"\)$/, '$1');	
	el.strokeColor = el.currentStyle.borderColor;	
	el.strokeWeight = parseInt(el.currentStyle.borderWidth);	
	el.stroked = 'true';		
	if (isNaN(el.strokeWeight)) {			
		el.strokeWeight = 0;
		el.strokeColor = el.fillColor;
		el.stroked = 'false';
	}
	
	this.element.vml = new Array();
	this.element.ref_element = el;
	el.zIndex = parseInt(el.currentStyle.zIndex);
	if (isNaN(el.zIndex)) { el.zIndex = 0; }
	// Find which element provides position:relative for the target element (default to BODY)
	vml_parent = el;
	var limit = 100, i = 0;
	do {
		vml_parent = vml_parent.parentElement;
		i++;
		if (i >= limit) { return(false); }
	} while ((typeof(vml_parent) != 'undefined') && (vml_parent.currentStyle.position != 'absolute') && (vml_parent.tagName != 'BODY'));

	if (vml_parent.currentStyle.position == 'absolute')
		vml_parent.pos_ieCSS3 = {x:0,y:0};
	else	
		vml_parent.pos_ieCSS3 = findPos(vml_parent);
	
	el.pos_ieCSS3 = findPos(el);
	// Changed from original code
	// To avoid ie-css creating too many roundrect elements. Only create roundrect elements for shadow and round border once.	
	if (el.parentNode.getElementsByTagName('roundrect').length == 0){	
		var rv1 = createShadow(this, el, vml_parent);				
		var rv2 = createBorderRect(this, el, vml_parent);				
		if (rv1 || rv2) { window.ieCSS3.vmlified_elements.push(this.element); }
	}
	// End Changed
	if (typeof(vml_parent.document.ieCSS3_stylesheet) == 'undefined') {
		vml_parent.document.ieCSS3_stylesheet = vml_parent.document.createStyleSheet();
		vml_parent.document.ieCSS3_stylesheet.addRule("v\\:roundrect", "behavior: url(#default#VML)");
		vml_parent.document.ieCSS3_stylesheet.addRule("v\\:fill", "behavior: url(#default#VML)");
	}
}

function updatePositionAndSize() {
	if (typeof(window.ieCSS3.vmlified_elements) != 'object') { return(false); }
	for (var i in window.ieCSS3.vmlified_elements) {
		var el = window.ieCSS3.vmlified_elements[i];
		if (el.ref_element.offsetWidth == 0) { continue; }
		if (typeof(el.vml) != 'object') { continue; }
		
		for (var z in el.vml) {
			//var parent_pos = findPos(el.vml[z].parentNode);
			var new_pos = findPos(el.ref_element);
			new_pos.x = (new_pos.x + el.vml[z].position_offset.x) + 'px';
			new_pos.y = (new_pos.y + el.vml[z].position_offset.y) + 'px';
			if (el.vml[z].style.left != new_pos.x) { el.vml[z].style.left = new_pos.x; }
			if (el.vml[z].style.top != new_pos.y) { el.vml[z].style.top = new_pos.y; }
			var new_size = {
				'width': parseInt(el.ref_element.offsetWidth + el.vml[z].size_offset.width),
				'height': parseInt(el.ref_element.offsetHeight + el.vml[z].size_offset.height)
			}
			if (el.vml[z].offsetWidth != new_size.width) { el.vml[z].style.width = new_size.width +'px'; }
			if (el.vml[z].offsetHeight != new_size.height) { el.vml[z].style.height = new_size.height +'px'; }
		}
	}

	if (event && (event.type == 'resize') && typeof(window.ieCSS3.previous_onresize) == 'function') { window.ieCSS3.previous_onresize(); }
}
</script>

