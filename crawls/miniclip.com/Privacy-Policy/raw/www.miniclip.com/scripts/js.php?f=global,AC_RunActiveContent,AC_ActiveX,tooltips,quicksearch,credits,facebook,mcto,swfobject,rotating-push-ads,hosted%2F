/* [INCLUDE FILE] global */
// Sharing module behaviour
jQuery.getScript('https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js');

function toggleSharingModulePopup(){
var sharingBox = document.getElementById("sharingModulePopup");
if (sharingBox.style.display == "none") {
sharingBox.style.display = "block";
}else{
sharingBox.style.display = "none";
}
}

// homepage animation stuff
var anim_current = 1;
var anim_info = new Array(3);
var anim_data = new Array(3);
var anim_link = new Array(3);
var anim_file = new Array(3);
var anim_path = new Array(3);

$mc = function(idToGet){
return document.getElementById(idToGet);
}

// initialize animation data
function anim_init(){

// only do this if the animation is available
if ($mc('animList') == null){
return false;
}
var animations= $mc('animList').getElementsByTagName('li');
for(var y = 0;y < animations.length;y++){
anim_info[y + 1] = animations[y];
}

if ($mc('animData') == null){
return false;
}
animations= $mc('animData').getElementsByTagName('li');
for (var y = 0;y < animations.length;y++){
anim_data[y + 1] = animations[y];
}

animations= $mc('animData').getElementsByTagName('a');
for (var y = 0;y < animations.length;y++){
anim_path[y + 1] = animations[y].href;
}

if ($mc('animNumber') == null){
return false;
}
animations= $mc('animNumber').getElementsByTagName('a');
for (var y = 0;y < animations.length;y++){
anim_link[y + 1] = animations[y];
filename = animations[y].href.split("#");
anim_file[y + 1] = filename[1];
animations[y].href = "#";
}

}

function anim_start(){
anim_set(1);
}

// switch to next animation
function anim_next(){

// make sure the animation can jump forward
if ($mc('animList') == null){
return;
}

anim_current ++;

if (anim_current > 3){
anim_current = 1;
}

anim_set();

}

// switch to previous animation
function anim_prev(){
anim_current --;

if (anim_current < 1){
anim_current = 3;
}
anim_set();
}

function anim_set (anim_new){

// if anim_new is set then change current anim
if (anim_new != null){
anim_current = anim_new;
}

// check animation has loaded ok
if (anim_info[anim_current] == null){
return;
}

// loop through icon holders and set selected value
for (var y = 1;y <= 3;y++){
// if selected set class name else remove
if (y == anim_current){
anim_info[y].className = 'selected';
anim_data[y].className = 'selected';
anim_link[y].className = 'selected';
}else{
anim_info[y].className = '';
anim_data[y].className = '';
anim_link[y].className = '';
}
}

if ($mc('animHolder') != null){

//new SWFObject version
movieLocation = 'http://e.miniclip.com/swfcontent/animations/' + anim_file[anim_current] + '.swf?url=' + anim_path[anim_current] + '&game_id=' + anim_file[anim_current] + '&page_id=homepage';
var flashvars ={};
var params ={};
params.menu = "false";
params.quality = "high";
params.bgcolor = "#ffffff";
params.wmode = "opaque";
params.allowscriptaccess = "always";
var attributes ={};
swfobject.embedSWF(movieLocation,"animHolder","290","200","9.0.0",false,flashvars,params,attributes);

//statTracker('/animations/views/homepage/' + anim_file[anim_current]);

// loop through icon holders and set selected value
for(var y = 1;y <= 3;y++){
// if selected set class name else remove
if (y == anim_current){
//parent.anim_info[y].className = "selected";
anim_info[y].className = "selected";
anim_data[y].className = "selected";
anim_link[y].className = "selected";
}else{
anim_info[y].className = "";
anim_data[y].className = "";
anim_link[y].className = "";
}
}


}else{

// loop through icon holders and set selected value
for (var y = 1;y <= 3;y++){
// if selected set class name else remove
if (y == anim_current){
anim_info[y].className = 'selected';
anim_data[y].className = 'selected';
anim_link[y].className = 'selected';
}else{
anim_info[y].className = '';
anim_data[y].className = '';
anim_link[y].className = '';
}
}

frames['animHolderFrame'].location.href = 'animdata.php?anim=' + anim_current;

}

return false;

}

// player homepage animation
var player_current = 1;
var playersAnim_time = 0;
var player_info = new Array(3);
var player_link = new Array(3);
var player_file = new Array(3);


function player_start(){

player_set(1);

}

// switch to next animation
function player_next(){

player_current ++;

if (player_current > 3){
player_current = 1;
}

player_set();

}

// switch to previous animation
function player_prev(){

player_current --;

if (player_current < 1){
player_current = 3;
}

player_set();

}

function player_set(player_new){

// if anim_new is set then change current anim
if (player_new != null){
player_current = player_new;
}

// check animation has loaded ok
if(player_info[player_current] == null){
return;
}

// loop through icon holders and set selected value
for(var y = 1;y <= 3;y++){
// if selected set class name else remove
if (y == player_current){
player_info[y].className = "selected";
player_link[y].className = "selected";
}else{
player_info[y].className = "";
player_link[y].className = "";
}
}

if($mc("playerHolder") != null){
scrollPos = (player_current - 1) * 260;
$mc('playerHolder').scrollTop = scrollPos;
}

clearTimeout(playersAnim_time);
playersAnim_time = setTimeout("player_next();",10 * 1000);

return false;

}

function confirmSubmit(message){

var agree = confirm(message);

if (agree){
return true;
}else{
return false;
}

}

/* clear current page links */
function clearCurrentLink(){
var a = document.getElementsByTagName("A");

for(var i = 0;i < a.length;i++){
if(a[i].href == window.location.href.split("#")[0] || a[i].href == window.location.href.split("?")[0]){
a[i].className = a[i].className + " current";
}
}
}


/* set homepage for IE */
function SetHomepage(){

return;

var monkey = new Array();
monkey['img'] = 'ieHomepage_monkey.png';
monkey['url']  = 'javascript:history.go(0);';
monkey['onclick'] = 'onClick="SetHomepageAction(this)"';
monkey['alt'] = 'Set Miniclip.com as your homepage';

var sketchstarPush = new Array();
sketchstarPush['img'] = 'homepage-banner-topright_play.png';
sketchstarPush['url']  = '/sketch-star/';
sketchstarPush['onclick'] = '';
sketchstarPush['alt'] = 'Create Free Animations! Play Sketch Star &raquo;';

var randArray = new Array();
randArray[0] = sketchstarPush;

if(document.all && cookie_read('homepageSet') != 'cookieset'){
randArray[2] = monkey;
}

var randResult = Math.floor(Math.random() * randArray.length);
var randShow = randArray[randResult];

document.write('<a href="' + randShow['url'] + '" ' + randShow['onclick'] + '><img src="/images/' + randShow['img'] + '" alt="' + randShow['alt'] + '" /></a>');
}

function SetHomepageAction(object){
document.body.style.behavior="url(#default#homepage)";
document.body.setHomePage("http://www.miniclip.com/");
cookie_create("homepageSet","cookieset",365);
//statTracker("/click/setHomepage");
}

/* COOKIES */
function cookie_create(name,value,days){

days = days * 60 * 24;
cookie_create_time (name,value,days);

}


/* COOKIES */
function cookie_create_time(name,value,duration){

// duration in minutes
if (duration){
var date = new Date();
date.setTime(date.getTime() + (duration * 60 * 1000));
var expires = ";expires=" + date.toGMTString();
}else{
var expires = "";
}

document.cookie = name + "=" + value + expires + ";path=/";

}


function cookie_read(name){

var nameEQ = name + "=";
var ca = document.cookie.split(';');

for (var i = 0;i < ca.length;i++){
var c = ca[i];
while (c.charAt(0) == ' '){
c = c.substring(1,c.length);
}
if (c.indexOf(nameEQ) == 0){
return c.substring(nameEQ.length,c.length);
}
}

return "";

}

function cookie_erase(name){
cookie_create (name,'',-1);
}

/* GENERIC STUFF */
function addLoadEvent(func){
var oldonload = window.onload;
if (typeof window.onload != 'function'){
window.onload = func;
}else{
window.onload = function(){
oldonload();
func();
}
}
}

function writeEmail(name,display_name){

address = name + "&#64" + "miniclip.com";
if (display_name == null){
document.write("<a href='mailto:" + address + "'>" + address + "</a>");
}else{
document.write("<a href='mailto:" + address + "'>" + display_name + "</a>");
}

}

function prerollCreateGame(pr_gamename,pr_gamewidth,pr_gameheight){

// --------------------------------------------------------------------
// create the code for a flash game,simple function that can be reused
// --------------------------------------------------------------------
str_return = "<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,29,0\" width=\"" + pr_gamewidth + "\" height=\"" + pr_gameheight + "\">";
str_return = str_return + "<param name=\"movie\" value=\"" + pr_gamename + "\">";
str_return = str_return + "<param name=\"quality\" value=\"high\">";
str_return = str_return + "<param name=\"menu\" value=\"false\">";
str_return = str_return + "<embed src=\"" + pr_gamename + "\" quality=\"high\" menu=\"false\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" type=\"application/x-shockwave-flash\" width=\"" + pr_gamewidth + "\" height=\"" + pr_gameheight + "\"></embed>";
str_return = str_return + "</object>";

$mc("video_ad").innerHTML = str_return;

}

var BrowserDetect ={
init:function (){
this.OS = this.searchString(this.dataOS) || "an unknown OS";
},
searchString:function (data){
for (var i=0;i<data.length;i++){
var dataString = data[i].string;
var dataProp = data[i].prop;
this.versionSearchString = data[i].versionSearch || data[i].identity;
this.navigator = data[i].string;
if (dataString){
if (dataString.indexOf(data[i].subString) != -1)
return data[i].identity;
}
else if (dataProp)
return data[i].identity;
}
},
searchVersion:function (dataString){
var index = dataString.indexOf(this.versionSearchString);
if (index == -1) return;
return parseFloat(dataString.substring(index+this.versionSearchString.length+1));
},
dataOS :[
{
string:navigator.platform,
subString:"Win",
identity:"Windows"
},
{
string:navigator.platform,
subString:"Mac",
identity:"Mac"
},
{
string:navigator.platform,
subString:"Linux",
identity:"Linux"
}
]

};
BrowserDetect.init();

function removeSidebarBoxAd(){

outputHtml = "";
outputHtml = outputHtml + "<style type='text/css'>";
outputHtml = outputHtml + "#sidebarBoxBackground{display:none;}";
outputHtml = outputHtml + "#sidebarBoxForeground{display:none;}";
outputHtml = outputHtml + "#sideBar{margin-top:-5px;}";
outputHtml = outputHtml + "</style>";
document.write(outputHtml);
addLoadEvent(removeSidebarBoxAdComplete);

}

function removeSidebarBoxAdComplete(){
if($mc("sidebarBoxBackground") != null){
$mc("sidebarBoxBackground").innerHTML = "";
}
if($mc("sidebarBoxForeground") != null){
$mc("sidebarBoxForeground").innerHTML = "";
}
}

function insertHomepageVideo(htmlCode){
$mc("homepageVideoInsert").innerHTML = htmlCode;
$mc("homepageVideoInsert").style.display = "block";
}

function removeHomepageVideo(){
$mc("homepageVideoInsert").innerHTML = "";
$mc("homepageVideoInsert").style.display = "none";
}

function resizeFrame(f){
$mc(f).style.height = "50px";
url = $mc(f).contentWindow.location.href;
if(url.indexOf("miniclip.com") > 0){
$mc(f).style.height = $mc(f).contentWindow.document.body.scrollHeight + "px";
}else{
$mc(f).style.height = "500px";
}
}

var shockwaveInstalled = null;
var shockwaveFirstTime = true;
var shockwaveTimeout = null;

function shockwaveIsInstalled(){

var tVersionString = "0";

if (navigator.mimeTypes && navigator.mimeTypes["application/x-director"] && navigator.mimeTypes["application/x-director"].enabledPlugin){
if (navigator.plugins && navigator.plugins["Shockwave for Director"] && (tVersionIndex = navigator.plugins["Shockwave for Director"].description.indexOf(".")) != - 1){
tVersionString = navigator.plugins["Shockwave for Director"].description.substring(tVersionIndex-2,tVersionIndex+2);
}
}else if(navigator.userAgent && navigator.userAgent.indexOf("MSIE")>=0){

try{
var obj = new ActiveXObject("SWCtl.SWCtl");
if(obj != null){
tVersionString = obj.ShockwaveVersion("");
}
}catch(e){

}

if(obj != null){
delete obj;
}

}

if(parseInt(tVersionString) >= 11){
shockwaveInstalled = true;
}else{
shockwaveInstalled = false;
}

return shockwaveInstalled;

}

function shockwaveInstall(){

var showGoldBar = true;

if(shockwaveIsInstalled()){

// track new installs
if(shockwaveFirstTime == false || cookie_read("sw") == 1){
//statTracker("/sw/newInstall");
cookie_erase("sw");
}

// hide installation messaging
$mc("shockwaveGameContainer").style.display = "block";
$mc("shockwaveInstallWrapper").style.display = "none";
$mc("shockwaveInstallBar").style.display = "none";
$mc("blackOverlay").style.display = "none";
$mc("shockwaveInstallBar").innerHTML = "";

}else{

// track not installed
if(shockwaveFirstTime == true){
//statTracker("/sw/notInstalled");
cookie_create("sw","1",10);
}
var goldbarMessage = "<div id='shockwaveDescription'><p><strong>Adobe Shockwave Required</strong></p><p>Installing is easy.<br>Just follow these steps &raquo;</p></div>";

// if firefox or similar
if(navigator.appName == "Netscape"){
// if version >3
if(navigator.userAgent.indexOf("Firefox") != -1){
firefoxVersion = navigator.userAgent.charAt(navigator.userAgent.indexOf("Firefox/")+8);
if(firefoxVersion >= 3){
goldbarMessage = goldbarMessage + "<div id='shockwaveInstructions'><p>Click <strong>Install Missing Plugins</strong></p><p>Follow the instructions</p><p>You're done. Enjoy the game!</p></div><div class='arrow'></div>";
}
}
else if(navigator.userAgent.indexOf("Chrome") != -1){
goldbarMessage = goldbarMessage + "<div id='shockwaveInstructions'><p><a href='http://get.adobe.com/shockwave/' target='_blank'><strong>Click here</strong></a> to install Adobe Shockwave</p><p>Follow the instructions</p><p>You're done. Enjoy the game!</p></div>";
}else{
showGoldBar = false;
}
}
else if((navigator.appName == "Microsoft Internet Explorer") &&(navigator.userAgent.charAt(navigator.userAgent.indexOf("MSIE ")+5) >= 9)){
goldbarMessage = goldbarMessage + "<div id='shockwaveInstructions'><p><strong>Click Install in the bar BELOW</strong></p><p>Allow the installation when prompted</p></div><div class='arrowDown'></div>";
}
else if(navigator.appName == "Opera"){
goldbarMessage = goldbarMessage + "<div id='shockwaveInstructions'><p><a href='http://get.adobe.com/shockwave/' target='_blank'><strong>Click here</strong></a> to install Adobe Shockwave</p><p>Follow the instructions</p><p>You're done. Enjoy the game!</p></div>";
}
else{
goldbarMessage = goldbarMessage + "<div id='shockwaveInstructions'><p><strong>Click the yellow bar</strong> above</p><p>Choose <strong>Install This Addon...</strong></p><p><strong>Click Install</strong> when prompted</p></div><div class='arrow'></div>";
}

if(showGoldBar == true){
$mc("shockwaveGameContainer").style.display = "none";
$mc("shockwaveInstallWrapper").style.display = "block";
$mc("shockwaveInstallBar").style.display = "block";
$mc("blackOverlay").style.display = "block";
$mc("shockwaveInstallBar").innerHTML = goldbarMessage;
}

shockwaveTimeout = setTimeout("shockwaveInstall()",4 * 1000);
}

shockwaveFirstTime = false;

}

function LoginBoxNotification(action){
// if possible  refresh the toolbar
if (typeof setTimeout("RefreshToolbarByCTID",500) == 'function'){
// refresh miniclip toolbar
setTimeout("RefreshToolbarByCTID('CT3067892')",500);
}
switch(action){
case 'user_logged_in':
case 'user_logged_out':

refreshToolbar();

from = urlParam('from');
challenge_uid = urlParam('challenge_uid');
challenge_url = decodeURIComponent(urlParam('challenge_url'));

redirect_url = '';

if (from == 'challenge'){
redirect_url = challenge_url + '?challenge=' + challenge_uid + '&from=' + from;
}else if (typeof(redirect_new) != 'undefined'){
redirect_url = redirect_new;
}

if (redirect_url != ''){

window.location.href = redirect_url;
}else{
window.location.reload();
}
}
}

function urlParam (name){
name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
var regexS = "[\\?&]"+name+"=([^&#]*)";
var regex = new RegExp(regexS);
var results = regex.exec(window.location.href);
if(results == null){
return "";
}else{
return results[1];
}
}

function statTracker(path){
if (typeof(_gaq) != 'undefined'){
/*
var st = document.createElement('script');
st.type = 'text/javascript';
st.src = '/php/services/indigo/dfp.php?t=' + path;

var head=document.getElementsByTagName('head')[0];
head.appendChild(st);
*/

//alert('GA tracking:'+path);
_gaq.push(['b._trackPageview',path]);
}
}

function eventTracker(category,action,opt_label,opt_value){
if (typeof(_gaq) != 'undefined'){
_gaq.push(['b._trackEvent',category,action,opt_label,opt_value]);
}
}

function statTrackerDelay(redirect,path){
if (typeof(_gaq) != 'undefined'){
_gaq.push(['b._trackPageview',path]);
setTimeout('document.location = "' + redirect + '"',500);
}
}


// used to track unique visitors on additional pages that don't feature real ads
function adTracker(track_url){
if (track_url == undefined){
track_url = 'http://ads.miniclip.com/RealMedia/ads/adstream_sx.ads/miniclip.com/clubpenguintracking/142334@x01';
}
if (document.location.protocol != 'https:'){
tracker = new Image();
tracker.src = track_url;
}
}

function flashTracker(url){
if (document.location.protocol != 'https:'){
tracker = new Image();
tracker.src = url;
}
}

function jsDebug(data){
outputHtml = "";
outputHtml = outputHtml + "<div style=\"background:#F5F5FF;margin-bottom:1px;padding:5px;\">";
outputHtml = outputHtml + data;
outputHtml = outputHtml + "</div>";
$mc("jsDebugDataBox").innerHTML = $mc("jsDebugDataBox").innerHTML + outputHtml;
}





var hpto = new Object;
var toolbarHomepageTakeover = false;
var hptoDisplay = false;

function runTakeover(hpto){

if (hptoDisplay == true){
return;
}

// ---------
// banner ad
// ---------

if (hpto.MpuURL != undefined){
hpto_MPU_URL = hpto.MpuURL;
if (hpto.ClickURL != undefined){
hpto_MPU_URL = hpto_MPU_URL + '?clickTag=' + encodeURIComponent(hpto.ClickURL.replace('[timestamp]',ord));
}

takeoverEmbed = '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0" id="Ad_that_changes_background_AS1" width="300" height="250" align="middle"><param name="allowScriptAccess" value="sameDomain" /><param name="movie" value="' + hpto_MPU_URL + '" /><param name="quality" value="high" /><embed src="' + hpto_MPU_URL + '" quality="high" width="300" height="250" swLiveConnect=true id="Ad_that_changes_background_AS1" name="Ad_that_changes_background_AS1" align="middle" allowScriptAccess="sameDomain" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" /></object>';
if ($mc('takeoverMPU') != null){
$mc('takeoverMPU').innerHTML = takeoverEmbed;
}else{
document.write(takeoverEmbed);
}
}

// ----
// skin
// ----

if (hpto.ImageURL_1 == undefined){
hpto_ImageURL_1 = hpto.ImageURL;
}else{
hpto_ImageURL_1 = hpto.ImageURL_1;
}

// Set defaults and fallbacks
if (hpto_ImageURL_1 != ""){
hpto_Image_1 = 'url(' + hpto_ImageURL_1 + ') no-repeat center top !important';
}else{
hpto_Image_1 = '';
}

if (hpto.Colour == ''){
hpto.Colour = '#333333';
}

// Define header options
if (hpto.CPTO == true){
if (hpto.Hide728 == true){
headerHeight = 35;
clickHeight = 65;
}else{
headerHeight = 105;
clickHeight = 105;
}
}else{
switch(hpto.Header){
case 1:
headerHeight = 35;
clickHeight = 35;
break;
case 2:
headerHeight = 65;
clickHeight = 65;
break;
case 3:
headerHeight = 105;
clickHeight = 105;
break;
default:
headerHeight = 0;
}
}

// Set wrapper/logo visibility
if ($mc('wrapper') != null){
if (hpto.Wrapper == true){
$mc('wrapper').style.marginTop = headerHeight + 'px';
hpto.hpto_Logo = 'h1 a,h1 a:hover,h1.ad a,h1.ad a:hover{background:url(/images/bg_h1.png) no-repeat 12px 10px;}';
}else{
$mc('wrapper').style.background = 'none';
$mc('wrapper').style.padding = headerHeight + 'px 0 0 0';

if (hpto.hpto_Logo == false){
hpto.hpto_Logo = 'h1.ad,h1{background:none;}';
}else{
hpto.hpto_Logo = 'h1.ad,h1{background:url(/images/takeovers/takeoverLogo.png) no-repeat 12px 10px;}';
}

$mc('wrapper').style.paddingTop = String(headerHeight).concat('px');
}
}

if ($mc("toolbarPush")){
$mc("toolbarPush").innerHTML = '';
}
toolbarHomepageTakeover = true;
document.body.style.marginRight = '';

// Clickable Takeover
if (hpto.bgClickURL !== undefined){

bgClickURL = hpto.bgClickURL;
noBubble = false;

if(hpto.Agency == "internal"){
document.body.onclick = function(){
if (noBubble == false){
window.location.href = bgClickURL;
}
noBubble = false;
}
}else{
document.body.onclick = function(){
if (noBubble == false){
window.open(bgClickURL);
}
noBubble = false;
}
}

$mc('wrapper').onclick = function(){
noBubble = true;
};

$mc('footer').onclick = function(){
noBubble = true;
};

document.body.style.cursor = 'pointer';
$mc('wrapper').style.cursor = 'default';
$mc('footer').style.cursor = 'default';

}else{

document.body.onclick = null;

}


//Clickable Area
isInternal = '';

if(hpto.Agency !== "internal"){
isInternal = ' target="_blank"';
}

if ((hpto.areaClickURL !== undefined) && (hpto.areaClickPosition !== undefined)){
trackpath = hpto.areaClickPosition + '/' + hpto.Agency + '/' + hpto.Client + '/' + hpto.Campaign;
trackclass = 'hpto-click-button-' + hpto.areaClickPosition + ' hpto-click-button-' + clickHeight;
trackdiv = '<div id="hpto-click-button" class="' + trackclass + '"><a href="' + hpto.areaClickURL + '"' + isInternal + ' onClick="statTracker(\'/takeovers/clickable-area/' + trackpath + '/\');">Click Here</a></div>';
jQuery(trackdiv).insertBefore('#wrapper h1');
}


// Build the Takeover
document.body.style.backgroundColor     = hpto.Colour;
document.body.style.backgroundImage     = 'url(' + hpto_ImageURL_1 + ')';
document.body.style.backgroundRepeat    = 'no-repeat';
document.body.style.backgroundPosition  = 'top center';

if($mc('beta') != null){
$mc('beta').style.display            = 'none';
}
hideMonkey();

document.write('<style type="text/css">');
document.write('.flagsHeader{display:none;}\n');
document.write(hpto.hpto_Logo + '\n');
if (headerHeight > 0){
document.write('.ad_728_90{margin-top:25px;}\n');
}
if (hpto.Hide728 == true){
document.write('.ad_728_90,.block_728_90{display:none;}\n');
}
if (hpto.HideBreadcrumb == true){
document.write('h1.ad{margin-top:40px;}\n');
document.write('body.H_game .breadcrumbs,body.H_game .hGameCat{display:none;}\n');
}
document.write('.corner_bl.g,.corner_br.g{background-image:none;}\n');
document.write('</style>');


// ------
// footer
// ------
if (hpto.FootURL != undefined){
if (hpto.FootURL.length > 0){
var hpto_FootImg = new Image();
hpto_FootImg.src = hpto.FootURL;
$mc('footerTakeover').innerHTML = '<img src="' + hpto.FootURL + '" />';
}
}

// -----
// stats
// -----

// Get statistics variables from array
if (hpto.Agency == 'internal'){
hpto_Agency = 'Miniclip-Internal';
}else{
hpto_Agency = hpto.Agency;
}
hpto_Client = hpto.Client;
hpto_Campaign = hpto.Campaign;

// If blank,set unknown.
if(hpto_Agency == undefined){
hpto_Agency = "unknown";
}
if(hpto_Client == undefined){
hpto_Client = "unknown";
}
if(hpto_Campaign == undefined){
hpto_Campaign = "unknown";
}

// tracking
if (hpto.TrackURL != undefined){
hpto.TrackURL = hpto.TrackURL.replace('[timestamp]',ord);
tracker = new Image();
tracker.src = hpto.TrackURL;
}

hptoDisplay = true;

// Log takeover view to Google Analytics
trackHPTO();

hpto = new Object();

}

function trackHPTO(args){

// Get statistics variables from array
hpto_Agency = hpto.Agency;
hpto_Client = hpto.Client;
hpto_Campaign = hpto.Campaign;

// If blank,set unknown.
if(hpto_Agency == undefined){
hpto_Agency = "unknown";
}
if(hpto_Client == undefined){
hpto_Client = "unknown";
}
if(hpto_Campaign == undefined){
hpto_Campaign = "unknown";
}
if (args == undefined){
args = '';
}

var path = '/advertising/takeovers/' + encodeURI(hpto_Agency.replace(' ','-')) + '/' + encodeURI(hpto_Client.replace(' ','-')) + '/' + encodeURI(hpto_Campaign.replace(' ','-')) + args;
statTracker(path);

}

var isInternetExplorer = navigator.appName.indexOf("Microsoft") != -1;

// Hook for Internet Explorer.
if (navigator.appName && navigator.appName.indexOf("Microsoft") != -1 && navigator.userAgent.indexOf("Windows") != -1 && navigator.userAgent.indexOf("Windows 3.1") == -1){
document.write('<script language=\"VBScript\"\>\n');
document.write('On Error Resume Next\n');
document.write('Sub Ad_that_changes_background_AS1_FSCommand(ByVal command,ByVal args)\n');
document.write('Call Ad_that_changes_background_AS1_DoFSCommand(command,args)\n');
document.write('End Sub\n');
document.write('</script\>\n');
}


function setBodyMargin(){
if(document.body.offsetWidth % 2 == 1){
document.body.style.marginRight = "1px";
}else{
document.body.style.marginRight = "0";
}
}

var userAge = 0;

// Newsletter Signup
function coppaAge (){

// Set Minimum Age Limit
var ageLimit = 13;

var userAge = jQuery('#coppa_age').val();

var reg = /^([a-zA-Z0-9_\-\.]+)@((([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4})(\]?)$/;
var address = jQuery('#email_address').val();

if (userAge < ageLimit){
jQuery("#newsletterForm").html('<h3>Sorry!</h3><p class="error">The Miniclip Newsletter is only available to players aged 13 years or over.</p>');
cookie_create('coppaAge',userAge,3);// Set a cookie to stop them from trying again
}else{
if ((reg.test(address) == false) || (userAge <= ageLimit)){
alert('Invalid Email Address');
}else{
//statTracker('/newsletter/signup/');
jQuery ('#email_form').submit();
}
}

return false;

}


/* Toolbar Push Strip */
function toolbarPush(){

// make sure the game is running on a game page (t_gameId is only available on game pages)
if (typeof(t_gameId) == 'undefined'){
return;
}

// make sure there is space for the toolbar
if (toolbarHomepageTakeover == true){
return;
}


if ($mc("toolbarPush")){
// make sure we're on www
if(document.domain == "www.miniclip.com"){
// see if the toolbar can be shown (variable "hidetoolbar" set in some templates)
if (window['hideToolbar'] == undefined){
// see if the toolbar is installed with the toolbar cookie
var toolbarId = cookie_read("minicliptb_id");

if (toolbarId.length < 1){
// insert toolbar
outputHtml = '<div class="toolbarContain">';
outputHtml += '<a href="/games/en/toolbar/">Get the all new Miniclip toolbar for your browser!</a>';
outputHtml += '<div class="toolbarBody">';
outputHtml += '<a href="/games/en/toolbar/">Get the all new Miniclip toolbar for your browser!</a>';
outputHtml += '</div>';
outputHtml += '</div>';

//$mc("toolbarPush").innerHTML = outputHtml;
$mc("toolbarPush").innerHTML = '';
}

}
}
}
}

function reloadAvatar(){
setTimeout('reloadAvatarReal()',1500);
}

function reloadAvatarReal(){
newSrc = $mc('loginbox_avatar').src + "&dc=" + (Math.random() * 10000000000000000);
$mc('loginbox_avatar').src = newSrc;
}

/* TOOLBAR */

var cookName = "minicliptoolbar_id";
var cookieGame = "minicliptoolbarsession";
var msg_noplace = "There is no space to add more Miniclips,use the \"Edit My Miniclips...\" function to make space for new games.";

var gameurl = new Array();
var gametit = new Array();

var Maxgame = (gametit.length - 1);

// Function to extract game information from cookie
function toolbar_list(){

var mg = $mc('mg_miniclips');

if(mg == null){
return;
}

var thecook = cookie_read(cookieGame);
var output = "";

if(thecook == null || thecook == ""){

output = language[0];

}else{

thecook.toString();

var cookArray = thecook.split("~");

for(var ig = 1;ig < 12;ig = ig + 2){

if (ig < cookArray.length){
var num = cookArray[ig].split("^");

tidVal = $mc('tid_' + num[1]);

if(tidVal != null){
detail1 = tidVal.href;
detail2 = tidVal.innerHTML;

output = output + "<li><a href='javascript:toolbar_delete(" + num[1] + ");' class='toolbar_delete'><img src='http://images-vip.napmia.miniclip.com/images/button_delete.gif' alt='delete this miniclip' /></a><a href='" + detail1 + "'>" + detail2 +"</a></li>";
}
}
}

}

mg.innerHTML = output;

}

function toolbar_add(thegameid,refresh_list){

var thecook = cookie_read(cookieGame);
thecook.toString();

gameName = $mc("tid_" + thegameid).innerHTML;

// if game already exists...
if (thecook.indexOf("^" + thegameid + "~") >= 0){
alert(language[3] + " " + gameName + " " + language[2]);
return;
}

var theline = "";

if (thecook.length < 5){
theline += "gm1^" + gameName + "~";
theline += "ur1^" + thegameid + "~";
}else{
theline += "gm1^" + gameName + "~";
theline += "ur1^" + thegameid + "~";
theline += thecook;
}

countTheCook = thecook.split("~");
toolbarcook = cookie_read(cookName);

cookie_create(cookieGame,theline,20000);
toolbar_refresh(0,"add",gameName);

if(refresh_list == true){
toolbar_list();
}

}

function toolbar_delete(gameID){
var thecook = cookie_read(cookieGame);
var theline = "";

gameName = $mc("tid_" + gameID).innerHTML;

thegames = thecook.split("~");

for(i = 0;i < thegames.length - 2;i = i + 2){

// with the old code gameID could be 1 (3-foot-ninja) and it would delete any game with
// a 1 in it. so i removed indexOf.. /andreas
number = thegames[i + 1].split("^");
number = number[1];

if (number == gameID){
//if(thegames[i + 1].indexOf(gameID) > -1){

}else{
theline += thegames[i] + "~" + thegames[i + 1] + "~";
}

}
cookie_create(cookieGame,theline,20000);
toolbar_refresh(0,"remove",gameName);
toolbar_list();

}

function toolbar_refresh(full,addOrRemove,gameName){

var thecook = cookie_read(cookieGame);
thecook = thecook.toString();

if (thecook.length > 5){

if (full == 1){
alert(msg_noplace);
}else if(addOrRemove == "add"){
//alert(gameName + " has been added to My Miniclips. Click \"My Miniclips\" in the toolbar to use it!");
}else if (addOrRemove == "remove"){
//alert (gameName + " " + language[1]);
}
}
}

function hideMonkey(){
if ($mc('homepageMonkey') != null){
$mc('homepageMonkey').innerHTML = '';
}
}

function detectUnityWebPlayer (){
var tInstalled = false;
if (navigator.appVersion.indexOf("MSIE") != -1 && navigator.appVersion.toLowerCase().indexOf("win") != -1){
tInstalled = detectUnityWebPlayerActiveX();
}else if (navigator.mimeTypes && navigator.mimeTypes["application/vnd.unity"]){
if (navigator.mimeTypes["application/vnd.unity"].enabledPlugin && navigator.plugins && navigator.plugins["Unity Player"]){
tInstalled = true;
}
}
return tInstalled;
}

function initTopTen(){

// only do this if the animation is available
if ($mc('topTen') == null){
return false;
}

var topTenItems = $mc('topTen').getElementsByTagName('li');

for (var y = 0;y < topTenItems.length;y++){
topTenItems[y].id = 'topTenItem' + y;
topTenItems[y].onmouseover = function(){
tempTopTenItems = $mc('topTen').getElementsByTagName('li');
for (var x = 0;x < topTenItems.length;x++){
tempTopTenItems[x].className = '';
$mc(tempTopTenItems[x].id + 'Details').style.display = 'none';
}
this.className = 'active';

$mc(this.id + 'Details').style.display = 'block';
}
}

}


/* Navigation v2 Stuff */

var showMoreStatus = false;

function showMoreNav(){

var showMoreStatus = $mc('moreNavContent').className == "shown";

if (showMoreStatus == true){
$mc('moreNavContent').className = "hidden";
//$mc('moreNavShow').innerHTML = "More";
$mc('moreNavShow').style.backgroundPosition = '0px 7px';
}else{
$mc('moreNavContent').className = "shown";
//$mc('moreNavShow').innerHTML = "Less";
$mc('moreNavShow').style.backgroundPosition = '0px -9px';
}

if ($mc('sideBar')){

var startHeight = 70;
var wideActive = document.body.className.indexOf('bigVideo');

if (showMoreStatus == true){
if (wideActive < 0){
$mc('sideBar').style.marginTop = '-' + startHeight + 'px';
}

showMoreStatus = false;
}else{
if (wideActive < 0){
$mc('sideBar').style.marginTop = '-' + ($mc('moreNavContent').offsetHeight + startHeight) + 'px';
}

showMoreStatus = true;
}
}

return false;

}

var raptor = true;

function homepageBigAd(){
jQuery('body').addClass('bigVideo');
raptor = false;
}


// Alert user if they try to leave an ongoing game
var _inGame = false;
var _text = "";

function lobbyInGame(inGame,text){
_inGame = inGame;
_text = text;
}

function lobbyConfirmLeave(){
if (_inGame){
return _text;
}
}

function autoResize(id){

var newheight;
var newwidth;

if(document.getElementById){
newheight=document.getElementById(id).contentWindow.document .body.scrollHeight;
newwidth=document.getElementById(id).contentWindow.document .body.scrollWidth;
}

document.getElementById(id).height= (newheight) + "px";
document.getElementById(id).width= (newwidth) + "px";
}


window.onbeforeunload = lobbyConfirmLeave;


// Game page share box
shareVisible = false;
hasHidden = false;

function linksInit (){

jQuery('a[href^="http"]').each(function(){
href = this.href.toLowerCase();
if (href.indexOf('miniclip.com') >= 0 &&
href.indexOf('www') == -1 &&
href.indexOf('devcms') == -1 &&
href.indexOf('icq') == -1 &&
href.indexOf('cms') == -1 &&
href.indexOf('ads') == -1 &&
href.indexOf('support') == -1
){
jQuery(this).click(function(){
return trackLink(this.href);
});
}
});

}


function trackLink (url){
_gaq.push(['_link',url]);
return true;
}


// Simple Set Clipboard System
// Author:Joseph Huckaby

var ZeroClipboard ={

version:"1.0.7",
clients:{},// registered upload clients on page,indexed by id
moviePath:'ZeroClipboard.swf',// URL to movie
nextId:1,// ID of next movie

$:function(thingy){
// simple DOM lookup utility function
if (typeof(thingy) == 'string') thingy = document.getElementById(thingy);
if (!thingy.addClass){
// extend element with a few useful methods
thingy.hide = function(){
this.style.display = 'none';
};
thingy.show = function(){
this.style.display = '';
};
thingy.addClass = function(name){
this.removeClass(name);
this.className += ' ' + name;
};
thingy.removeClass = function(name){
var classes = this.className.split(/\s+/);
var idx = -1;
for (var k = 0;k < classes.length;k++){
if (classes[k] == name){
idx = k;
k = classes.length;
}
}
if (idx > -1){
classes.splice(idx,1);
this.className = classes.join(' ');
}
return this;
};
thingy.hasClass = function(name){
return !!this.className.match(new RegExp("\\s*" + name + "\\s*"));
};
}
return thingy;
},

setMoviePath:function(path){
// set path to ZeroClipboard.swf
this.moviePath = path;
},

dispatch:function(id,eventName,args){
// receive event from flash movie,send to client
var client = this.clients[id];
if (client){
client.receiveEvent(eventName,args);
}
},

register:function(id,client){
// register new client to receive events
this.clients[id] = client;
},

getDOMObjectPosition:function(obj,stopObj){
// get absolute coordinates for dom element
var info ={
left:0,
top:0,
width:obj.width ? obj.width :obj.offsetWidth,
height:obj.height ? obj.height :obj.offsetHeight
};

while (obj && (obj != stopObj)){
info.left += obj.offsetLeft;
info.top += obj.offsetTop;
obj = obj.offsetParent;
}

return info;
},

Client:function(elem){
// constructor for new simple upload client
this.handlers ={};

// unique ID
this.id = ZeroClipboard.nextId++;
this.movieId = 'ZeroClipboardMovie_' + this.id;

// register client with singleton to receive flash events
ZeroClipboard.register(this.id,this);

// create movie
if (elem) this.glue(elem);
}
};

ZeroClipboard.Client.prototype ={

id:0,// unique ID for us
ready:false,// whether movie is ready to receive events or not
movie:null,// reference to movie object
clipText:'',// text to copy to clipboard
handCursorEnabled:true,// whether to show hand cursor,or default pointer cursor
cssEffects:true,// enable CSS mouse effects on dom container
handlers:null,// user event handlers

glue:function(elem,appendElem,stylesToAdd){
// glue to DOM element
// elem can be ID or actual DOM element object
this.domElement = ZeroClipboard.$(elem);

// float just above object,or zIndex 99 if dom element isn't set
var zIndex = 99;
if (this.domElement.style.zIndex){
zIndex = parseInt(this.domElement.style.zIndex,10) + 1;
}

if (typeof(appendElem) == 'string'){
appendElem = ZeroClipboard.$(appendElem);
}
else if (typeof(appendElem) == 'undefined'){
appendElem = document.getElementsByTagName('body')[0];
}

// find X/Y position of domElement
var box = ZeroClipboard.getDOMObjectPosition(this.domElement,appendElem);

// create floating DIV above element
this.div = document.createElement('div');
var style = this.div.style;
style.position = 'absolute';
style.left = '' + box.left + 'px';
style.top = '' + box.top + 'px';
style.width = '' + box.width + 'px';
style.height = '' + box.height + 'px';
style.zIndex = zIndex;

if (typeof(stylesToAdd) == 'object'){
for (addedStyle in stylesToAdd){
style[addedStyle] = stylesToAdd[addedStyle];
}
}

// style.backgroundColor = '#f00';// debug

appendElem.appendChild(this.div);

this.div.innerHTML = this.getHTML(box.width,box.height);
},

getHTML:function(width,height){
// return HTML for movie
var html = '';
var flashvars = 'id=' + this.id +
'&width=' + width +
'&height=' + height;

if (navigator.userAgent.match(/MSIE/)){
// IE gets an OBJECT tag
var protocol = location.href.match(/^https/i) ? 'https://' :'http://';
html += '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="'+protocol+'download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="'+width+'" height="'+height+'" id="'+this.movieId+'" align="middle"><param name="allowScriptAccess" value="always" /><param name="allowFullScreen" value="false" /><param name="movie" value="'+ZeroClipboard.moviePath+'" /><param name="loop" value="false" /><param name="menu" value="false" /><param name="quality" value="best" /><param name="bgcolor" value="#ffffff" /><param name="flashvars" value="'+flashvars+'"/><param name="wmode" value="transparent"/></object>';
}
else{
// all other browsers get an EMBED tag
html += '<embed id="'+this.movieId+'" src="'+ZeroClipboard.moviePath+'" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="'+width+'" height="'+height+'" name="'+this.movieId+'" align="middle" allowScriptAccess="always" allowFullScreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="'+flashvars+'" wmode="transparent" />';
}
return html;
},

hide:function(){
// temporarily hide floater offscreen
if (this.div){
this.div.style.left = '-2000px';
}
},

show:function(){
// show ourselves after a call to hide()
this.reposition();
},

destroy:function(){
// destroy control and floater
if (this.domElement && this.div){
this.hide();
this.div.innerHTML = '';

var body = document.getElementsByTagName('body')[0];
try{
body.removeChild(this.div);
}catch(e){
;
}

this.domElement = null;
this.div = null;
}
},

reposition:function(elem){
// reposition our floating div,optionally to new container
// warning:container CANNOT change size,only position
if (elem){
this.domElement = ZeroClipboard.$(elem);
if (!this.domElement) this.hide();
}

if (this.domElement && this.div){
var box = ZeroClipboard.getDOMObjectPosition(this.domElement);
var style = this.div.style;
style.left = '' + box.left + 'px';
style.top = '' + box.top + 'px';
}
},

setText:function(newText){
// set text to be copied to clipboard
this.clipText = newText;
if (this.ready) this.movie.setText(newText);
},

addEventListener:function(eventName,func){
// add user event listener for event
// event types:load,queueStart,fileStart,fileComplete,queueComplete,progress,error,cancel
eventName = eventName.toString().toLowerCase().replace(/^on/,'');
if (!this.handlers[eventName]) this.handlers[eventName] = [];
this.handlers[eventName].push(func);
},

setHandCursor:function(enabled){
// enable hand cursor (true),or default arrow cursor (false)
this.handCursorEnabled = enabled;
if (this.ready) this.movie.setHandCursor(enabled);
},

setCSSEffects:function(enabled){
// enable or disable CSS effects on DOM container
this.cssEffects = !!enabled;
},

receiveEvent:function(eventName,args){
// receive event from flash
eventName = eventName.toString().toLowerCase().replace(/^on/,'');

// special behavior for certain events
switch (eventName){
case 'load':
// movie claims it is ready,but in IE this isn't always the case...
// bug fix:Cannot extend EMBED DOM elements in Firefox,must use traditional function
this.movie = document.getElementById(this.movieId);
if (!this.movie){
var self = this;
setTimeout(function(){
self.receiveEvent('load',null);
},1);
return;
}

// firefox on pc needs a "kick" in order to set these in certain cases
if (!this.ready && navigator.userAgent.match(/Firefox/) && navigator.userAgent.match(/Windows/)){
var self = this;
setTimeout(function(){
self.receiveEvent('load',null);
},100);
this.ready = true;
return;
}

this.ready = true;
this.movie.setText(this.clipText);
this.movie.setHandCursor(this.handCursorEnabled);
break;

case 'mouseover':
if (this.domElement && this.cssEffects){
this.domElement.addClass('hover');
if (this.recoverActive) this.domElement.addClass('active');
}
break;

case 'mouseout':
if (this.domElement && this.cssEffects){
this.recoverActive = false;
if (this.domElement.hasClass('active')){
this.domElement.removeClass('active');
this.recoverActive = true;
}
this.domElement.removeClass('hover');
}
break;

case 'mousedown':
if (this.domElement && this.cssEffects){
this.domElement.addClass('active');
}
break;

case 'mouseup':
if (this.domElement && this.cssEffects){
this.domElement.removeClass('active');
this.recoverActive = false;
}
break;
}// switch eventName

if (this.handlers[eventName]){
for (var idx = 0,len = this.handlers[eventName].length;idx < len;idx++){
var func = this.handlers[eventName][idx];

if (typeof(func) == 'function'){
// actual function reference
func(this,args);
}
else if ((typeof(func) == 'object') && (func.length == 2)){
// PHP style object + method,i.e. [myObject,'myMethod']
func[0][func[1]](this,args);
}
else if (typeof(func) == 'string'){
// name of function
window[func](this,args);
}
}// foreach event handler defined
}// user defined handler for event
}

};

function icqBrandBar(){

/* Set ICQ Background */
document.body.style.backgroundColor = '#72c628';
document.body.style.backgroundImage = 'url("/images/icq-branding/siteGreenBg.png")';
document.body.style.backgroundPosition = 'center';
document.body.style.backgroundRepeat = 'repeat-y';

/* Construct ICQ Brand Bar */
navCompiled = ('<ul>');
navCompiled += ('<li class="icq-logo"><a href="http://www.icq.com">icq</a></li>');

for (var i in navText){
navCompiled += ('<li><a href="' + navUrl[i] + '">' + navText[i] + '</a></li>');
}

navCompiled += ('</ul>');

document.getElementById('icq-brandBar').innerHTML = navCompiled;

/* Unhide ICQ Brand Bar */
document.getElementById('icq-brandBar').style.display = 'block';

hptoDisplay = true;

}


// Check for miniclip.com
if (typeof(window.location.hostname) != 'undefined' && window.location.hostname == 'miniclip.com'){

// Supress all errors on production.
window.onerror=function(){
return true;
}
}

//New Search Box
function siteSearchClear (div){
jQuery(div).css('color','#000');

if (jQuery(div).val() == ''){
jQuery(div).css('color','#aaa');
}
}

function siteSearchFocus(div){
if (jQuery(div).val() == "Search"){
jQuery(div).focus();
return false;
}
}

function list_jump(list){
if(list == null){
list = "jumpList";
}

var newIndex = document.forms[list].jumpSelect.selectedIndex;

if (newIndex != 0){
url = document.forms[list].jumpSelect.options[newIndex].value;
top.location = url;
}
}



// Code moved here from notification.js
/*
    Example data structure:
    var data = [{
        id:1,
        excerpt:'Hello,this is notification number one!',
        message:'message',
        button:{
            link:'http://www.google.com',
            'target':'_blank',
            'label':'label'
       },
        icon:'exclamation'
   },{
        id:2,
        excerpt:'Merry Christmas',
        message:'and happy new year',
        button:{
            link:'http://www.whazzup.com',
            'target':'_blank',
            'label':'label'
       },
        icon:'exclamation'
   }];
 */

//hack to avoid running problematic jQuery stuff for games list and notification bar in webgame iframes - breaks IE
if (this.location.href.indexOf('webgame.php') == -1){
// we have to declare this globally
var closed_notifications;

jQuery(document).ready(function(){

jQuery('.fullgameslist div.toggle').click(function(){
container = jQuery(this).attr('rel');
jQuery(this).toggleClass('show');
jQuery(container).slideToggle();
cookie_name = 'm' + container.replace('#','')

if (jQuery(this).text() == 'Show'){
// display the container
jQuery(this).text('Hide');
cookie_create(cookie_name,0,99);
}else{
// hide the container
jQuery(this).text('Show');
cookie_create(cookie_name,1,99);
}
});
jQuery('#moreNavShow').click(function(){
showMoreNav();
return false;
});

// only do this if not in frameset
if (top == self){
jQuery('#siteSearch').focus();
}

displayNotificationBar = true;
// if its not an iframe
if (window.location != window.parent.location){
displayNotificationBar = false;
}

if (toolbarHomepageTakeover == true){
displayNotificationBar = false;
}

if (displayNotificationBar == true){

jQuery.getJSON('/php/services/notification.php',function(data)
{
closed_notifications = cookie_read('closed_notifications');
if (closed_notifications){
closed_notifications = closed_notifications.split(',');
}else{
closed_notifications = [];
}

var temp = [];
var d_len = data.length;
for (var d=0;d<d_len;d++){
if (!in_array(data[d].id,closed_notifications)){
temp.push(data[d]);
}
}
data = temp;

if (data.length > 0){
renderNotification(data[0]);
}
});

}

// remove Clone Wars & Free Realms from category pages in certain territories
var sony_exclude_list = new Array(
'AL','AD','AT','BE','BA','BG',
'HR','CZ','DK','EE','FI','FR',
'DE','GR','HU','IS','IE','IT',
'LV','LI','LT','LU','MK','MT',
'MC','ME','NL','NO','PL','PT',
'RO','SM','CS','SK','SI','ES',
'SE','CH','TR','UK','GB'
);
if (jQuery.inArray(cookie_read('ipLocation'),sony_exclude_list) >= 0){
jQuery('#game_id_2071').remove();
jQuery('#game_id_2481').remove();
}

// remove Lorax from category pages (if it exists) in certain territories (game id 3324)
var lorax_exclude_list = new Array('US','CA');
if (jQuery.inArray(cookie_read('ipLocation'),lorax_exclude_list) >= 0){
if (jQuery("#game_id_3324").length > 0){
jQuery('#game_id_3324').remove();
jQuery('.big_game_id_18').css('display','inline');
jQuery('.small_game_id_18').css('display','none');
}
}

});
//end of jQuery hiding from webgame iframes
}

function renderNotification(data){
// create html for the notification
var html = '';
html += '<div class="siteNotification" id="notification_' + data.id + '">';
html += '   <div class="icon"><img width="18" height="19" src="/images/sitenotification/announcement_icon_' + data.icon + '.png" /></div>';
html += '   <div class="close"><a href="#">Close</a></div>';
//html += '   <div onClick="readFull()" class="container">';
html += '   <div class="container">';
html += '       <span class="excerpt">' + data.excerpt + '</span>';
// html += '       <span class="full">' + data.message + '<br />';

if (typeof data.link != 'undefined' && data.link != null){
html += '       <a class="button" href="' + data.link + '" target="' + data.target + '">' + data.label + '</a>';
}
// html += '       </span>';
html += '   </div>';
html += '</div>';
jQuery('body').prepend(html);

// and bind click event to close button
jQuery('.close').bind('click',function(){
var id = jQuery(this).closest('.siteNotification').attr('id').replace('notification_','');
jQuery('#notification_' + id).slideUp("slow",function(){
jQuery(this).remove();
});

if (!in_array(id,closed_notifications)){
closed_notifications.push(id);
}

cookie_create('closed_notifications',closed_notifications.join(','),10);
statTracker('binary/games/notification/'  + data.id + '/click/close/');
});

jQuery('#notification_' + data.id + ' .container a').click(function(){
statTracker('binary/games/notification/'  + data.id + '/link/click/' + jQuery(this).attr('href'));
});

statTracker('binary/games/notification/'  + data.id + '/impression/');
}

function readFull(){
/*jQuery(".siteNotification .excerpt").fadeOut("slow",function(){
jQuery(".siteNotification .full").fadeIn();
});*/

//statTracker('binary/games/notification/read_full/click/');
}

function in_array (needle,haystack){
var key = '';
for (key in haystack){
if (haystack[key] == needle){
return true;
}
}
return false;
}

function isNumber(n)
{
return !isNaN(parseFloat(n)) && isFinite(n);
}

var _enabledws = ['devcms','cmsftl','webmad60','webmad61','webmad62','webmad63','webmad64','webmad65'];
function initActivity()
{
if (typeof _webserver == 'undefined'){
}else{
var enabled = false;

/*for (i in _enabledws){
            if (_enabledws[i] == _webserver){
                enabled = true;
           }
       }*/
var part = _webserver.replace(/webmad|webftl/,"");

if (isNumber(part) && part%2 == 0){
enabled = true;
}else{
if (_webserver == 'devcms' || _webserver == 'cmsftl'){
enabled = true;
}
}
enabled = true;
if (enabled){

jQuery.ajax({
url:"/php/services/activity.php" //+ new Date().getTime()
});
setInterval(function(){
jQuery.ajax({
url:"/php/services/activity.php" //+ new Date().getTime()
});
},60000);
}
}
}


// SS Fan Art
function initSSFanArt(game_id){
// only do this if the animation is available
if ($mc('fan_art_container') == null){
return false;
}

// set params to send
var req_data ={
game_id:game_id
}

// request fan art template from sketch-star
jQuery.ajax({
url:'/sketch-star/ss-lib/ajax.php?action=getGameFanPage',
data:    req_data,
dataType:'html',
success:function (fan_art_html,textStatus,jqXHR)
{
if (fan_art_html){
$mc('fan_art_container').innerHTML = fan_art_html;
}
}
});
}

// SS Homepage Module
function initHomepage(){
// only do this if the animation is available
if ($mc('ss_external_homepage') == null){
return false;
}

// request fan art template from sketch-star
jQuery.ajax({
url:'/sketch-star/ss-lib/ajax.php?action=getHomepageModule',
dataType:'html',
success:function (homepage_html,textStatus,jqXHR)
{
if (homepage_html){
$mc('ss_external_homepage').innerHTML = homepage_html;
}
}
});
}
addLoadEvent(initHomepage);


/*
 * Facebook stuffs
 */

function sendPost(trigger,data)
{
return null;
}

function fb_login(ingame){
FB.login(function(response){
if (response.authResponse){
if (response.status == "connected"){
// user is logged in and granted some permissions. Perms is a comma separated list of granted permissions
if(ingame == false || ingame == 'false'){
// call flash function to say php is handling the request
notifyFlash(response.authResponse.accessToken);
// redirect user to success page and set cookie to redirect back to
cookie_create('fblogin_redirect_location',document.URL,1);
window.location = '/players/en/facebook-success.php?fb_token=' + response.authResponse.accessToken;

}else{
// send the token to flash - it's an ingame login and we dont want to refresh
notifyFlash(response.authResponse.accessToken);
}

// logged in to facebook and granted permissions
}else{
// user is logged in to facebook,but did not grant any permissions
}
}else{
// user is not logged in to facebook
}
},{
scope:'email,user_birthday,offline_access,publish_actions'
});

refreshToolbar();
}

function notifyFlash(token){
var flashHandle = null;

if (typeof(jQuery('.loginBox embed,.loginBox object')[0]) != 'undefined' && typeof(jQuery('.loginBox embed,.loginBox object')[0].notifyFacebookConnected) != 'undefined'){
flashHandle = jQuery('.loginBox embed,.loginBox object')[0];
}else if(typeof(jQuery('#leagueInfo embed,#leagueInfo object')[0]) != 'undefined' && typeof(jQuery('#leagueInfo embed,#leagueInfo object')[0].notifyFacebookConnected) != 'undefined'){
flashHandle = jQuery('#leagueInfo embed,#leagueInfo object')[0];
}else if (typeof(jQuery('#flashCommsWrapper object,#flashCommsWrapper embed')[0]) != 'undefined' && typeof(jQuery('#flashCommsWrapper object,#flashCommsWrapper embed')[0].notifyFacebookConnected) != 'undefined'){
flashHandle = jQuery('#flashCommsWrapper object,#flashCommsWrapper embed')[0];
}

if(flashHandle != null){
flashHandle.notifyFacebookConnected(token);
}
}

function shareExpander(){
if (shareVisible == true){
document.getElementById('game-controls').style.display = 'block';
document.getElementById('game-description').style.display = 'block';
document.getElementById('share-expandable').style.display = 'none';
document.getElementById('share-button').className = '';
shareVisible = false;
hasHidden = true;
//statTracker('/share-box/views/closed/');
}else{
document.getElementById('game-controls').style.display = 'none';
document.getElementById('game-description').style.display = 'none';
document.getElementById('share-expandable').style.display = 'block';
document.getElementById('share-button').className = 'active';
shareVisible = true;
//statTracker('/share-box/views/opened/');

if (hasHidden == false){
clipEmail.setText(location.href);
clipEmail.glue('copy-button-email');
clipIM.setText(location.href);
clipIM.glue('copy-button-im');
}
}
return false;
}


function refreshToolbar (){
if (typeof IsToolbarInstalled == 'function'){
if (IsToolbarInstalled('CT3067892')){
var gamebar = new TPI.Toolbar('CT3067892');
gamebar.Refresh();
}
}
}

jQuery(document).ready(function(){

function copyButton(buttonId){
jQuery('#'+buttonId).html('Copied').css({
'background-color':'#B2E57F',
'color':'#006600',
'border-color':'#006600'
});

jQuery('#'+buttonId).delay(2000).animate({
backgroundColor:'#FF7C00',
color:'#FF7C00'
},500,function(){
jQuery('#'+buttonId).html('Copy');
jQuery('#'+buttonId).css({
'border-color':'#000000'
});

});

jQuery('#'+buttonId).animate({
color:'#FFFFFF'
},500);
}

jQuery('#webmaster-button').click(function(){

expandable_open = jQuery('.expandables').is(':visible');
webmaster_open = jQuery('.webmaster-expandable').is(':visible');

jQuery('.expandables').hide();
jQuery('#game-controls').hide();
jQuery('#game-description').hide();

if (webmaster_open){
jQuery('#game-controls').show();
jQuery('#game-description').show();
clipEmbed.destroy();
clipIcon.destroy();
}else{
jQuery('.webmaster-expandable').show();

ZeroClipboard.setMoviePath('/swfcontent/zeroClipboard.swf');

var clipEmbed = new ZeroClipboard.Client();
var clipIcon = new ZeroClipboard.Client();

var embed = jQuery('#EmbedCode').text();
var icon = jQuery('#IconCode').text();

clipEmbed.setText(embed);
clipEmbed.addEventListener('mouseUp',function(client){
jQuery('#EmbedCode').select();
copyButton('copy-button-embed');

});
clipEmbed.glue('copy-button-embed');

clipIcon.setText(icon);
clipIcon.addEventListener('mouseUp',function(client){
jQuery('#IconCode').select();
copyButton('copy-button-icon');
});

clipIcon.glue('copy-button-icon');
}

});

jQuery('#share-button').click(function(){

expandable_open = jQuery('.expandables').is(':visible');
share_open = jQuery('#share-expandable').is(':visible');

jQuery('.expandables').hide();
jQuery('#game-controls').hide();
jQuery('#game-description').hide();

if (share_open){
jQuery('#game-controls').show();
jQuery('#game-description').show();
clipEmail.destroy();
clipIM.destroy();
}else{
jQuery('#share-expandable').show();

ZeroClipboard.setMoviePath('/swfcontent/zeroClipboard.swf');

var clipEmail = new ZeroClipboard.Client();
var clipIM = new ZeroClipboard.Client();

clipEmail.setText(location.href);
clipEmail.addEventListener('mouseUp',function(client){
jQuery('#copy-email').select();
copyButton('copy-button-email');
});
clipEmail.glue('copy-button-email');

clipIM.setText(location.href);
clipIM.addEventListener('mouseUp',function(client){
jQuery('#copy-im').select();
copyButton('copy-button-im');
});
clipIM.glue('copy-button-im');
}

});
//jQuery('#share-button').click(function(){
//jQuery('.expandables').hide();
//if (share_visible == true){
//jQuery('#game-controls').show();
//jQuery('#game-description').show();
//share_visible = false;
//}else{
//jQuery('#game-controls').hide();
//jQuery('#game-description').hide();
//jQuery('#share-expandable').show();
//share_visible = true;
//}
//webmaster_visible = false;
//});
//
//ZeroClipboard.setMoviePath('/swfcontent/zeroClipboard.swf');
//var copyEmbed = new ZeroClipboard.Client();
//copyEmbed.setHandCursor(true);
//copyEmbed.addEventListener('onMouseUp',function (){
//alert('Copied to clipboard');
//});
//copyEmbed.glue('#CopyEmbed');
//
//jQuery('#EmbedCode').focus(function(){
//this.select();
//});
//jQuery('#IconCode').focus(function(){
//this.select();
//});
});


var showcase_display = true;
var showcase_cookie = 'showcase_display';

function showcase_viewer (){

statTracker ('/advertising/js_showcase/view/');
setTimeout ('showcase_display_button()',2500);

}


function showcase_display_button (){

if (jQuery('#showcase_container object,#showcase_container embed').length <= 0){
jQuery('#showcase_container').remove ();
return;
}

showcase_display = cookie_read (showcase_cookie);

showcase_close_button = jQuery ('<span id="showcase_close">X</span>');
showcase_close_button.click (function(){

statTracker ('/advertising/js_showcase/close/' + cookie_read('ipLocation') + '/');

if (mcto.showcaseTrackCloseUrl != undefined){
adTracker (mcto.showcaseTrackCloseUrl);
}

cookie_create_time (showcase_cookie,1,4 * 60);
showcase_create_open_button ();

jQuery ('#showcase_container').animate ({
height:0
},
200,
function (){
jQuery('#showcase_container object,#showcase_container embed,#showcase_container div').remove();
});

jQuery (this).remove ();

});

jQuery ('#showcase_container').append (showcase_close_button);

}


function showcase_create_open_button (){

showcase_open_button = jQuery ('<div id="showcase_open"><a href=""><div id="showcase_open_arrow"></div>Show Ad</a></div>');
showcase_open_button.find ('a').click (function(){

statTracker ('/advertising/js_showcase/open/' + cookie_read('ipLocation') + '/');
cookie_erase (showcase_cookie);
window.location.reload ();
return false;

});
jQuery ('#showcase_container').after (showcase_open_button);

}


function plusOneCallback(response){
if(response.state == 'on'){
jQuery.ajax({
type:'POST',
url:'/php/services/google/award/add.php'
});
}else{
jQuery.ajax({
type:'POST',
url:'/php/services/google/award/remove.php'
});
}
}

// back-compat! DO NOT REMOVE! (ask Kieran first)
function attachTracking()
{

}

//hack to avoid running problematic jQuery stuff for gamebar in webgame iframes - breaks IE
if (this.location.href.indexOf('webgame.php') == -1){
//check if the toolbar needs to be refreshed following a login
jQuery(document).ready(function(){
// check if a refresh toolbar cookie has been set
if (cookie_read('refresh_toolbar') == '1' || cookie_read('refresh_toolbar') == 1){
// remove cookie so toolbar will not be refreshed
cookie_erase('refresh_toolbar');
// create a new one with a new value,expires in 1 day
var d = new Date();
d.setTime(d.getTime() + 86400);
document.cookie = "refresh_toolbar=0;expires=" + d.toGMTString() + ";path=/;domain=." + document.domain;
// if possible  refresh the toolbar
if (typeof RefreshToolbarByCTID == 'function'){
// refresh miniclip toolbar
RefreshToolbarByCTID('CT3067892');
}
}
});
}


jQuery(document).ready(function($){

// url
var url     = '/php/services/user/favourites.php'

$("#fav-toggle").click(function(){

// game id
var parent  = $(this).parent();
var game_id = $(this).data("id");
var state   = parent.hasClass("selected");
var action  = state ? 'remove' :'add';
var nonce   = $(this).data("token");

var toolbar     = new TPI.Toolbar("CT3067892");
var ret         = toolbar.IsVisible();

platform = window.navigator.platform;
if (platform != 'MacIntel' && platform != 'MacPPC'){
var gamebar_link = 'http://ie.conduit-download.com/92/306/CT3067892/Downloads/CT3067892_miniclip.exe';
}else{
var gamebar_link = 'http://miniclip.ourtoolbar.com/exe';
}

var msg_html    = $('<div id="Gamebar_message" class="favorite_message" style="clear:both">You need to be logged in to the Miniclip Gamebar to store your favourite games! Get it <a href="'+gamebar_link+'" class="click_area" style="font-weight:bold;">here</a></div>');

//msg_html.hide();

// is it available
if(!ret.returnValue || !game_id){
if ($(".favorite_message").length > 0){

}else{
$("#game-info").prepend(msg_html);

}

return false;
}else{

$.ajax({
type:"POST",
url:url,
data:{
"game_id" :game_id,
"action" :action,
"nonce" :nonce
},
success:function(data){
if (data.status == true){

if (action == 'add'){
parent.addClass("selected");
$("#fav-toggle").text("Remove from Favorites");
}else{
parent.removeClass("selected");
$("#fav-toggle").text("Add to Favorites");
}

// if possible  refresh the toolbar
if (typeof RefreshToolbarByCTID == 'function'){
// refresh miniclip toolbar
RefreshToolbarByCTID('CT3067892');
}

}
},
dataType:"json"
});
}

return false;
});

/*
// easter egg
jQuery(document).keyup(function(event){
if (event.which == 27){
// if boss button doesn't exist then drop it in
if (jQuery('#boss_button').length == 0){
bossDiv = jQuery ('<div id="boss_button" style="position:fixed;top:0;left:0;width:100%;height:100%;background:url(/images/boss-button.png) top left no-repeat #eee;display:none;">&nbsp;</div>');
jQuery('body').append (bossDiv);
messageDiv = jQuery ('<div id="boss_message" style="border:2px solid #fff;z-index:999;color:#fff;position:fixed;top:100px;left:50%;width:400px;margin-left:-216px;background:#09f;font-size:16px;padding:15px;">Press the \'Escape Key\' to return to Miniclip</div>');
jQuery('body').append (messageDiv);
}

if (jQuery('#wrapper').css('visibility') == 'hidden'){
jQuery('#wrapper,embed,object,iframe').css('visibility','visible');
statTracker ('/easter/boss-button/turn-off/');
}else{
jQuery('#wrapper,embed,object,iframe').css('visibility','hidden');
jQuery('#boss_message').show().delay(2000).fadeOut();
statTracker ('/easter/boss-button/turn-on/');
}

// toggle boss button - defaults to hidden so can always be toggled
jQuery('#boss_button').fadeToggle ();
// toggle everything else
jQuery('#footer').toggle ();
jQuery('#extraFooter').toggle ();

// delete gamebar stuff - not ideal,but can be removed in the future
jQuery('#conduit_toolbar_promostrip').remove ();
}
})*/
});


jQuery(document).ready(function(){
jQuery('.query').focus(function(){
jQuery(this).val('');
});
//jQuery('.query').blur(function(){
//var queryString = jQuery(this).val();
//if (queryString == ''){
//jQuery(this).val('Search');
//}
//});
});/* [INCLUDE FILE] AC_RunActiveContent */
//v1.7
// Flash Player Version Detection
// Detect Client Browser type
// Copyright 2005-2007 Adobe Systems Incorporated.  All rights reserved.
var isIE  = (navigator.appVersion.indexOf("MSIE") != -1) ? true :false;
var isWin = (navigator.appVersion.toLowerCase().indexOf("win") != -1) ? true :false;
var isOpera = (navigator.userAgent.indexOf("Opera") != -1) ? true :false;

function ControlVersion()
{
var version;
var axo;
var e;

// NOTE :new ActiveXObject(strFoo) throws an exception if strFoo isn't in the registry

try{
// version will be set for 7.X or greater players
axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");
version = axo.GetVariable("$version");
}catch (e){
}

if (!version)
{
try{
// version will be set for 6.X players only
axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");

// installed player is some revision of 6.0
// GetVariable("$version") crashes for versions 6.0.22 through 6.0.29,
// so we have to be careful. 

// default to the first public version
version = "WIN 6,0,21,0";

// throws if AllowScripAccess does not exist (introduced in 6.0r47)
axo.AllowScriptAccess = "always";

// safe to call for 6.0r47 or greater
version = axo.GetVariable("$version");

}catch (e){
}
}

if (!version)
{
try{
// version will be set for 4.X or 5.X player
axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.3");
version = axo.GetVariable("$version");
}catch (e){
}
}

if (!version)
{
try{
// version will be set for 3.X player
axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.3");
version = "WIN 3,0,18,0";
}catch (e){
}
}

if (!version)
{
try{
// version will be set for 2.X player
axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
version = "WIN 2,0,0,11";
}catch (e){
version = -1;
}
}

return version;
}

// JavaScript helper required to detect Flash Player PlugIn version information
function GetSwfVer(){
// NS/Opera version >= 3 check for Flash plugin in plugin array
var flashVer = -1;

if (navigator.plugins != null && navigator.plugins.length > 0){
if (navigator.plugins["Shockwave Flash 2.0"] || navigator.plugins["Shockwave Flash"]){
var swVer2 = navigator.plugins["Shockwave Flash 2.0"] ? " 2.0" :"";
var flashDescription = navigator.plugins["Shockwave Flash" + swVer2].description;
var descArray = flashDescription.split(" ");
var tempArrayMajor = descArray[2].split(".");
var versionMajor = tempArrayMajor[0];
var versionMinor = tempArrayMajor[1];
var versionRevision = descArray[3];
if (versionRevision == ""){
versionRevision = descArray[4];
}
if (versionRevision[0] == "d"){
versionRevision = versionRevision.substring(1);
}else if (versionRevision[0] == "r"){
versionRevision = versionRevision.substring(1);
if (versionRevision.indexOf("d") > 0){
versionRevision = versionRevision.substring(0,versionRevision.indexOf("d"));
}
}
var flashVer = versionMajor + "." + versionMinor + "." + versionRevision;
}
}
// MSN/WebTV 2.6 supports Flash 4
else if (navigator.userAgent.toLowerCase().indexOf("webtv/2.6") != -1) flashVer = 4;
// WebTV 2.5 supports Flash 3
else if (navigator.userAgent.toLowerCase().indexOf("webtv/2.5") != -1) flashVer = 3;
// older WebTV supports Flash 2
else if (navigator.userAgent.toLowerCase().indexOf("webtv") != -1) flashVer = 2;
else if (isIE && isWin && !isOpera){
flashVer = ControlVersion();
}
return flashVer;
}

// When called with reqMajorVer,reqMinorVer,reqRevision returns true if that version or greater is available
function DetectFlashVer(reqMajorVer,reqMinorVer,reqRevision)
{
versionStr = GetSwfVer();
if (versionStr == -1){
return false;
}else if (versionStr != 0){
if(isIE && isWin && !isOpera){
// Given "WIN 2,0,0,11"
tempArray         = versionStr.split(" ");// ["WIN","2,0,0,11"]
tempString        = tempArray[1];// "2,0,0,11"
versionArray      = tempString.split(",");// ['2','0','0','11']
}else{
versionArray      = versionStr.split(".");
}
var versionMajor      = versionArray[0];
var versionMinor      = versionArray[1];
var versionRevision   = versionArray[2];

        // is the major.revision >= requested major.revision AND the minor version >= requested minor
if (versionMajor > parseFloat(reqMajorVer)){
return true;
}else if (versionMajor == parseFloat(reqMajorVer)){
if (versionMinor > parseFloat(reqMinorVer))
return true;
else if (versionMinor == parseFloat(reqMinorVer)){
if (versionRevision >= parseFloat(reqRevision))
return true;
}
}
return false;
}
}

function AC_AddExtension(src,ext)
{
  if (src.indexOf('?') != -1)
    return src.replace(/\?/,ext+'?');
  else
    return src + ext;
}

function AC_Generateobj(objAttrs,params,embedAttrs) 
{
  var str = '';
  if (isIE && isWin && !isOpera)
 {
    str += '<object ';
    for (var i in objAttrs)
   {
      str += i + '="' + objAttrs[i] + '" ';
   }
    str += '>';
    for (var i in params)
   {
      str += '<param name="' + i + '" value="' + params[i] + '" /> ';
   }
    str += '</object>';
 }
  else
 {
    str += '<embed ';
    for (var i in embedAttrs)
   {
      str += i + '="' + embedAttrs[i] + '" ';
   }
    str += '> </embed>';
 }

  return str;
}

function AC_FL_RunContent(){
  var ret = 
    AC_GetArgs
    ( arguments,".swf","movie","clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"
     ,"application/x-shockwave-flash"
   );
  document.write(AC_Generateobj(ret.objAttrs,ret.params,ret.embedAttrs));
}

function AC_FL_GetContent(){
  var ret = 
    AC_GetArgs
    ( arguments,".swf","movie","clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"
     ,"application/x-shockwave-flash"
   );
  return AC_Generateobj(ret.objAttrs,ret.params,ret.embedAttrs);
}

function AC_SW_RunContent(){
  var ret = 
    AC_GetArgs
    ( arguments,".dcr","src","clsid:166B1BCA-3F9C-11CF-8075-444553540000"
     ,null
   );
  document.write(AC_Generateobj(ret.objAttrs,ret.params,ret.embedAttrs));
}

function AC_GetArgs(args,ext,srcParamName,classid,mimeType){
  var ret = new Object();
  ret.embedAttrs = new Object();
  ret.params = new Object();
  ret.objAttrs = new Object();
  for (var i=0;i < args.length;i=i+2){
    var currArg = args[i].toLowerCase();   

    switch (currArg){
      case "classid":
        break;
      case "pluginspage":
        ret.embedAttrs[args[i]] = args[i+1];
        break;
      case "src":
      case "movie":
        args[i+1] = AC_AddExtension(args[i+1],ext);
        ret.embedAttrs["src"] = args[i+1];
        ret.params[srcParamName] = args[i+1];
        break;
      case "onafterupdate":
      case "onbeforeupdate":
      case "onblur":
      case "oncellchange":
      case "onclick":
      case "ondblclick":
      case "ondrag":
      case "ondragend":
      case "ondragenter":
      case "ondragleave":
      case "ondragover":
      case "ondrop":
      case "onfinish":
      case "onfocus":
      case "onhelp":
      case "onmousedown":
      case "onmouseup":
      case "onmouseover":
      case "onmousemove":
      case "onmouseout":
      case "onkeypress":
      case "onkeydown":
      case "onkeyup":
      case "onload":
      case "onlosecapture":
      case "onpropertychange":
      case "onreadystatechange":
      case "onrowsdelete":
      case "onrowenter":
      case "onrowexit":
      case "onrowsinserted":
      case "onstart":
      case "onscroll":
      case "onbeforeeditfocus":
      case "onactivate":
      case "onbeforedeactivate":
      case "ondeactivate":
      case "codebase":
      case "id":
        ret.objAttrs[args[i]] = args[i+1];
        break;
      case "width":
      case "height":
      case "align":
      case "vspace":
      case "hspace":
      case "class":
      case "title":
      case "accesskey":
      case "name":
      case "menu":
      case "tabindex":
        ret.embedAttrs[args[i]] = ret.objAttrs[args[i]] = args[i+1];
        break;
  case "type":
  case "swContextMenu":
    ret.objAttrs[args[i]] = args[i+1];
    ret.embedAttrs[args[i]] = ret.objAttrs[args[i]] = args[i+1];
    break;
      default:
        ret.embedAttrs[args[i]] = ret.params[args[i]] = args[i+1];
   }
 }
  ret.objAttrs["classid"] = classid;
  if (mimeType) ret.embedAttrs["type"] = mimeType;
  return ret;
}/* [INCLUDE FILE] AC_ActiveX */
//v1.1
//Copyright 2006 Adobe Systems,Inc. All rights reserved.
function AC_AX_RunContent(){
  var ret = AC_AX_GetArgs(arguments);
  AC_Generateobj(ret.objAttrs,ret.params,ret.embedAttrs);
}

function AC_AX_GetArgs(args){
  var ret = new Object();
  ret.embedAttrs = new Object();
  ret.params = new Object();
  ret.objAttrs = new Object();
  for (var i=0;i < args.length;i=i+2){
    var currArg = args[i].toLowerCase();   

    switch (currArg){
      case "pluginspage":
      case "type":
      case "src":
        ret.embedAttrs[args[i]] = args[i+1];
        break;
      case "data":
      case "codebase":
      case "classid":
      case "id":
      case "onafterupdate":
      case "onbeforeupdate":
      case "onblur":
      case "oncellchange":
      case "onclick":
      case "ondblClick":
      case "ondrag":
      case "ondragend":
      case "ondragenter":
      case "ondragleave":
      case "ondragover":
      case "ondrop":
      case "onfinish":
      case "onfocus":
      case "onhelp":
      case "onmousedown":
      case "onmouseup":
      case "onmouseover":
      case "onmousemove":
      case "onmouseout":
      case "onkeypress":
      case "onkeydown":
      case "onkeyup":
      case "onload":
      case "onlosecapture":
      case "onpropertychange":
      case "onreadystatechange":
      case "onrowsdelete":
      case "onrowenter":
      case "onrowexit":
      case "onrowsinserted":
      case "onstart":
      case "onscroll":
      case "onbeforeeditfocus":
      case "onactivate":
      case "onbeforedeactivate":
      case "ondeactivate":
        ret.objAttrs[args[i]] = args[i+1];
        break;
      case "width":
      case "height":
      case "align":
      case "vspace":
      case "hspace":
      case "class":
      case "title":
      case "accesskey":
      case "name":
      case "tabindex":
        ret.embedAttrs[args[i]] = ret.objAttrs[args[i]] = args[i+1];
        break;
      default:
        ret.embedAttrs[args[i]] = ret.params[args[i]] = args[i+1];
   }
 }
  return ret;
}


function AC_JA_GetArgs(args){
  var ret = new Object();
  ret.embedAttrs = new Object();
  ret.params = new Object();
  ret.objAttrs = new Object();
  for (var i=0;i < args.length;i=i+2){
    var currArg = args[i].toLowerCase();   

    switch (currArg){
  case "archive":
  case "code":
      case "pluginspage":
      case "type":
      case "src":
      case "data":
      case "codebase":
      case "classid":
      case "id":
      case "onafterupdate":
      case "onbeforeupdate":
      case "onblur":
      case "oncellchange":
      case "onclick":
      case "ondblClick":
      case "ondrag":
      case "ondragend":
      case "ondragenter":
      case "ondragleave":
      case "ondragover":
      case "ondrop":
      case "onfinish":
      case "onfocus":
      case "onhelp":
      case "onmousedown":
      case "onmouseup":
      case "onmouseover":
      case "onmousemove":
      case "onmouseout":
      case "onkeypress":
      case "onkeydown":
      case "onkeyup":
      case "onload":
      case "onlosecapture":
      case "onpropertychange":
      case "onreadystatechange":
      case "onrowsdelete":
      case "onrowenter":
      case "onrowexit":
      case "onrowsinserted":
      case "onstart":
      case "onscroll":
      case "onbeforeeditfocus":
      case "onactivate":
      case "onbeforedeactivate":
      case "ondeactivate":
        ret.objAttrs[args[i]] = args[i+1];
        break;
      case "width":
      case "height":
      case "align":
      case "vspace":
      case "hspace":
      case "class":
      case "title":
      case "accesskey":
      case "name":
      case "tabindex":
        ret.embedAttrs[args[i]] = ret.objAttrs[args[i]] = args[i+1];
        break;
      default:
        ret.embedAttrs[args[i]] = ret.params[args[i]] = args[i+1];
   }
 }
  return ret;
}

function AC_GenerateApplet(objAttrs,params,embedAttrs) 
{

  var str = '<applet ';
  for (var i in objAttrs)
    str += i + '="' + objAttrs[i] + '" ';
  str += '>';
  for (var i in params)
    str += '<param name="' + i + '" value="' + params[i] + '" /> ';
  str += '</applet>';
//alert(str);
  document.write(str);
}

function AC_JA_RunContent(){
  var ret = 
    AC_JA_GetArgs
    ( arguments,".swf","movie","clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"
     ,"application/x-shockwave-flash"
   );
  AC_GenerateApplet(ret.objAttrs,ret.params,ret.embedAttrs);
}/* [INCLUDE FILE] tooltips */
//Edit the information between the quotes below with the path to your image.
var imagePath = "images/tooltiparrow.gif";

function addwarning(){
var thealinks = document.getElementsByTagName("a");
if (!thealinks){return;}

for(var x=0;x!=thealinks.length;x++){

if(thealinks[x].className.indexOf("addToolTip") != -1){
thealinks[x].setAttribute("tooltiptext",thealinks[x].title);
thealinks[x].removeAttribute("title");
thealinks[x].onmouseover=function gomouseover(){ddrivetip(this.getAttribute("tooltiptext"))};
thealinks[x].onmouseout=function gomouseout(){hideddrivetip();};
}
}
}

var offsetfromcursorX=15;//Customize x offset of tooltip
var offsetfromcursorY=15;//Customize y offset of tooltip

var offsetdivfrompointerX=0;//Customize x offset of tooltip DIV relative to pointer image
var offsetdivfrompointerY=0;//Customize y offset of tooltip DIV relative to pointer image. Tip:Set it to (height_of_pointer_image-1).

document.write('<div id="theToolTip"></div>');//write out tooltip DIV
document.write('<img id="ToolTipPointer" src="/images/x.gif" style="display:none;"/>');//write out pointer image

var ie=document.all;
var ns6=document.getElementById && !document.all;
var enabletip=false;
if (ie||ns6){
var tipobj=document.all? document.all["theToolTip"] :document.getElementById? document.getElementById("theToolTip") :"";
}

var pointerobj=document.all? document.all["ToolTipPointer"] :document.getElementById? document.getElementById("ToolTipPointer") :"";

function ietruebody(){
return (document.compatMode && document.compatMode!="BackCompat")? document.documentElement :document.body;
}

function ddrivetip(thetext,thewidth,thecolor){
if (ns6||ie){
if (typeof thewidth!=="undefined"){tipobj.style.width=thewidth+"px";}
if (typeof thecolor!=="undefined" && thecolor!==""){tipobj.style.backgroundColor=thecolor;}
tipobj.innerHTML=thetext;
enabletip=true;
return false;
}
}

function positiontip(e){
if (enabletip){
var nondefaultpos=false;
var curX=(ns6)?e.pageX :event.clientX+ietruebody().scrollLeft;
var curY=(ns6)?e.pageY :event.clientY+ietruebody().scrollTop;
//Find out how close the mouse is to the corner of the window
var winwidth=ie&&!window.opera? ietruebody().clientWidth :window.innerWidth-20;
var winheight=ie&&!window.opera? ietruebody().clientHeight :window.innerHeight-20;

var rightedge=ie&&!window.opera? winwidth-event.clientX-offsetfromcursorX :winwidth-e.clientX-offsetfromcursorX;
var bottomedge=ie&&!window.opera? winheight-event.clientY-offsetfromcursorY :winheight-e.clientY-offsetfromcursorY;

var leftedge=(offsetfromcursorX<0)? offsetfromcursorX*(-1) :-1000;

//if the horizontal distance isn't enough to accomodate the width of the context menu
if (rightedge<tipobj.offsetWidth){
//move the horizontal position of the menu to the left by it's width
tipobj.style.left=curX-tipobj.offsetWidth+"px";
nondefaultpos=true;
}
else if (curX<leftedge)
{tipobj.style.left="5px";}
else{
//position the horizontal position of the menu where the mouse is positioned
tipobj.style.left=curX+offsetfromcursorX-offsetdivfrompointerX+"px";
pointerobj.style.left=curX+offsetfromcursorX+"px";
}

//same concept with the vertical position
if (bottomedge<tipobj.offsetHeight){
tipobj.style.top=curY-tipobj.offsetHeight-offsetfromcursorY+"px";
nondefaultpos=true;
}
else{
tipobj.style.top=curY+offsetfromcursorY+offsetdivfrompointerY+"px";
pointerobj.style.top=curY+offsetfromcursorY+"px";
}
tipobj.style.visibility="visible";
if (!nondefaultpos){pointerobj.style.visibility="visible";}
else{
pointerobj.style.visibility="hidden";}
}
}

function hideddrivetip(){
if (ns6||ie){
enabletip=false;
tipobj.style.visibility="hidden";
pointerobj.style.visibility="hidden";
tipobj.style.left="-1000px";
tipobj.style.backgroundColor='';
tipobj.style.width='';
}
}

document.onmousemove=positiontip;
addwarning();/* [INCLUDE FILE] quicksearch */
jQuery.noConflict();

var Sitesearch = function(input,hook)
{

this.results = [];
this.input = null;
this.hook = null;
this.overlay = null;
this.timeout = null;
this.prev_q = '';
this.search_timeout = 100;
this.min_chars = 2;
this.cache ={};

this.props ={
'classes':{
'overlay':'sr-overlay',
'row':'sr-row',
'info_wrapper':'sr-info-wrapper',
'title':'sr-title',
'descr':'sr-desc',
'more_button':'sr-more-button'
},
'ids':{
'row_prefix':'sr-row-'
}
};


// get the input
this.input = jQuery(input);

// fail if input not found
if (this.input.length === 0){
throw('Input "' + input + '" not found!');
}

// get the hook
this.hook = jQuery(hook);

// fail if hook not found
if (this.hook.length === 0){
throw('Input "' + hook + '" not found!');
}

// attach onfocus and onblur event handlers
this.input.focus(jQuery.proxy(function(event){
if (this.input.val() && !this.overlayExists()){
this.search();
}
},this));

var _this = this;
this.input.blur(jQuery.proxy(function(){
setTimeout(function(){
_this.destroyOverlay();
},500);
},this));

this.input.keydown(jQuery.proxy(function(event){
this.handleOnKeyDown(event);
},this));

this.input.keyup(jQuery.proxy(function(event){
this.handleOnKeyUp(event);
},this));


/**
 *
 */
this.overlayExists = function()
{
return (this.overlay !== null);
};


/**
 *
 */
this.showOverlay = function()
{
if (this.overlayExists()){
this.clearOverlay();
return;
}

this.overlay = jQuery('<div></div>').addClass(this.props.classes.overlay);
jQuery('body').first().append(this.overlay);
this.overlay.css('display','block');

var offset = this.hook.offset();
this.overlay.css('top',offset.top + this.hook.outerHeight());
this.overlay.css('left',offset.left);
};


/**
 *
 */
this.destroyOverlay = function()
{
if (this.overlayExists()){
this.overlay.remove();
this.overlay = null;
}
};


/**
 *
 */
this.clearOverlay = function()
{
if (this.overlayExists()){
this.overlay.html('');
}
};


/**
 *
 */
this.populateOverlay = function()
{
this.showOverlay();
this.clearOverlay();

jQuery(this.results).each(jQuery.proxy(function(i,result){
var a = jQuery('<a></a>');

if (result.is_more_button !== true){
// create the overlay row

if(result.entry_type == 'hub'){
a.attr('href','/hub/' + result.hub_url).addClass(this.props.classes.row).attr('id',this.props.ids.row_prefix + result._id);
}else if(result.entry_type == 'category'){

// construct filename from the category name
var filename = result.filename;

filename = filename.toLowerCase();
filename = filename.replace(/&amp;/g,'and');
filename = filename.replace(/ - /g,"-");
filename = filename.replace(/ /g,"-");
filename = filename.replace(/&/g,"and");
filename = filename.replace(/([^0-9|a-z|_|-])/g,'');

var category_url = 'http://' + document.domain + '/games/en/' + filename + '.php';

a.attr('href',category_url).addClass(this.props.classes.row).attr('id',this.props.ids.row_prefix + result._id);
}else{
a.attr('href','/games/' + result.game_url_key).addClass(this.props.classes.row).attr('id',this.props.ids.row_prefix + result._id);
}

if (result.highlighted === true){
a.addClass('highlighted');
}

a.attr('qs_phrase',this.input.val());
a.attr('qs_key',result.game_url_key);

a.click(function(){
statTracker('/elastic-search/search/' + jQuery(this).attr('qs_phrase'));
statTracker('/elastic-search/play/' + jQuery(this).attr('qs_key'));
});

var img = new Image();
if(result.icon_filename != '' && result.icon_filename != null){
img.src = 'http://e.miniclip.com/images/icons/' + result.icon_filename + 'smallicon.jpg';
}else{
img.src = '/i/creatives/icons/defaultsmallicon.jpg';
}

a.append(img);

var info_wrapper = jQuery('<div></div>').addClass(this.props.classes.info_wrapper);
a.append(info_wrapper);

var title = jQuery('<div></div>').addClass(this.props.classes.title).html(result.name);
info_wrapper.append(title);

var d = result.short_description ? result.short_description :result.description;
var desc = jQuery('<div></div>').addClass(this.props.classes.descr).html(d);
info_wrapper.append(desc);

}else{
// create the more button
a.attr('href','#').html('more').addClass(this.props.classes.more_button).attr('id',this.props.ids.row_prefix + 'more');
}

a.bind('mouseover',jQuery.proxy(function(event){
this.removeAllHighlights();
this.results[i].highlighted = true;
this.updateHighlights(result);
},this));

a.bind('mousedown',jQuery.proxy(function(event){
if (result.is_more_button){
this.input.closest('form').submit();
return false;
}
},this));

// append the results row to the list
this.overlay.append(a);
},this));
};


/**
 *
 */
this.showNoResultsOverlay = function()
{
/*
this.showOverlay();
this.clearOverlay();

var div = jQuery('<div></div>').addClass('no_results').html('Nothing found');
this.overlay.append(div);
*/
};


/**
 *
 */
this.updateHighlights = function(row)
{
if (!this.overlayExists()){
return;
}

if (!row){
this.removeAllHighlights();
return;
}

var id = this.props.ids.row_prefix + row._id;

this.overlay.find('a').each(function(index,a){
a = jQuery(a);
if (a.attr('id') == id){
a.addClass('highlighted');
}else{
a.removeClass('highlighted');
}
});
};


/**
 *
 */
this.getHighlightedItem = function()
{
for (var i = 0;i < this.results.length;i++){
if (this.results[i].highlighted === true){
return this.results[i];
}
}

return null;
};


/**
 *
 */
this.removeAllHighlights = function()
{
for (var i = 0;i < this.results.length;i++){
this.results[i].highlighted = false;
}

this.overlay.find('a').each(function(index,a){
jQuery(a).removeClass('highlighted');
});
};


/**
 *
 */
this.handleOnKeyDown = function(event)
{
if (event.keyCode == 13){
return this.handleReturn(event);
}
};


/**
 *
 */
this.handleOnKeyUp = function(event)
{
// compare current value against the previous
if (this.input.val() !== this.prev_q){
// save current value as the last value
this.prev_q = this.input.val();

// call the search function after [this.search_timeout]ms
clearTimeout(this.timeout);

var _this = this;
this.timeout = setTimeout(function(){
_this.search();
},this.search_timeout);

return;
}

// if the key pressed is UP
if (event.keyCode == 38){
return this.handleArrowUp(event);

// if the key pressed is ESC
}else if (event.keyCode == 27){
return this.destroyOverlay();

// if the key pressed is DOWN
}else if (event.keyCode == 40){
return this.handleArrowDown(event);

// if the key pressed is ENTER/RETURN
}
};


/**
 *
 */
this.handleArrowDown = function(event)
{
// if there are any results at all
if (this.results.length > 0){
var hlrow = null;

// loop through each result
if (this.results.length > 1){
var lastidx = this.results.length - 1;

for (var i = 0;i < this.results.length;i++){
if (this.results[i].highlighted === true){
if (i < lastidx){
// remove highlighting from the current row
this.results[i].highlighted = false;

// add highlighting to the previous row
this.results[i + 1].highlighted = true;

// store the row to highlight
hlrow = this.results[i + 1];
break;
}else{
return;
}
}
}
}

if (hlrow === null){
this.results[0].highlighted = true;
hlrow = this.results[0];
}

this.updateHighlights(hlrow);
}

return false;
};


/**
 *
 */
this.handleArrowUp = function(event)
{
// if there are any results at all
if (this.results.length > 0){
var hlrow = null;

// loop through each result
if (this.results.length > 1){
for (var i = 0;i < this.results.length;i++){
if (this.results[i].highlighted === true){
// remove highlighting from the current row
this.results[i].highlighted = false;

if (i > 0){
// add highlighting to the previous row
this.results[i - 1].highlighted = true;

// store the row to highlight
hlrow = this.results[i - 1];
}
break;
}
}
}

this.updateHighlights(hlrow);
}

return false;
};


/**
 *
 */
this.handleReturn = function(event)
{
var highlighted = this.getHighlightedItem();

jQuery(event.target.form).submit(function(event){
return true;
});

if (highlighted){
if (highlighted.is_more_button !== true){
jQuery(event.target.form).submit(function(event){
return false;
});
statTracker('/elastic-search/search/' + this.input.val());
statTracker('/elastic-search/play/' + highlighted.game_url_key);

if(highlighted.entry_type == 'hub'){
window.location.href = '/hub/' + highlighted.hub_url;
}else if(highlighted.entry_type == 'category'){

// construct filename from the category name
var filename = highlighted.filename;
filename = filename.toLowerCase();
filename = filename.replace(/&amp;/g,'and');
filename = filename.replace(/ - /g,"-");
filename = filename.replace(/ /g,"-");
filename = filename.replace(/&/g,"and");
filename = filename.replace(/([^0-9|a-z|_|-])/g,'');

var category_url = 'http://' + document.domain + '/games/en/' + filename + '.php';

window.location.href = category_url;
}else{
window.location.href = '/games/' + highlighted.game_url_key;
}

return false;
}
}

event.target.form.submit();
return false;
};


/**
 *
 */
this.search = function()
{
var text = this.input.val();

if (text.length < this.min_chars){
this.destroyOverlay();
return;
}

// use the cached version if such exists
if (this.cache[text] !== undefined){
if (this.cache[text] !== false){
this.results = this.cache[text];
this.populateOverlay();
}else{
this.showNoResultsOverlay();
}

return;
}


var url = '/qs/';
var data ={
'q':text
};
jQuery.ajax({
'url':url,
'data':data,
'dataType':'json',
'type':'POST',
'success':jQuery.proxy(function(data){
if (data.length){
this.results = [];

jQuery(data).each(jQuery.proxy(function(index,result){
result.highlighted = (index === 0);
this.results.push(result);
},this));
// add the "more" button
this.results.push({
'_id':'more',
'is_more_button':true,
'highlighted':false
});

this.cache[text] = this.results;

this.populateOverlay();

}else{
this.cache[text] = false;

// show "No results found" div
this.showNoResultsOverlay();
}
},this)
});
};

};/* [INCLUDE FILE] credits */
var credits = function()
{
    var window_handle,window_type =1;
    var game_height,game_id,actual_width,actual_height,override_width;

    /*
     *
     */
    var showModalWindow = function()
   {

   }

    /*
     *
     */

    var hideWindow = function(action,user_balance)
   {
        var container = jQuery("#gameContainerInner");

        // css
        var flash_obj = jQuery("#gameContainerSizer object");

        // Close the box
        if (typeof ulp == 'object'){
            //ulp.closeBox();
       }

        if (flash_obj.length > 0){
            // flash communication
            if (typeof flash_obj[0] != 'undefined' && typeof flash_obj[0].notifyTopupWindowClose != 'undefined'){
                flash_obj[0].notifyTopupWindowClose({"success" :action,"result" :user_balance});
           }

            // Is this IE?
            if (navigator.userAgent.indexOf('MSIE') != -1){
                flash_obj.css("text-indent","0");
           }else{
                jQuery("#gameContainerSizer object").css("visibility","visible");
           }

       }else{
            var shockwave_container = jQuery("#shockwaveGameContainer embed");
            if (shockwave_container.length > 0){
                shockwave_container.css("visibility","visible");
           }
       }
        
        jQuery("#payment-modal").remove();
   }

    var getGameId = function()
   {
        return game_id;
   }

    var getGameWidth = function ()
   {
        return actual_width;
   }

    var getGameHeight = function()
   {
        return actual_height;
   }

    var __init =  function(gid,aw,ah,ow)
   {
        game_id         = gid;
        actual_width    = aw;
        actual_height   = ah;

        // check to see if override width is defined
        // if not default it to actual_width
        if(ow){
            override_width  = ow;
       }else{
            override_width  = actual_width;
       }

        var next_img = 0;
        

        // Now images need to be preloaded.
        if (document.images && gid){

            var pre_images  = new Array();
            pre_images[0]   = "http://e.miniclip.com/images/credits/backgrounds/" + game_id + "_new.jpg";
            pre_images[1]   = "http://e.miniclip.com/images/credits/amount_button_downstate_1.png";
            pre_images[2]   = "http://e.miniclip.com/images/credits/amount_button_overstate_1.png";
            pre_images[3]   = "http://e.miniclip.com/images/credits/amount_button_upstate_1.png";
            pre_images[4]   = "http://e.miniclip.com/images/credits/avatar_overlay.png";
            pre_images[5]   = "http://e.miniclip.com/images/credits/barbershop_anim.gif";
            pre_images[6]   = "http://e.miniclip.com/images/credits/best_deal.png";
            pre_images[7]   = "http://e.miniclip.com/images/credits/close_button_downstate_1.png";
            pre_images[8]   = "http://e.miniclip.com/images/credits/close_button_overstate_1.png";
            pre_images[9]   = "http://e.miniclip.com/images/credits/close_button_upstate_1.png";
            pre_images[10]  = "http://e.miniclip.com/images/credits/continue_button_downstate.png";
            pre_images[11]  = "http://e.miniclip.com/images/credits/continue_button_overstate.png";
            pre_images[12]  = "http://e.miniclip.com/images/credits/continue_button_upstate.png";
            pre_images[13]  = "http://e.miniclip.com/images/credits/stripes.gif";


            var img = new Image();
            
            function preloadNextImage(position)
           {
                if (typeof pre_images[position] == 'undefined'){
                    return true;
               }else{
                    img.src = pre_images[position];
                    img.onload = function(){
                        position++;
                        preloadNextImage(position);
                   }
               }
           }

            preloadNextImage(0);
       }
   }


    var showGameOverlay = function()
   {
        var container = jQuery("#gameContainerInner");
        var el        = jQuery("#gameContainer");
        game_height = jQuery("#gameContainerSizer").css("height");

        // css   
        var flash_obj = jQuery("#gameContainerSizer object");

        if (flash_obj.length > 0){

            // flash communication
            if (typeof flash_obj[0] != 'undefined' && typeof flash_obj[0].notifyTopupWindowOpen != 'undefined'){
                flash_obj[0].notifyTopupWindowOpen();
           }

            // Is this IE?
            if (navigator.userAgent.indexOf('MSIE') != -1){
                flash_obj.css("text-indent","-9999px");
           }else{
               jQuery("#gameContainerSizer object").css("visibility","hidden");
           }

            // Hide the flash movie
            //flash_obj.css("text-indent","0px");
       }else{
            var shockwave_container = jQuery("#shockwaveGameContainer embed");
            if (shockwave_container.length > 0){
                shockwave_container.css("visibility","hidden");
           }
       }

        jQuery("#payment-modal").remove();

        // html
        var html = '<div style="height:'+actual_height+'px;position:absolute;width:'+override_width+'px;z-index:1;" id="payment-modal">';
        html    += '<iframe frameborder="0" src="/php/services/credits/topup.php?game_id=' + game_id + '&amp;w='+actual_width+'&h='+actual_height+'" id="iframe" style="width:'+(override_width + 1)+'px;border:0;height:'+actual_height+'px" >';
        html    += '</iframe></div>';

        el.prepend(jQuery(html));

       return window_handle;
   }

    /*
     *
     */
    return{
        /*
         *
         */
        ShowPurchaseOptions :function()
       {
            showGameOverlay();
       },

        ShowTopupWindow :function()
       {
            showGameOverlay();
       },

        HideTopupWindow :function(action,user_balance)
       {
            hideWindow(action,user_balance);
       },
        __init :function(game_id,width,height,override_width)
       {
            __init(game_id,width,height,override_width);
       },
        /*
         *
         */
        SetWindowType :function(type)
       {
            if (type != 1 || type != 2){}
       },

        GetGameId :function()
       {
            return getGameId();
       },
        GetGameWidth :function()
       {
            return getGameWidth();
       },
        GetGameHeight :function()
       {
            return getGameHeight();
       },           
        /*
         *
         */
        GetWindowType :function()
       {
            return window_type;
       }
   }
}();/* [INCLUDE FILE] facebook */
/*
 * Post to Users wall
 */
function fbWallPost(options,target){

 FB.ui(
  {
                    method:'feed',
                    message:options['message'],
                    display:'popup',
                    from:options['from'],
                    to:options['to'],
                    name:options['name'],
                    description:options['description'],
                    caption:options['caption'],
                    link:options['link'],
                    picture:options['picture'],
                    actions:{
                        'name' :options['action_name'],
                        'link' :options['action_link']
                   }
  },
   
   function(response){
     if (response && response.post_id){
       return true;
    }else{
       return false;
    }
  }
);
}


/*
 * Post Score to Users wall
 */
function fbAward(award){
sendEvent('achieve',award.award);
}


/*
 * Post Score to Users wall
 */
function fbScore(score,game_data){

var options = new Array();

options['message']      = '';
        options['from']         = '';
        options['to']           = '';
        options['action_name']  = 'Play';
        options['action_link']  = game_data.game_url;
options['name']         = game_data.name;
        options['caption']      = 'I just got a new highscore of ' + score + ' in ' + game_data.name;
options['description']  = game_data.description;
options['link']         = game_data.game_url;
options['picture']      = game_data.game_icon;

sendEvent('score','');

return fbWallPost(options,null);
}


function fbChallengeFriend(target){

//var url = 'http://apps.facebook.com/' + app_url + '/challenge/' + target;
var url = iframe_base_url + game_info.game_url_key + '/challenge/' + target;

window.location.href = url;
}

/*
 * 
 */
function getFriendsOnline(){
/*jQuery.get('http://devcms.miniclip.com/sandbox/myles/facebook/chat/online.php',{facebook_id:facebook_id},function(data){
if(jQuery('#ajax-loader')){
jQuery('#ajax-loader').remove();
}

if(jQuery('#friend-online-container').length < 1){
jQuery('#friends-online').prepend('<ul id="friend-online-container"></ul>');
}

for (key in data){
if(jQuery('#' + data[key].uid).length < 1){
var uid = data[key].uid;
jQuery('#friend-online-container').prepend('<li style="display:none;" id="' + uid + '" class="online_friend"><img style="margin-left:2px;margin-top:2px;position:absolute;z-index:200;" src="/images/facebook/' + data[key].online_presence + '.png" alt="' + data[key].online_presence + '" /><img style="z-index:-100;padding:2px;" src="https://graph.facebook.com/' + data[key].uid + '/picture?access_token=' + access_token + '" title="' + data[key].name + ' - ' + data[key].online_presence + '" width="33px" height="33px" /></li>');

setTimeout('jQuery(".online_friend").each(function(){jQuery(this).fadeIn("fast")});',1000);
}else{
if(jQuery('#' + data[key].uid).children().first().attr('alt') != data[key].online_presence){
jQuery('#' + data[key].uid).children().first().attr('src','/images/facebook/' + data[key].online_presence + '.png');
jQuery('#' + data[key].uid).children().first().attr('alt',data[key].online_presence);
}
}
}
    
    
var found = null;

jQuery('.online_friend').each(function(key){
for (k in data){
if(jQuery(this).attr('id') == data[k].uid){
found = true;
break;
}else{
found = false;
}
}

if(found == false){
jQuery(this).fadeOut('fast');
setTimeout('jQuery(this).remove()',1000);
}
});

});*/
}


    function sendEvent(event,url_extra)
   {  
        var links = document.getElementsByTagName("link");
        
        for (var i = 0;i < links.length;i ++){
            if (links[i].getAttribute("rel") === "canonical"){
                canonical = links[i].getAttribute("href");
           }
       }
        
        var meta_property = document.getElementsByTagName("meta");
        
        for (var i = 0;i < meta_property.length;i ++){
            if (meta_property[i].getAttribute("property") === "fb:app_id"){
                app_id = meta_property[i].getAttribute("content");
           }
       }

        var url;
        var app;
        var send = false;
        
        switch(window.location.hostname)
       {
        case 'devcms.miniclip.com':
        app = 'minicliptest';
        send = true;
        break;
        case 'cmsstage.miniclip.com':
        case 'cms.miniclip.com':
        app = 'miniclipapp';
        send = false;
        break;
        default:
        app = 'miniclipapp';
        send = true;
        break;
       }
        
        switch (event)
       {
            case 'score':
                url = '/me/' + app + ':score?game=' + canonical;
                break;
            case 'play':
                url = '/me/' + app + ':play?game=' + canonical + '&expires_in=600';
                break;
            case 'achieve':
                url = '/me/' + app + ':achieve?award=http://apps.fb.miniclip.com/open-graph/award/id/' + url_extra + '/app_id/' + app_id;
                break;
            case 'buy':
                url = '/me/' + app + ':buy?game=' + canonical;
                break;
       }

        //url = url + url_extra;
  
        if(send == true && game_is_visible == 1){
        
        FB.api(url,'post',function(response)
       {
            if (!response || response.error){
                return false;
           }else{
                return true;
           }
       });
        
       }
   }


    // On a game page
    if (adServerProperties == 'channel1/gamepage'){
    setTimeout(function(){sendEvent('play','');},9000);
   }/* [INCLUDE FILE] mcto */
var mcto = new Object;
var toolbarHomepageTakeover = false;
var mctoDisplay = false;

function takeover(mcto){

// Stop if another MCTO already active
if (mctoDisplay == true){return;}

// Set internal variables
var takeoverHeader1   = 136;// Header 1 Height (px)
var takeoverHeader2   = 170;// Header 2 Height (px)
var takeoverHeader3   = 200;// Header 3 Height (px)

var miniclipLogoUrl   = '/images/takeovers/takeoverLogo.png';// Miniclip Logo URL
var sketchstarLogoUrl = '/images/takeovers/sketchstar_hpto-logo.png';// Sketch Star Logo URL
var takeoverBgDefault = '#333';// Default page background colour

// Assign external array to variables
var takeoverHeight    = mcto.header;
var takeoverWrapper   = mcto.wrapper;
var takeoverLogo      = mcto.logo;

var takeoverColour_1    = mcto.backgroundColour;
if (typeof takeoverColour_1 != 'undefined' && takeoverColour_1.indexOf('#') == -1){
takeoverColour_1 = '#' + takeoverColour_1;
}
var takeoverColour_2    = mcto.backgroundColour_2;
var takeoverColour_3    = mcto.backgroundColour_3;
var takeoverColour_4    = mcto.backgroundColour_4;
var takeoverBg_1      = mcto.backgroundImg;
var takeoverBg_2      = mcto.backgroundImg_2;
var takeoverBg_3      = mcto.backgroundImg_3;
var takeoverBg_4      = mcto.backgroundImg_4;

var takeoverFooter    = mcto.footerImg;

var takeoverClickUrl  = mcto.clickUrl;
var takeoverClickArea = mcto.clickArea;
var takeoverClickBg   = mcto.clickBg;

var takeoverMpuSwf    = mcto.mpuSwf;
var takeoverLeader    = mcto.leaderboard;

var takeoverTrackUrl  = mcto.trackUrl;

var takeoverInternal  = mcto.internal;
var takeoverAgency    = mcto.agency.toLowerCase();
var takeoverClient    = mcto.client.toLowerCase();
var takeoverCampaign  = mcto.campaign.toLowerCase();

// Check location is test folder,then check for errors and alert() if necessary
if (window.location.pathname.indexOf('/ads') != -1){
if (takeoverBg_1 == undefined){
alert('Error:mcto.backgroundImg_1 CANNOT be left blank. Please fix and render again.')
}
if ((takeoverClickArea != undefined) && (takeoverClickUrl == undefined)){
alert('Error:mcto.clickArea has been set but mcto.clickUrl is empty. Please fix and render again.')
}
if ((takeoverClickBg != undefined) && (takeoverClickUrl == undefined)){
alert('Error:mcto.clickBg has been set but mcto.clickUrl is empty. Please fix and render again.')
}
}


// ===
// MPU
// ===

// Check MPU variable set
if (takeoverMpuSwf != undefined){

if (takeoverClickUrl != undefined){
takeoverMpuSwf = takeoverMpuSwf + '?clickTag=' + encodeURIComponent(takeoverClickUrl.replace('[timestamp]',ord));
}

// Build MPU code
takeoverMpuCode = '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0" id="Ad_that_changes_background_AS1" width="300" height="250" align="middle"><param name="allowScriptAccess" value="always" /><param name="movie" value="' + takeoverMpuSwf + '" /><param name="quality" value="high" /><embed src="' + takeoverMpuSwf + '" quality="high" width="300" height="250" swLiveConnect=true id="Ad_that_changes_background_AS1" name="Ad_that_changes_background_AS1" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" /></object>';

if ($mc('takeoverMPU') != null){
jQuery('#takeoverMPU').html(takeoverMpuCode);
}else{
document.write(takeoverMpuCode);
}
}


// =================
// Hide & Tidy Stuff
// =================

// Hide Leaderboard
if (takeoverLeader != true){
jQuery('.ad_728_90').css('display','none');
}

// Hide Breadcrumbs
if (jQuery('body.H_game .breadcrumbs,body.H_game .hGameCat').length){
jQuery('body.H_game .breadcrumbs,body.H_game .hGameCat').css('display','none');
}

// Hide Push Strip
if(jQuery('#toolbarPush').length){
jQuery('#toolbarPush').html('');
}
toolbarHomepageTakeover = true;

// Hide Beta Flag
if(jQuery('#beta').length){
jQuery('#beta').css('display','none');
}

// Hide Language Switcher
if(jQuery('.flagsHeader').length){
jQuery('.flagsHeader').css('display','none');
}

// Hide Bookmark Monkey
hideMonkey();

/* Hide Notification Bar */
if(jQuery('.siteNotification').length){
jQuery('.siteNotification').css('display','none');
}

// Hide Page Title in Sketchstar
if (jQuery('body').hasClass('sketchstar')){
jQuery('#pageTitle').css('display','none');
}

// Fix Ad-Feedback on Toggle Skins
if(takeoverBg_2 !== undefined){
jQuery('.block_300x250 .block_300x250_holder a.ad_feedback').css('margin-top','-40px');
}


// ================
// Skin Foundations
// ================

// Set Header Height
switch(takeoverHeight){
case 1:
headerHeight = takeoverHeader1;
break;
case 2:
headerHeight = takeoverHeader2;
break;
case 3:
headerHeight = takeoverHeader3;
break;
default:
headerHeight = 0;
}

// Counter out pixels between search box and wrapper top
headerHeightActual = (headerHeight - 67);

// Alter header height if Leaderboard is visible
if (takeoverLeader == true){
headerHeightActual = (headerHeightActual - 43);
}

// If Header Height is 0,headerHeightActual should be too
if (headerHeight == 0){
headerHeightActual = 0;
}

// Set Wrapper Visibility
if(jQuery('#wrapper').length){
if (takeoverWrapper == true){
jQuery('#wrapper').css('margin-top',headerHeightActual + 'px');
}else{
jQuery('#wrapper').css({
'background' :'none',
'padding' :headerHeightActual + 'px 0 0 0'
});
}
}

// Set Logo Visibility
if (takeoverWrapper != true){
if (takeoverLogo == false){
jQuery('#pageTitle').css('visibility','hidden');
jQuery('#logo,#wrapper h1').css('visibility','hidden');
}else{
if (jQuery('body').hasClass('sketchstar')){

jQuery('h1').css({
'background-image' :'url(' + sketchstarLogoUrl + ')',
'background-repeat' :'no-repeat',
'background-position' :'12px 10px',
'height' :'82px',
'margin-top' :'6px',
'margin-bottom' :'14px'
});
jQuery('h1.ad').css('margin-bottom','5px');

}else{

jQuery('h1').css({
'background-image' :'url(' + miniclipLogoUrl + ')',
'background-repeat' :'no-repeat',
'background-position' :'12px 10px'
});
jQuery('h1.ad').css('margin-bottom','5px');

}

// Push logo down if leaderboard is visible
if (takeoverLeader == true){
jQuery('h1').css('margin-top','43px');
}
}
}


// ===========
// Backgrounds
// ===========

// Set background colour
if (takeoverColour_1 == undefined){
jQuery('body').css('background-color',takeoverBgDefault);
}else{
jQuery('body').css('background-color',takeoverColour_1);
}

// Set Background
jQuery('body').css({
'background-image' :'url(' + takeoverBg_1 + ')',
'background-repeat' :'no-repeat',
'background-position' :'top center'
});

// Remove messy rounded corners
if(jQuery('.corner_bl.g,.corner_br.g').length){
jQuery('.corner_bl.g,.corner_br.g').css('display','none');
}


// ======
// Footer
// ======

// If a footer image is set insert it beneath the normal footer
if (takeoverFooter != undefined){
if (takeoverFooter.length > 0){
var hpto_FootImg = new Image();
hpto_FootImg.src = takeoverFooter;
jQuery('#footerTakeover').html('<img src="' + takeoverFooter + '" />');
}
}


// ===============
// Clickable Areas
// ===============

if ((takeoverClickUrl !== undefined) && (takeoverClickArea !== undefined)){

if((takeoverInternal != undefined) && (takeoverInternal == true)){
var clickableTarget = '';
}else{
var clickableTarget = ' target="_blank"';
}

var clickCode = '';

// Small Click Area
if (takeoverClickArea == 'small' || takeoverClickArea == 'both'){
clickCode = clickCode + '<div id="hpto-click-button" class="small"><a href="' + takeoverClickUrl + '" onClick="takeoverStats(\'/small/\');"' + clickableTarget + '>Click Here</a></div>';
}

// Large Click Area
if (takeoverClickArea == 'large' || takeoverClickArea == 'both'){
clickCode = clickCode + '<div id="hpto-click-button" class="large"><a href="' + takeoverClickUrl + '" onClick="takeoverStats(\'/large/\');"' + clickableTarget + '>Click Here</a></div>';
}

// Insert before logo
jQuery(clickCode).insertBefore('#wrapper h1');

// Correct position based on header height
if (headerHeight !== 0){
var clickHeader = (headerHeight - 130);
}else{
var clickHeader = 0;
}
jQuery('#hpto-click-button.small a').css('margin-top',clickHeader+'px');
jQuery('#hpto-click-button.large a').css('margin-top',clickHeader+'px');
}


// ====================
// Clickable Background
// ====================

if (takeoverClickBg == true){

noBubble = false;

// If takeover is internal,don't pop new window
if((takeoverInternal != undefined) && (takeoverInternal == true)){
jQuery('body').click(function(){
if (noBubble == false){
window.location.href = takeoverClickUrl;
takeoverStats('/clickable-background/');
}
noBubble = false;
});
}else{
jQuery('body').click(function(){
if (noBubble == false){
window.open(takeoverClickUrl);
takeoverStats('/clickable-background/');
}
noBubble = false;
});
}

// Remove linked area from the wrapper & footers
jQuery('#wrapper').click(function(){noBubble = true;});
jQuery('#footer').click(function(){noBubble = true;});
jQuery('#extraFooter').click(function(){noBubble = true;});

// Set cursor style to pointer on linked areas only
jQuery('body').css('cursor','pointer');
jQuery('#wrapper').css('cursor','default');
jQuery('#footer').css('cursor','default');

}else{

document.body.onclick = null;

}


// ===================
// Finish,Track & Run
// ===================

mctoDisplay = true;

// Log takeover views and clicks
takeoverStats();
takeoverClickTrack(takeoverTrackUrl);

mcto = new Object();

}


// =====
// Stats
// =====

function takeoverStats (stats){

// Assign external array to variables
var takeoverInternal = mcto.internal;
var takeoverAgency   = mcto.agency.toLowerCase();
var takeoverClient   = mcto.client.toLowerCase();
var takeoverCampaign = mcto.campaign.toLowerCase();

// Check location is test folder,then check for errors and alert() if necessary
if (window.location.pathname.indexOf('/ads') != -1){
if ((takeoverInternal != true) && (takeoverAgency == undefined)){
alert('Error:mcto.agency CANNOT be left blank. Please fix and render again.')
}
if ((takeoverInternal != true) && (takeoverClient == undefined)){
alert('Error:mcto.client CANNOT be left blank. Please fix and render again.')
}
if (takeoverCampaign == undefined){
alert('Error:mcto.campaign CANNOT be left blank. Please fix and render again.')
}
}

// If stats blank,set unknown.
if (stats == undefined){
stats = '';
}

// Create path to store
var path = '/advertising/takeovers/' + encodeURI(takeoverAgency.replace(' ','-')) + '/' + encodeURI(takeoverClient.replace(' ','-')) + '/' + encodeURI(takeoverCampaign.replace(' ','-')) + stats;

// Send stats to the tracker
statTracker (path);

}

function takeoverClickTrack(trackurl){
if (trackurl != undefined){
trackurl = trackurl.replace('[timestamp]',ord);
tracker = new Image();
tracker.src = trackurl;
}
}


// ====================
// Multiple Backgrounds
// ====================

var isInternetExplorer = navigator.appName.indexOf("Microsoft") != -1;

// Handle all the FSCommand messages in a Flash movie.
function Ad_that_changes_background_AS1_DoFSCommand(command,args){

//alert('Called function Ad_that_changes_background_AS1_DoFSCommand ('+command+','+args+')');
if (command == 'changeToBackground'){

var Ad_that_changes_background_AS1Obj = isInternetExplorer ? document.all.Ad_that_changes_background_AS1 :document.Ad_that_changes_background_AS1;

if (hpto.ImageURL != undefined){

imagePath = hpto['ImageURL_' + args];
if (imagePath == undefined){
imagePath = hpto.ImageURL;
}

bgColor = hpto['Colour_' + args];
if (bgColor == undefined){
bgColor = hpto.Colour;
}

trackHPTO('/swapBackground/' + args);

}else{

imagePath = mcto['backgroundImg_' + args];
if (imagePath == undefined){
imagePath = mcto.backgroundImg;
}

bgColor = mcto['backgroundColour_' + args];
if (bgColor == undefined){
bgColor = mcto.backgroundColour;
}

takeoverStats('/swapBackground/' + args);

}

if (bgColor.indexOf('#') == -1){
bgColor = '#' + bgColor;
}

// Set Background
jQuery('body').css({
'background-image' :'url(' + imagePath + ')',
'background-color' :bgColor
});
}
}

// Hook for Internet Explorer.
if (navigator.appName && navigator.appName.indexOf("Microsoft") != -1 && navigator.userAgent.indexOf("Windows") != -1 && navigator.userAgent.indexOf("Windows 3.1") == -1){
document.write('<script language=\"VBScript\"\>\n');
document.write('On Error Resume Next\n');
document.write('Sub Ad_that_changes_background_AS1_FSCommand(ByVal command,ByVal args)\n');
document.write('Call Ad_that_changes_background_AS1_DoFSCommand(command,args)\n');
document.write('End Sub\n');
document.write('</script\>\n');
}/* [INCLUDE FILE] swfobject */
/*SWFObject v2.2 <http://code.google.com/p/swfobject/> 
is released under the MIT License <http://www.opensource.org/licenses/mit-license.php> 
*/
var swfobject=function(){var D="undefined",r="object",S="Shockwave Flash",W="ShockwaveFlash.ShockwaveFlash",q="application/x-shockwave-flash",R="SWFObjectExprInst",x="onreadystatechange",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\/(\d+(\.\d+)?).*$/,"$1")):false,X=!+"\v1",ag=[0,0,0],ab=null;if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;X=false;ab=ab.replace(/^.*\s+(\S+\s+\S+$)/,"$1");ag[0]=parseInt(ab.replace(/^(.*)\..*$/,"$1"),10);ag[1]=parseInt(ab.replace(/^.*\.(.*)\s.*$/,"$1"),10);ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,"$1"),10):0}}else{if(typeof O.ActiveXObject!=D){try{var ad=new ActiveXObject(W);if(ad){ab=ad.GetVariable("$version");if(ab){X=true;ab=ab.split(" ")[1].split(",");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac}}(),k=function(){if(!M.w3){return}if((typeof j.readyState!=D&&j.readyState=="complete")||(typeof j.readyState==D&&(j.getElementsByTagName("body")[0]||j.body))){f()}if(!J){if(typeof j.addEventListener!=D){j.addEventListener("DOMContentLoaded",f,false)}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState=="complete"){j.detachEvent(x,arguments.callee);f()}});if(O==top){(function(){if(J){return}try{j.documentElement.doScroll("left")}catch(X){setTimeout(arguments.callee,0);return}f()})()}}if(M.wk){(function(){if(J){return}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return}f()})()}s(f)}}();function f(){if(J){return}try{var Z=j.getElementsByTagName("body")[0].appendChild(C("span"));Z.parentNode.removeChild(Z)}catch(aa){return}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]()}}function K(X){if(J){X()}else{U[U.length]=X}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener("load",Y,false)}else{if(typeof j.addEventListener!=D){j.addEventListener("load",Y,false)}else{if(typeof O.attachEvent!=D){i(O,"onload",Y)}else{if(typeof O.onload=="function"){var X=O.onload;O.onload=function(){X();Y()}}else{O.onload=Y}}}}}function h(){if(T){V()}else{H()}}function V(){var X=j.getElementsByTagName("body")[0];var aa=C(r);aa.setAttribute("type",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable("$version");if(ab){ab=ab.split(" ")[1].split(",");M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return}}X.removeChild(aa);Z=null;H()})()}else{H()}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa)}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;ai.width=ae.getAttribute("width")||"0";ai.height=ae.getAttribute("height")||"0";if(ae.getAttribute("class")){ai.styleclass=ae.getAttribute("class")}if(ae.getAttribute("align")){ai.align=ae.getAttribute("align")}var ah={};var X=ae.getElementsByTagName("param");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute("name").toLowerCase()!="movie"){ah[X[ad].getAttribute("name")]=X[ad].getAttribute("value")}}P(ai,ah,Y,ab)}else{p(ae);if(ab){ab(aa)}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z}ab(aa)}}}}}function z(aa){var X=null;var Y=c(aa);if(Y&&Y.nodeName=="OBJECT"){if(typeof Y.SetVariable!=D){X=Y}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z}}}return X}function A(){return !a&&F("6.0.65")&&(M.win||M.mac)&&!(M.wk&&M.wk<312)}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName=="OBJECT"){l=g(ae);Q=null}else{l=ae;Q=X}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width="310"}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height="137"}j.title=j.title.slice(0,47)+" - Flash Player Installation";var ad=M.ie&&M.win?"ActiveX":"PlugIn",ac="MMredirectURL="+O.location.toString().replace(/&/g,"%26")+"&MMplayerType="+ad+"&MMdoctitle="+j.title;if(typeof ab.flashvars!=D){ab.flashvars+="&"+ac}else{ab.flashvars=ac}if(M.ie&&M.win&&ae.readyState!=4){var Y=C("div");X+="SWFObjectNew";Y.setAttribute("id",X);ae.parentNode.insertBefore(Y,ae);ae.style.display="none";(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae)}else{setTimeout(arguments.callee,10)}})()}u(aa,ab,X)}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C("div");Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display="none";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y)}else{setTimeout(arguments.callee,10)}})()}else{Y.parentNode.replaceChild(g(Y),Y)}}function g(ab){var aa=C("div");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML}else{var Y=ab.getElementsByTagName(r)[0];if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName=="PARAM")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true))}}}}}return aa}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X}if(aa){if(typeof ai.id==D){ai.id=Y}if(M.ie&&M.win){var ah="";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()=="data"){ag.movie=ai[ae]}else{if(ae.toLowerCase()=="styleclass"){ah+=' class="'+ai[ae]+'"'}else{if(ae.toLowerCase()!="classid"){ah+=" "+ae+'="'+ai[ae]+'"'}}}}}var af="";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name="'+ad+'" value="'+ag[ad]+'" />'}}aa.outerHTML='<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"'+ah+">"+af+"</object>";N[N.length]=ai.id;X=c(ai.id)}else{var Z=C(r);Z.setAttribute("type",q);for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()=="styleclass"){Z.setAttribute("class",ai[ac])}else{if(ac.toLowerCase()!="classid"){Z.setAttribute(ac,ai[ac])}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!="movie"){e(Z,ab,ag[ab])}}aa.parentNode.replaceChild(Z,aa);X=Z}}return X}function e(Z,X,Y){var aa=C("param");aa.setAttribute("name",X);aa.setAttribute("value",Y);Z.appendChild(aa)}function y(Y){var X=c(Y);if(X&&X.nodeName=="OBJECT"){if(M.ie&&M.win){X.style.display="none";(function(){if(X.readyState==4){b(Y)}else{setTimeout(arguments.callee,10)}})()}else{X.parentNode.removeChild(X)}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]=="function"){Y[X]=null}}Y.parentNode.removeChild(Y)}}function c(Z){var X=null;try{X=j.getElementById(Z)}catch(Y){}return X}function C(X){return j.createElement(X)}function i(Z,X,Y){Z.attachEvent(X,Y);I[I.length]=[Z,X,Y]}function F(Z){var Y=M.pv,X=Z.split(".");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return}var aa=j.getElementsByTagName("head")[0];if(!aa){return}var X=(ad&&typeof ad=="string")?ad:"screen";if(ab){n=null;G=null}if(!n||G!=X){var Z=C("style");Z.setAttribute("type","text/css");Z.setAttribute("media",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1]}G=X}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y)}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+"{"+Y+"}"))}}}function w(Z,X){if(!m){return}var Y=X?"visible":"hidden";if(J&&c(Z)){c(Z).style.visibility=Y}else{v("#"+Z,"visibility:"+Y)}}function L(Y){var Z=/[\\\"<>\.;]/;var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y}var d=function(){if(M.ie&&M.win){window.attachEvent("onunload",function(){var ac=I.length;for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2])}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa])}for(var Y in M){M[Y]=null}M=null;for(var X in swfobject){swfobject[X]=null}swfobject=null})}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;w(ab,false)}else{if(Z){Z({success:false,id:ab})}}},getObjectById:function(X){if(M.w3){return z(X)}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+="";ag+="";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al]}}aj.data=ab;aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak]}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+="&"+ai+"="+Z[ai]}else{am.flashvars=ai+"="+Z[ai]}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true)}X.success=true;X.ref=an}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);return}else{w(ah,true)}}if(ac){ac(X)}})}else{if(ac){ac(X)}}},switchOffAutoHideShow:function(){m=false},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]}},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X)}else{return undefined}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y)}},removeSWF:function(X){if(M.w3){y(X)}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X)}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;if(Z){if(/\?/.test(Z)){Z=Z.split("?")[1]}if(aa==null){return L(Z)}var Y=Z.split("&");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf("="))==aa){return L(Y[X].substring((Y[X].indexOf("=")+1)))}}}return""},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display="block"}}if(E){E(B)}}a=false}}}}();/* [INCLUDE FILE] rotating-push-ads */
// Fallback
if (typeof RotatingPushAd == 'undefined'){
    function RotatingPushAd(){}
}

RotatingPushAd.prototype.setType = function(type)
{
    this.type = type;
};

RotatingPushAd.prototype.setTypeDirectory = function(type)
{
    this.type_dir = type;
};

RotatingPushAd.prototype.lastBannerID = function(banner_id)
{
    this.last_id = banner_id;
};

RotatingPushAd.prototype.allAds = function(all_ads)
{
    this.banners = all_ads;
};

RotatingPushAd.prototype.speed = function(speed)
{
    this.interval = speed;
};
RotatingPushAd.prototype.setCookieID = function(name)
{
    this.last_cookie_name = name;
};

RotatingPushAd.prototype.showNext = function()
{
    // Remove the existing!
    jQuery('#' + this.type + '_html').html('');
    
    this.getNextUniqueAd();
}

RotatingPushAd.prototype.shuffleAds = function()
{
    var sourceArray = this.banners_new;
    for (var n = 0;n < sourceArray.length - 1;n++){
        var k = n + Math.floor(Math.random() * (sourceArray.length - n));

        var temp = sourceArray[k];
        sourceArray[k] = sourceArray[n];
        sourceArray[n] = temp;
   }
}

RotatingPushAd.prototype.getNextUniqueAd = function()
{
    this.shuffleAds();
    for (i in this.banners_new){
        
        if (i != this.last_id || this.banners_new.length == 1){
            this.last_id = i;

            // Create the cookie
            cookie_create(this.last_cookie_name,i,1);
            // Load the banner
            var banner = this.loadAd(i);           
            jQuery('#' + this.type + '_html').html(this.holder_el.html());
           
            break;
       }
   }

    return banner;
}

function attachTracking(){}

RotatingPushAd.prototype.loadAd = function(id)
{
    // let's figure out the base filename so we can use GA to track it
    var path_list       = this.banners_new[id]["filename"].split("/");
    var base_filename   = path_list[path_list.length - 1].split(".");

    // Holding anchor tag
    var a = jQuery("<a />");
    a.attr("href",this.banners_new[id]["url"]);
    a.attr("id","banner_" + this.type);
    a.attr("title",this.banners_new[id]["filename"]);
    
    // if a relative link to another miniclip page and is not a relative or an app store link
    if (this.banners_new[id]["url"].substr(0,1) == '/' && this.banners_new[id]["url"].search('/iphone/appstore.php') == -1){
        // internal link open in the current window
        a.attr("target",'_self');
   }else{
        // external link open in a new window
        a.attr("target",'_blank');
   }

    // Stat tracking
    jQuery(a).click(function(){
       statTracker('adserver/click/' + adServerProperties + '/' + "banner_" + this.type + '/' + base_filename[0]);
       window.location = this.banners_new[id]["url"];
       return false;
   });

    // .. and a new image- using jQuery because of compat
    var img = jQuery("<img src=\"//e.miniclip.com/i/banners/" + this.type_dir + "/" + this.banners_new[id]["filename"] + "\" />");

    // Append the image into the anchor
    jQuery(a).append(img);

    // drop it into the wrapper
    jQuery(this.holder_el).html(a);

    // Ad is being displayed.
    statTracker('adserver/view/' + adServerProperties + '/' + "banner_" + this.type + '/' + base_filename[0]);

    // Return the object - it might be required.
    return this.holder_el;
}

RotatingPushAd.prototype.init = function()
{ 
    var c = 0;
    this.banners_new = [];
    
    // nasty hack to hide the lastest games banner on the homepage
    var homepage = false;
    var url = document.URL.split('/');
    
    if (typeof document.URL == 'Undefined'){
        var url = window.document.location.split('/');
   }
    
    if (url[3] == 'games' && url[4].length == 2){
        homepage = true;
   }
    // loop banners and store
    for (var i in this.banners){
        if (homepage == true && this.banners[i].filename !== 'Latest_games_609x75.jpg')
       {
            // home page,skip latest game ad
            this.banners_new[c] = this.banners[i];
            c++
       }
        else if (homepage == false)
       {
            // normal page use all ads
            this.banners_new[c] = this.banners[i];
            c++
       }
   }
       
    // Element which will hold it.
    this.holder_el = jQuery('#' + this.type + '');

    // ref
    var t = this;
    this.showNext();
    setInterval(function(){t.showNext();},this.interval);
};

RotatingPushAd.prototype.displayAd = function()
{
    document.write('<div id="' + this.type + '"></div>');
}/* [INCLUDE FILE] hosted/conduitToolbarApi */
/* 3.4.1.10 */

if (typeof STILL_LODING_TEXT === "undefined"){
    var STILL_LODING_TEXT = "Still loading...";
    var ERROR_CODE_PERMISSION_DENIED = 20;
    var EBJSON ={};
    if (!("JSON" in window)){
        EBJSON ={
            stringify:function (aJSObject,aKeysToDrop){
                var pieces = [];

                function append_piece(aObj){
                    if (typeof aObj == "string"){
                        aObj = aObj.replace(/[\\"\x00-\x1F\u0080-\uFFFF]/g,function ($0){
                            switch ($0){
                                case "\b":return "\\b";
                                case "\t":return "\\t";
                                case "\n":return "\\n";
                                case "\f":return "\\f";
                                case "\r":return "\\r";
                                case '"':return '\\"';
                                case "\\":return "\\\\";
                           }
                            return "\\u" + ("0000" + $0.charCodeAt(0).toString(16)).slice(-4);
                       });
                        pieces.push('"' + aObj + '"')
                   }
                    else if (typeof aObj == "boolean"){
                        pieces.push(aObj ? "true" :"false");
                   }
                    else if (typeof aObj == "number" && isFinite(aObj)){
                        pieces.push(aObj.toString());
                   }
                    else if (aObj === null){
                        pieces.push("null");
                   }
                    else if (aObj instanceof Array ||
                typeof aObj == "object" && "length" in aObj &&
                (aObj.length === 0 || aObj[aObj.length - 1] !== undefined)){
                        pieces.push("[");
                        for (var i = 0;i < aObj.length;i++){
                            arguments.callee(aObj[i]);
                            pieces.push(",");
                       }
                        if (aObj.length > 0)
                            pieces.pop();// drop the trailing colon
                        pieces.push("]");
                   }
                    else if (typeof aObj == "object"){
                        pieces.push("{");
                        for (var key in aObj){
                            // allow callers to pass objects containing private data which
                            // they don't want the JSON string to contain (so they don't
                            // have to manually pre-process the object)
                            if (aKeysToDrop && aKeysToDrop.indexOf(key) != -1)
                                continue;

                            arguments.callee(key.toString());
                            pieces.push(":");
                            arguments.callee(aObj[key]);
                            pieces.push(",");
                       }
                        if (pieces[pieces.length - 1] == ",")
                            pieces.pop();// drop the trailing colon
                        pieces.push("}");
                   }
                    else{
                        throw new TypeError("No JSON representation for this object!");
                   }
               }
                append_piece(aJSObject);

                return pieces.join("");
           },

            /**
            * Converts a JSON string into a JavaScript object.
            *
            * @param aJSONString is the string to be converted
            * @return a JavaScript object for the given JSON representation
            */
            parse:function (aJSONString){
                if (!this.isMostlyHarmless(aJSONString))
                    throw new SyntaxError("No valid JSON string!");

                return eval("(" + aJSONString + ")");
           },

            /**
            * Checks whether the given string contains potentially harmful
            * content which might be executed during its evaluation
            * (no parser,thus not 100% safe! Best to use a Sandbox for evaluation)
            *
            * @param aString is the string to be tested
            * @return a boolean
            */
            isMostlyHarmless:function (aString){
                var maybeHarmful = /[^,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]/;
                var jsonStrings = /"(\\.|[^"\\\n\r])*"/g;

                return !maybeHarmful.test(aString.replace(jsonStrings,""));
           }
       };
   }
    else{
        EBJSON = JSON;
   }

    var _RegistredToolbars =
{
    arrToolbars:new Array(),
    hashToolbars:new Object(),
    registeredTopicHash:{},

    addToolbar:function (objProxy){
        if (this.hashToolbars[objProxy.ctid]) return;

        this.arrToolbars.push(objProxy);
        this.hashToolbars[objProxy.ctid] = objProxy;
   },

    removeToolbar:function (ctid){
        if (!this.hashToolbars[ctid]) return;

        this.hashToolbars[ctid] = null;
        for (var i = 0;i < this.arrToolbars.length;i++){
            if (typeof (this.arrToolbars[i].ctid) == "undefined" || this.arrToolbars[i].ctid == ctid){
                this.arrToolbars.splice(i,1);
                break;
           }
       }
   },

    isRegistred:function (ctid){
        return (this.hashToolbars[ctid]) ? true :false;
   },

    getToolbar:function (ctid){
        return (this.isRegistred(ctid)) ? this.hashToolbars[ctid] :null;
   },

    getAllToolbars:function (){
        return this.arrToolbars;
   }
};

    function _TPIRegisterToolbarIE(activeXName){
        try{
            var objProxy = new ActiveXObject(activeXName);
            _RegistredToolbars.addToolbar(objProxy);
       }
        catch (ex){}
   };

    function _TPIRegisterToolbarFF(objProxy){
        _RegistredToolbars.addToolbar(objProxy);
   };

    function _TPIUnregisterToolbar(ctid){
        _RegistredToolbars.removeToolbar(ctid);
   };

    //Toolbar API
    //FF - this class is overridden by toolbar.
    //IE - this class catches all the calls IE didn't catch.

    var BROWSERS_DEF =
{
    IE6:"IE6",
    IE7:"IE7",
    FF:"FF",
    SAFARI:"SAFARI",
    WEBKIT:"WEBKIT" // Chrome or Safari web toolbars
};

    var __TPI =
{
    Result:"",

    ResetResult:function (){
        this.Result = "";
   },

    SetResult:function (strResult){
        this.Result += strResult;
   },

    GetResult:function (bIsMultipleResponse){
        return _TPIHelper.GetResult(this.Result,bIsMultipleResponse);
   },

    ExecuteApiFunction:function (strFuncName,strParam){
        //do nothing
   }
};

    //for Safari MAC
    var _TPI;
    var isSafari;

    if (typeof TPIObject != "undefined"){
        _TPI = TPIObject;
        isSafari = true;
   }
    else{
        _TPI = __TPI;
        isSafari = false;
   }

    //Wrapped JS function for IE to return Result
    function _TPISetResult(strXmlResult){
        _TPI.SetResult(strXmlResult);
   };

    //Helper object with service functions for interaction with the toolbar.
    var _TPIHelper =
{
    IsSupportedFunction:"IsSupportedFunction",

    GetBrowser:function (){
        if (isSafari) return BROWSERS_DEF.SAFARI;

        var strAgent = navigator.userAgent;
        //IE
        if (strAgent.indexOf("MSIE") != -1){
            //Try with regex to overcome the bug with multiple data in user agent
            var result = strAgent.match(/MSIE (\d*)/);
            if (result && result.length >= 2){
                if (parseInt(result[1]) == 6)
                    return BROWSERS_DEF.IE6;
                else
                    return BROWSERS_DEF.IE7;
           }
            else{
                if (strAgent.indexOf("MSIE 6.") != -1)
                    return BROWSERS_DEF.IE6;
                //IE7
                else
                    return BROWSERS_DEF.IE7;
           }
       }
        else if (strAgent.match(/webkit.*?(chrome|safari)/i) !== null){
            var tbIframe = document.getElementsByClassName("TOOLBAR_IFRAME");
            var tbIframe = tbIframe && tbIframe.length ? tbIframe[0] :tbIframe;
            var isSB = true;
            if (tbIframe && tbIframe.id && tbIframe.id.indexOf("T_") === 0){
                isSB = false;
           }
            if (document.getElementById("main-iframe-wrapper") && isSB){
                return BROWSERS_DEF.FF;
           }
            else{
                return BROWSERS_DEF.WEBKIT;
           }
       }
        else
        //FF - because safari is detected earlier.
            return BROWSERS_DEF.FF;
   },

    _normalizeArgs:function (args){
        for (var i = 0;i < args.length;i++){
            if (args[i] && args[i].replace){
                args[i] = args[i].replace(/\\/g,"\\\\");
                args[i] = args[i].replace(/'/g,"\\'");
           }
       }
   },

    _ExecuteOldWay:function (args,ctid){
        if (ctid) args.push(ctid);
        var strBrowser = this.GetBrowser();
        switch (strBrowser){
            case BROWSERS_DEF.IE7:
                var frameSrc = "about:blank#javascript:" + "_TPI.ExecuteApiFunction('" + args.join("','") + "')";
                this.NavigateInIFrame(frameSrc);
                break;
            case BROWSERS_DEF.IE6:
                document.location.href = "javascript:" + "_TPI.ExecuteApiFunction('" + args.join("','") + "')";
                break;
            case BROWSERS_DEF.SAFARI:
                this._normalizeArgs(args);
                _TPI.ExecuteApiFunction(args.join("','"));
                break;
            case BROWSERS_DEF.FF:
                this._normalizeArgs(args);
                eval("_TPI.ExecuteApiFunction('" + args.join("','") + "')");
                break;
       }
   },

    //This function interacts directly with toolbar,by calling JS functions,
    //which IE interprets as navigation,and FF gets the function itself.
    //args :       [0] -       function name
    //              [2]..[n]    function arguments
    ExecuteFunctionSingle:function (args,ctid){
        if (this.GetBrowser() === BROWSERS_DEF.WEBKIT){// Chrome or Safari web toolbars

            var toolbarInfo = ToolbarInfosObject[ctid];
            var returnObj = toolbarInfo ||{};
            if (toolbarInfo !== undefined){
                var event ={
                    'name':'ExecuteFunctionSingle',
                    'data':arguments,
                    'sourceAPI':'ToolbarApi',
                    'targetAPI':'ToolbarApi'
               };

                // post message to injected script (same domain)
                window.postMessage(JSON.stringify(event),document.location.origin);

                returnObj.errorCode = 1;
                returnObj.returnValue = true;
           }
            else{// Toolbar is not installed
                returnObj.errorCode = 0;
                returnObj.returnValue = false;
           }

            return returnObj;
       }
        else{
            _TPI.ResetResult();

            //check if toolbar is registered via new register toolbar mechanism (both IE & FF)
            var objProxy = _RegistredToolbars.getToolbar(ctid);
            if (objProxy){
                var result = objProxy.ExecuteApiFunction(args);
                _TPI.SetResult(result);
           }
            else
                this._ExecuteOldWay(args,ctid);

            return _TPI.GetResult(false);
       }
   },

    ExecuteFunctionMultiple:function (args){
        if (this.GetBrowser() === BROWSERS_DEF.WEBKIT){// Chrome or Safari web toolbars

            // Realcommerce code here

            return{
                returnValue:true,
                errorCode:1
           };
       }
        else{
            _TPI.ResetResult();

            this._ExecuteOldWay(args);

            var arrAllToolbars = _RegistredToolbars.getAllToolbars();
            if (arrAllToolbars.length != 0){
                var objProxy = null;
                var result = "";
                for (var i = 0;i < arrAllToolbars.length;i++){
                    objProxy = arrAllToolbars[i];
                    result = objProxy.ExecuteApiFunction(args);
                    _TPI.SetResult(result);
               }
           }

            return _TPI.GetResult(true);
       }
   },

    ExecuteFunctionAny:function (args){
        if (this.GetBrowser() === BROWSERS_DEF.WEBKIT){// Chrome or Safari web toolbars

            // Realcommerce code here

            return{
                returnValue:true,
                errorCode:1
           };
       }
        else{
            _TPI.ResetResult();

            var arrAllToolbars = _RegistredToolbars.getAllToolbars();
            var isDone = false;
            if (arrAllToolbars.length != 0){
                var objProxy = null;
                var strResult = "";
                var oResult = null;
                for (var i = 0;i < arrAllToolbars.length;i++){
                    objProxy = arrAllToolbars[i];
                    strResult = objProxy.ExecuteApiFunction([this.IsSupportedFunction,args[0]]);
                    oResult = this.GetResult(strResult,false);
                    if (oResult.returnValue){
                        strResult = objProxy.ExecuteApiFunction(args);
                        _TPI.SetResult(strResult);
                        isDone = true;
                        break;
                   }
               }
           }

            //if no toolbars registered or non of the registred toolbars supports this function,
            //execute it the old way,for older toolbars
            if (!isDone)
                this._ExecuteOldWay(args);

            return _TPI.GetResult(true);
       }
   },

    NavigateInIFrame:function (frameSrc){
        var arrBody = document.getElementsByTagName('body');
        iFrame = document.createElement('iframe');
        iFrame.setAttribute("width","0");
        iFrame.setAttribute("height","0");
        arrBody[0].appendChild(iFrame);
        iFrame.src = frameSrc;
        arrBody[0].removeChild(iFrame);
   },

    //Parse Result XML
    //If bIsMultipleResponse = true,return array of objects,each contains response from specific toolbar.
    GetResult:function (strResult,bIsMultipleResponse){
        var oResult = new Object();
        var arrResult = null;

        if (strResult != ""){
            strResult = "<ROOT>" + strResult + "</ROOT>";
            var oRootXML = null;
            var bIsMulty = false;

            if (window.ActiveXObject){
                oRootXML = new ActiveXObject("Microsoft.XMLDOM");
                oRootXML.async = "false";
                oRootXML.loadXML(strResult);
                oRootXML = oRootXML.documentElement;
           }
            else{
                var parser = new DOMParser();
                oRootXML = parser.parseFromString(strResult,"text/xml");
                oRootXML = oRootXML.documentElement;
           }

            if (oRootXML.childNodes.length > 1 || bIsMultipleResponse){
                bIsMulty = true;
                arrResult = new Array();
           }

            for (var z = 0;z < oRootXML.childNodes.length;z++){
                oXML = oRootXML.childNodes[z];
                if (typeof (oXML.tagName) != "undefined"){
                    //Convert Result XML to an Object
                    for (var i = 0;i < oXML.childNodes.length;i++){
                        switch (oXML.childNodes[i].tagName){
                            case "RETURN_VALUE":oResult.returnValue = this.GetBooleanValue(this.GetXMLNodeValue(oXML.childNodes[i]));break;
                            case "ERROR_CODE":oResult.errorCode = this.GetXMLNodeValue(oXML.childNodes[i]);break;
                            case "DATA":var oXmlNode = oXML.childNodes[i];
                                this.DataFactory(oResult,oXmlNode);
                                break;
                            default:break;
                       }
                   }

                    if (bIsMulty){
                        arrResult.push(oResult);
                        oResult = new Object();
                   }
               }
           }
            if (bIsMulty){
                oResult = arrResult;
           }
       }
        else{
            oResult.returnValue = false;
            oResult.errorCode = 0;
       }
        return oResult;
   },

    //Function which transfers string TRUE or FALSE into boolean.
    GetBooleanValue:function (strBool){
        var bBool = (strBool.toLowerCase() == "true") ? true :false;
        return bBool;
   },

    //Factory for parsing data node from toolbar's response.
    DataFactory:function (oData,oXmlNode){
        //patch for new dual package,toolbar is mystuff enabled,but uncapable to receive apps (only engine can)
        var self = this;
        var isDisableMyStuffByTBVersion = function (version){
            var arrVersion = version.split(".");
            if (arrVersion.length == 0) //something went wrong
                return false;

            var majorVersion = parseInt(arrVersion[0]);
            var minorVersion = parseInt(arrVersion[0] + arrVersion[1] + arrVersion[2]);
            if (isNaN(majorVersion) || isNaN(minorVersion))  //something went wrong
                return false;

            var strBrowser = self.GetBrowser();
            switch (strBrowser){
                case BROWSERS_DEF.IE7:
                case BROWSERS_DEF.IE6:
                    return (majorVersion >= 6 && minorVersion < 640);
                case BROWSERS_DEF.SAFARI:return false;
                case BROWSERS_DEF.FF:
                    return (majorVersion >= 3 && minorVersion < 334);
           }
       };

        var xmlNode = null;

        for (var j = 0;j < oXmlNode.childNodes.length;j++){
            xmlNode = oXmlNode.childNodes[j];
            switch (xmlNode.tagName){
                //Toolbar info                                                                                            
                case "TOOLBAR_INFO":
                    for (var i = 0;i < xmlNode.childNodes.length;i++){
                        switch (xmlNode.childNodes[i].tagName){
                            case "VERSION":oData.version = this.GetXMLNodeValue(xmlNode.childNodes[i]);break;
                            case "NAME":oData.name = this.GetXMLNodeValue(xmlNode.childNodes[i]);break;
                            case "CURRENT_CTID":oData.CTID = this.GetXMLNodeValue(xmlNode.childNodes[i]);break;
                            case "ORIGINAL_CTID":oData.originalCTID = this.GetXMLNodeValue(xmlNode.childNodes[i]);break;
                            case "IS_MULTICOMMUNITY":oData.isMulticommunity = this.GetBooleanValue(this.GetXMLNodeValue(xmlNode.childNodes[i]));break;
                            case "IS_GROUPING":oData.isGrouping = this.GetBooleanValue(this.GetXMLNodeValue(xmlNode.childNodes[i]));break;
                            case "IS_CONDUIT_APPS_TOOLBAR":oData.isConduitAppsToolbar = this.GetBooleanValue(this.GetXMLNodeValue(xmlNode.childNodes[i]));break;
                            case "IS_NEW_ADD_MY_STUFF_COMPONENT":oData.isNewAddMystuffComponent = this.GetBooleanValue(this.GetXMLNodeValue(xmlNode.childNodes[i]));break;
                            //new myStuff feature,status                                                                           
                            // 0:disabled,                                                                          
                            // 1:enabled                                                                           
                            //-1:unsupported                                                                           
                            case "MY_STUFF_STATUS":oData.myStuffStatus = parseInt(this.GetXMLNodeValue(xmlNode.childNodes[i]));break;
                            default:break;
                       }
                   }

                    if (isDisableMyStuffByTBVersion(oData.version))
                        oData.myStuffStatus = 0;
                    else if (typeof oData.myStuffStatus == "undefined")
                        oData.myStuffStatus = -1;

                    break;
                //Single value                                                                                            
                case "SINGLE_VALUE":
                    oData.data = this.GetXMLNodeValue(xmlNode);
                    break;
                //Menus info                                                                                            
                case "MENUS_INFO":
                    oData.menusInfo = new Array();
                    for (var i = 0;i < xmlNode.childNodes.length;i++){
                        var xmlNodeMenu = xmlNode.childNodes[i];
                        if (xmlNodeMenu.tagName == "MENU_INFO"){
                            var oDataMenu = new Object();
                            for (var k = 0;k < xmlNodeMenu.childNodes.length;k++){
                                switch (xmlNodeMenu.childNodes[k].tagName){
                                    case "COMP_ID":oDataMenu.componentID = this.GetXMLNodeValue(xmlNodeMenu.childNodes[k]);break;
                                    case "CAPTION":oDataMenu.caption = this.GetXMLNodeValue(xmlNodeMenu.childNodes[k]);break;
                                    case "ICON_URL":oDataMenu.iconUrl = this.GetXMLNodeValue(xmlNodeMenu.childNodes[k]);break;
                                    default:break;
                               }
                           }
                            oData.menusInfo.push(oDataMenu);
                       }
                   }
           }
       }
   },

    GetOldApiResult:function (bResult){
        var oResult = new Object();
        oResult.returnValue = bResult;
        oResult.errorCode = 0;
        return oResult;
   },

    //Cross browser.
    GetXMLNodeValue:function (xmlNode){
        if (xmlNode.text){
            return xmlNode.text;
       }
        else if (xmlNode.childNodes.length != 0){

            return xmlNode.childNodes[0].nodeValue;
       }
        else{
            return "";
       }
   },

    ToLegalXML:function (strXML){
        strXML = strXML.replace(/&/g,'&amp;');
        strXML = strXML.replace(/</g,'&lt;');
        strXML = strXML.replace(/>/g,'&gt;');
        strXML = strXML.replace(/\'/g,'&apos;');
        strXML = strXML.replace(/\"/g,'&quot;');

        return strXML;
   },

    //Returns correct XML defining toolbar button
    BuildButtonXml:function (buttonLabel,buttonIcon,buttonTooltip,xmlData,
   optionsDisplayText,optionsDisplayIcon,uniqueComponentID){
        var strXML = '<BUTTON>';
        strXML += '<PERMISSIONS><EDIT>True</EDIT><MOVE>True</MOVE><DELETE>True</DELETE></PERMISSIONS>';
        strXML += '<USER_ATTRIBUTES><PERMISSION>FULL</PERMISSION><SHOW_IN_CHEVRON>True</SHOW_IN_CHEVRON></USER_ATTRIBUTES>';
        strXML += '<UNIQUE_COMP_ID>' + this.ToLegalXML(uniqueComponentID) + '</UNIQUE_COMP_ID>';
        strXML += '<DEFAULT_BUTTON_TEXT>' + this.ToLegalXML(buttonLabel) + '</DEFAULT_BUTTON_TEXT>';
        strXML += '<BUTTON_ICON_URL>' + this.ToLegalXML(buttonIcon) + '</BUTTON_ICON_URL>';
        strXML += '<BUTTON_TOOLTIP>' + this.ToLegalXML(buttonTooltip) + '</BUTTON_TOOLTIP>';
        //options display text/icon
        strXML += '<DISPLAY_TEXT>' + this.ToLegalXML(optionsDisplayText) + '</DISPLAY_TEXT>';
        strXML += '<DISPLAY_ICON>' + this.ToLegalXML(optionsDisplayIcon) + '</DISPLAY_ICON>';
        //data node
        strXML += xmlData;
        strXML += '</BUTTON>';

        return strXML;
   },

    //Returns correct XML defining toolbar RSS component
    BuildRssXml:function (buttonLabel,buttonIcon,rssFeedUrl,buttonNewMessagesIcon,optionsDisplayText,
optionsDisplayIcon,refreshIntervalInMinutes,uniqueComponentID){

        var strXML = '<RSS_FEED_ITEM>';
        strXML += '<PERMISSIONS><EDIT>True</EDIT><MOVE>True</MOVE><DELETE>True</DELETE></PERMISSIONS>';
        strXML += '<USER_ATTRIBUTES><PERMISSION>FULL</PERMISSION><SHOW_IN_CHEVRON>True</SHOW_IN_CHEVRON></USER_ATTRIBUTES>';
        strXML += '<UNIQUE_COMP_ID>' + this.ToLegalXML(uniqueComponentID) + '</UNIQUE_COMP_ID>';
        strXML += '<DISPLAY_TEXT>' + this.ToLegalXML(optionsDisplayText) + '</DISPLAY_TEXT>';
        strXML += '<DISPLAY_ICON>' + this.ToLegalXML(optionsDisplayIcon) + '</DISPLAY_ICON>';
        strXML += '<TITLE>' + this.ToLegalXML(buttonLabel) + '</TITLE>';
        strXML += '<LINK>' + this.ToLegalXML(rssFeedUrl) + '</LINK>';
        strXML += '<ICON_NORMAL_URL>' + this.ToLegalXML(buttonIcon) + '</ICON_NORMAL_URL>';
        strXML += '<ICON_STARED_URL>' + this.ToLegalXML(buttonNewMessagesIcon) + '</ICON_STARED_URL>';
        strXML += '<LIVE_MODE>False</LIVE_MODE>';
        strXML += '<INTERVAL>' + this.ToLegalXML(refreshIntervalInMinutes) + '</INTERVAL>';
        strXML += '<COMMENTS_LINK/>';
        strXML += '<RSS_VIEW>ADJUSTIVE</RSS_VIEW>';
        strXML += '</RSS_FEED_ITEM>';

        return strXML;
   },

    //Returns correct XML defining toolbar RadioSation
    BuildRadioStationXml:function (name,url,contantType,mediaType,uniqueComponentID){
        var strXML = '<RADIO_STATION>';
        strXML += '<STATION_ID>' + this.ToLegalXML(uniqueComponentID) + '</STATION_ID>';
        strXML += '<STATION_NAME>' + this.ToLegalXML(name) + '</STATION_NAME>';
        strXML += '<STATION_URL>' + this.ToLegalXML(url) + '</STATION_URL>';
        strXML += '<TYPE>' + mediaType + '</TYPE>';
        strXML += '<CONTENT_TYPE>' + contantType + '</CONTENT_TYPE>';
        strXML += '</RADIO_STATION>';

        return strXML;
   },

    BuildMenuItemLinkType:function (menuItemCaption,menuItemIconUrl,linkUrl,linkTarget){
        var strXML = '<MENU_ITEM>';
        strXML += '<CAPTION>' + this.ToLegalXML(menuItemCaption) + '</CAPTION>';
        strXML += '<ICON_URL>' + this.ToLegalXML(menuItemIconUrl) + '</ICON_URL>';
        strXML += '<DATA><TYPE>LINK</TYPE><LINK>';
        strXML += '<URL>' + this.ToLegalXML(linkUrl) + '</URL>';
        strXML += '<TARGET>' + this.ToLegalXML(linkTarget) + '</TARGET>';
        strXML += '</LINK></DATA></MENU_ITEM>';

        return strXML;
   },

    //Menu items functions ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    BuildMenuItemXML:function (menuItemCaption,menuItemIconUrl,xmlData){
        var strXML = '<MENU_ITEM>';
        strXML += '<CAPTION>' + this.ToLegalXML(menuItemCaption) + '</CAPTION>';
        strXML += '<ICON_URL>' + this.ToLegalXML(menuItemIconUrl) + '</ICON_URL>';
        strXML += xmlData;
        strXML += '<HASH_CODE>' + MD5Hash.MD5(xmlData + menuItemCaption + menuItemIconUrl) + '</HASH_CODE>';
        strXML += '</MENU_ITEM>';
        return strXML;
   },

    BuildGadgetDataXML:function (linkUrl,width,height,defaultTarget){
        var xmlData = '<DATA><TYPE>POP_HTML</TYPE><POP_HTML>';
        xmlData += '<URL>' + this.ToLegalXML(linkUrl) + '</URL>';
        xmlData += '<DEFAULT_TARGET>' + this.ToLegalXML(defaultTarget) + '</DEFAULT_TARGET>';
        xmlData += '<WIDTH>' + width + '</WIDTH>';
        xmlData += '<HEIGHT>' + height + '</HEIGHT>';
        xmlData += '</POP_HTML></DATA>';
        return xmlData;
   },

    BuildLinkDataXML:function (linkUrl,linkTarget){
        var xmlData = '<DATA><TYPE>LINK</TYPE><LINK>';
        xmlData += '<URL>' + this.ToLegalXML(linkUrl) + '</URL>';
        xmlData += '<TARGET>' + this.ToLegalXML(linkTarget) + '</TARGET>';
        xmlData += '</LINK></DATA>';
        return xmlData;
   },

    BuildCommandDataXML:function (commandType){
        var xmlData = '<DATA><TYPE>COMMAND</TYPE><COMMAND>';
        xmlData += '<TYPE>' + this.ToLegalXML(commandType) + '</TYPE>';
        xmlData += '</COMMAND></DATA>';
        return xmlData;
   },

    BuildApplicationDataXML:function (exeAlias,params,appNotFoundUrl){
        var xmlData = '<DATA><TYPE>APPLICATION</TYPE><APPLICATION>';
        xmlData += '<EXE_ALIAS>' + this.ToLegalXML(exeAlias) + '</EXE_ALIAS>';
        xmlData += '<PARAMS>' + this.ToLegalXML(params) + '</PARAMS>';
        xmlData += '<APP_NOT_FOUND_URL>' + this.ToLegalXML(appNotFoundUrl) + '</APP_NOT_FOUND_URL>';
        xmlData += '</APPLICATION></DATA>';
        return xmlData;
   },
    //Menu items functions end ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    GetToolbarFunctionString:function (strFunctionName){
        strFunctionName = strFunctionName.replace(/\(/,'');
        strFunctionName = strFunctionName.replace(/\)/,'');

        switch (strFunctionName){
            case "Refresh":return "RefreshToolbarByCTID";break;
            case "IsVisible":return "IsToolbarVisible";break;
            case "GetInfo ":return "GetToolbarInfo";break;
            case "AddGadget":return "AddComponentByXML";break;
            case "AddRSS":return "AddComponentByXML";break;
            case "AddLinkButton":return "AddComponentByXML";break;
            default:return strFunctionName;break;
       }
   },

    parseBool:function (strValue){
        if (!strValue) return false;

        return (strValue.toLowerCase() == "true");
   }
};

    var _ManagerHelper =
{
    CreateReturnObject:function (iErrorCode,bReturnValue,data){
        var objReturn = new Object();
        objReturn.errorCode = iErrorCode;
        objReturn.returnValue = bReturnValue;
        objReturn.data = data;

        return objReturn;
   },

    GetManagerReturnObject:function (objManagerReturn,IsData){
        //not an array - returned error for all responses (probably not toolbars)
        if (!objManagerReturn.length)
            return objManagerReturn;

        var objReturn = new Object();
        var iCountUnsupported = 0;

        for (var i = 0;i < objManagerReturn.length;i++){
            if (objManagerReturn[i].returnValue){
                if (!IsData || objManagerReturn[i].data)
                    return objManagerReturn[i];
           }

            else if (objManagerReturn[i].errorCode == 2)
                iCountUnsupported++;

            //if at least one toolbar return untrusted domain,exit with untrusted domain error code
            else if (objManagerReturn[i].errorCode == 10)
                return this.CreateReturnObject(10,false,null);

            //if at least one toolbar returned mystuff not visible,exit
            else if (objManagerReturn[i].errorCode == 11)
                return this.CreateReturnObject(11,false,null);
       }

        //all toolbars are not support this command
        if (iCountUnsupported == objManagerReturn.length)
            return this.CreateReturnObject(2,false,null);

        //at least one toolbar responded,but the value is empty
        if (IsData)
            return this.CreateReturnObject(1,true,null);
        //unknown error - just to make sure that always returns some object
        else
            return this.CreateReturnObject(0,false,null);
   }
}

    var ForceRefreshFlags =
{
    ALL:0,
    SETTINGS:1,
    CHAT:2
    //RADIO:4,
    //GROUPING:8,
    //COMMUNITIES:16,
    //MY_STUFF:32
}

    // Handle update vents for supported functions and toolbar infos
    if (_TPIHelper.GetBrowser() === BROWSERS_DEF.WEBKIT){// Chrome or Safari web toolbars
        var ToolbarInfosObject ={
            'loadingStatus':STILL_LODING_TEXT
       };
        var SupportedFunctions ={
            'Toolbar':{
                'loadingStatus':STILL_LODING_TEXT
           },
            'Manager':{
                'loadingStatus':STILL_LODING_TEXT
           }

       };

        window.addEventListener('message',function (e){
            if (e && e.data){
                var event ={};
                try{
                    event = JSON.parse(e.data.replace('ToolbarApiViewMessage_',''));
               }
                catch (e){
                    console.log("Chrome TPI could not parse general postMessage message:",e.data);
               }

                var eventData = event.data;

                switch (event.sourceAPI){
                    case 'ToolbarApi':

                        switch (event.name){
                            case 'updateSupportedFunctions':
                                SupportedFunctions = eventData.supportedFunctions;
                                break;
                            case 'updateToolbarInfos':
                                ToolbarInfosObject = eventData.toolbarInfos;
                                if (!window.wasTpiDocumentCompleteExecuted && window.TpiDocumentComplete){
                                    window.wasTpiDocumentCompleteExecuted = true;
                                    window.TpiDocumentComplete();
                               }
                                break;
                       }
                        break;
                    case 'BcApi':
                        if (window.EBMessageReceived){
                            window.EBMessageReceived(eventData.key,eventData.data);
                       }
                        else{
                            console.warn("Window doesn't have an EBMessageReceived function implemented.",eventData);
                       }
                        // Handle messages from bc api here
                        break;
               }
           }
       });
   }

    //User object to interact with toolbar / toolbars
    var TPI =
{
    Toolbar:function (strCTID){

        this.CTID = strCTID;
        if (this.CTID){
            this.IsLatestApi = _TPIHelper.ExecuteFunctionSingle(["IsLatestApi"],strCTID).returnValue;
            this.IsToolbarInstalled = -1;
       }

        this.Refresh = function (){
            if (!this.CTID) return this.NoCTID();

            if (this.IsLatestApi)
                return _TPIHelper.ExecuteFunctionSingle(["RefreshToolbarByCTID"],this.CTID);
            else{
                var bResult = _RefreshToolbarByCTID(this.CTID);
                return _TPIHelper.GetOldApiResult(bResult);
           }
       };

        this.ForceRefresh = function (){
            if (!this.CTID) return this.NoCTID();

            if (this.IsLatestApi)
                return _TPIHelper.ExecuteFunctionSingle(["ForceRefreshToolbar"],this.CTID);
            else{
                var bResult = _RefreshToolbarByCTID(this.CTID);
                return _TPIHelper.GetOldApiResult(bResult);
           }
       };

        this.ForceRefreshServices = function (flags){
            if (!this.CTID) return this.NoCTID();
            if (typeof (flags) == "undefined") return this.ParametersError();

            if (this.IsLatestApi){
                if (this.IsSupportedFunction("ForceRefreshServices").returnValue)
                    return _TPIHelper.ExecuteFunctionSingle(["ForceRefreshServices",flags],this.CTID);
                else
                    return this.ForceRefresh();
           }
            else{
                var bResult = _RefreshToolbarByCTID(this.CTID);
                return _TPIHelper.GetOldApiResult(bResult);
           }
       };

        this.IsVisible = function (){
            if (!this.CTID) return this.NoCTID();

            var returnObj = null;
            if (this.IsLatestApi){
                returnObj = _TPIHelper.ExecuteFunctionSingle(["IsToolbarVisible"],this.CTID);
           }
            else{
                var bResult = _IsToolbarInstalled(this.CTID);
                returnObj = _TPIHelper.GetOldApiResult(bResult);
           }

            if (_TPIHelper.GetBrowser() === BROWSERS_DEF.WEBKIT){
                if (returnObj.errorCode === 1){
                    returnObj.returnValue = (returnObj.isVisible === "true" ? true :false);
               }
           }

            return (returnObj);
       };

        this.IsInstalled = function (){
            return (_TPIHelper.ExecuteFunctionSingle(["IsInstalled"],this.CTID));
       };

        this.IsHidden = function (){
            var returnObj = this.IsInstalled();
            if (returnObj.returnValue){
                returnObj = _TPIHelper.ExecuteFunctionSingle(["IsHidden"],this.CTID);

                if (_TPIHelper.GetBrowser() === BROWSERS_DEF.WEBKIT){
                    var isVisibleReturnObj = this.IsVisible();
                    if (isVisibleReturnObj.errorCode === 1 && isVisibleReturnObj.isVisible === "false"){
                        returnObj.returnValue = true;
                   }
                    else{
                        returnObj.returnValue = false;
                   }
               }
           }

            return (returnObj);
       };

        this.ShowHiddenToolbar = function (){
            var returnObj = this.IsHidden();
            if (returnObj.returnValue){
                if (_TPIHelper.GetBrowser() === BROWSERS_DEF.WEBKIT && (!ToolbarInfosObject[this.CTID].allowShowingHiddenToolbar || ToolbarInfosObject[this.CTID].allowShowingHiddenToolbar === "false")){
                    returnObj.errorCode = ERROR_CODE_PERMISSION_DENIED;
                    returnObj.returnValue = false;
               }
                else{
                    returnObj = _TPIHelper.ExecuteFunctionSingle(["ShowHiddenToolbar"],this.CTID);
               }
           }

            return (returnObj);
       };

        this.AddComponentByXML = function (strXML){
            if (!this.CTID) return this.NoCTID();

            if (this.IsLatestApi)
                return _TPIHelper.ExecuteFunctionSingle(["AddComponentByXML",strXML],this.CTID);
            else{
                var bResult = _AddComponentByXML(strXML,this.CTID)
                return _TPIHelper.GetOldApiResult(bResult);
           }
       };

        this.GetInfo = function (){
            if (!this.CTID) return this.NoCTID();

            if (this.IsLatestApi){
                if (_TPIHelper.GetBrowser() === BROWSERS_DEF.WEBKIT){
                    var toolbarInfo = ToolbarInfosObject[this.CTID];
                    var returnObj = toolbarInfo ||{};
                    if (toolbarInfo !== undefined){
                        returnObj.errorCode = 1;
                        returnObj.returnValue = true;
                   }
                    else{// Toolbar is not installed
                        returnObj.errorCode = 0;
                        returnObj.returnValue = false;
                   }

                    return returnObj;
               }
                else{
                    return _TPIHelper.ExecuteFunctionSingle(["GetToolbarInfo"],this.CTID);
               }
           }
            else{
                if (!this.GetIsToolbarInstalled())
                    return this.NoToolbarInstalled();
                else
                    return this.UnsupportedCommand()
           }
       };

        this.AddGadget = function (buttonLabel,buttonIcon,buttonTooltip,linkTargetUrl,
   width,height,defaultTarget,optionsDisplayText,optionsDisplayIcon,uniqueComponentID){
            if (!this.CTID) return this.NoCTID();

            //parameters checks
            if (buttonLabel == "" && buttonIcon == "" && optionsDisplayIcon == "" && optionsDisplayText == ""){
                return this.ParametersError();
           }

            if (typeof linkTargetUrl == "undefined" || linkTargetUrl == ""){
                return this.ParametersError();
           }

            if (typeof width == "undefined" || width == "" || height == "undefined" || height == ""){
                return this.ParametersError();
           }

            if (typeof optionsDisplayText == "undefined" || optionsDisplayText == ""){
                optionsDisplayText = buttonLabel;
           }

            if (typeof optionsDisplayIcon == "undefined" || optionsDisplayIcon == ""){
                optionsDisplayIcon = buttonIcon;
           }

            if (typeof uniqueComponentID == "undefined" || uniqueComponentID == ""){
                uniqueComponentID = "gadget" + linkTargetUrl + width + height;
           }

            if (typeof defaultTarget == "undefined" || defaultTarget == ""){
                defaultTarget = "_SELF";
           }

            var xmlData = "<DATA><TYPE>POP_HTML</TYPE><POP_HTML><URL>" + _TPIHelper.ToLegalXML(linkTargetUrl) + "</URL>";
            xmlData += "<DEFAULT_TARGET>" + _TPIHelper.ToLegalXML(defaultTarget) + "</DEFAULT_TARGET><WIDTH>" + width + "</WIDTH><HEIGHT>" + height + "</HEIGHT></POP_HTML></DATA>";

            var strXML = _TPIHelper.BuildButtonXml(buttonLabel,buttonIcon,buttonTooltip,xmlData,
       optionsDisplayText,optionsDisplayIcon,uniqueComponentID);


            return this.AddComponentByXML(strXML);
       };

        this.AddRSS = function (buttonLabel,buttonIcon,rssFeedUrl,buttonNewMessagesIcon,optionsDisplayText,
optionsDisplayIcon,refreshIntervalInMinutes,uniqueComponentID){
            if (!this.CTID) return this.NoCTID();

            //parameters checks
            if (buttonLabel == "" && buttonIcon == "" && optionsDisplayIcon == "" && optionsDisplayText == ""){
                return this.ParametersError();
           }

            if (typeof rssFeedUrl == "undefined" || rssFeedUrl == ""){
                return this.ParametersError();
           }

            if (typeof optionsDisplayText == "undefined" || optionsDisplayText == ""){
                optionsDisplayText = buttonLabel;
           }

            if (typeof optionsDisplayIcon == "undefined" || optionsDisplayIcon == ""){
                optionsDisplayIcon = buttonIcon;
           }

            if (typeof buttonNewMessagesIcon == "undefined" || buttonNewMessagesIcon == ""){
                buttonNewMessagesIcon = buttonIcon;
           }

            if (typeof uniqueComponentID == "undefined" || uniqueComponentID == ""){
                uniqueComponentID = "rss" + rssFeedUrl;
           }

            if (typeof refreshIntervalInMinutes == "undefined" || refreshIntervalInMinutes == ""){
                refreshIntervalInMinutes = "120";
           }

            var strXML = _TPIHelper.BuildRssXml(buttonLabel,buttonIcon,rssFeedUrl,buttonNewMessagesIcon,optionsDisplayText,
    optionsDisplayIcon,refreshIntervalInMinutes,uniqueComponentID);

            return this.AddComponentByXML(strXML);
       };

        this.AddLinkButton = function (buttonLabel,buttonIcon,buttonTooltip,linkTargetUrl,
   linkTarget,optionsDisplayText,optionsDisplayIcon,uniqueComponentID){
            if (!this.CTID) return this.NoCTID();

            //parameters checks
            if (buttonLabel == "" && buttonIcon == "" && optionsDisplayIcon == "" && optionsDisplayText == ""){
                return this.ParametersError();
           }

            if (typeof linkTargetUrl == "undefined" || linkTargetUrl == ""){
                return this.ParametersError();
           }

            if (typeof optionsDisplayText == "undefined" || optionsDisplayText == ""){
                optionsDisplayText = buttonLabel;
           }

            if (typeof optionsDisplayIcon == "undefined" || optionsDisplayIcon == ""){
                optionsDisplayIcon = buttonIcon;
           }

            if (typeof uniqueComponentID == "undefined" || uniqueComponentID == ""){
                uniqueComponentID = "button" + linkTargetUrl;
           }

            if (typeof linkTarget == "undefined" || linkTarget == ""){
                linkTarget = "SELF";
           }

            var xmlData = "<DATA><TYPE>LINK</TYPE><LINK><URL>" + _TPIHelper.ToLegalXML(linkTargetUrl) + "</URL><TARGET>" + _TPIHelper.ToLegalXML(linkTarget) + "</TARGET></LINK></DATA>";

            var strXML = _TPIHelper.BuildButtonXml(buttonLabel,buttonIcon,buttonTooltip,xmlData,
       optionsDisplayText,optionsDisplayIcon,uniqueComponentID);

            return this.AddComponentByXML(strXML);
       };

        this.AddRadioStation = function (name,url,contantType,mediaType,uniqueComponentID){
            if (!name || !url)
                return this.ParametersError();

            if (!contantType)
                contantType = "MP";

            if (!mediaType)
                mediaType = "STREAM";

            if (!uniqueComponentID)
                uniqueComponentID = url;

            var strXML = _TPIHelper.BuildRadioStationXml(name,url,contantType,mediaType,uniqueComponentID);

            if (!this.CTID) return this.NoCTID();

            if (this.IsLatestApi)
                return _TPIHelper.ExecuteFunctionSingle(["AddRadioStation",strXML],this.CTID);
            else{
                if (!this.GetIsToolbarInstalled())
                    return this.NoToolbarInstalled();
                else
                    return this.UnsupportedCommand();
           }
       };

        this.SwitchToCommunity = function (strCTID){
            if (!this.CTID) return this.NoCTID();

            if (this.IsLatestApi)
                return _TPIHelper.ExecuteFunctionSingle(["SwitchToCommunity",strCTID],this.CTID);
            else{
                if (!this.GetIsToolbarInstalled())
                    return this.NoToolbarInstalled();
                else
                    return this.UnsupportedCommand();
           }
       };

        this.GetSupportedUserAddMenu = function (){
            if (!this.CTID) return this.NoCTID();

            if (this.IsLatestApi)
                return _TPIHelper.ExecuteFunctionSingle(["GetSupportedUserAddMenu"],this.CTID);
            else{
                if (!this.GetIsToolbarInstalled())
                    return this.NoToolbarInstalled();
                else
                    return this.UnsupportedCommand();
           }
       };

        this.AddLinkMenuItem = function (uniqueComponentID,menuItemCaption,menuItemIconUrl,linkUrl,linkTarget){
            if (!this.CTID) return this.NoCTID();

            if (!uniqueComponentID || !linkUrl || (!menuItemCaption && !menuItemIconUrl))
                return this.ParametersError();

            var strXMLData = _TPIHelper.BuildLinkDataXML(linkUrl,linkTarget);
            var strXML = _TPIHelper.BuildMenuItemXML(menuItemCaption,menuItemIconUrl,strXMLData);

            if (this.IsLatestApi)
                return _TPIHelper.ExecuteFunctionSingle(["AddUserLinkMenuItem",strXML,uniqueComponentID],this.CTID);
            else{
                if (!this.GetIsToolbarInstalled())
                    return this.NoToolbarInstalled();
                else
                    return this.UnsupportedCommand();
           }
       };

        this.AddGadgetMenuItem = function (uniqueComponentID,menuItemCaption,menuItemIconUrl,linkUrl,width,height,defaultTarget){
            if (!this.CTID) return this.NoCTID();

            if (!uniqueComponentID || !linkUrl || (!menuItemCaption && !menuItemIconUrl) || !width || !height)
                return this.ParametersError();

            var strXMLData = _TPIHelper.BuildGadgetDataXML(linkUrl,width,height,defaultTarget);
            var strXML = _TPIHelper.BuildMenuItemXML(menuItemCaption,menuItemIconUrl,strXMLData);

            if (this.IsLatestApi)
                return _TPIHelper.ExecuteFunctionSingle(["AddUserLinkMenuItem",strXML,uniqueComponentID],this.CTID);
            else{
                if (!this.GetIsToolbarInstalled())
                    return this.NoToolbarInstalled();
                else
                    return this.UnsupportedCommand();
           }
       };

        this.AddCommandMenuItem = function (uniqueComponentID,menuItemCaption,menuItemIconUrl,commandType){
            if (!this.CTID) return this.NoCTID();

            if (!uniqueComponentID || (!menuItemCaption && !menuItemIconUrl) || !commandType)
                return this.ParametersError();

            var strXMLData = _TPIHelper.BuildCommandDataXML(commandType);
            var strXML = _TPIHelper.BuildMenuItemXML(menuItemCaption,menuItemIconUrl,strXMLData);

            if (this.IsLatestApi)
                return _TPIHelper.ExecuteFunctionSingle(["AddUserLinkMenuItem",strXML,uniqueComponentID],this.CTID);
            else{
                if (!this.GetIsToolbarInstalled())
                    return this.NoToolbarInstalled();
                else
                    return this.UnsupportedCommand();
           }
       };

        this.AddApplicationMenuItem = function (uniqueComponentID,menuItemCaption,menuItemIconUrl,exeAlias,params,appNotFoundUrl){
            if (!this.CTID) return this.NoCTID();

            if (!uniqueComponentID || (!menuItemCaption && !menuItemIconUrl) || !exeAlias)
                return this.ParametersError();

            var strXMLData = _TPIHelper.BuildApplicationDataXML(exeAlias,params,appNotFoundUrl)
            var strXML = _TPIHelper.BuildMenuItemXML(menuItemCaption,menuItemIconUrl,strXMLData);

            if (this.IsLatestApi)
                return _TPIHelper.ExecuteFunctionSingle(["AddUserLinkMenuItem",strXML,uniqueComponentID],this.CTID);
            else{
                if (!this.GetIsToolbarInstalled())
                    return this.NoToolbarInstalled();
                else
                    return this.UnsupportedCommand();
           }
       };

        /* *********************** MyStuff functions *********************** */
        var self = this;
        function addApp(appGuid,appName,sourceId){
            if (!window.mAddAppsArrayList){
                window.mAddAppsArrayList = new Object();
           }
            if (!window.mAddAppsArrayList[self.CTID]){
                window.mAddAppsArrayList[self.CTID] = new Array();
           }

            window.mAddAppsArrayList[self.CTID].push({guid:appGuid,name:appGuid});
            var mAddAppsSource = sourceId;

            clearTimeout(window["mAddAppsTimerId_" + self.CTID]);


            window["mAddAppsTimerId_" + self.CTID] = setTimeout(function (){
                self.AddApps({
                    source:mAddAppsSource,
                    apps:window.mAddAppsArrayList[self.CTID]
               });

                delete window.mAddAppsArrayList[self.CTID];
                delete window["mAddAppsTimerId_" + self.CTID];
           },100);

            return self.OKResponse();
       };

        this.AddMyStuffComponent = function (componentGuid,compInstanceGuid,compName,sourceId){
            if (!this.CTID) return this.NoCTID();
            if (!componentGuid) return this.ParametersError();
            if (typeof compName == "undefined") compName = "";

            if (this.IsLatestApi){
                var toolbarInfo = this.GetInfo();
                if (toolbarInfo && toolbarInfo.isNewAddMystuffComponent){
                    if (this.IsSupportedFunction("AddApps").returnValue && this.IsTrustedDomain().returnValue){
                        return addApp(componentGuid,compName,sourceId);
                   }else{
                        return _TPIHelper.ExecuteFunctionSingle(["AddMyStuffComponent",componentGuid,compName,sourceId],this.CTID);
                   }
               }
                else
                    return _TPIHelper.ExecuteFunctionSingle(["AddMyStuffComponent",componentGuid,compInstanceGuid,compName],this.CTID);
           }
            else{
                if (!this.GetIsToolbarInstalled())
                    return this.NoToolbarInstalled();
                else
                    return this.UnsupportedCommand();
           }
       };

        this.AddApps = function (data){
            if (!this.CTID) return this.NoCTID();
            var strData = "";
            try{
                strData = EBJSON.stringify(data);
           }
            catch (e){
                return this.ParametersError();
           }

            if (this.IsLatestApi)
                return _TPIHelper.ExecuteFunctionSingle(["AddApps",strData],this.CTID);
            else{
                if (!this.GetIsToolbarInstalled())
                    return this.NoToolbarInstalled();
                else
                    return this.UnsupportedCommand();
           }
       };

        this.IsTrustedDomain = function (){
            if (this.IsLatestApi)
                return _TPIHelper.ExecuteFunctionSingle(["IsTrustedDomain"],this.CTID);
            else{
                if (!this.GetIsToolbarInstalled())
                    return this.NoToolbarInstalled();
                else
                    return this.UnsupportedCommand();
           }
       };

        //************************ MyStuff functions end ************************

        this.IsSupportedFunction = function (strFunctionName){
            if (!this.CTID) return this.NoCTID();
            if (this.IsLatestApi){
                var strToolbarFunctionName = _TPIHelper.GetToolbarFunctionString(strFunctionName);

                if (_TPIHelper.GetBrowser() === BROWSERS_DEF.WEBKIT){
                    return{
                        'returnValue':(strToolbarFunctionName in SupportedFunctions.Toolbar),
                        'errorCode':1
                   };
               }
                else{
                    return _TPIHelper.ExecuteFunctionSingle([_TPIHelper.IsSupportedFunction,strToolbarFunctionName],this.CTID);
               }

           }
            else{
                if (!this.GetIsToolbarInstalled())
                    return this.NoToolbarInstalled();
                else
                    return this.UnsupportedCommand();
           }
       };

        //builds xml for response parser,for unsupported command
        this.UnsupportedCommand = function (){
            var strXmlResult = "<RETURN_OBJECT><RETURN_VALUE>false</RETURN_VALUE><ERROR_CODE>2</ERROR_CODE></RETURN_OBJECT>";
            return _TPIHelper.GetResult(strXmlResult);
       };

        //builds xml for response parser,for input parameters error
        this.ParametersError = function (){
            var strXmlResult = "<RETURN_OBJECT><RETURN_VALUE>false</RETURN_VALUE><ERROR_CODE>3</ERROR_CODE></RETURN_OBJECT>";
            return _TPIHelper.GetResult(strXmlResult);
       };

        this.NoToolbarInstalled = function (){
            var strXmlResult = "<RETURN_OBJECT><RETURN_VALUE>false</RETURN_VALUE><ERROR_CODE>0</ERROR_CODE></RETURN_OBJECT>";
            return _TPIHelper.GetResult(strXmlResult);
       };

        this.NoCTID = function (){
            var strXmlResult = "<RETURN_OBJECT><RETURN_VALUE>false</RETURN_VALUE><ERROR_CODE>6</ERROR_CODE></RETURN_OBJECT>";
            return _TPIHelper.GetResult(strXmlResult);
       };

        this.OKResponse = function (){
            var strXmlResult = "<RETURN_OBJECT><RETURN_VALUE>true</RETURN_VALUE><ERROR_CODE>1</ERROR_CODE></RETURN_OBJECT>";
            return _TPIHelper.GetResult(strXmlResult);
       };

        this.GetIsToolbarInstalled = function (){
            if (this.IsToolbarInstalled == -1){
                this.IsToolbarInstalled = _IsToolbarInstalled(this.CTID);
           }

            return this.IsToolbarInstalled;
       };

        this.IsAppInstalled = function (guid){
            if (this.IsLatestApi)
                return _TPIHelper.ExecuteFunctionSingle(["IsAppInstalled",guid],this.CTID);
            else{
                if (!this.GetIsToolbarInstalled())
                    return this.NoToolbarInstalled();
                else
                    return this.UnsupportedCommand();
           }
       };

   },

    //Helper manager to interract with multiple toolbars
    Manager:function (){

        this.GetAllToolbarsInfo = function (){

            if (_TPIHelper.GetBrowser() === BROWSERS_DEF.WEBKIT){
                var ToolbarInfos = null;

                if (ToolbarInfosObject && ToolbarInfosObject['loadingStatus'] != STILL_LODING_TEXT){
                    ToolbarInfos = [];

                    for (var ctid in ToolbarInfosObject){
                        ToolbarInfos.push(ToolbarInfosObject[ctid]);
                        var toolbarInfo = ToolbarInfos[ToolbarInfos.length - 1];
                        toolbarInfo.errorCode = 1;
                        toolbarInfo.returnValue = true;
                   }
               }
                return ToolbarInfos;
           }
            else{
                return _TPIHelper.ExecuteFunctionMultiple(["GetAllToolbarsInfo"]);
           }
       };

        this.AddAlert = function (alertId){
            return _TPIHelper.ExecuteFunctionAny(["AddAlert",alertId]);
       };

        this.AddMyStuffAlert = function (alertId,alertProviderName){
            return _TPIHelper.ExecuteFunctionAny(["AddMyStuffAlert",alertId,alertProviderName]);
       };

        this.IsSubscribedToAlert = function (alertId){
            var objMultipleReturn = _TPIHelper.ExecuteFunctionAny(["IsSubscribedToAlert",alertId]);
            return _ManagerHelper.GetManagerReturnObject(objMultipleReturn,false);
       };

        this.IsSupportedFunction = function (strFunctionName){
            var strToolbarFunctionName = _TPIHelper.GetToolbarFunctionString(strFunctionName);

            if (_TPIHelper.GetBrowser() === BROWSERS_DEF.WEBKIT){

                return{
                    'returnValue':(strToolbarFunctionName in SupportedFunctions.Manager) || (strToolbarFunctionName in SupportedFunctions.Toolbar),
                    'errorCode':1
               };
           }
            else{
                var objMultipleReturn = _TPIHelper.ExecuteFunctionAny([_TPIHelper.IsSupportedFunction,strToolbarFunctionName]);

                if (!objMultipleReturn.length)
                    return objMultipleReturn;

                var bIsSucceeded = false;

                for (var i = 0;i < objMultipleReturn.length;i++){
                    //at least one toolbar support this function
                    if (objMultipleReturn[i].returnValue)
                        return objMultipleReturn[i];

                    //at least one toolbar supports the check-supported function,but not supports the requested function
                    if (objMultipleReturn[i].errorCode == 1)
                        bIsSucceeded = true;
               }

                //at least one toolbar supports the check-supported function,but not supports the requested function
                if (bIsSucceeded)
                    return _ManagerHelper.CreateReturnObject(1,false,null);
                //all toolbars doesn't recognize the heck-supported function
                else
                    return _ManagerHelper.CreateReturnObject(2,false,null);
           }
       };

        this.SendMessage = function (key,data){
            if (_TPIHelper.GetBrowser() === BROWSERS_DEF.WEBKIT){// Chrome or Safari web toolbars
                var sendMessageEvent ={
                    'name':'sendMessage',
                    'data':{
                        'key':key,
                        'data':data
                   },
                    'sourceAPI':'ToolbarApi',
                    'targetAPI':'BcApi'
               };

                // post message to injected script (same domain)
                window.postMessage(JSON.stringify(sendMessageEvent),'*');//document.location.origin);
           }
            else{
                //send to toolbar
                var oToolbar = null;
                for (var i = 0;i < _RegistredToolbars.arrToolbars.length;i++){
                    oToolbar = _RegistredToolbars.arrToolbars[i];
                    oToolbar.ExecuteApiFunction(["SendMessage",key,data]);
               }
           }
       };

        this.RegisterForMessaging = function (topic,callback){
            if (!_RegistredToolbars.registeredTopicHash[topic])
                _RegistredToolbars.registeredTopicHash[topic] = new Array();
            _RegistredToolbars.registeredTopicHash[topic].push(callback);
       };

        this.IsAppInstalled = function (strGuid){
            var arrToolbars = this.GetAllToolbarsInfo();
            var oToolbar = null;
            if (!arrToolbars.length){//{returnValue:false,errorCode:0}
                oToolbar = new TPI.Toolbar("");
                return oToolbar.NoToolbarInstalled();
           }

            var oRes = null;
            for (var i = 0;i < arrToolbars.length;i++){
                oToolbar = new TPI.Toolbar(arrToolbars[i].CTID);
                try{
                    oRes = oToolbar.IsAppInstalled(strGuid);
                    if (oRes.returnValue)
                        return oRes;
               }catch (e){}
           }

            if (!oRes){//{returnValue:false,errorCode:0}
                oToolbar = new TPI.Toolbar("");
                return oToolbar.NoToolbarInstalled();
           }
            return oRes;
       };
   }
}

    // ======================= Older API Functions ========================

    //this is a blank object
    //this object is used to catch all the calls 
    //that the toolbars(IE & Firefox) didn't catch
    var EBToolbarApi =
{
    Result:false,

    ResetResult:function (){
        this.SetResult(false);
   },

    SetResult:function (bValue){
        this.Result = bValue;
   },

    GetResult:function (){
        return this.Result;
   },

    RefreshAllToolbars:function (){
        //do nothing...
   },

    RefreshToolbarByCTID:function (strCTID){
        //do nothing...
   },

    IsToolbarInstalled:function (strCTID){
        //do nothing...
   },

    AddComponentByXML:function (strXML,strCTID){
        //do nothing...
   }
}

    //wrapped function to set result (for IE)
    function EBSetResult(bValue){
        EBToolbarApi.SetResult(bValue);
   }

    //-------------------------------------------------------------------

    /***** Public API Functions *****/

    /******************************** - IMPORTTANT - **********************************/
    //                                                                                //
    //The functions should be called the earliset at the onload event of the page   //
    //                                                                                //
    /**********************************************************************************/

    /************************************************/
    /*bool RefreshAllToolbars()*/
    /*This function refreshes all toolbars.*/
    /************************************************/
    function RefreshAllToolbars(){
        var bResult = _RefreshAllToolbars();

        var oManager = new TPI.Manager();
        var oResult = oManager.GetAllToolbarsInfo();
        var bResult = true;
        if (oResult.length){
            for (var i = 0;i < oResult.length;i++){
                var oToolbar = new TPI.Toolbar(oResult[i].CTID);
                var oRes = oToolbar.Refresh();
                bResult = oRes.returnValue || bResult;
           }
       }

        return bResult;
   }

    /************************************************/
    /*bool RefreshToolbarByCTID(strCTID)*/
    /*This function refreshes the toolbar by CTID.*/
    /************************************************/
    function RefreshToolbarByCTID(strCTID){
        var oToolbar = new TPI.Toolbar(strCTID);
        var oRes = oToolbar.Refresh();
        return oRes.returnValue;
   }

    /************************************************/
    /*bool IsToolbarInstalled(strCTID)    */
    /*This function returns true if the toolbar   */
    /*with the given CTID is installed.*/
    /************************************************/
    function IsToolbarInstalled(strCTID){
        var oToolbar = new TPI.Toolbar(strCTID);
        var oRes = oToolbar.IsVisible();
        return oRes.returnValue;
   }

    /************************************************/
    /*bool AddComponentByXML(strXML,strCTID)  */
    /*This function returns true if the toolbar   */
    /*with the given CTID is installed.*/
    /************************************************/
    function AddComponentByXML(strXML,strCTID){
        var oToolbar = new TPI.Toolbar(strCTID);
        var oRes = oToolbar.AddComponentByXML(strXML);
        return oRes.returnValue;
   }


    //Inner functions for new API to talk to old toolbars
    function __ExecuteOldApiFunction(strUrl){
        var strBrowser = _TPIHelper.GetBrowser();
        switch (strBrowser){
            case BROWSERS_DEF.IE6:
                location.href = "javascript:" + strUrl;
                break;
            case BROWSERS_DEF.IE7:
                _TPIHelper.NavigateInIFrame("about:blank#javascript:" + strUrl);
                break;
            case BROWSERS_DEF.FF:
                eval(strUrl);
                break;
       }
   };

    function _RefreshAllToolbars(){
        EBToolbarApi.ResetResult();

        __ExecuteOldApiFunction("EBToolbarApi.RefreshAllToolbars();");
        return EBToolbarApi.GetResult();
   }

    function _RefreshToolbarByCTID(strCTID){
        EBToolbarApi.ResetResult();

        __ExecuteOldApiFunction("EBToolbarApi.RefreshToolbarByCTID('" + strCTID + "');");
        return EBToolbarApi.GetResult();
   }

    function _IsToolbarInstalled(strCTID){
        EBToolbarApi.ResetResult();

        __ExecuteOldApiFunction("EBToolbarApi.IsToolbarInstalled('" + strCTID + "');");
        return EBToolbarApi.GetResult();
   }

    function _AddComponentByXML(strXML,strCTID){
        EBToolbarApi.ResetResult();

        __ExecuteOldApiFunction("EBToolbarApi.AddComponentByXML(\"" + strXML + "\",\"CTID=" + strCTID.toUpperCase() + "\");");
        return EBToolbarApi.GetResult();
   }


    function __EBonMessageReceived(ctid,topic,data){
        if (!_RegistredToolbars.registeredTopicHash[topic]) return;

        for (var i = 0;i < _RegistredToolbars.registeredTopicHash[topic].length;i++)
            _RegistredToolbars.registeredTopicHash[topic][i](topic,data);
   };


    /*
    * A JavaScript implementation of the RSA Data Security,Inc. this.MD5 Message
    * Digest Algorithm,as defined in RFC 1321.
    * Copyright (C) Paul Johnston 1999 - 2000.
    * Updated by Greg Holt 2000 - 2001.
    * See http://pajhome.org.uk/site/legal.html for details.
    */

    /*
    * Convert a 32-bit number to a hex string with ls-byte first
    */
    var MD5Hash =
{
    hex_chr:"0123456789abcdef",

    rhex:function (num){
        str = "";
        for (j = 0;j <= 3;j++)
            str += this.hex_chr.charAt((num >> (j * 8 + 4)) & 0x0F) +
               this.hex_chr.charAt((num >> (j * 8)) & 0x0F);
        return str;
   },

    /*
    * Convert a string to a sequence of 16-word blocks,stored as an array.
    * Append pthis.adding bits and the length,as described in the this.MD5 standard.
    */
    str2blks_MD5:function (str){
        nblk = ((str.length + 8) >> 6) + 1;
        blks = new Array(nblk * 16);
        for (i = 0;i < nblk * 16;i++) blks[i] = 0;
        for (i = 0;i < str.length;i++)
            blks[i >> 2] |= str.charCodeAt(i) << ((i % 4) * 8);
        blks[i >> 2] |= 0x80 << ((i % 4) * 8);
        blks[nblk * 16 - 2] = str.length * 8;
        return blks;
   },

    /*
    * this.add integers,wrapping at 2^32. This uses 16-bit operations internally 
    * to work around bugs in some JS interpreters.
    */
    add:function (x,y){
        var lsw = (x & 0xFFFF) + (y & 0xFFFF);
        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 0xFFFF);
   },

    /*
    * Bitwise rotate a 32-bit number to the left
    */
    rol:function (num,cnt){
        return (num << cnt) | (num >>> (32 - cnt));
   },

    /*
    * These functions implement the basic operation for each round of the
    * algorithm.
    */
    cmn:function (q,a,b,x,s,t){
        return this.add(this.rol(this.add(this.add(a,q),this.add(x,t)),s),b);
   },

    ff:function (a,b,c,d,x,s,t){
        return this.cmn((b & c) | ((~b) & d),a,b,x,s,t);
   },

    gg:function (a,b,c,d,x,s,t){
        return this.cmn((b & d) | (c & (~d)),a,b,x,s,t);
   },

    hh:function (a,b,c,d,x,s,t){
        return this.cmn(b ^ c ^ d,a,b,x,s,t);
   },

    ii:function (a,b,c,d,x,s,t){
        return this.cmn(c ^ (b | (~d)),a,b,x,s,t);
   },

    /*
    * Take a string and return the hex representation of its this.MD5.
    */
    MD5:function (str){
        x = this.str2blks_MD5(str);
        var a = 1732584193;
        var b = -271733879;
        var c = -1732584194;
        var d = 271733878;

        for (i = 0;i < x.length;i += 16){
            var olda = a;
            var oldb = b;
            var oldc = c;
            var oldd = d;

            a = this.ff(a,b,c,d,x[i + 0],7,-680876936);
            d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
            c = this.ff(c,d,a,b,x[i + 2],17,606105819);
            b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
            a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
            d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
            c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
            b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
            a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
            d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
            c = this.ff(c,d,a,b,x[i + 10],17,-42063);
            b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
            a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
            d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
            c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
            b = this.ff(b,c,d,a,x[i + 15],22,1236535329);

            a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
            d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
            c = this.gg(c,d,a,b,x[i + 11],14,643717713);
            b = this.gg(b,c,d,a,x[i + 0],20,-373897302);
            a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
            d = this.gg(d,a,b,c,x[i + 10],9,38016083);
            c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
            b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
            a = this.gg(a,b,c,d,x[i + 9],5,568446438);
            d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
            c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
            b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
            a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
            d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
            c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
            b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);

            a = this.hh(a,b,c,d,x[i + 5],4,-378558);
            d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
            c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
            b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
            a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
            d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
            c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
            b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
            a = this.hh(a,b,c,d,x[i + 13],4,681279174);
            d = this.hh(d,a,b,c,x[i + 0],11,-358537222);
            c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
            b = this.hh(b,c,d,a,x[i + 6],23,76029189);
            a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
            d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
            c = this.hh(c,d,a,b,x[i + 15],16,530742520);
            b = this.hh(b,c,d,a,x[i + 2],23,-995338651);

            a = this.ii(a,b,c,d,x[i + 0],6,-198630844);
            d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
            c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
            b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
            a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
            d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
            c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
            b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
            a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
            d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
            c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
            b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
            a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
            d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
            c = this.ii(c,d,a,b,x[i + 2],15,718787259);
            b = this.ii(b,c,d,a,x[i + 9],21,-343485551);

            a = this.add(a,olda);
            b = this.add(b,oldb);
            c = this.add(c,oldc);
            d = this.add(d,oldd);
       }
        return this.rhex(a) + this.rhex(b) + this.rhex(c) + this.rhex(d);
   }
};

    // Resend Tpi.View Messages all over again if TPI.View was created before regular TPI
    if (_TPIHelper && _TPIHelper.GetBrowser() === BROWSERS_DEF.WEBKIT){
        var elementIsTpiViewExists = document.getElementById("__isTpiViewExists");
        if (elementIsTpiViewExists){
            var sendMessageEvent ={
                'name':'ResendTpiViewMessages',
                'data':{},
                'sourceAPI':'ToolbarApi',
                'targetAPI':'ToolbarApi'
           };
            // post message to injected script (same domain)
            if (document && document.location && document.location.href.toUpperCase().indexOf("FACEBOOK.COM") === -1){
                window.postMessage(JSON.stringify(sendMessageEvent),document.location.origin);
           }
       }
   }
}/* [INCLUDE FILE] oas/oas_gamepages */
//configuration
OAS_url ='http://ads.miniclip.com/RealMedia/ads/';
OAS_sitepage = 'miniclip.com/gamepages';
//end of configuration
OAS_version = 10;
OAS_rn = '001234567890';OAS_rns = '1234567890';
OAS_rn = new String (Math.random());OAS_rns = OAS_rn.substring (2,11);
function OAS_NORMAL(pos){
document.write('<A HREF="' + OAS_url + 'click_nx.ads/' + OAS_sitepage + '/1' + OAS_rns + '@' + OAS_listpos + '!' + pos + OAS_query + '" TARGET=_top>');
document.write('<IMG SRC="' + OAS_url + 'adstream_nx.ads/' + OAS_sitepage + '/1' + OAS_rns + '@' + OAS_listpos + '!' + pos + OAS_query + '" BORDER=0 ALT="Click!"></A>');
}

OAS_version = 11;
if (navigator.userAgent.indexOf('Mozilla/3') != -1)
OAS_version = 10;
if (OAS_version >= 11)
document.write('<SC'+'RIPT LANGUAGE=JavaScript1.1 SRC="' + OAS_url + 'adstream_mjx.ads/' + OAS_sitepage + '/1' + OAS_rns + '@' + OAS_listpos + OAS_query + '"><\/SCRIPT>');

 document.write('');
function OAS_AD(pos){
if (OAS_version >= 11 && typeof(OAS_RICH) !='undefined')
  OAS_RICH(pos);
else
  OAS_NORMAL(pos);
}