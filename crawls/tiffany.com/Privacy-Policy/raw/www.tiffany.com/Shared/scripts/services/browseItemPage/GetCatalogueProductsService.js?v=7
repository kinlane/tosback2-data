// ----------------------------------------------
// File:		GetCatalogueProductsService.js
// Author:		Nathan Derksen
// Description:	A class that holds the available service methods, along with response handlers.
// Example:
// GetCatalogueProductsService.getInstance().getProducts(searchCriteria, 0, 12);
// ----------------------------------------------


// ----------------------------------------------
// Function:	GetCatalogueProductsService
// Author:		Nathan Derksen
// Description:	Base class
// Inputs:		<none>
// Returns:		<nothing>
// ----------------------------------------------
function GetCatalogueProductsService()
{
}

// ----------------------------------------------
// Function:	GetCatalogueProductsService.getProducts
// Author:		Nathan Derksen
// Description:	Calls the service to retrieve a set of products
// Inputs:		<Object> searchCriteria - An object of properties to search on
//				<Number> startIndex - The zero-based index of which row to start at in the total results
//				<Number> maxResults - The maximum number of results to return
// Returns:		<nothing>
// ----------------------------------------------
GetCatalogueProductsService.prototype.getData = function(queryString)
{
	try
	{
		var gridName = URLFactory.extractValue(queryString, "currentProductGrid");
		var currentPage = Number(URLFactory.extractValue(queryString, "currentPage"));
		var sku = document.forms[0].itemSku.value;
		var urlQueryString = window.location.search.split("?").join("");
		var relatedItemType = 1;
		var productsGrid = ViewLocator.getInstance().getView("productsGrid");
		var parent = this;

		if (productsGrid.isPageCached(currentPage - 1) == false)
		{
			if (document.forms[0].relatedItemType)
			{
				relatedItemType = Number(document.forms[0].relatedItemType.value);
			}

			if (isAjaxEnabled() == true)
			{
				if (gridName.toLowerCase() == "viewrelated" && sku != "")
				{
					PageMethods.GetRelatedItemsXml(sku, String(currentPage), relatedItemType, function(result)
					{
						parent.onResult(result, queryString);
					}, this.onError);
				}
				else
				{
				    PageMethods.GetItemsXmlByPaperCatalogueId(URLFactory.extractQueryStringValue(urlQueryString, "pc_id"), String(currentPage), function (result)
					{
						parent.onResult(result, queryString);
					}, this.onError);
					//		PageMethods.GetItemsXmlByPaperCatalogueId(URLFactory.extractQueryStringValue(queryString, "pc_id"), this.onResult, this.onError);
				}
			}
		}
	}
	catch (err)
	{
		Debug.error(err);
	}
};

// ----------------------------------------------
GetCatalogueProductsService.prototype.getJSONData = function()
{
	try
	{
		var resultProductArray = [];
		if (typeof(tblData) != "undefined")
		{
			resultProductArray = ProductFactory.convertJSONToArray(tblData);
		}
		var numHits = 1;
		if (typeof(gridData) != "undefined")
		{
			numHits = gridData.numHits;
		}

		var productsGrid = ViewLocator.getInstance().getView("productsGrid");
		productsGrid.setProducts(resultProductArray, model.getPageNum());
		
		var model = ProductModel.getInstance();
		model.setNumProducts(numHits);
		model.setProducts(resultProductArray);	
	}
	catch (err)
	{
		Debug.error(err);
	}
};

// ----------------------------------------------
// Function:	GetCatalogueProductsService.onResult
// Author:		Nathan Derksen
// Description:	Callback from the successful completion of the service call
// Inputs:		<XMLElement> result - Handle to the results xml object
// Returns:		<nothing>
// ----------------------------------------------
GetCatalogueProductsService.prototype.onResult = function(result, queryString)
{
	try
	{
		if (result)
		{
			var resultElements = result.documentElement;
			var resultArray = ProductFactory.convertXMLToArray(resultElements);
			var numHits = ProductFactory.getTotalNumProducts(resultElements);

			var model = ProductModel.getInstance();
			var currentPage = model.getPageNum();

			if (typeof (queryString) != "undefined" && queryString != null && URLFactory.extractValue(queryString, "currentPage") != null)
			{
				currentPage = Number(URLFactory.extractValue(queryString, "currentPage")) - 1;
			}

			model.setNumProducts(numHits);
			model.setProducts(resultArray);

			var productsGrid = ViewLocator.getInstance().getView("productsGrid");
			productsGrid.setProducts(resultArray, currentPage);

			$("#staticBorderLeft").show();
			$("#staticBorderRight").show();
		}
		else
		{
			var tempArray = new Array();
			var productsGrid = ViewLocator.getInstance().getView("productsGrid");
			productsGrid.setProducts(tempArray);
			
			var error = new Object();
			error.name = "Service 'GetCatalogueProductsService' returned with no results";
			error.message = error.name;
			error.fileName = "browseItemPage/GetCatalogueProductsService.js";
			error.lineNumber = "";
			Debug.error(error);
		}
	}
	catch (err)
	{
		Debug.error(err);
	}
};

// ----------------------------------------------
// Function:	GetCatalogueProductsService.onError
// Author:		Nathan Derksen
// Description:	Callback from the unsuccessful completion of the service call
// Inputs:		<XMLElement> result - Handle to the results xml object
// Returns:		<nothing>
// ----------------------------------------------
GetCatalogueProductsService.prototype.onError = function(result)
{
	var tempArray = new Array();
	var productsGrid = ViewLocator.getInstance().getView("productsGrid");
	productsGrid.setProducts(tempArray);
	
	var error = new Object();
	error.name = "Service 'GetCatalogueProductsService' returned with an error";
	error.message = result.get_message();
	error.fileName = "browseItemPage/GetCatalogueProductsService.js";
	error.lineNumber = "";
	Debug.error(error);
	if (error.message.indexOf("Authentication") >= 0)
	    window.location = "../Default.aspx";
};