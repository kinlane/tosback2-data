

//Google updates - Detention Hall - 072209 - see comments 'GA updates'




// The following JSON object addthis_config is being used by "Add this" plugin for calling GA for Social networking
//This will be tracked only for the Site Profile account
var addthis_config = {
data_ga_property:'UA-10272427-1',
     data_ga_social : true
};

if (typeof MATTEL == "undefined") var MATTEL = {};
if (typeof MATTEL.tracker == "undefined") MATTEL.tracker = {};
if (typeof MATTEL.tracker.Tracker == "undefined") {

MATTEL.tracker.CONTENTTYPE = {
	NONE: "None",
	ACTIVITY: "Activity",
	AGEFORM: "Age Form",
	ARTICLE: "Article",
	AUDIO: "Audio",
	BUTTON: "Button",
	BUYNOWBUTTON: "Buy Now Button",
	CATEGORY: "Category",
	COMMERCIAL: "Commercial",
	COMINGSOON: "Coming Soon",
	DEMO: "ProductDemo",
	DOWNLOAD: "Download",
	ECARD: "E-card",
	EMAIL: "Email",
	EMAILSIGNUP: "Email Signup",
	ERROR: "Error",
	FEATUREDPRODUCT: "Featured Product",
	FLASHTRACK: "Flash Track",
	FORM: "Form",
	GAME: "Game",
	GIFTGUIDE: "Gift Guide",
	HELP: "Help",
	INFORMATION: "Information",
	INSTRUCTIONS: "Instructions",
	INTERNALLINK: "Internal Link",
	INTERSTITIAL: "Interstitial",
	LANDINGPAGE: "LandingPage",
	LEGALPAGE: "LegalPage",
	LOCATOR: "Locator",
	OVERLAY: "Overlay",
	POLL: "Poll",
	POSTCARD: "Postcard",
	PRODUCT: "Product",
	PRODUCTDEMO: "ProductDemo",
	PRINTCARD: "Print-card",
	PROMOTION: "Promotion",
	ONLINEPRINTCATALOG: "Online Print Catalog",
	REDIRECT: "Redirect",
	SEARCHRESULTS: "Search Results",
	SECRETCODE: "Secret Code",
	SURVEY: "Survey",
	SYSTEM: "System",
	THUMBNAIL: "Thumbnail",
	VENDORDEMO: "Vendor Demo",
	VIDEO: "Video",
	WEBISODE: "Webisode",
	WISHLIST: "Wishlist",
	INT_AD_BANNER: "InternalAdBanner",
	EXT_AD_BANNER: "ExternalAdBanner",
	REF_AD_BANNER: "ReferringAdBanner",
	INT_AD_BUTTON: "InternalAdButton",
	EXT_AD_BUTTON: "ExternalAdButton",
	REF_AD_BUTTON: "ReferringAdButton",
	INT_AD_OVERLAY: "InternalAdOverlay",
	EXT_AD_OVERLAY: "ExternalAdOverlay",
	REF_AD_OVERLAY: "ReferringAdOverlay",
	INT_AD_PAGE: "InternalAdPage",
	EXT_AD_PAGE: "ExternalAdPage",
	REF_AD_PAGE: "ReferringAdPage",
	SETUP: "SetUp",
	MOMENT: "Moment",
	PRODUCT: "Product",
	PROMO: "Promo",
	WALLPOST: "Wall Post",
	NOTIFICATION: "Notification",
	TIMELINEFRIENDS: "Timeline Friends",
	TIMELINESELECT: "Timeline Select",
	CDA: "cda",
	AGGREGATOR: "Aggregator",
	MAINNAV: "MainNav",
	EXTERNALLINK: "ExternalLink",
	PREROLLVIDEOAD: "PreRollVideoAd"
}

MATTEL.tracker.ACTION = {
	NONE: "None",
	CLICK: "Click",
	COMPLETE: "Completed",
	COMPLETED: "Completed",
	CONTINUE: "Continue Game",
	ENTERCODE: "Enter Code",
	ENTERMMOC: "Enter MMOC",
	ERROR: "Error",
	LEVELUP: "LevelUp",
	PASSTHROUGH: "Pass Through",
	PLAY: "Play",
	PLAYLEVEL1: "Play Level 1",
	PLAYLEVEL2: "Play Level 2",
	PLAYLEVEL3: "Play Level 3",
	PLAYLEVEL4: "Play Level 4",
	PLAYLEVEL5: "Play Level 5",
	PLAYLEVEL6: "Play Level 6",
	PLAYLEVEL7: "Play Level 7",
	PLAYLEVEL8: "Play Level 8",
	PLAYLEVEL9: "Play Level 9",
	PLAYLEVEL10: "Play Level 10",
	WINLEVEL1: "Win Level 1",
	WINLEVEL2: "Win Level 2",
	WINLEVEL3: "Win Level 3",
	WINLEVEL4: "Win Level 4",
	WINLEVEL5: "Win Level 5",
	WINLEVEL6: "Win Level 6",
	WINLEVEL7: "Win Level 7",
	WINLEVEL8: "Win Level 8",
	WINLEVEL9: "Win Level 9",
	WINLEVEL10: "Win Level 10",
	LOSELEVEL1: "Lose Level 1",
	LOSELEVEL2: "Lose Level 2",
	LOSELEVEL3: "Lose Level 3",
	LOSELEVEL4: "Lose Level 4",
	LOSELEVEL5: "Lose Level 5",
	LOSELEVEL6: "Lose Level 6",
	LOSELEVEL7: "Lose Level 7",
	LOSELEVEL8: "Lose Level 8",
	LOSELEVEL9: "Lose Level 9",
	LOSELEVEL10: "Lose Level 10",
	ENDGAMEOPTION1: "End Game Option 1",
	ENDGAMEOPTION2: "End Game Option 2",
	ENDGAMEOPTION3: "End Game Option 3",
	ENDGAMEOPTION4: "End Game Option 4",
	ENDGAMEOPTION5: "End Game Option 5",
	ENDGAMEOPTION6: "End Game Option 6",
	ENDGAMEOPTION7: "End Game Option 7",
	ENDGAMEOPTION8: "End Game Option 8",
	ENDGAMEOPTION9: "End Game Option 9",
	ENDGAMEOPTION10: "End Game Option 10",
	PLAYCUSTOM: "Play User Created",
	PRINT: "Print",
	REDIRECT: "Redirected",
	RETURN: "Return",
	SEETOYS: "See The Toys",
	SEETHETOYS: "See The Toys",
	SEND: "Send",
	SUBMIT: "Submit Form",
	VIEW: "View",
	DOWNLOAD: "Download",
	GAME_PING: "Game Ping",
	GAME_LOADED: "Game Loaded",
	GAME_REPLAY: "Game Replay",
	GAME_LEVELUP: "Game Levelup",
	GAME_WON: "Game Won",
	GAME_LOST: "Game Lost",
	GAME_OVER: "Game Over",
	GAME_EVENT: "Game Event",
	GAME_PLAY: "Game Play",
	GAME_CLICK: "Game Click",
	AUDIO: "Audio",
	PRODUCT: "Product",
	ADDPROFILE: "AddProfile",
	FACEBOOK: "Facebook",
	TWITTER: "Twitter",
	YOUTUBE: "Youtube",
	SENDFRIEND: "SendFriend",
	COPYLINK: "CopyLink",
	COMMENT: "Comment",
	FAVE: "Fave",
	RATE: "Rate",
	GAME_ADCLICK: "Ad Click",
	GAME_COMPLETED: "Game Completed",
	GAME_OPTION: "Play Game Option",
	BANNERCLICK: "BannerClick",
	ADDPROFILE: "AddProfile",
	GAME_QUIT: "Game Quit",
	GAME_AWARD: "Game Award"
}

MATTEL.tracker.DCS = {
	FISHERPRICE: ""
}

MATTEL.tracker.BRAND = {
	FISHERPRICE: "FisherPrice"
}

MATTEL.tracker.CAMPAIGN = {
	NONE: "None",
	BABYGEAR: "BabyGear",
	BACKYARDIGANS: "Backyardigans",
	CARNIVORES: "Car-Nivores",
	CHANNELINTELLIGENCE: "Channel Intelligence",
	COMPUTERCOOLSCHOOL: "Computer Cool School",
	CORE: "Core",
	COMMERCIAL: "Commercials",
	CREATIVEKIDS: "Creative Kids",
	DACS: "Digital Arts and Crafts Studio (DACS)",
	DIEGO: "Go Diego Go",
	DOLLHOUSE: "Dollhouses",
	DORA: "Dora",
	EZLINK: "easylink.fisher-price.com Site",
	EZLINK: "easylink.fisher-price.com Site",
	FPFRIENDS: "FP Friends",
	FUN2LEARN: "Fun 2 Learn",
	GENERIC: "Generic Pages",
	GEOTRAX: "Geotrax",
	GEMZ: "GEMZ",
	GIRLS: "Girls",
	HANDYMANNY: "Handy Manny",
	ICANPLAYPIANO: "I Can Play Piano",
	IMAGINEXT: "Imaginext",
	IMAGINEXT_CASTLE: "Imaginext - Castle",
	IMAGINEXT_CITY: "Imaginext - City",
	IMAGINEXT_DINOSAURS: "Imaginext - Dinosaurs",
	IMAGINEXT_DRAGON: "Imaginext - Dragon",
	IMAGINEXT_JUNGLE: "Imaginext - Jungle",
	IMAGINEXT_OCEAN: "Imaginext - Ocean",
	IMAGINEXT_PIRATE: "Imaginext - Pirate",
	IMAGINEXT_SPIKE: "Imaginext - Spike",
	IMAGINEXT_SUPERFRIENDS: "Imaginext - Superfriends",
	INFANTTOYS: "Infant Toys",
	KITCHENPLAY: "Kitchen Play",
	KNOWSYOURNAME: "Knows Your Name",
	KRYPTO: "Krypto",
	LEARNING: "Learning",
	LTM: "Learn Through Music",
	LINKADOOS: "Link-a-doos",
	LITTLEEINSTEINS: "Little Einsteins",
	LITTLEMOMMY: "Little Mommy",
	LITTLEPEOPLE: "Little People",
	LOVINGFAMILY: "Loving Family",
	MFTP: "My Friends Tigger and Pooh",
	MICKEYMOUSE: "Mickey Mouse",
	OUTDOORFUN: "Outdoor Fun",
	PIXTER: "Pixter",
	PLANETHEROES: "Planet Heroes",
	POOH: "Winnie the Pooh",
	POWERWHEELS: "Power Wheels",
	PRECIOUSPLACES: "Precious Places",
	PRESCHOOLELECTRONICS: "Preschool Electronics",
	PUFFALUMPS: "Puffalumps",
	QUIZARD: "Quizard",
	READWITHME: "Read With Me",
	RESCUEHEROES: "Rescue Heroes",
	SEENSAY: "See 'n Say",
	SESAMESTREET: "Sesame Street",
	SHAKENGO: "Shake 'n Go",
	SMARTCYCLE: "Smart Cycle",
	SNAPNSTYLE: "Snap 'n Style",
	SNUGGLEKINS: "Snuggle-Kins",
	SPARKART: "Spart Art Creativity System",
	STARSTATION: "Star Station",
	SWEETSTREETS: "Sweet Streets",
	TRIO: "Trio",
	WONDERPETS: "Wonder Pets",
	WUBBZY: "Wow Wow Wubbzy",
	VENDORDEMO: "Vendor Demos",
	VIEWMASTER: "View-Master",
	BRANDCAMPAIGN: "Brand Campaign",
	ANIMALVILLE: "Little People - Animalville",
	KYN_ELA: "Knows Your Name - Electronic Learning",
	IMAGINEXT_SPACE: "Imaginext - Space",
	SPLATSTER: "Splatster",
	MYTOONTV: "My Toon TV",
	FLOWERZ: "Color Me Flowerz",
	PRECIOUSPLANET: "Precious Planet",
	ECOUPON: "E-Coupon",
	SMARTCYCLEEXTREME: "Smart Cycle Extreme",
	HAPPYDAYSANDNIGHTS: "Happy Days and Nights",
	ECOUPONINF: "Infant Toys E-Coupon",
	ECOUPONTRIO: "Trio E-Coupon",
	DORALINKS: "Dora Links",
	ECOUPONDIAPER: "Happy Days and Nights E-Coupon",
	TRIOCOUPON0910: "Trio E-Coupon October 2009",
	WNY: "WNY",
	GEOTRAX_CARS: "Geotrax Cars",
	THOMAS: "Thomas and Friends",
	KAILAN: "Kai-Lan",
	TOYSTORY3: "Toy Story 3",
	HEROWORLD: "Hero World",
	FPGAMES: "Fisher-Price Board Games",
	FPPETTOYS: "Fisher-Price Pet Toys",
	HIDEWAYHOLLOW: "Hideaway Hollow",
	LUVUZOO: "Luv U Zoo",
	TEST: "Just for Testing",
	CARS2: "Cars 2",
	KUNGFUPANDA: "Kung Fu Panda",
	DIAPERBAGS: "FastFinder",
	BIGACTION: "Big Action",
	SWEEPS_2011_LUZ2011FALL: "Sweepstakes - BabyGear Luv U Zoo (2011 Fall)",
	MINNIEMOUSE: "Minnie Mouse",
	JAKENEVERLAND: "Jake and the Never Land Pirates",
	MUSIC: "Music",
	REVNGO: "Rev N Go",
	BABYTOYS: "Baby Toys",
	ROLEPLAY: "Role Play"
}

MATTEL.tracker.CHANNEL = {
	NONE: "None",
	HOME: "Home",
	ALSOFROMFP: "Also From Fisher-Price",
	AWARDS: "Awards",
	BACK2SCHOOL: "Back to School",
	BRANDS: "Home",
	BVREVIEW: "BazaarVoice",
	CAREERS: "Careers",
	COLORING: "Coloring Pages",
	COMMERCIAL: "Commercials",
	CORE: "Core",
	CRAFTS: "Crafts",
	ECARDS: "ECards",
	ECOMM: "EComm",
	EMAIL: "EMail",
	EXPERTADVICE: "Advice from Experts",
	ENDECASEARCH: "Endeca Search",
	FAMILY: "E-mail Updates",
	FPFRIENDS: "FP Friends",
	FPPRECIOUSPLANET: "FP Precious Planet",
	FPSTORE: "Fisher-Price Store",
	GIFTFINDER: "Gift Finder",
	GRANDPARENTS: "Grandparents",
	GRANDPARENTS_ECARDS: "Grandparents",
	GRANDBABY: "Loving Your Grandbaby",
	HELP: "Help",
	INTERNATIONAL: "International",
	LEAVING: "Leaving",
	MICROSITES: "Microsites",
	MICROSITES2: "Microsites 2",
	MICROSITES3: "Microsites 3",
	MICROSITES4: "Microsites 4",
	MICROSITES5: "Microsites 5",
	MICROSITES6: "Microsites 6",
	MICROSITES7: "Microsites 7",
	MOMADVICE: "Advice from Moms",
	MYFP: "Age by Age Parenting Guide",
	PARTYPLANNER: "Best Ever Birthday Bashes Party Planner",
	PHOTOUPLOAD: "Photo Upload",
	PLAYANDLEARN: "Play and Learn Activities",
	PLAYSTAGES: "All About Play",
	PLAYTIME: "Fun and Games Online",
	POPUNDERS: "Pop-Unders",
	PREGNANCY: "Pregnancy",
	PREPARE: "Prepare and Care",
	PRINTCARDS: "Print Cards",
	PRIVACYLEGAL: "Privacy and Legal",
	REDIRECT: "REDIRECTS",
	SITEMAP: "Sitemap",
	SEARCH: "Search",
	SPECIAL: "What's New",
	SPECIALNEEDS: "Special Needs",
	SPECIALOFFERS: "Special Offers",
	SWEEPS_2008_ACQUISITION_BABYGEAR: "Sweepstakes - BabyGear (2008 March)",
	SWEEPS_2008_ACQUISITION_BABYGEAR0808: "Sweepstakes - BabyGear (2008 August)",
	SWEEPS_2008_ACQUISITION_ACQ0708: "Sweepstakes - Grow As You Go Giveaway (2008 July)",
	TOYS_TOYSBYAGE: "Toys by Age",
	TOYS_TOYSBYTYPE: "Toys by Type",
	VENDORDEMO: "Vendor Demos",
	WIDGETS: "Widgets",
	WISHLIST: "Wish List",
	SWEEPS_2008_ACQUISITION_FLIGHT1: "Acquisition - Flight 1 (2009 May)",
	SWEEPS_2008_ACQUISITION_GRANDMA1008: "Grandparent Acquisition",
	SWEEPS_2008_ACQUISITION_PERFECT1108: "Sweepstakes - Perfect Gift (2008 November)",
	SWEEPS_2008_ACQUISITION_GRANDPARENTPROGRAMS_ONLINEADS: "Grandparent Program - Online Ads (2008 November)",
	SWEEPS_2008_ACQUISITION_GRANDPARENTPROGRAMS_EMAILTOMOM: "Grandparent Program - Email to Mom (2008 November)",
	SWEEPS_2009_ACQUISITION_GRANDTIP0209: "Grandparent Tip In (2009 February)",
	SWEEPS_2009_ACQUISITION_MOMTIP0209: "Mom Tip In (2009 February)",
	REVIEW: "Product Review",
	TOYSBY: "Toy Finder",
	SWEEPS_2009_ACQUISITION_BABYGEAR0809: "Sweepstakes - BabyGear (2009 August)",
	FOOTER: "Footer",
	INNER: "Inner",
	RIGHTNAV: "Right Nav",
	SWEEPS_2009_ACQUISITION_GIGGLEGROW0909: "Sweepstakes - Giggle & Grow Giveaway (2009 September)",
	MATTEL_DIGITAL_NETWORK: "Mattel Digital Network",
	IMAGINEXT_DINO: "Imaginext - Dinosaurs",
	IMAGINEXT_SPIKE: "Imaginext - Spike",
	IMAGINEXT_JUNGLE: "Imaginext - Jungle",
	IMAGINEXT_CASTLE: "Imaginext - Castle",
	IMAGINEXT_PIRATE: "Imaginext - Pirate",
	IMAGINEXT_OCEAN: "Imaginext - Ocean",
	IMAGINEXT_CITY: "Imaginext - City",
	IMAGINEXT_FRIENDS: "Imaginext - Super Friends",
	IMAGINEXT_SPACE: "Imaginext - Space",
	MOMENTS: "Moments to Share",
	WHOOPS: "Whoops",
	SWEEPS_2010_BIGFOOT2010: "Bigfoot Acquisition 2010",
	RECALLS: "Recalls",
	VIDEOENTERTAINMENT: "Video Entertainment",
	FACEBOOK_LIKE: "Facebook Like Button",
	SWEEPS_2011_LUZ2011: "Sweepstakes - BabyGear Luv U Zoo (2011 February)",
	GRANDPARENTS_NEWSLETTER: "Grandparents",
	APPS_ENTERTAINMENT: "Apps and Entertainment",
	IDEASHARING: "Spigit Idea Sharing"
}


MATTEL.tracker.Tracker = {
	ready: false,
	imagelist: new Array,
    	imageptr: 0,		
	redirect: null,
	suppress: true,
	debug: false,
	simulate: false,
	pagetrack: true,	
	cookiename: "WT_FPC",
	optoutname: "WTLOPTOUT",
	serviceurl: "statse.webtrendslive.com",
	serviceimg: "dcs.gif",

	RE: {"%09":/\t/g,"%20":/ /g,"%23":/\#/g,"%26":/\&/g,"%2B":/\+/g,"%3F":/\?/g,"%5C":/\\/g,"%22":/\"/g,"%7F":/\x7F/g,"%A0":/\xA0/g},
	
	dcs_id: "",
	brand: "FisherPrice",
	
    //GA updates   
	ga_site_ids: ["UA-10272427-1"],
	
    //Custom Variables - Session level 
	cv_session_names: ["campaign", "medium"],
	campaign: null,
	channel: null,
	contenttype: null,
	name: null,
	action: null,
	search: null,
	searchcat: null,
	//for order tracking
	orderid: "",
	storename: "",
	totalamount: "",
	tax: "", 
	shipping: "", 
	city: "", 
	state: "", 
	country: "",	
	
    //GA updates
    //requiredParams: ["dcs_id", "brand", "campaign", "channel", "contenttype", "action", "name"],
	//paramDefs: ["MATTEL.tracker.DCS", "MATTEL.tracker.BRAND", "MATTEL.tracker.CAMPAIGN", "MATTEL.tracker.CHANNEL", "MATTEL.tracker.CONTENTTYPE", "MATTEL.tracker.ACTION"],
	requiredParams: ["brand", "campaign", "channel", "contenttype", "action", "name"],
	paramDefs: ["MATTEL.tracker.BRAND", "MATTEL.tracker.CAMPAIGN", "MATTEL.tracker.CHANNEL", "MATTEL.tracker.CONTENTTYPE", "MATTEL.tracker.ACTION"],
	
	//List of sites tracked in Sync mode and Current site's value
	//SyncSites: ["fisherprice","fisherprice_au","fisherprice_be","fisherprice_br","fisherprice_ca","fisherprice_cafr","fisherprice_cn","fisherprice_cz","fisherprice_de","fisherprice_dk","fisherprice_easylink","fisherprice_ecomm","fisherprice_es","fisherprice_facebook","fisherprice_fi","fisherprice_fi","fisherprice_gr","fisherprice_hu","fisherprice_il","fisherprice_in","fisherprice_it","fisherprice_jp","fisherprice_kr","fisherprice_luvuzoo","fisherprice_matla","fisherprice_media_us","fisherprice_mx","fisherprice_nl","fisherprice_no","fisherprice_pl","fisherprice_pt","fisherprice_ru","fisherprice_se","fisherprice_sea","fisherprice_thomas_au","fisherprice_toystore","fisherprice_tr","fisherprice_tw","fisherprice_uk","fisherprice_usp","fisherprice_ve","littlepeople_au","littlepeople_de","littlepeople_es","littlepeople_fr","littlepeople_it","littlepeople_nl","littlepeople_pl","littlepeople_uk","xtractaurs"] ,
	//DoubleTrackedSites: ["hotwheels_au","hotwheels_be","hotwheels_ca","hotwheels_cn","hotwheels_de","hotwheels_dk","hotwheelses","hotwheels_fi","hotwheels_fr","hotwheels_gr","hotwheels_hk","hotwheels_hu","hotwheels_in","hotwheels_intl","hotwheels_it","hotwheels_jp","hotwheels_kr","hotwheels_mx","hotwheels_nl","hotwheels_no","hotwheels_pl","hotwheels_ru","hotwheels_se","hotwheels_tr","hotwheels_tw","hotwheels_uk","fisherprice_ve","fisherprice_usp","fisherprice_uk","fisherprice_tw","fisherprice_tr","fisherprice_toystore","fisherprice_thomas_au","fisherprice_sea","fisherprice_se","fisherprice_pt","fisherprice_pl","fisherprice_no","fisherprice_nl","fisherprice_mx","fisherprice_media_us","fisherprice_matla","fisherprice_luvuzoo","fisherprice_kr","fisherprice_jp","fisherprice_it","fisherprice_in","fisherprice_il","fisherprice_hu","fisherprice_gr","fisherprice_fr","fisherprice_fi","fisherprice_facebook","fisherprice_es","fisherprice_ecomm","fisherprice_easylink","fisherprice_dk","fisherprice_de","fisherprice_cz","fisherprice_cn","fisherprice_cafr","fisherprice_ca","fisherprice_br","fisherprice_be","fisherprice_au","fisherprice"] ,
	DoubleTrackedSites: ["fisherprice","fisherprice_au","fisherprice_be","fisherprice_br","fisherprice_ca","fisherprice_cafr","fisherprice_cn","fisherprice_cz","fisherprice_de","fisherprice_dk","fisherprice_easylink","fisherprice_ecomm","fisherprice_es","fisherprice_facebook","fisherprice_fi","fisherprice_fr","fisherprice_gr","fisherprice_hu","fisherprice_il","fisherprice_in","fisherprice_it","fisherprice_jp","fisherprice_kr","fisherprice_luvuzoo","fisherprice_matla","fisherprice_media_us","fisherprice_mx","fisherprice_nl","fisherprice_no","fisherprice_pl","fisherprice_pt","fisherprice_ru","fisherprice_se","fisherprice_sea","fisherprice_thomas_au","fisherprice_toystore","fisherprice_tr","fisherprice_tw","fisherprice_uk","fisherprice_usp","fisherprice_ve","littlepeople_au","littlepeople_de","littlepeople_es","littlepeople_fr","littlepeople_it","littlepeople_nl","littlepeople_pl","littlepeople_uk","xtractaurs","fisherprice_sa"] ,
	IPMaskingSites: ["barbie_de","barbiestyle_de","barbiegirls_de","battleForce5_de","girltech_de","HotWheels_DE","monsterhigh_de","myscene_de","pixelchix_de","PollyPocket_DE","snorta_de","funkeys_de","letsplayuno_de","mattelscrabble_de","worldoflittlepeople_de","fisherprice_de","thesingamajigs_de"],
	
	currentTrackedSite : 'fisherprice'  ,
			
	init: function() {
		var timer = setInterval(function() {
			if((document.getElementsByTagName("body")[0] != null || document.body != null)) {
				clearInterval(timer);
				
                //GA updates
				MATTEL.util.Collector.main();
				MATTEL.tracker.Tracker.main();
				MATTEL.tracker.Tracker.ready = true;
			}
		}, 250);
	},

	main: function() {
		var Tracker = MATTEL.tracker.Tracker;
		if (!Tracker.suppress) {
			Tracker.validate();
		}
		if (Tracker.pagetrack) {
			Tracker.track();
		}
		if (Tracker.redirect != null) {
			location.replace(Tracker.redirect);
		}
	},
	
	validate: function() {
		var Tracker = MATTEL.tracker.Tracker;
		for (var i=0; i<Tracker.requiredParams.length; i++) {
			var param = Tracker.requiredParams[i];
			var value = eval(Tracker.paramDefs[i]);
			var isValid = false;
						
			if (Tracker[param] === null) {
				MATTEL.util.throwError("Tracker." + param + " MUST be defined.", Tracker.debug);
			}
			
			if (param != "name") {		
				for (var n in value) {
					if (value[n] == Tracker[param]) {
						isValid = true;
						break;
					}
				}
		
				if (!isValid) {
					MATTEL.util.throwError("Tracker." + param + " contains an invalid value.", Tracker.debug);
				}
			}
		}
	},
	
	setCustomVariable: function(slotNumber,paramName, paramValue, scopeLevel) {
	
	    _gaq.push(['_setCustomVar', slotNumber, paramName, paramValue, scopeLevel]);
	    
	    //Call track method as soon as setting the custom Vars
	    var Tracker = MATTEL.tracker.Tracker;
	    Tracker.trackGA();
	   
	},
	
	track: function (trackObj) {
		
        var Tracker = MATTEL.tracker.Tracker;
        var Collector = MATTEL.util.Collector;	
        
        
        
			
        if (trackObj != null) {	
			for (var i in trackObj) {
				for (var n=0; n<Tracker.requiredParams.length; n++) {
					var param = Tracker.requiredParams[n]
					if (i == param) {
						Tracker[param] = trackObj[i];
					}
					
				}
				for (var n in Collector) {
					if (i == n) {
						Collector[n] = trackObj[i];
					}
				}
			}
			if (!Tracker.suppress) {
				Tracker.validate();
			}
		}
		
		//GA updates
		
		Tracker.trackGA();		
		
		
		 Tracker.trackComScore();	
		
	},
	
		
    //GA updates
	//addParamsToGA: function (pageTracker , isSyncEnabled) {
	addParamsToGA: function (pageTracker ,isDoubleTrackingEnabled) {
        try {
            var Tracker = MATTEL.tracker.Tracker;
            var pageURI = document.location.pathname;
            pageURI += "?";
            
            pageURI += "campaign="+Tracker.campaign + "&";
            pageURI += "channel="+Tracker.channel + "&";
            pageURI += "contenttype=" + Tracker.contenttype + "&";  
			var trackname = Tracker.name;
            pageURI += "name=" + trackname.replace("&", "and");
			
			if(Tracker.search != null && Tracker.search != undefined && Tracker.search != "")
			{
				pageURI += "&search=" + Tracker.search;
				//Track search category if available
				if(Tracker.searchcat != null && Tracker.searchcat != undefined && Tracker.searchcat != "")
					pageURI += "&searchcat=" + Tracker.searchcat;	
			}
						
			//Custom variables (Session level) logic will fire only if sessionvariable node is available in Tracker XML for this site
			if(Tracker.cv_session_names != null) 
			{				
				// Build an empty URL structure in which we will store
				// the individual query values by key.
				var objURL = new Object();
		 
		 
				// Use the String::replace method to iterate over each
				// name-value pair in the query string. Location.search
				// gives us the query string (if it exists).
				window.location.search.replace(
					new RegExp( "([^?=&]+)(=([^&]*))?", "g" ),
		 
					// For each matched query string pair, add that
					// pair to the URL struct using the pre-equals
					// value as the key.
					function( $0, $1, $2, $3 ){
						objURL[ $1 ] = $3;
					}
					);
				
				for(var i=0; i < Tracker.cv_session_names.length; i++)
				{
					if (i > 4) break;  //GA accepts only 5 session level custom variables
					
					var key = Tracker.cv_session_names[i];
					var querykey = "mtl_" + key;		
					querykey = querykey.toLowerCase();		//always assume that querystring key is in lowercase.			
					
					if (objURL[querykey] != null && objURL[querykey] != undefined && objURL[querykey] != "")
					{					
						//fire custom variable tracking call	
						//if(isSyncEnabled == false)
						if(isDoubleTrackingEnabled == false)
						{
							_gaq.push(['_setCustomVar',i + 1, key, objURL[querykey], 2]);
						}
						else
						{
							pageTracker._setCustomVar(i + 1, key, objURL[querykey], 2);
						}
					}
				}
			}
        
            return pageURI;
        } catch(err) {}

    },    
    
	trackGA: function () {
        	
        	var Tracker = MATTEL.tracker.Tracker;
        
        	//Check if the current site is part of the list of sync tracking enabled sites.
        	//var isSyncEnabled = false;
        	
        	
        	//Check for sync site array
             //for (var index=0; index < Tracker.SyncSites.length; index++) {
        
			//if(Tracker.currentTrackedSite.toLowerCase() == Tracker.SyncSites[index].toLowerCase())
			//{
				//isSyncEnabled = true;
				//break;
				//alert("Found Match:" + Tracker.SyncSites[index]);
			//}

        	//}
        	
        	//Check if the current site is part of the list of comcast exception sites
		var isDoubleTrackingEnabled = false;

		//Check for comcast site array
		for (var index=0; index < Tracker.DoubleTrackedSites.length; index++) {

			if(Tracker.currentTrackedSite.toLowerCase() == Tracker.DoubleTrackedSites[index].toLowerCase())
			{
				isDoubleTrackingEnabled = true;
				break;
				//alert("Found Match:" + Tracker.DoubleTrackedSites[index]);
			}

		}
		
		//Check whether the current site is in the IP Masking sites list.
		var isIPMaskingEnabledSite = false;
		for (var index=0; index < Tracker.IPMaskingSites.length; index++) 
		{
		
			if(Tracker.currentTrackedSite.toLowerCase() == Tracker.IPMaskingSites[index].toLowerCase())
			{
				isIPMaskingEnabledSite = true;
				break;						
			}
		
		}
        	

        //setup defaults
	Tracker.contenttype = (Tracker.contenttype == null || Tracker.contenttype == undefined || Tracker.contenttype == "") ? "None" : Tracker.contenttype;
	Tracker.action = (Tracker.action == null || Tracker.action == undefined || Tracker.action == "") ? "None" : Tracker.action;
	Tracker.name = (Tracker.name == null || Tracker.name == undefined || Tracker.name == "") ? "None" : Tracker.name;
	Tracker.campaign = (Tracker.campaign == null || Tracker.campaign == undefined || Tracker.campaign == "") ? "None" : Tracker.campaign;
	Tracker.channel = (Tracker.channel == null || Tracker.channel == undefined || Tracker.channel == "") ? "None" : Tracker.channel;
        try {
            if (Tracker.ga_site_ids != null) {
                for (var i=0; i < Tracker.ga_site_ids.length; i++) {
                    var param = Tracker.ga_site_ids[i];
                    
                    var pageTracker;
                    
                    //Use gaq objects for sync enabled websites, other sites continue to use gat object for tracking
                    
                    //if(isSyncEnabled == true)
                    if(isDoubleTrackingEnabled == true)
                    {
                    	pageTracker = _gat._getTracker(param);
                    }
                    else
                    {
			_gaq.push(['_setAccount', param]);
		    }
		    
                    //var url = Tracker.addParamsToGA(pageTracker, isSyncEnabled);
                    var url = Tracker.addParamsToGA(pageTracker, isDoubleTrackingEnabled);
                    var trackname = Tracker.name;					
                    
                    // If the current site is present in the IPMaskingSites array then remove the IP Address of the site.
                    if(isIPMaskingEnabledSite == true)
                    {
                    	_gaq.push(['_gat._anonymizeIp']);                    	
                    }
                    
                    //Landing Page is not marked for some international websites, we have to continue to do double tracking for those sites in exception array
		    if( isDoubleTrackingEnabled == true)
		    {
		    	pageTracker._trackPageview(url);
		    	pageTracker._trackEvent(Tracker.contenttype, Tracker.action, trackname.replace("&", "and"));
		    	
		    }
		    //Do either page view tracking or event tracking based on content type
		    else
		    {
                    
			    if(Tracker.action.toLowerCase() == 'view')
			    {
				//if(isSyncEnabled == true)
				//{
					//pageTracker._trackPageview(url);
				//}
				//else
				//{
					_gaq.push(['_trackPageview', url]);
				//}
			    }
			    else
			    {
				//if(isSyncEnabled == true)
				//{
					//pageTracker._trackEvent(Tracker.contenttype, Tracker.action, trackname.replace("&", "and"));
				//}
				//else
				//{
					_gaq.push(['_trackEvent', Tracker.contenttype, Tracker.action, trackname.replace("&", "and")]);
				//}
			    }
		    }
				if (Tracker.orderid != "" && Tracker.totalamount != "") //call order tracking method only if order id and total amount are available.
				{
					//if(isSyncEnabled == true)
					  if(isDoubleTrackingEnabled == true)
                    			{
                    				pageTracker._addTrans(
						  Tracker.orderid,    // order ID - required
						  Tracker.storename,  // affiliation or store name
						  Tracker.totalamount, // total - required
						  Tracker.tax,        // tax
						  Tracker.shipping,   // shipping
						  Tracker.city,       // city
						  Tracker.state,      // state or province
						  Tracker.country     // country
						);
						
						pageTracker._trackTrans();
                    			}
                    			else
                    			{
						  _gaq.push(['_addTrans',
						  Tracker.orderid,    // order ID - required
						  Tracker.storename,  // affiliation or store name
						  Tracker.totalamount, // total - required
						  Tracker.tax,        // tax
						  Tracker.shipping,   // shipping
						  Tracker.city,       // city
						  Tracker.state,      // state or province
						  Tracker.country     // country
						]);
						
					
						_gaq.push(['_trackTrans']);
					}
						
						
				}
		
	        }
            }
	} catch(err) {
        }
    },
	trackComScore: function () {
           try {
           
           
           	var ComScoreTracker = MATTEL.tracker.Tracker;
	
		//setup defaults
		ComScoreTracker.contenttype = (ComScoreTracker.contenttype == null || ComScoreTracker.contenttype == undefined || ComScoreTracker.contenttype == "") ? "None" : ComScoreTracker.contenttype;
		ComScoreTracker.action = (ComScoreTracker.action == null || ComScoreTracker.action == undefined || ComScoreTracker.action == "") ? "None" : ComScoreTracker.action;

		//Track ComScore only if content type is not cda and action is not view		
		if( !(ComScoreTracker.contenttype.toLowerCase() == "cda" && ComScoreTracker.action.toLowerCase() == "view"))
		{
	              COMSCORE.beacon({c1:2,c2:"6035471",c3:"",c4:document.location,c5:"",c6:"",c15:""}); 
              	}
           } 
           catch(err) {
           }
    },
	
	trackWT: function () {
		var Tracker = MATTEL.tracker.Tracker;
		var Collector = MATTEL.util.Collector; 
		
		if (document.cookie.indexOf(Tracker.optoutname + "=") != -1){
			return;
		}

		if (window.location.protocol.indexOf("file:") != -1) {
			return;
		}
		
		Collector.date = MATTEL.util.Detector.getCurrentTime();
		Tracker.setTrackerCookie();
		
		var servicePath = "http" + (window.location.protocol.indexOf("https:") == 0 ? "s" : "") + "://" + Tracker.serviceurl + "/" + Tracker.dcs_id + "/" + Tracker.serviceimg + "?";
		var serviceMap = {"dcsdat":Collector.date, "dcssip":Collector.host, "dcsuri":Collector.path, "dcsqry":Collector.querystring, "dcsref":Collector.referrer, "WT.ti":Collector.title, "WT.tz":Collector.timezone, "WT.bh":Collector.currentHour, "WT.ul":Collector.locale, "WT.cd":Collector.colorDepth, "WT.sr":Collector.screenRes, "WT.jo":Collector.javaEnabled, "WT.js":Collector.javascript, "WT.jv":Collector.jsVersion, "WT.ct":Collector.connectionType, "WT.hp":Collector.isHomePage, "WT.bs":Collector.availScreen, "WT.fi":Collector.flashInstalled, "WT.fv":Collector.flashVersion, "WT.le":Collector.charset, "WT.em":Collector.encodingMethod, "WT.tv":Collector.trackerVersion, "WT.co_f":Collector.uniqueId, "WT.vt_f":Collector.firstVisit, "WT.vt_f_a":Collector.firstVisitAccountRollup, "WT.vt_f_d":Collector.firstVisitDaily, "WT.vt_f_s":Collector.firstVisitSession, "WT.vt_sid":Collector.sessionId, "WT.vt_f_tlh":Collector.lastVisit, "WT.vt_f_tlv":Collector.lastSession, "WT.cg_n":(Tracker.brand+"-"+Tracker.channel), "brand":Tracker.brand, "campaign":Tracker.campaign, "channel":Tracker.channel, "contenttype":Tracker.contenttype, "name":Tracker.name, "action":Tracker.action};
			
		var trackerQuery = "";
		for (var map in serviceMap) {
			var param = serviceMap[map];
			if (param != null && param != "") {
				if (map == "name") {
					param = Tracker.channel + ": " + Tracker.name + "-" + Tracker.contenttype;
					if (Tracker.campaign != "None" && Tracker.campaign != "" && Tracker.campaign != null && Tracker.campaign != "undefined" && Tracker.campaign != undefined) {
						param += " (" + Tracker.campaign + ")";
					}
				}
					trackerQuery += map + "=" + MATTEL.util.escapeRegEx(param, Tracker.RE) + "&";
			}
		}
		trackerImg = servicePath + trackerQuery;
				
		if (trackerImg.length > 2048 && navigator.userAgent.indexOf('MSIE') >= 0) {
			trackerImg = trackerImg.substring(0, 2040) + "&WT.tu=1"; //trunc param
		}
		
		if (!Tracker.simulate) {
<!--		(new Image()).src = trackerImg;  -->
            if (document.images){
		         MATTEL.tracker.Tracker.imagelist[MATTEL.tracker.Tracker.imageptr] = new Image;
		         MATTEL.tracker.Tracker.imagelist[MATTEL.tracker.Tracker.imageptr].src = trackerImg;
		         MATTEL.tracker.Tracker.imgptr++;
	        }
			console.info(Tracker.getData(true));
		}

		if (Tracker.debug) {
			alert(Tracker.getData());
			console.info(Tracker.getData());
		}
		return true;
	},
	
	setTrackerCookie: function() {
		if (document.cookie.indexOf(MATTEL.tracker.Tracker.optoutname + "=") != -1){
			return;
		}
		var Collector = MATTEL.util.Collector;
		var name = MATTEL.tracker.Tracker.cookiename;
		var offset = -8;
		var dateCurrent = new Date();
		var adj = (dateCurrent.getTimezoneOffset() * 60000) + ((offset) * 3600000);
		dateCurrent.setTime(dateCurrent.getTime() + adj);
		
		var dateExpire = new Date(dateCurrent.getTime() + 315360000000);
		var dateSession = new Date(dateCurrent.getTime());
		
		Collector.clearCookieData();
		
		if (document.cookie.indexOf(name + "=") == -1) {
			if ((typeof gWtId != "undefined") && (gWtId != "")) {
				 Collector.uniqueId = gWtId;
			} else if ((typeof gTempWtId != "undefined") && (gTempWtId != "")) {
				Collector.uniqueId = gTempWtId;
				Collector.firstVisit = "1";
			} else {
				Collector.uniqueId = "2";
				var now = dateCurrent.getTime().toString();
				for (var i=2; i<=(32 - now.length); i++) {
					Collector.uniqueId += Math.floor(Math.random() * 16.0).toString(16);
				}
				Collector.uniqueId += now;
				Collector.firstVisit = "1";
			}
			if (typeof gWtAccountRollup == "undefined") {
				Collector.firstVisitAccountRollup = "1";
			}
			Collector.firstVisitSession = Collector.firstVisitDaily = "1";
			Collector.lastVisit = Collector.lastSession = "0";
		} else {
			var id = MATTEL.util.getCrumb(name, "id");
			var lv = parseInt(MATTEL.util.getCrumb(name, "lv"));
			var ss = parseInt(MATTEL.util.getCrumb(name, "ss"));
			if ((id == null) || (id == "null") || isNaN(lv) || isNaN(ss)) {
				return;
			}
			var dateLastVisit = new Date(lv);
			Collector.uniqueId = id;
			Collector.lastVisit = Math.floor((dateLastVisit.getTime() - adj) / 1000);
			dateSession.setTime(ss);
			if ((dateCurrent.getTime() > (dateLastVisit.getTime() + 1800000)) || (dateCurrent.getTime() > (dateSession.getTime() + 28800000))) {
				Collector.lastSession = Math.floor((dateSession.getTime() - adj) / 1000);
				Collector.firstVisitSession = "1";
				dateSession.setTime(dateCurrent.getTime());
			}
			if ((dateCurrent.getDay() != dateLastVisit.getDay()) || (dateCurrent.getMonth() != dateLastVisit.getMonth()) || (dateCurrent.getYear() != dateLastVisit.getYear())) {
				Collector.firstVisitDaily = "1";
			}
		}
		Collector.uniqueId = escape(Collector.uniqueId);
		Collector.sessionId = Collector.uniqueId + "." + (dateSession.getTime() - adj);
		MATTEL.util.setCookie(name, "id=" + Collector.uniqueId + ":lv=" + dateCurrent.getTime().toString() + ":ss=" + dateSession.getTime().toString(), dateExpire);
		
		if (document.cookie.indexOf(name + "=") == -1){
			Collector.clearCookieData();
			Collector.firstVisit = Collector.firstVisitAccountRollup = "2";
		}
	},
	
	getData: function(req) {
		var Tracker = MATTEL.tracker.Tracker;
		var paramString = "";
		for (var i=0; i<Tracker.requiredParams.length; i++) {
			var param = Tracker.requiredParams[i];
			if (Tracker[param] != null && Tracker[param] != "") {
				if (param == "name") {
					paramString += (param + " = ");
					if (Tracker.channel != "None" && Tracker.channel != "" && Tracker.channel != null && Tracker.channel != "undefined" && Tracker.channel != undefined) {
						paramString += Tracker.channel + ": ";
					}
					paramString += Tracker.name + "-" + Tracker.contenttype;
					if (Tracker.campaign != "None" && Tracker.campaign != "" && Tracker.campaign != null && Tracker.campaign != "undefined" && Tracker.campaign != undefined) {
						paramString += " (" + Tracker.campaign + ")\n";
					} else {
						 paramString += "\n";
					}
				} else {
					paramString += (param + " = " + Tracker[param] + "\n");
				}
			}
		}
		paramString += "contentgroup = " + (Tracker.brand + "-" + Tracker.channel) + "\n";
		if (!req) {
			for (var i in MATTEL.util.Collector) {
				var param = MATTEL.util.Collector[i];
				if (param != null && param != "" && typeof param != "function") {
					paramString += (i + " = " + param + "\n");
				}
			}
		}
		return paramString;
	},
	
	isAvailable: function() {
		return MATTEL.tracker.Tracker.ready;
	},
	
	enableShortCuts: function() {
		var classes = ["Tracker", "BRAND", "DCS", "CAMPAIGN", "CHANNEL", "CONTENTTYPE", "ACTION"];
		for (var i=0; i<classes.length; i++) {
			parent[classes[i]] = MATTEL.tracker[classes[i]];
		}
	}
}

MATTEL.util = {
	addEvent: function(obj, type, fn) {
		if (obj.addEventListener) {
			obj.addEventListener(type, fn, false);
		} else if (obj.attachEvent) {
			obj["e" + type + fn] = fn;
			obj[type + fn] = function() {obj["e" + type + fn](window.event);}
			obj.attachEvent("on" + type, obj[type + fn]);
		}
	},
	
	removeEvent: function(obj, type, fn) {
		if (obj.removeEventListener) {
			obj.removeEventListener(type, fn, false);
		} else if (obj.detachEvent) {
			obj.detachEvent("on" + type, obj[type + fn]);
			obj[type + fn] = null;
			obj["e" + type + fn] = null;
		}
	},
	
	setCookie: function(name, value, date) {
		document.cookie = name + "=" + value + "; expires=" + date.toGMTString() + "; path=/";
	},
	
	getCookie: function(name) {
		var pos = document.cookie.indexOf(name + "=");
		if (pos != -1) {
			var start = pos + name.length + 1;
			var end = document.cookie.indexOf(";", start);
			if (end == -1) {
				end = document.cookie.length;
			}
			return unescape(document.cookie.substring(start, end));
		}
		return null;
	},
	
	getCrumb: function(name, crumb) {
		var cookieVals = MATTEL.util.getCookie(name).split(":");
		for (var i=0; i<cookieVals.length; i++) {
			var crumbVal = cookieVals[i].split("=");
			if (crumb == crumbVal[0]) {
				return crumbVal[1];
			}
		}
		return null;
	},
	
	insertScript: function(scriptName) {
		if (typeof document.getElementsByTagName != "undefined") {
			var head = document.getElementsByTagName("head")[0];
			var script = document.createElement('script');
			script.type = 'text/javascript';
			script.src = scriptName;
			head.appendChild(script);
		}
	},
	
	escapeRegEx: function(string, expression) {
		if (typeof expression != "undefined"){
			var returnString = new String(string);
			for (e in expression){
				returnString = returnString.replace(expression[e], e);
			}
			return returnString;
		} else {
			return escape(string);
		}
	},
	
	encode: function(string) {
		return (typeof encodeURIComponent != "undefined") ? encodeURIComponent(string) : escape(string);
	},
	
	throwError: function(errorMessage, showAlert) {
		if (showAlert) {alert ("[ERROR]: " + errorMessage)};
		
		var error = new Error();
		error.lineNumber = null;
		error.fileName = window.location;
		error.message = errorMessage;
		error.description = errorMessage;

		throw error;
	}
}

MATTEL.util.Collector = {	
	timezone: null,
	currentHour: null,
	locale: null,
	colorDepth: null,
	screenRes: null,
	javaEnabled: null,
	title: null,
	javascript: null,
	jsVersion: null,
	connectionType: null,
	isHomePage: null,
	availScreen: null,
	flashInstalled: null,
	flashVersion: null,
	encodingMethod: null,
	charset: null,
	trackerVersion: null,

	date: null,
	host: null,
	path: null,
	querystring: null,
	referrer: null,
	
	uniqueId: null,
	sessionId: null,
	firstVisit: null,
	firstVisitAccountRollup: null,
	firstVisitDaily: null,
	firstVisitSession: null,
	lastVisit: null,
	lastSession: null,
	
	main: function() {
		var Detector = MATTEL.util.Detector;
		var fv = Detector.getFlashVersion();
		
		this.date = Detector.getCurrentTime();
		this.host = Detector.getHost();
		this.path = Detector.getPath();
		this.querystring = Detector.getQueryString();
		
		this.timezone = Detector.getTimezone();
		this.currentHour = Detector.getHour();
		this.locale = Detector.getLocale();
		this.jsVersion = Detector.getJSVer();
		this.availScreen = Detector.getAvailScreen();
		this.javascript = "Yes";
		this.trackerVersion = "8.0.0";
		
		if (typeof screen != "undefined"){
			this.colorDepth = Detector.getColorDepth();
			this.screenRes = Detector.getScreenRes();
		}
		if (typeof navigator.javaEnabled() == "boolean") {
			this.javaEnabled = Detector.getJavaEnabled();
		}
		if (document.title){
			this.title = Detector.getTitle();
		}
		if (typeof window.document.referrer != "undefined") {
			this.referrer = Detector.getReferrer();
		}
				
		if (document.body.addBehavior){
			this.connectionType = Detector.getConnectionType();
			this.isHomePage = Detector.isHomePage();
		}
		
		if (fv == "-1") {
			this.flashInstalled = "No";
		} else {
			this.flashInstalled = "Yes";
			this.flashVersion = fv;
		}
		
		if (Detector.i18n){
			this.encodingMethod = Detector.getEncodeMethod();
			this.charset = Detector.getCharset();
		}
	},
	clearCookieData: function() {
		var Collector = MATTEL.util.Collector;
		Collector.uniqueId = Collector.sessionId = Collector.firstVisit = Collector.firstVisitDaily = Collector.firstVisitSession = Collector.lastVisit = Collector.lastSession = null;
	}
}

MATTEL.util.Detector = {
	gQP: [],
	i18n: false,
	i18nRE: {"%25":/\%/g},
		
	getTimezone: function() {
		return (new Date()).getTimezoneOffset() / 60 * -1;
	},
	getCurrentTime: function() {
		return (new Date()).getTime();
	},
	getHour: function() {
		return (new Date()).getHours();
	},
	getTitle: function() {
		return (MATTEL.util.Detector.i18n) ? MATTEL.util.escapeRegEx(MATTEL.util.encode(document.title), MATTEL.util.Detector.i18nRE) : document.title;
	},
	getLocale: function() {
		return (typeof navigator.userLanguage != "undefined") ? navigator.userLanguage : navigator.language;
	},	
	getColorDepth: function() {
		return (typeof screen.colorDepth != "undefined") ? screen.colorDepth : screen.pixelDepth;
	},	
	getScreenRes: function() {
		return screen.width + "x" + screen.height;
	},	
	getJavaEnabled: function() {
		return (navigator.javaEnabled()) ? "Yes" : "No";
	},
	getJSVer: function() {
		var agt = navigator.userAgent.toLowerCase();
		var major = parseInt(navigator.appVersion);
		var mac = (agt.indexOf("mac") != -1);
		var nn = ((agt.indexOf("mozilla") != -1) && (agt.indexOf("compatible") == -1));
		var nn4 = (nn && (major == 4));
		var nn6up = (nn && (major >= 5));
		var ie = ((agt.indexOf("msie") != -1) && (agt.indexOf("opera") == -1));
		var ie4 = (ie && (major == 4) && (agt.indexOf("msie 4") != -1));
		var ie5up = (ie && !ie4);
		var op = (agt.indexOf("opera") != -1);
		var op5 = (agt.indexOf("opera 5") != -1 || agt.indexOf("opera/5") != -1);
		var op6 = (agt.indexOf("opera 6") != -1 || agt.indexOf("opera/6") != -1);
		var op7up = (op && !op5 && !op6);
		var jv = "1.1";
		if (nn6up || op7up) {
			jv="1.5";
		}
		else if ((mac && ie5up) || op6) {
			jv="1.4";
		}
		else if (ie5up || nn4 || op5) {
			jv="1.3";
		}
		else if (ie4) {
			jv="1.2";
		}
		return jv;
	},
	
	getConnectionType: function() {
		document.body.addBehavior("#default#clientCaps");
		return document.body.connectionType;
	},
	
	isHomePage: function() {
		document.body.addBehavior("#default#homePage");
		return document.body.isHomePage(location.href) ? "1" : "0";
	},
	
	getAvailScreen: function() {
		return (typeof document.body.offsetWidth != "undefined") ? document.body.offsetWidth + "x" + document.body.offsetHeight : window.innerWidth + "x" + window.innerHeight;		
	},
	getFlashVersion: function() {
		var flashVersion = "-1";
		if (window.ActiveXObject) {
			try {
				var flashObj = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
				var desc = flashObj.GetVariable("$version");
				if (desc) {
					var versionArr = desc.replace(/^\S+\s+(.*)$/, "$1").split(",");
					var major = parseInt(versionArr[0]);
					var build = parseInt(versionArr[2]);
					//flashVersion = parseFloat(major + "." + build);
					flashVersion = major + ".0";
				}
			}
			catch(e) {}
		} else if (navigator.plugins && typeof navigator.plugins["Shockwave Flash"] == "object") {
			var desc = navigator.plugins["Shockwave Flash"].description;
			if (desc) {
				var versionStr = desc.replace(/^.*\s+(\S+\s+\S+$)/, "$1");
				var major = parseInt(versionStr.replace(/^(.*)\..*$/, "$1"));
				var build = (versionStr.indexOf("r") == -1) ? 0 : parseInt(versionStr.replace(/^.*r(.*)$/, "$1"));
				//flashVersion = parseFloat(major + "." + build);
				flashVersion = major + ".0";
			}
		}
		return flashVersion;
	},
	getCharset: function() {
		return (typeof document.defaultCharset != "undefined") ? document.defaultCharset : document.characterSet;
	},
	getHost: function() {
		return window.location.hostname;
	},
	getPath: function() {
		return window.location.pathname;
	},
	getQueryString: function() {
		var qry = window.location.search;
		if (MATTEL.util.Detector.gQP.length > 0){
			for (var i=0; i<MATTEL.util.Detector.gQP.length; i++){
				var pos = qry.indexOf(MATTEL.util.Detector.gQP[i]);
				if (pos != -1){
					var front = qry.substring(0, pos);
					var end = qry.substring(pos + MATTEL.util.Detector.gQP[i].length, qry.length);
					qry = front + end;
				}
			}
		}
		return qry;
	},
	getReferrer: function() {
		return (MATTEL.util.Detector.i18n) ? MATTEL.util.escapeRegEx(window.document.referrer, MATTEL.util.Detector.i18nRE) : window.document.referrer;
	},
	getEncodeMethod: function() {
		return (typeof encodeURIComponent != "undefined") ? "uri" : "esc";
	}
}

MATTEL.util.addEvent(window, 'load', MATTEL.tracker.Tracker.init);

if ((document.cookie.indexOf(MATTEL.tracker.Tracker.cookiename + "=") == -1) && (document.cookie.indexOf(MATTEL.tracker.Tracker.optoutname + "=") == -1)) {
	MATTEL.util.insertScript("http" + (window.location.protocol.indexOf('https:') == 0 ? 's' : '') + "://" + MATTEL.tracker.Tracker.serviceurl + "/" + MATTEL.tracker.Tracker.dcs_id + "/wtid.js");
}
}

if (!window.console || !console.firebug) {
	var names = ["log", "debug", "info", "warn", "error", "assert", "dir", "dirxml", "group", "groupEnd", "time", "timeEnd", "count", "trace", "profile", "profileEnd"];
	window.console = {};
	for (var i = 0; i < names.length; ++i) {
		window.console[names[i]] = function() {};
	}
}

function trackAction(trackObject) { 
 try{  
  MATTEL.tracker.Tracker.track(trackObject);
 } catch(err) {}
}

//GA updates

//dynamically include GA javascript

//MATTEL.util.insertScript("http" + (window.location.protocol.indexOf('https:') == 0 ? 's' : '') + "://tracker.mattel.com/ga.js");
MATTEL.util.insertScript(('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js');


MATTEL.util.insertScript("http" + (window.location.protocol.indexOf('https:') == 0 ? 's' : '') + "://sb.scorecardresearch.com/beacon.js");