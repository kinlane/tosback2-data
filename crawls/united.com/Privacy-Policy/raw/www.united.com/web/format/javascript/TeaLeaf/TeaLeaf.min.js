var JSON; if (!JSON) { JSON = {} } (function () { function f(n) { return n < 10 ? "0" + n : n } if (typeof Date.prototype.toJSON !== "function") { Date.prototype.toJSON = function (key) { return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null }; String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (key) { return this.valueOf() } } var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = { "\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': '\\"', "\\": "\\\\" }, rep; function quote(string) { escapable.lastIndex = 0; return escapable.test(string) ? '"' + string.replace(escapable, function (a) { var c = meta[a]; return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4) }) + '"' : '"' + string + '"' } function str(key, holder) { var i, k, v, length, mind = gap, partial, value = holder[key]; if (value && typeof value === "object" && typeof value.toJSON === "function") { value = value.toJSON(key) } if (typeof rep === "function") { value = rep.call(holder, key, value) } switch (typeof value) { case "string": return quote(value); case "number": return isFinite(value) ? String(value) : "null"; case "boolean": case "null": return String(value); case "object": if (!value) { return "null" } gap += indent; partial = []; if (Object.prototype.toString.apply(value) === "[object Array]") { length = value.length; for (i = 0; i < length; i += 1) { partial[i] = str(i, value) || "null" } v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]"; gap = mind; return v } if (rep && typeof rep === "object") { length = rep.length; for (i = 0; i < length; i += 1) { if (typeof rep[i] === "string") { k = rep[i]; v = str(k, value); if (v) { partial.push(quote(k) + (gap ? ": " : ":") + v) } } } } else { for (k in value) { if (Object.prototype.hasOwnProperty.call(value, k)) { v = str(k, value); if (v) { partial.push(quote(k) + (gap ? ": " : ":") + v) } } } } v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}"; gap = mind; return v } } if (typeof JSON.stringify !== "function") { JSON.stringify = function (value, replacer, space) { var i; gap = ""; indent = ""; if (typeof space === "number") { for (i = 0; i < space; i += 1) { indent += " " } } else { if (typeof space === "string") { indent = space } } rep = replacer; if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) { throw new Error("JSON.stringify") } return str("", { "": value }) } } if (typeof JSON.parse !== "function") { JSON.parse = function (text, reviver) { var j; function walk(holder, key) { var k, v, value = holder[key]; if (value && typeof value === "object") { for (k in value) { if (Object.prototype.hasOwnProperty.call(value, k)) { v = walk(value, k); if (v !== undefined) { value[k] = v } else { delete value[k] } } } } return reviver.call(holder, key, value) } text = String(text); cx.lastIndex = 0; if (cx.test(text)) { text = text.replace(cx, function (a) { return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4) }) } if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) { j = eval("(" + text + ")"); return typeof reviver === "function" ? walk({ "": j }, "") : j } throw new SyntaxError("JSON.parse") } } } ()); if (typeof TeaLeaf === "undefined") { TeaLeaf = {}; TeaLeaf.Private = {}; TeaLeaf.tlStartLoad = new Date(); if (!TeaLeaf.Configuration) { TeaLeaf.Configuration = { tlversion: "2012.06.01.1", tlSetGUID: false, tlGUIDCookie: { name: "TLGUID", valueLength: 32, valueSet: "0123456789ABCDEF", path: "", domain: "", expires: 0, secure: false }, tlurl: "/web/format/javascript/TeaLeaf/TealeafTarget.aspx", tlsecureurl: "/web/format/javascript/TeaLeaf/TealeafTarget.aspx", xhrAsync: true, xhrAsyncOnUnload: false, tlDisableIfInactive: false, tlActivityTimeout: 5, xd_CommonDomain: "", xd_iframeID: "", xd_iframeSrcURL: "", xd_iframeSrcURLSecure: "" }; TeaLeaf.Configuration.tlversion += ".XM"; TeaLeaf.Configuration.tlversion += ".JS" } } if (window.TeaLeaf && ((typeof TeaLeaf.replay === "function") ? !TeaLeaf.replay() : !TeaLeaf.replay) && !TeaLeaf.Event) { TeaLeaf.Event = {}; TeaLeaf.Event.Configuration = { jsonSerializer: window.JSON ? JSON.stringify : null, tlinit: false, tlqueueevents: true, tlqueueeventstimer: 10000, tlqueuemaxevents: 30, tlshowexceptions: false, tleventcount: 0, tlexceptioncount: 0, tlpageid: "", tlinitflag: false, tlusetopqueue: false, tllastdwelltime: "", tlidoflastvisitedcontrol: "", tlcatcherrors: true, tlcatchpopups: false, tlCatchAlerts: false, tlignoresendfailure: true, tlasync: true, tlvisitorder: "", t1970: 0, tlmaxeventcount: 300, tlmaxeventexception: 10, tlResolution: [{ width: 799, height: 599, type: 0, displayText: "small" }, { width: 800, height: 600, type: 1, displayText: "800x600" }, { width: 1024, height: 760, type: 2, displayText: "1024x760" }, { width: 1280, height: 1024, type: 3, displayText: "1280x1024" }, { width: 1000000, height: 1000000, type: 4, displayText: "large"}], tlHTTPRequestHeadersSet: [{ tlreqhttpheadername: "X-TeaLeafType", tlsethttpheader: true, tlreqhttpheadervalue: "TeaLeaf.Event.tlEventType()" }, { tlreqhttpheadername: "X-TeaLeafSubType", tlsethttpheader: true, tlreqhttpheadervalue: "TeaLeaf.Event.tlEventSubType()" }, { tlreqhttpheadername: "X-TeaLeaf-Page-Url", tlsethttpheader: true, tlreqhttpheadervalue: "TeaLeaf.Event.tlGetUrlPath()"}], tlHTTPRequestHeadersEvalInit: [{ tlreqhttpheadername: "X-TeaLeaf-Screen-Res", tlsethttpheader: true, tlreqhttpheadervalue: "TeaLeaf.Event.tlResolutionType(screen.width ,screen.height)" }, { tlreqhttpheadername: "X-TeaLeaf-Browser-Res", tlsethttpheader: true, tlreqhttpheadervalue: "TeaLeaf.Event.tlResolutionTypeBrowser()" }, { tlreqhttpheadername: "X-TeaLeaf-Page-Render", tlsethttpheader: true, tlreqhttpheadervalue: "(function () { var RENDER_TIME_CAP = 3600000, rt = TeaLeaf.Event.tlGetRenderTime(); return (rt > RENDER_TIME_CAP ? RENDER_TIME_CAP : rt); })()" }, { tlreqhttpheadername: "X-TeaLeaf-Page-Objects", tlsethttpheader: true, tlreqhttpheadervalue: 'TeaLeaf.Event.tlGetElementCount("object")' }, { tlreqhttpheadername: "X-TeaLeaf-Page-Img-Fail", tlsethttpheader: true, tlreqhttpheadervalue: "TeaLeaf.Event.tlBadImageCount()"}], tlHTTPRequestHeadersEvalBeforeUnload: [{ tlreqhttpheadername: "X-TeaLeaf-Page-Cui-Events", tlsethttpheader: true, tlreqhttpheadervalue: "TeaLeaf.Event.tlGetEventCount()" }, { tlreqhttpheadername: "X-TeaLeaf-Page-Cui-Bytes", tlsethttpheader: true, tlreqhttpheadervalue: "TeaLeaf.Request.GetTotalDataLength()" }, { tlreqhttpheadername: "X-TeaLeaf-Page-Cui-Exceptions", tlsethttpheader: true, tlreqhttpheadervalue: "TeaLeaf.Event.tlGetExceptionCount()" }, { tlreqhttpheadername: "X-TeaLeaf-Alert-Count", tlsethttpheader: true, tlreqhttpheadervalue: "TeaLeaf.Event.tlGetAlertCount()" }, { tlreqhttpheadername: "X-TeaLeaf-Page-Dwell", tlsethttpheader: true, tlreqhttpheadervalue: "TeaLeaf.Event.tlGetDwellTime()" }, { tlreqhttpheadername: "X-TeaLeaf-Page-Last-Field", tlsethttpheader: true, tlreqhttpheadervalue: "TeaLeaf.Event.tlGetLastVisitedElementID()" }, { tlreqhttpheadername: "X-TeaLeaf-Visit-Order", tlsethttpheader: true, tlreqhttpheadervalue: "TeaLeaf.Event.tlGetVisitOrder()"}]} } if (typeof TeaLeaf !== "undefined" && ((typeof TeaLeaf.replay === "function") ? !TeaLeaf.replay() : !TeaLeaf.replay) && !TeaLeaf.Env) { TeaLeaf.Env = {}; if (typeof TeaLeaf.Env.Configuration == "undefined") { TeaLeaf.Env.Configuration = { tlinit: false, tlPlugins: [{ tlIEplugin: "ShockwaveFlash.ShockwaveFlash.1", tlpluginname: "Shockwave Flash", tlversion: "1.0", tlenable: false }, { tlIEplugin: "MediaPlayer.MediaPlayer.1", tlpluginname: "Windows Media Player", tlversion: "", tlenable: false }, { tlIEplugin: "PDF.PdfCtrl.1", tlpluginname: "Adobe Acrobat", tlversion: "", tlenable: false }, { tlIEplugin: "QuickTimeCheckObject.QuickTimeCheck.1", tlpluginname: "QuickTime", tlversion: "", tlenable: false}]} } } if (typeof TeaLeaf !== "undefined" && ((typeof TeaLeaf.replay === "function") ? !TeaLeaf.replay() : !TeaLeaf.replay) && !TeaLeaf.Client) { TeaLeaf.Client = {}; if (typeof TeaLeaf.Client.Configuration == "undefined") { TeaLeaf.Client.Configuration = { tlinit: false, tlpassword: 1, tlsendfocus: false, tlsendblur: false, attachToFrames: true, pinchOnly: true, tlactiontype: "No Submit", tlcontrolsattached: false, tlscanupdate: 0, tlIEhref: false, tlEnableAttr: false, tlDiscardInvalidXPath: false, tlUniqueIDCheckEnabled: false, tlScrollOffsetX: 0, tlScrollOffsetY: 0, tlScrollX: 0, tlScrollY: 0, tlScrollXDirection: 0, tlScrollYDirection: 0, tlScrollDirection: "", tlScrollDirectionOrig: "", tlAndroidOrientation: 0, tlScheduledScan: false, tlExcludeTags: true, tlUniversalAttach: false, tlStoreQueueInCookie: false, tlFieldBlock: [{ name: "password|DecryptedCardNumber|CreditCardNumber.txtCCNum$|CreditCardCID.txtCID$|Bankaccountnum1.txtRewardNum$|Bankaccountnum2.txtRewardNum$|ucSSN9.txtSSN1$|ucSSN9.txtSSN2$|ucSSN9.txtSSN3$|password.txtPassword$|passwordRetype.txtPassword$|OpPin1.txtOPPin$|SignIn.ucOpPin.txtOPPin$|PINReminder1.txtPINReminder$|NewPassword.txtNewPassword$|txtNewPin.txtNewPin$|txtConfPin.txtConfPin$|Answer.txtSecurity$|SecurityQuestionAnswer.AnswerReType.txtSecurity$|ReTypeNewPassword.txtNewPasswordConfirm$", caseinsensitive: true, exclude: false, mask: function () { return TeaLeaf.Client.PreserveMask.apply(this, arguments) } }], tlPrivacyMask: { upperChar: "X", lowerChar: "x", numericChar: "9", symbolChar: "#" }, tlWindowHandlers: [{ domevent: "resize", load: false, tlhandler: "TeaLeaf.Client.tlQueueResize" }, { domevent: "focus", load: true, tlhandler: "TeaLeaf.Client.tlSetFocusTime" }, { domevent: "help", load: true, tlhandler: "TeaLeaf.Client.tlAddEvent" }, { domevent: "scroll", load: false, tlhandler: "TeaLeaf.Client.tlSendScroll" }, { domevent: "beforeprint", load: false, tlhandler: "TeaLeaf.Client.tlAddEvent" }, { domevent: "afterprint", load: false, tlhandler: "TeaLeaf.Client.tlAddEvent" }, { domevent: "beforeunload", load: true, tlhandler: "TeaLeaf.Event.tlBeforeUnload" }, { domevent: "unload", load: true, tlhandler: "TeaLeaf.Event.tlUnload"}], tlDocumentHandlers: [{ domevent: "click", load: true, tlhandler: "TeaLeaf.Client.tlAddEvent" }, { domevent: "dblclick", load: true, tlhandler: "TeaLeaf.Client.tlAddEvent" }, { domevent: "keyup", load: true, tlhandler: "TeaLeaf.Client.tlQueueKey" }, { domevent: "mousedown", load: false, tlhandler: "TeaLeaf.Client.tlAddEvent" }, { domevent: "mouseup", load: false, tlhandler: "TeaLeaf.Client.tlAddEvent" }, { domevent: "mouseover", load: false, tlhandler: "TeaLeaf.Client.tlAddEvent" }, { domevent: "mouseout", load: false, tlhandler: "TeaLeaf.Client.tlAddEvent" }, { domevent: "contextmenu", load: false, tlhandler: "TeaLeaf.Client.tlAddEvent" }, { domevent: "mousemove", load: false, tlhandler: "TeaLeaf.Client.tlUserMovement"}], tlSingleAttach: [{ domelementID: "", domevent: "mousedown", tlhandler: "TeaLeaf.Client.tlAddEvent" }, { domelementID: "", domevent: "mouseup", tlhandler: "TeaLeaf.Client.tlAddEvent" }, { domelementID: "", domevent: "mouseover", tlhandler: "TeaLeaf.Client.tlAddEvent" }, { domelementID: "", domevent: "mouseout", tlhandler: "TeaLeaf.Client.tlAddEvent"}], tlAttributeCapture: [{ tltagname: "a", tlattributename: "href", tlevent: "click" }, { tltagname: "button", tlattributename: "value", tlevent: "click"}], tlIDBlackList: [], tlIDWhiteList: [], tlNodeTags: { APPLET: true, ATTRIBUTE: true, B: true, BASE: true, BODY: true, BR: true, CENTER: true, COL: true, COLGROUP: true, COMMENT: true, DIV: true, DEFAULT: true, DEL: true, EVENT: true, FONT: true, FORM: true, HEAD: true, HISTORY: true, HR: true, HTML: true, I: true, INS: true, LINK: true, MAP: true, META: true, NAMESPACE: true, NAVIGGATOR: true, NOBR: true, OPTION: true, P: true, PARAM: true, S: true, SCRIPT: true, SMALL: true, STRIKE: true, STRONG: true, STYLE: true, SUB: true, SUP: true, TH: true, TITLE: true, THEAD: true, TFOOT: true, TR: true, U: true }, tlSpecialChildNodeTags: { NOBR: true, P: true} }; TeaLeaf.Client.Configuration.tlIdCounter = [] } } if (typeof TeaLeaf !== "undefined" && ((typeof TeaLeaf.replay === "function") ? !TeaLeaf.replay() : !TeaLeaf.replay) && TeaLeaf.Configuration && !TeaLeaf.setupComplete) { TeaLeaf.setupComplete = true; if (!TeaLeaf.tlBrowser) { TeaLeaf.tlBrowser = { UNKNOWN: true} } if (!TeaLeaf.$C) { TeaLeaf.$C = function (b) { return b } } if (!Array.prototype.push) { Array.prototype.stackEnd = 0; Array.prototype.push = function (b) { this[this.stackEnd] = b; this.stackEnd++ } } if (!Array.prototype.pop) { Array.prototype.pop = function () { this.stackEnd--; return this[this.stackEnd] } } TeaLeaf.trim = function (b) { if (!b || !b.toString) { return "" } return b.toString().replace(/^\s+|\s+$/g, "") }; TeaLeaf.ltrim = function (b) { if (!b || !b.toString) { return "" } return b.toString().replace(/^\s+/, "") }; TeaLeaf.rtrim = function (b) { if (!b || !b.toString) { return "" } return b.toString().replace(/\s+$/, "") }; TeaLeaf.extend = function (d, f) { var e; if (!f || typeof f !== "object") { f = {} } if (!d || typeof d !== "object") { return f } for (e in d) { if (d.hasOwnProperty(e)) { if (typeof d[e] !== "object" || d[e] === null) { f[e] = d[e] } else { f[e] = (Object.prototype.toString.call(d[e]) === "[object Array]") ? [] : {}; TeaLeaf.extend(d[e], f[e]) } } } return f }; TeaLeaf.serializeEventsToXML = (function () { var c = 1, d = function (p, a) { var o, m = [], l = 0, b, q = [], n; if (!p || typeof a !== "object") { return "" } p = TeaLeaf.Event.tlFormatXMLName(p); q.push("<" + p); for (b in a) { if (!a.hasOwnProperty(b) || a[b] === n || a[b] === "" || a[b] === null) { continue } if (typeof a[b] === "object") { m.push(d(b, a[b])) } else { q.push(TeaLeaf.Event.tlFormatXMLName(b) + '="' + TeaLeaf.Event.tlFormatXMLValue(a[b].toString()) + '"') } } l = m.length; if (l) { q.push(">"); for (o = 0; o < l; o++) { q.push(m[o]) } q.push("</" + p + ">") } else { q.push("/>") } return q.join(" ") }; return function (b) { var a, h = TeaLeaf.Event.tlGetPageId(), g = []; g.push('<ClientEventSet PostTimeStamp="' + (new Date()).getTime() + '">'); while (!b.isEmpty()) { a = b.dequeue(); if (typeof a !== "object") { continue } a.count = c++; a.PageID = h; g.push(d("ClientEvent", a)) } g.push("</ClientEventSet>"); return g.join("\n") } } ()); TeaLeaf.XHRFactory = (function () { var d, c; c = 30000; d = function (a) { if ((a >= 200 && a < 300) || a === 304) { return true } return false }; return { createXHRObject: function () { var e, h, a; h = [function () { return new XMLHttpRequest() }, function () { return new ActiveXObject("Msxml2.XMLHTTP.6.0") }, function () { return new ActiveXObject("Microsoft.XMLHTTP") } ]; for (e = 0; e < h.length; e++) { try { a = h[e]() } catch (b) { continue } if (a) { this.createXHRObject = h[e]; return a } } return null }, xhrRequest: function (q, o, u, p, a, e, b) { var s, t; if (!q || !o) { return null } q = q.toUpperCase(); if (!b) { b = this.createXHRObject() } if (!b) { return null } if (a) { b.onreadystatechange = function () { var f, g; try { switch (b.readyState) { case 0: break; case 1: break; case 2: if (e && e.loaded) { try { f = b.status; g = b.statusText } catch (h) { if (!f) { f = 0 } if (!g) { g = "None" } } finally { e.loaded(f, g) } } break; case 3: break; case 4: TeaLeaf.XHRFactory.deleteXHRObj(b); if (d(b.status)) { if (e && e.success) { e.success(b.responseText, b.responseXML) } } else { if (e && e.failure) { e.failure(b.status, b.statusText) } } break; default: break } } catch (j) { } } } b.open(q, o, a); if (u) { for (s = 0; s < u.length; s++) { b.setRequestHeader(u[s].name, u[s].value) } } if (q !== "POST" || !p) { p = null } if (a) { try { t = setTimeout(function () { TeaLeaf.XHRFactory.deleteXHRObj(b) }, c); b.timeoutID = t } catch (r) { } } b.send(p); return b }, deleteXHRObj: function (a) { a.onreadystatechange = function () { }; if (a && a.readyState !== 4) { if (a.abort) { a.abort() } } if (a.timeoutID) { clearTimeout(a.timeoutID); a.timeoutID = null } } } } ()); TeaLeaf.Queue = function () { if (!(this instanceof TeaLeaf.Queue)) { return new TeaLeaf.Queue() } this._q = []; this.size = 0 }; TeaLeaf.Queue.prototype = { enqueue: function (b) { if (typeof b === "undefined") { return this.size } this.size = this._q.push(b); return this.size }, dequeue: function () { var b = this._q.shift(); this.size = this._q.length; return b }, isEmpty: function () { return !this.size } }; TeaLeaf.eventQ = new TeaLeaf.Queue(); TeaLeaf.Request = function () { var e, h, g, f; e = h = f = null; g = "POST"; this.getUrl = function () { var a, c, d, b, j; if (f) { return f } a = TeaLeaf.Configuration; b = window.location; j = b.protocol; d = j + "//" + b.host; if (j === "http:") { c = a.tlurl } else { c = a.tlsecureurl } if (c.substr(0, 1) === "/") { d += c } else { d += b.pathname.substr(0, b.pathname.lastIndexOf("/") + 1) + c } return d }; this.setUrl = function (a) { f = a }; this.getMethod = function () { return g }; this.setMethod = function (a) { g = a }; this.getData = function () { return e }; this.setData = function (b) { var a; e = b; if (e) { a = TeaLeaf.Request.totalDataLength || 0; a += e.length; TeaLeaf.Request.totalDataLength = a } }; this.getHeaders = function () { return h }; this.setHeaders = function (a) { h = a }; this.clear = function () { e = h = f = null } }; TeaLeaf.Request.prototype = { send: function (k) { var j, p, e, o, l, m; l = TeaLeaf.Configuration; if (!l.xd_iframeID) { m = TeaLeaf.XHRFactory.xhrRequest(this.getMethod(), this.getUrl(), this.getHeaders(), this.getData(), l.xhrAsync, k); if (!m) { if (k && k.failure) { k.failure(0, "XHR request failed!") } return } } else { try { j = document.getElementById(l.xd_iframeID); if (!j || !j.contentWindow) { if (k && k.failure) { k.failure(0, "Could not retrive cross-domain iframe target!") } return } p = j.contentWindow; if (p.postMessage && window.JSON && 0) { } else { o = p.TeaLeaf; if (o && o.Request) { e = new o.Request(); e.clear(); this.setUrl(e.getUrl()); e.setHeaders(this.getHeaders()); e.setData(this.getData()); e.send(k) } } } catch (n) { if (k && k.failure) { k.failure(0, (n.name ? (n.name + ": " + n.message) : n.toString())) } return } } } }; TeaLeaf.Request.GetTotalDataLength = function () { var b; b = TeaLeaf.Request.totalDataLength || 0; return b }; TeaLeaf.sendData = function (n, k) { var h = window.TeaLeaf, l, m, o, j; if (!n) { return -1 } k = k || "text/plain"; o = new h.Request(); if (!o) { return -1 } o.clear(); o.setData(n); j = "device (UIC) Lib/" + h.Configuration.tlversion; m = [{ name: "X-TeaLeaf", value: j }, { name: "Content-Type", value: k}]; m = m.concat(h.Event.tlGetHTTPHeaders(h.Event.Configuration.tlHTTPRequestHeadersSet)); if (!h.initHeadersSent) { m = m.concat(h.Event.tlGetHTTPHeaders(h.Event.Configuration.tlHTTPRequestHeadersEvalInit)); h.initHeadersSent = true } if (h.Event.SendUnloadHeaders && !h.Event.UnloadHeadersSent) { m = m.concat(h.Event.tlGetHTTPHeaders(h.Event.Configuration.tlHTTPRequestHeadersEvalBeforeUnload)); h.Event.UnloadHeadersSent = true } o.setHeaders(m); l = { loaded: function (b, a) { if (h.tlGetCookieValue("tlQueuedXML")) { h.tlEraseCookie("tlQueuedXML") } }, failure: function (b, a) { if (b < 200 && !h.Event.Configuration.tlignoresendfailure) { h.Event.Configuration.tlignoresendfailure = true; h.Event.tlErrorHandler("XHR failure - Status " + b + ": " + a, o.getUrl()) } }, success: function (b, a) { h.Event.Configuration.tlignoresendfailure = false } }; h.Event.Configuration.tlignoresendfailure = true; o.send(l); return 0 }; TeaLeaf.makeRandomString = function (j, k) { var f, g, h; if (!j || j <= 0) { return } if (!k) { k = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890~!@$-" } h = ""; for (f = 0; f < j; f++) { g = Math.floor(Math.random() * k.length); h += k.charAt(g) } return h }; TeaLeaf.getNodeType = function (d) { var f, e; if (!d) { return "" } f = d.nodeName ? d.nodeName.toLowerCase() : ""; e = ""; if (f === "input" || f === "object" || f === "script") { e = d.type ? d.type.toLowerCase() : "" } return e }; TeaLeaf.tLoadObjs = []; TeaLeaf.addOnLoad = function (c, d) { if (arguments.length === 1) { TeaLeaf.tLoadObjs.push(c) } else { if (arguments.length > 1) { TeaLeaf.tLoadObjs.push(c[d]) } } }; TeaLeaf.tlSetCookie = function (g, l, h, j, m, k) { if (!g) { return } document.cookie = g + "=" + l + (h ? (";expires=" + h.toUTCString()) : "") + ";path=" + (j || "/") + (m ? (";domain=" + m) : "") + (k ? ";secure" : "") }; TeaLeaf.tlGetCookieValue = function (h) { var c, j, m, l, k; k = h + "="; l = null; m = document.cookie.split(";"); for (c = 0; c < m.length; c++) { j = TeaLeaf.ltrim(m[c]); if (j.indexOf(k) === 0) { l = j.substring(k.length, j.length); break } } return l }; TeaLeaf.tlEraseCookie = function (c) { var d; d = new Date(1970, 1, 1); TeaLeaf.tlSetCookie(c, "", d) }; TeaLeaf.tlBrowserIsIE = function () { var b; b = TeaLeaf.tlBrowser; if (b) { return !!b.MSIE } return false }; TeaLeaf.tlBrowserIsMozilla = function () { var b; b = TeaLeaf.tlBrowser; if (b) { return !!b.MOZILLA } return false }; TeaLeaf.tlBrowserIsWebKit = function () { var b; b = TeaLeaf.tlBrowser; if (b) { return !!b.WEBKIT } return false }; TeaLeaf.tlBrowserIsAndroid = function () { var b; b = TeaLeaf.tlBrowser; if (b) { return !!b.ANDROID } return false }; TeaLeaf.tlBrowserIsOpera = function () { var b; b = TeaLeaf.tlBrowser; if (b) { return !!b.OPERA } return false }; TeaLeaf.tlBrowserIsUnknown = function () { var b; b = TeaLeaf.tlBrowser; if (b) { return !!b.UNKNOWN } return false }; (function () { var r = TeaLeaf, j = r.Client, n = r.Configuration, m = r.Event, p = null, l = true, q = false, k = m ? m.Configuration.tlmaxeventcount : 300, o = false; r.tlDisable = function () { l = false; if ((o || n.tlDisableIfInactive) && !q) { try { m.tlFlushQueue(true); j.tlDetachFromAllControls(); TeaLeaf.Event.tlRemoveHandler(window, "beforeunload", TeaLeaf.Event.tlBeforeUnload, false); TeaLeaf.Event.tlRemoveHandler(window, "unload", TeaLeaf.Event.tlUnload, false) } catch (a) { } q = true } }; r.activitySinceDisabled = function () { return l }; r.tlKeepAlive = function () { if (p) { window.clearTimeout(p); p = null } if (o || r.Event.getEventCount() >= k) { o = true; r.tlDisable(); r.tlKeepAlive = function () { }; return } if (!q && n.tlActivityTimeout) { p = window.setTimeout(function () { r.tlDisable() }, (n.tlActivityTimeout * 60000)) } if (!l) { l = true } } } ()); TeaLeaf.PageSetup = function (s) { var u, e, w, r, o, x, v, p, t, y; if (document.readyState && document.readyState !== "complete") { return } v = TeaLeaf; p = v.Configuration; t = p.tlGUIDCookie; if (v.PageSetup.Complete) { return } v.PageSetup.Complete = true; v.Event.UnloadHeadersSent = false; v.unloadSent = false; if (v.PageSetup.Cleanup) { v.PageSetup.Cleanup() } v.initialOrientation = window.orientation || 0; v.tlBrowser.UNKNOWN = false; y = navigator.userAgent.toLowerCase(); if (/opera|presto/i.test(y)) { v.tlBrowser.OPERA = true } else { if (/android/i.test(y)) { v.tlBrowser.ANDROID = true } else { if (/(apple)?webkit|safari|chrome/i.test(y)) { v.tlBrowser.WEBKIT = true } else { if (/msie|trident/i.test(y)) { v.tlBrowser.MSIE = true } else { if (/mozilla|gecko|firefox/i.test(y)) { v.tlBrowser.MOZILLA = true } else { v.tlBrowser.UNKNOWN = true } } } } } if (p.xd_CommonDomain) { try { document.domain = p.xd_CommonDomain } catch (s) { } } if (p.xd_iframeID) { try { r = document.getElementById(p.xd_iframeID); if (!r) { o = ((window.location.protocol === "http:") ? p.xd_iframeSrcURL : p.xd_iframeSrcURLSecure); if (o) { r = document.createElement("IFRAME"); if (r) { r.id = p.xd_iframeID; r.src = o; r.style.display = "none"; r.style.visibility = "hidden"; document.body.appendChild(r) } } } } catch (q) { } } if (p.tlSetGUID) { if (!t || !t.name) { } else { if (!t.valueLength) { t.valueLength = 32 } if (!t.valueSet) { t.valueSet = "0123456789ABCDEF" } e = v.tlGetCookieValue(t.name); if (!e) { x = new Date(); e = v.makeRandomString(t.valueLength, t.valueSet); w = t.expires ? new Date(x.getTime() + t.expires * 60 * 1000) : null; v.tlSetCookie(t.name, e, w, t.path, t.domain, t.secure) } } } for (u = 0; u < v.tLoadObjs.length; u++) { v.tLoadObjs[u]() } v.EndLoad = new Date() }; if (document.readyState === "complete") { TeaLeaf.PageSetup() } else { if (document.addEventListener) { document.addEventListener("DOMContentLoaded", TeaLeaf.PageSetup, false); window.addEventListener("load", TeaLeaf.PageSetup, false); TeaLeaf.PageSetup.Cleanup = function () { var b; b = TeaLeaf; document.removeEventListener("DOMContentLoaded", b.PageSetup, false); window.removeEventListener("load", b.PageSetup, false) } } else { if (document.attachEvent) { document.attachEvent("onreadystatechange", TeaLeaf.PageSetup); window.attachEvent("onload", TeaLeaf.PageSetup); TeaLeaf.PageSetup.Cleanup = function () { var b; b = TeaLeaf; document.detachEvent("onreadystatechange", b.PageSetup); window.detachEvent("onload", b.PageSetup) } } else { if (typeof window.onload === "function") { TeaLeaf.OnLoad = window.onload } else { TeaLeaf.OnLoad = null } window.onload = function () { var b; b = TeaLeaf; b.PageSetup(); window.onload = b.OnLoad; if (b.OnLoad) { b.OnLoad() } } } } } } if (window.TeaLeaf && ((typeof TeaLeaf.replay === "function") ? !TeaLeaf.replay() : !TeaLeaf.replay) && TeaLeaf.Event && !TeaLeaf.Event.setupComplete) { TeaLeaf.Event.setupComplete = true; TeaLeaf.Event.tlQueuedXML = ""; TeaLeaf.Event.tlWindowObjects = [{ tlWindowName: "", tlWindowObject: ""}]; TeaLeaf.Event.queuedEventTypes = {}; (function () { var b = 0; TeaLeaf.Event.setEventCount = function (a) { if (typeof a === "number") { b = a } return b }; TeaLeaf.Event.getEventCount = function () { return b } } ()); TeaLeaf.Event.createBaseEvent = function (h) { var f = TeaLeaf.Event, g, e = (new Date()).getTime(); g = { type: h, offset: f.tlDateDiff(e), contextOffset: f.tlContextDateDiff(e), count: f.setEventCount(f.getEventCount() + 1) }; return g }; TeaLeaf.Event.createExceptionEvent = function (h, e, f) { var g = TeaLeaf.Event.createBaseEvent(6); g.exception = { description: h, url: e }; if (f) { g.exception.line = f } TeaLeaf.Event.queuedEventTypes.EXCEPTION = true; return g }; TeaLeaf.Event.createCustomEvent = function (g, f) { var h = TeaLeaf.Event.createBaseEvent(5), e; h.customEvent = { name: g || "CUSTOM" }; e = h.customEvent; if (typeof f === "object") { e.data = {}; TeaLeaf.extend(f, e.data) } else { e.data = f } TeaLeaf.Event.queuedEventTypes.CUSTOM = true; return h }; TeaLeaf.Event.createAppContextEvent = function (e, d) { var f = TeaLeaf.Event.createBaseEvent(2); f.context = {}; if (typeof d === "object") { TeaLeaf.extend(d, f.context) } TeaLeaf.Event.queuedEventTypes.PERFORMANCE = true; return f }; TeaLeaf.Event.getTlEvent = function (d) { var f = { change: "valueChange", click: "click", unchanged: "unchanged" }, e = ""; if (!d) { return e } e = f[d] || e; return e }; TeaLeaf.Event.createGuiEvent = function (h, j) { var k = window.TeaLeaf, f, g = k.Event.createBaseEvent(4); f = k.Event.getEventType(h); g.event = { type: f || h, tlEvent: k.Event.getTlEvent(h) }; if (f) { g.event.subType = h } k.Event.queuedEventTypes.GUI = true; return k.extend(j, g) }; TeaLeaf.Event.getEventType = function (d) { var e = /^(mouse|key|touch|gesture)/, f = null; if (!d) { return null } f = e.exec(d); return f ? f[0] : null }; TeaLeaf.Event.tlGetTeaLeafXEvent = function () { var b = TeaLeaf.$C("ClientEvent"); return b }; TeaLeaf.Event.tlEventType = function () { var d, f = "", e; if (typeof TeaLeaf.Event.queuedEventTypes !== "object") { return "" } e = TeaLeaf.Event.queuedEventTypes; for (d in e) { if (e.hasOwnProperty(d)) { f += d + "; " } } TeaLeaf.Event.queuedEventTypes = {}; return f }; TeaLeaf.Event.tlEventSubType = function () { var b; b = TeaLeaf.Event.SetSubType; TeaLeaf.Event.SetSubType = ""; return b }; TeaLeaf.Event.tlGetUrlPath = function () { var b = window.location.pathname; return b }; TeaLeaf.Event.tlGetJSVersion = function () { return TeaLeaf.Configuration.tlversion }; TeaLeaf.Event.tlResolutionType = function (g, f) { var h, e = TeaLeaf.Event.Configuration.tlResolution; for (h = 0; h < e.length; h++) { if (g <= e[h].width || f <= e[h].height) { return e[h].type } } return e[e.length - 1].type }; TeaLeaf.Event.tlResolutionTypeBrowser = function () { var h, g, e = 0, f = 0; if (window.innerWidth) { e = window.innerWidth; f = window.innerHeight } else { if (document.documentElement && document.documentElement.clientWidth) { e = document.documentElement.clientWidth; f = document.documentElement.clientHeight } else { if (document.body && document.body.clientWidth) { e = document.body.clientWidth; f = document.body.clientHeight } else { h = document.getElementsByTagName("body"); if (h.length > 0) { e = h[0].clientWidth; f = h[0].clientHeight } } } } g = TeaLeaf.Event.tlResolutionType(e, f); return g }; TeaLeaf.Event.tlGetRenderTime = function () { return TeaLeaf.Event.PageLoadMilliSecs }; TeaLeaf.Event.tlGetElementCount = function (b) { return document.getElementsByName(b).length }; TeaLeaf.Event.tlBadImageCount = function () { var k, h, j, g, f; h = 0; j = document.images; f = j.length; for (k = 0; k < f; k++) { g = j[k]; if ((!g) || (typeof g.complete === "boolean" && !g.complete) || (typeof g.naturalWidth !== "undefined" && g.naturalWidth === 0)) { h++; continue } } return h }; TeaLeaf.Event.tlFlashSend = function (q, s, j, p) { var r = window.TeaLeaf, m, n, o = r.Event.createBaseEvent(q, s), l = j.split(p); o.timeDuration = r.Event.tlDateDiff(new Date()); for (m = 0, n = l.length - 1; m < n; m += 2) { o[l[m]] = l[m + 1] } r.eventQ.enqueue(o); r.tlKeepAlive() }; TeaLeaf.Event.tlShowFlashDebug = function (f, g) { var h, e; g += "<BR>"; for (h = 0; h < TeaLeaf.Event.tlWindowObjects.length; h++) { if (TeaLeaf.Event.tlWindowObjects[h].tlWindowName === f) { if (TeaLeaf.Event.tlWindowObjects[h].tlWindowObject.closed) { TeaLeaf.Event.tlWindowObjects[h].tlWindowObject = window.open("", f, "width=600,height=300,scrollbars=yes,resizable=yes") } TeaLeaf.Event.tlWindowObjects[h].tlWindowObject.document.writeln(g.fontsize(2)); TeaLeaf.Event.tlWindowObjects[h].tlWindowObject.scrollTo(0, 50000); return } } e = window.open("", f, "width=600,height=300,scrollbars=yes,resizable=yes"); TeaLeaf.Event.tlWindowObjects.push({ tlWindowName: f, tlWindowObject: e }); e.document.writeln(g.fontsize(2)) }; TeaLeaf.Event.tlSetEventCount = function (b) { TeaLeaf.Event.Configuration.tleventcount += b }; TeaLeaf.Event.tlGetEventCount = function () { return TeaLeaf.Event.Configuration.tleventcount }; TeaLeaf.Event.tlGetExceptionCount = function () { return (TeaLeaf.Event.Configuration.tlcatcherrors ? TeaLeaf.Event.Configuration.tlexceptioncount : null) }; TeaLeaf.Event.tlGetDwellTime = function () { return TeaLeaf.Event.tlDateDiff(TeaLeaf.Event.Configuration.tllastdwelltime) }; TeaLeaf.Event.tlGetLastVisitedElementID = function () { return TeaLeaf.Event.Configuration.tlidoflastvisitedcontrol }; TeaLeaf.Event.tlDateDiff = function (f, d) { var e = TeaLeaf.tlStartLoad.getTime(); f = f || e; d = d || e; return Math.abs(f - d) }; TeaLeaf.Event.tlGetVisitOrder = function () { return TeaLeaf.Event.Configuration.tlvisitorder }; TeaLeaf.Event.tlFormatXMLValue = function (b) { if (b && typeof b === "string") { if (b.replace) { return b.replace(/&/g, "&amp;").replace(/\"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;") } return b } return "" }; TeaLeaf.Event.tlGetHTTPHeaders = function (tlheaderconfig) { var i, headers, value; headers = []; for (i = 0; i < tlheaderconfig.length; i++) { if (tlheaderconfig[i].tlsethttpheader) { value = eval(tlheaderconfig[i].tlreqhttpheadervalue); if (value) { headers.push({ name: tlheaderconfig[i].tlreqhttpheadername, value: value }) } } } return headers }; TeaLeaf.Event.tlGetPageId = function () { if (TeaLeaf.Event.Configuration.tlpageid) { return TeaLeaf.Event.Configuration.tlpageid } if (window.TeaLeaf_PageID) { TeaLeaf.Event.Configuration.tlpageid = TeaLeaf_PageID; return TeaLeaf.Event.Configuration.tlpageid } TeaLeaf.Event.Configuration.tlpageid = "ID" + TeaLeaf.tlStartLoad.getHours() + "H" + TeaLeaf.tlStartLoad.getMinutes() + "M" + TeaLeaf.tlStartLoad.getSeconds() + "S" + TeaLeaf.tlStartLoad.getMilliseconds() + "R" + Math.random(); return TeaLeaf.Event.Configuration.tlpageid }; TeaLeaf.Event.tlAddHandler = function (g, h, k, e) { try { if (!g) { return } if (g.addEventListener) { g.addEventListener(h, k, e) } else { if (g.attachEvent) { g.attachEvent("on" + h, k) } } } catch (j) { } }; TeaLeaf.Event.tlRemoveHandler = function (g, h, k, e) { try { if (!g) { return } if (g.removeEventListener) { g.removeEventListener(h, k, e) } else { if (g.detachEvent) { g.detachEvent("on" + h, k) } } } catch (j) { } }; TeaLeaf.Event.tlFlushQueue = (function () { var f, e = 1, d = (typeof TeaLeaf.Event.Configuration.jsonSerializer === "function") ? true : false; f = d ? "application/json" : "text/xml"; return function (b) { var k = window.TeaLeaf, c = { messageVersion: "1.0.0.0", serialNumber: e, sessions: [{ id: k.Event.tlGetPageId(), startTime: k.tlStartLoad.getTime(), timezoneOffset: k.tlStartLoad.getTimezoneOffset(), messages: [], meta: { libVersion: k.Event.tlGetJSVersion(), page: window.location.href, windowId: k.Env.getWindowId(), screen: { width: window.screen.width, height: window.screen.height, orientation: k.initialOrientation}}}] }, a = k.eventQ.size, j = ""; if (k.eventQ.isEmpty()) { return } b = b || !k.Event.Configuration.tlqueueevents; if (!b && a < k.Event.Configuration.tlqueuemaxevents) { return } if (d) { while (!k.eventQ.isEmpty()) { c.sessions[0].messages.push(k.eventQ.dequeue()) } j = k.Event.Configuration.jsonSerializer(c) } else { j = k.serializeEventsToXML(k.eventQ) } k.Event.tlSetEventCount(a); k.sendData(j, f); e += 1 } } ()); TeaLeaf.Event.tlGetAlertCount = function () { var d, f, e; d = TeaLeaf; f = d.Event; e = f.getAlertCount ? f.getAlertCount() : 0; return e }; TeaLeaf.Event.tlErrorHandler = function (m, e, h) { try { var k = TeaLeaf.Event.Configuration, j; k.tlexceptioncount += 1; if (k.tlexceptioncount > k.tlmaxeventexception) { return false } if ((typeof m !== "string") && !e) { return false } h = h || 0; j = TeaLeaf.Event.createExceptionEvent(m, e, h); TeaLeaf.eventQ.enqueue(j) } catch (l) { } return false }; (function () { var n, l, j, o, k, m, h; n = TeaLeaf; l = n.Configuration; j = n.Client; o = j.Configuration; k = n.Event; m = k.Configuration; h = function (c) { var a, b = new Date(), d; if (n.unloadSent) { return } if (!n.activitySinceDisabled()) { return } if (o.tlIEhref) { o.tlIEhref = false; return } j.tlSendKeys(); j.tlSendResize(); j.tlSendScroll(null, true); if (!l.xhrAsyncOnUnload) { l.xhrAsync = false } if (o.tlStoreQueueInCookie) { b.setTime(b.getTime() + 300000); a = k.tlQueuedXML.replace(/(\r|\n)/g, "").replace(/;/g, "%3B"); n.tlSetCookie("tlQueuedXML", a, b, "/") } m.tllastdwelltime = new Date(); k.queuedEventTypes.PERFORMANCE = true; if (!k.SetSubType) { k.SetSubType = c } else { k.SetSubType += "; " + c } k.SendUnloadHeaders = true; k.tlFlushQueue(true); setTimeout(function () { n.unloadSent = false; l.xhrAsync = true; k.SendUnloadHeaders = false }, 1000); n.PageSetup.Complete = false; n.unloadSent = true }; k.tlBeforeUnload = function () { h(n.$C("BEFOREUNLOAD")) }; k.tlUnload = function (a) { if (!a.persisted) { j.tlDetachFromAllControls() } h(n.$C("UNLOAD")) } } ()); TeaLeaf.Event.EventSetup = function () { var e, f, d; e = TeaLeaf; f = e.Event; d = f.Configuration; if (d.tlCatchAlerts) { (function () { var h, c, a, b; h = 0; if (window.alert && window.alert.apply) { c = window.alert; window.alert = function () { var g; g = c.apply(window, arguments); h++; return g } } if (window.confirm && window.confirm.apply) { a = window.confirm; window.confirm = function () { var g; g = a.apply(window, arguments); h++; return g } } if (window.prompt && window.prompt.apply) { b = window.prompt; window.prompt = function () { var g; g = b.apply(window, arguments); h++; return g } } f.getAlertCount = function () { return h } } ()) } if (TeaLeaf.Event.Configuration.tlcatcherrors) { if (typeof window.onerror !== "function") { window.onerror = TeaLeaf.Event.tlErrorHandler } } TeaLeaf.Event.setupTimerRoutine(); TeaLeaf.Event.Loaded = true }; TeaLeaf.Event.setupTimerRoutine = function (b) { if (TeaLeaf.Event.Configuration.tlqueueevents) { b = b || TeaLeaf.Event.Configuration.tlqueueeventstimer } else { b = 1000 } b = (b > 999) ? b : 1000; setTimeout(function () { TeaLeaf.Event.tlFlushQueue(); TeaLeaf.Event.setupTimerRoutine() }, b) }; TeaLeaf.Event.tlAddCustomEvent = function (e, d) { var f; if (!e || typeof e !== "string") { e = "custom" } if (!d || typeof d !== "object") { return } f = TeaLeaf.Event.createCustomEvent(e, d); TeaLeaf.eventQ.enqueue(f) }; (function (u) { var w = [], r = []; function o(f, a, e) { var d, c = f.toUpperCase(), b = { type: c, name: a }; if (typeof e === "string") { b.referrer = e } d = u.Event.createAppContextEvent(c, b); u.eventQ.enqueue(d) } function t(b) { var a, c = false; if (!b.tagName) { return c } switch (b.tagName.toLowerCase()) { case "input": a = u.getNodeType(b); if (!a) { break } switch (a) { case "radio": case "checkbox": case "text": case "password": case "file": c = true; break; default: break } break; case "textarea": case "select": c = true; break; default: break } return c } function m(c, d, a) { var b = false; if (d.value === a.value && d.checked === a.checked) { b = true } return b } function v(a, b) { if (typeof a !== "object" || typeof b !== "function") { return } var d, e, g, c, f = ["INPUT", "TEXTAREA", "SELECT"]; for (d = 0; d < f.length; d++) { c = a.getElementsByTagName(f[d]); for (e = 0; e < c.length; e++) { g = u.Client.parseTarget(c[e]); b(c[e], g) } } } function n(a, b) { if (!a || !b || !t(a)) { return } w.push(b) } function x(d, c) { if (!d || !c) { return } var g, h, b, e, f, a; for (g = w.length - 1; g >= 0; g--) { if (w[g].id === c.id) { if (m(d, c.state, w[g].state)) { b = { id: c.id, idType: c.idType, type: d.tagName, tlType: u.Event.getTlType(d) }; e = u.Client.tlGetName(d); if (e) { b.name = e } f = u.getNodeType(d); if (f) { b.subType = f } a = d.TealeafVC; if (typeof a === "number") { b.visitedCount = a } b.currState = c.state; if (t(d)) { h = u.Event.createGuiEvent("unchanged", { target: b }); u.eventQ.enqueue(h) } } w.splice(g, 1); return } } } function q(b) { var a = { name: b, timeStamp: (new Date()).getTime() }; r.push(a) } function s() { var a = r.length - 1; if (a >= 0) { return r[a] } return null } function p(b) { var a = s(); if (a && a.name === b) { r.pop() } } u.Event.tlAppContextLoad = function (b, c, a) { if (typeof b !== "string") { return } q(b); o("LOAD", b, c); if (u.Configuration.enableUsability && a) { v(a, n); u.Client.tlProcessNode(a) } }; u.Event.tlAppContextUnload = function (b, c, a) { if (typeof b !== "string") { return } if (u.Configuration.enableUsability && a) { v(a, x) } o("UNLOAD", b, c); p(b) }; u.Event.tlContextDateDiff = function (b, c) { var d = s(), a = d ? d.timeStamp : 0; b = b || a; c = c || a; return Math.abs(b - c) }; u.Event.getTlType = function (d) { var e = { button: "button", checkbox: "checkBox", radio: "radioButton", range: "slider", text: "textBox" }, a, b = { a: "link", button: "button", canvas: "canvas", command: "command", select: "selectList", textarea: "textBox" }, c = ""; if (!d || !d.tagName) { return c } a = d.tagName.toLowerCase(); if (a === "input") { a = u.getNodeType(d); c = e[a] || c } else { c = b[a] || c } return c } } (TeaLeaf)); if (!TeaLeaf.Event.Configuration.tlinit) { TeaLeaf.Event.Configuration.tlinit = true; TeaLeaf.addOnLoad(TeaLeaf.Event.EventSetup) } } if (window.TeaLeaf && ((typeof TeaLeaf.replay === "function") ? !TeaLeaf.replay() : !TeaLeaf.replay) && TeaLeaf.Env && !TeaLeaf.Env.setupComplete) { TeaLeaf.Env.setupComplete = true; TeaLeaf.Env.tlSendPageSummary = function () { var h = window.TeaLeaf, f = h.Env, g, e = { document: f.getDocumentInfo(), window: f.getWindowInfo(), screen: f.getScreenInfo() }; h.Event.queuedEventTypes.PERFORMANCE = true; h.Event.SetSubType = "INIT"; h.Event.PageLoadMilliSecs = h.Event.tlDateDiff(new Date()); h.eventQ.enqueue(g) }; TeaLeaf.Env.getDocumentInfo = function (d) { var c = TeaLeaf; d = d || window.document; return { title: d.title, referer: d.referrer, contentType: d.contentType, lastModified: d.lastModified, characterSet: d.characterSet, width: d.width, height: d.height, anchors: d.anchors.length, embeds: (d.embeds ? d.embeds.length : 0), forms: d.forms.length, links: d.links.length, images: d.images.length, badImages: (c.tlBrowserIsWebKit() ? 0 : c.Event.tlBadImageCount()), plugins: (d.plugins ? d.plugins.length : 0)} }; TeaLeaf.Env.getWindowInfo = (function () { var b; TeaLeaf.Env.getWindowId = function () { if (typeof window.sessionStorage === "object") { try { b = sessionStorage.TLTWID; if (!b) { b = TeaLeaf.makeRandomString(6); sessionStorage.TLTWID = b } } catch (a) { b = null } } return b }; return function () { var f = TeaLeaf, a = window.location, e; if (window.innerHeight && window.innerWidth) { e = window.innerWidth + "x" + window.innerHeight } else { if (document.body && document.body.clientWidth && document.body.clientHeight) { e = document.body.clientHeight + "x" + document.body.clientWidth } } return { initialOrientation: f.initialOrientation, href: escape(a.href), protocol: a.protocol, hostName: a.hostname, port: a.port, pathName: a.pathname, frames: window.frames.length} } } ()); TeaLeaf.Env.getScreenInfo = function () { var b = window.screen; return { width: b.width, height: b.height, deviceXDPI: b.deviceXDPI, deviceYDPI: b.deviceYDPI, logicalXDPI: b.logicalXDPI, logicalYDPI: b.logicalYDPI} }; TeaLeaf.addOnLoad(TeaLeaf.Env.tlSendPageSummary) } if (window.TeaLeaf && ((typeof TeaLeaf.replay === "function") ? !TeaLeaf.replay() : !TeaLeaf.replay) && TeaLeaf.Client && !TeaLeaf.Client.setupComplete) { TeaLeaf.Client.setupComplete = true; TeaLeaf.Client.tlTimeoutID = -1; TeaLeaf.Client.tlHasUserMovement = false; TeaLeaf.Client.tlUserMovement = function () { TeaLeaf.Client.tlHasUserMovement = true; TeaLeaf.Event.tlRemoveHandler(document, "mousemove", TeaLeaf.Client.tlUserMovement, false) }; TeaLeaf.Client.EmptyMask = function () { return "" }; TeaLeaf.Client.BasicMask = function (b) { if (!b || !b.value) { return null } return "XXXXXX" }; TeaLeaf.Client.PreserveMask = function (d) { var e, f; if (!d || !d.value) { return null } e = TeaLeaf.Client.Configuration.tlPrivacyMask; f = d.value; f = f.replace(/[A-Z]/g, e.upperChar); f = f.replace(/[a-z]/g, e.lowerChar); f = f.replace(/[0-9]/g, e.numericChar); f = f.replace(/[^A-Za-z0-9]/g, e.symbolChar); return f }; TeaLeaf.Client.getFieldBlockMatch = function (k) { var f, h, j, g; j = TeaLeaf.Client.Configuration.tlFieldBlock; if (typeof k === "string") { k = document.getElementById(k) } if (!k) { return null } for (f = 0; f < j.length; f++) { g = j[f]; if (g.id) { if (!g.idRE) { g.idRE = new RegExp(g.id, (g.caseinsensitive ? "i" : "")) } if (g.idRE.test(k.id)) { return g } } if (g.name) { if (!g.nameRE) { g.nameRE = new RegExp(g.name, (g.caseinsensitive ? "i" : "")) } if (g.nameRE.test(k.name)) { return g } } if (g.className) { if (!g.classRE) { g.classRE = new RegExp(g.className, (g.caseinsensitive ? "i" : "")) } if (g.classRE.test(k.className)) { return g } } if (g.attributeName && g.attributeValue) { h = k.getAttribute(g.attributeName); if (h) { if (!g.attributeRE) { g.attributeRE = new RegExp(g.attributeValue, (g.caseinsensitive ? "i" : "")) } if (g.attributeRE.test(h)) { return g } } } } return null }; TeaLeaf.Client.tlIsReplace = function (b) { if (typeof b === "string") { b = document.getElementById(b) } if (!b) { return false } if (TeaLeaf.Client.getFieldBlockMatch(b)) { return true } if (TeaLeaf.getNodeType(b) === "password") { return TeaLeaf.Client.Configuration.tlpassword === 2 } return false }; TeaLeaf.Client.tlReplaceValue = function (d) { var c; if (typeof d === "string") { d = document.getElementById(d) } if (!d) { return null } c = TeaLeaf.Client.getFieldBlockMatch(d); if (c) { return c.mask(d) } return d.value }; TeaLeaf.Client.tlIsExcluded = function (d) { var c; if (typeof d === "string") { d = document.getElementById(d) } if (!d) { return false } c = TeaLeaf.Client.getFieldBlockMatch(d); if (c) { return c.exclude } if (TeaLeaf.getNodeType(d) === "password") { return TeaLeaf.Client.Configuration.tlpassword === 2 } return false }; TeaLeaf.Client.tlGetName = function (f) { if (!f) { return null } var d = f.id, e = f.name; if (d) { return d } if (e) { return e } return null }; TeaLeaf.Client.tlGetEventSource = function (c) { var d; d = null; if (!c) { return null } if (c.srcElement) { d = c.srcElement } else { d = c.target; if (!d) { d = c.explicitOriginalTarget } if (!d) { d = c.originalTarget } } if (d && d.tagName === "HTML") { return null } if (d && !d.name) { if (d.parentNode && d.parentNode.tagName) { if (d.parentNode.tagName === "A" || d.parentNode.tagName === "LINK") { d = d.parentNode } } } if (!d || !d.tagName) { d = window.document.body } return d }; TeaLeaf.Client.tlGetAnchor = function (f, d) { if (!f) { return null } if (f.name) { return null } var e; for (e = 0; e < document.anchors.length; e++) { if (document.anchors[e] === f) { if (d) { return "<AnchorElement>" + e + "</AnchorElement>\r\n" } else { return "Anchor-" + e } } } for (e = 0; e < document.links.length; e++) { if (document.links[e] === f) { if (d) { return "<LinkElement>" + e + "</LinkElement>\r\n" } else { return "Link-" + e } } } return null }; TeaLeaf.Client.checkIsInput = function (b) { if (typeof b === "string") { b = document.getElementById(b) } switch (b.tagName) { case "INPUT": case "SELECT": case "TEXTAREA": return true } return false }; TeaLeaf.Event.tlFormatXMLName = function (g) { if (!g || g.length <= 0) { return null } var h, f, e = ""; if (!TeaLeaf.Event.tlNameStartChar(g.charCodeAt(0))) { e = "_" } f = g.length; for (h = 0; h < f; h++) { if (TeaLeaf.Event.tlNameChar(g.charCodeAt(h))) { e = e + g.charAt(h) } else { e = e + "_" } } return e }; TeaLeaf.Event.tlNameStartChar = function (b) { return (b >= 65 && b <= 90) || b === 95 || (b >= 97 && b <= 122) || (b >= 192 && b <= 214) || (b >= 216 && b <= 246) || (b >= 248 && b <= 767) || (b >= 880 && b <= 893) || (b >= 895 && b <= 8191) || (b >= 8204 && b <= 8205) || (b >= 8304 && b <= 8591) || (b >= 11264 && b <= 12271) || (b >= 12289 && b <= 55295) || (b >= 63744 && b <= 64975) || (b >= 65008 && b <= 65533) }; TeaLeaf.Event.tlNameChar = function (b) { return TeaLeaf.Event.tlNameStartChar(b) || b === 45 || b === 46 || (b >= 48 && b <= 57) || b === 183 || (b >= 768 && b <= 879) || (b >= 8255 && b <= 8256) }; TeaLeaf.Client.tlQueuedKeys = ""; TeaLeaf.Client.getNormalizedKeyCode = function (c) { var d; if (!c || !c.keyCode || (c.keyCode < 32 && c.keyCode !== 8 && c.keyCode !== 20)) { return null } d = ""; if (c.ctrlKey) { d += "c-" } if (c.altKey) { d += "a-" } if (c.shiftKey) { d += "s-" } if (!TeaLeaf.tlBrowserIsIE()) { switch (c.keyCode) { case 59: d += 186; break; default: d += c.keyCode; break } } else { d += c.keyCode } return d }; TeaLeaf.Client.tlQueueKey = function (k) { var m, n, l, o, j, h; o = TeaLeaf; j = o.Client; h = j.Configuration; j.tlSendResize(); j.tlSendScroll(null, true); if (!k) { k = window.event } if (!j.tlQueuedKeysCount) { j.tlQueuedKeys = ""; j.tlQueuedKeysCount = 0 } n = j.tlGetEventSource(k); if (!n) { return } if (!n.TeaLeafFocusTime) { n.TeaLeafFocusTime = new Date() } if (j.tlQueuedKeySource) { if (j.tlQueuedKeySource !== n) { if (j.tlQueuedKeys && j.tlQueuedKeys.length > 0) { j.tlSendKeys() } j.tlQueuedKeySource = n } } else { j.tlQueuedKeySource = n } m = j.tlGetName(n); if (!m) { m = j.tlGetXPathFromNode(n); if (!m) { if (!j.tlGetAnchor(n, false)) { j.tlQueuedKeySource = null } return } else { j.tlQueuedKeySource = n } } else { if (j.tlIsReplace(n)) { j.tlQueuedKeysCount++; return } if (j.tlIsExcluded(n)) { j.tlQueuedKeys = ""; j.tlQueuedKeysCount++; return } } l = j.getNormalizedKeyCode(k); if (l) { if (j.tlQueuedKeys && j.tlQueuedKeys.length > 0) { j.tlQueuedKeys += ";" } j.tlQueuedKeys += l; j.tlQueuedKeysCount++ } }; TeaLeaf.Client.tlSendKeys = function () { var A = window.TeaLeaf, q = A.Client, u, s, r, t, B, o, v, w, x, y, z, p; if (!q.tlQueuedKeySource || (!q.tlQueuedKeys && !q.tlQueuedKeysCount)) { return } w = q.tlQueuedKeySource; v = q.tlQueuedKeys; o = q.tlQueuedKeysCount; q.tlQueuedKeySource = null; q.tlQueuedKeys = ""; q.tlQueuedKeysCount = 0; x = q.tlGetXPathFromNode(w); if (!x && q.Configuration.tlDiscardInvalidXPath) { return } p = !!q.tlIsReplace(w); u = !!q.tlIsExcluded(w); if (p || u) { v = null; o = 0 } B = A.Client.tlGetName(w); z = w.id; if (!A.Client.CheckIfIdValid(w)) { z = "" } r = { Name: w.name, Id: z, ElementType: A.getNodeType(w), TagName: w.tagName, XPath: x, KeyCount: o }; t = {}; y = A.Event.tlFormatXMLName(B); if (p) { if (!t[y]) { t = { ValueIn: y }; t[y] = q.tlReplaceValue(w) } } else { if (!y) { y = x; y = A.Event.tlFormatXMLName(y) } t = { KeyCode: v }; if (w.value) { t.ValueIn = y; t[y] = w.value } } A.tlKeepAlive() }; TeaLeaf.Client.tlSendResize = function () { var d = window.TeaLeaf, f = d.Client, e; if (!f.ResizeClientX && !f.ResizeClientY) { return } e = d.Event.createGuiEvent("Resize", { clientX: f.ResizeClientX, clientY: f.ResizeClientY, screenX: f.ResizeScreenX, screenY: f.ResizeScreenY }); d.eventQ.enqueue(e); f.ResizeClientX = null; f.ResizeClientY = null; f.ResizeScreenX = null; f.ResizeScreenY = null }; TeaLeaf.Client.tlCheckScroll = function () { var c, d = TeaLeaf.Client.Configuration.tlWindowHandlers; for (c = 0; c < d.length; c++) { if (d[c].domevent === "scroll" && d[c].load) { return true } } return false }; TeaLeaf.Client.tlSendScroll = function (m, l) { var h, k, n = 0, j = 0, o; m = m || window.event; if (!TeaLeaf.Client.tlCheckScroll()) { return } if (typeof window.pageYOffset === "number") { j = window.pageYOffset; n = window.pageXOffset } else { if (document.body && (document.body.scrollLeft || document.body.scrollTop)) { j = document.body.scrollTop; n = document.body.scrollLeft } else { if (document.documentElement && (document.documentElement.scrollLeft || document.documentElement.scrollTop)) { j = document.documentElement.scrollTop; n = document.documentElement.scrollLeft } } } if (TeaLeaf.Client.Configuration.tlScrollOffsetX === 0) { TeaLeaf.Client.Configuration.tlScrollOffsetX = n } else { if (n > TeaLeaf.Client.Configuration.tlScrollOffsetX) { TeaLeaf.Client.Configuration.tlScrollDirection = "right" } else { if (n < TeaLeaf.Client.Configuration.tlScrollOffsetX) { TeaLeaf.Client.Configuration.tlScrollDirection = "left" } } } if (TeaLeaf.Client.Configuration.tlScrollOffsetY === 0) { TeaLeaf.Client.Configuration.tlScrollOffsetY = j } else { if (j > TeaLeaf.Client.Configuration.tlScrollOffsetY) { TeaLeaf.Client.Configuration.tlScrollDirection = "down" } else { if (j < TeaLeaf.Client.Configuration.tlScrollOffsetY) { TeaLeaf.Client.Configuration.tlScrollDirection = "up" } } } if (n > 0) { TeaLeaf.Client.Configuration.tlScrollX = n } if (j > 0) { TeaLeaf.Client.Configuration.tlScrollY = j } if (TeaLeaf.Client.Configuration.tlScrollOffsetX === TeaLeaf.Client.Configuration.tlScrollX && TeaLeaf.Client.Configuration.tlScrollOffsetY === TeaLeaf.Client.Configuration.tlScrollY) { return } if (l || (TeaLeaf.Client.Configuration.tlScrollDirectionOrig !== TeaLeaf.Client.Configuration.tlScrollDirection)) { o = { prevState: { scrollLeft: TeaLeaf.Client.Configuration.tlScrollOffsetX, scrollTop: TeaLeaf.Client.Configuration.tlScrollOffsetY, scrollDir: TeaLeaf.Client.Configuration.tlScrollDirectionOrig }, currState: { scrollLeft: TeaLeaf.Client.Configuration.tlScrollX, scrollTop: TeaLeaf.Client.Configuration.tlScrollY, scrollDir: TeaLeaf.Client.Configuration.tlScrollDirection} }; h = TeaLeaf.Event.createGuiEvent("scroll", { target: o }); TeaLeaf.eventQ.enqueue(h); TeaLeaf.tlKeepAlive() } TeaLeaf.Client.Configuration.tlScrollOffsetX = TeaLeaf.Client.Configuration.tlScrollX; TeaLeaf.Client.Configuration.tlScrollOffsetY = TeaLeaf.Client.Configuration.tlScrollY; TeaLeaf.Client.Configuration.tlScrollDirectionOrig = TeaLeaf.Client.Configuration.tlScrollDirection }; TeaLeaf.Client.tlFindAncestorByTag = function (d, e) { var f; if (!d || !e) { return null } for (f = d.parentNode; f && f !== window.document; f = f.parentNode) { if (f.nodeType === 1 && f.tagName === e) { break } } return f }; TeaLeaf.Client.tlCheckBlackList = function (f) { var g, h, e; if (!TeaLeaf.Client.Configuration.tlIDBlackList || !TeaLeaf.Client.Configuration.tlIDBlackList.length) { return false } if (f) { for (g = 0; g < TeaLeaf.Client.Configuration.tlIDBlackList.length; g++) { e = new RegExp(TeaLeaf.Client.Configuration.tlIDBlackList[g], "g"); h = f.match(e); if (h) { return true } } } return false }; TeaLeaf.Client.tlCheckWhiteList = function (f) { var g, h, e; if (!TeaLeaf.Client.Configuration.tlIDWhiteList || !TeaLeaf.Client.Configuration.tlIDWhiteList.length) { return true } if (f) { for (g = 0; g < TeaLeaf.Client.Configuration.tlIDWhiteList.length; g++) { e = new RegExp(TeaLeaf.Client.Configuration.tlIDWhiteList[g], "g"); h = f.match(e); if (h) { return true } } } return false }; TeaLeaf.Client.tlGetXPathFromNode = function (u) { var q, s, n, r = false, o = null, j = null, t = [], m = "null", p = []; if (!u || u.nodeType !== 1) { return m } if (TeaLeaf.Client.CheckIfIdValid(u)) { return '[["' + u.id + '"]]' } n = u; for (q in TeaLeaf.Client.Configuration.tlSpecialChildNodeTags) { if (n.tagName.toString() === q) { n = n.parentNode } } for (r = TeaLeaf.Client.CheckIfIdValid(n); n !== window.document && !r; r = TeaLeaf.Client.CheckIfIdValid(n)) { j = n.parentNode; if (!j) { j = window.document } o = j.childNodes; if (!o) { return m } for (q = 0, s = 0; q < o.length; q++) { if (o[q].nodeType === 1 && o[q].tagName === n.tagName) { if (o[q] === n) { p[p.length] = [n.tagName.toUpperCase(), s]; break } s++ } } n = j } if (r) { p[p.length] = [n.id] } if (!p.length) { return m } for (q = p.length - 1, t = []; q >= 0; q--) { if (p[q].length > 1) { t[t.length] = '["' + p[q][0] + '",' + p[q][1] + "]" } else { t[t.length] = '["' + p[q][0].toString().replace(/\"/g, '\\"') + '"]' } } return ("[" + t.join(",") + "]") }; TeaLeaf.Client.CheckIfIdValid = function (e) { var f; if (!e || !e.id || typeof e.id !== "string") { return false } if (TeaLeaf.Client.tlCheckBlackList(e.id) === true) { return false } if (TeaLeaf.Client.tlCheckWhiteList(e.id) === false) { return false } if (!TeaLeaf.Client.Configuration.tlUniqueIDCheckEnabled) { return true } f = e.id; e.id = (new Date()).getTime() + "_TeaLeaf"; try { if (!document.getElementById(f)) { e.id = f; return true } else { e.id = f; return false } } catch (d) { return false } finally { e.id = f } }; TeaLeaf.Private.setLastProcessedEvent = function (h) { var g = TeaLeaf.Private, e = null, f; if (!h) { return } if (!g.tlPrevEvent) { g.tlPrevEvent = {} } g.tlPrevEvent.type = h.type; g.tlPrevEvent.button = h.button; g.tlPrevEvent.clientX = h.clientX; g.tlPrevEvent.clientY = h.clientY; if (h.keyCode !== f) { g.tlPrevEvent.keyCode = h.keyCode } else { g.tlPrevEvent.keyCode = e } if (h.charCode !== f) { g.tlPrevEvent.charCode = h.charCode } else { g.tlPrevEvent.charCode = e } if (h.timeStamp !== f) { if (h.timeStamp.getTime) { g.tlPrevEvent.timeStamp = h.timeStamp.getTime() } else { g.tlPrevEvent.timeStamp = h.timeStamp } } else { g.tlPrevEvent.timeStamp = new Date().getTime() } if (h.target !== f) { g.tlPrevEvent.target = h.target } else { g.tlPrevEvent.target = e } if (h.srcElement !== f) { g.tlPrevEvent.srcElement = h.srcElement } else { g.tlPrevEvent.srcElement = e } }; TeaLeaf.Private.getLastProcessedEvent = function () { return TeaLeaf.Private.tlPrevEvent }; TeaLeaf.Client.isDuplicateEvent = function (f) { var g = TeaLeaf.Private, e, h = g.getLastProcessedEvent(); if (!h || !f) { g.setLastProcessedEvent(f); return false } if (typeof f.timeStamp !== "undefined") { e = f.timeStamp.getTime ? f.timeStamp.getTime() : f.timeStamp; if (h.timeStamp !== e) { g.setLastProcessedEvent(f); return false } } else { f.timeStamp = new Date().getTime(); if (Math.abs(f.timeStamp - h.timeStamp) > 300) { g.setLastProcessedEvent(f); return false } } if (h.type !== f.type) { g.setLastProcessedEvent(f); return false } if (("target" in f) && (h.target !== f.target)) { g.setLastProcessedEvent(f); return false } if (("srcElement" in f) && (h.srcElement !== f.srcElement)) { g.setLastProcessedEvent(f); return false } if (h.button !== f.button) { g.setLastProcessedEvent(f); return false } if (h.clientX !== f.clientX || h.clientY !== f.clientY) { g.setLastProcessedEvent(f); return false } if (("keyCode" in f) && (h.keyCode !== f.keyCode)) { g.setLastProcessedEvent(f); return false } g.setLastProcessedEvent(f); return true }; TeaLeaf.Client.tlCheckAttributes = function (n, o) { var q, j, m, l = {}, k = TeaLeaf.Client.Configuration.tlAttributeCapture, p; for (q = 0; q < k.length; q++) { if (k[q].tltagname.toLowerCase() === n.tagName.toLowerCase() && k[q].tlevent === o.type.toLowerCase()) { j = k[q].tlattributename; m = n.getAttribute(j); if (m !== p) { l[j] = m } } } return l }; TeaLeaf.Client.tlOrientationChangeEvent = function (g) { var h = window.TeaLeaf, e, f; g = g || window.event; if (h.tlBrowserIsAndroid()) { f = h.Client.Configuration.tlAndroidOrientation + window.orientation; if (f === 270) { f = -90; h.Client.Configuration.tlAndroidOrientation = 90 } else { if (f === 360) { f = 0; h.Client.Configuration.tlAndroidOrientation = 0 } else { h.Client.Configuration.tlAndroidOrientation += f } } } else { f = window.orientation } e = h.Event.createGuiEvent(g.type, { target: { currState: { orientation: f, innerWidth: window.innerWidth, innerHeight: window.innerHeight}} }); h.eventQ.enqueue(e); h.tlKeepAlive() }; TeaLeaf.Client.tlMotionEvent = function (g) { var h = window.TeaLeaf, f, e; g = g || window.event; f = { accelerationIncludingGravity: g.accelerationIncludingGravity }; if (g.acceleration) { f.acceleration = g.acceleration } if (g.interval) { f.interval = g.interval } if (g.rotationRate) { f.rotationRate = g.rotationRate } e = h.Event.createGuiEvent(g.type, { target: { currState: f} }); h.eventQ.enqueue(e); h.tlKeepAlive() }; TeaLeaf.Client.tlDeviceOrientationEvent = function (f) { var d = window.TeaLeaf, e; f = f || window.event; e = d.Event.createGuiEvent(f.type, { target: { currState: { alpha: f.alpha, beta: f.beta, gamma: f.gamma}} }); d.eventQ.enqueue(e); d.tlKeepAlive() }; TeaLeaf.Client.tlAddTouchEvent = (function () { var f = { scale: 0, timestamp: 0 }; function e(a) { var b = false; if (f.scale === a.scale && Math.abs((new Date()).getTime() - f.timestamp) < 500) { b = true } return b } function d(a) { f.scale = a.scale; f.timestamp = (new Date()).getTime() } return function (b) { var c = window.TeaLeaf, a = c.Client, h; b = b || window.event; if (a.Configuration.pinchOnly && (!b.scale || b.scale === 1)) { return } h = { rotation: b.rotation ? b.rotation.toFixed(2) : 0, scale: b.scale ? b.scale.toFixed(2) : 1 }; if (a.Configuration.pinchOnly && e(h)) { return } d(h); if (typeof b.touches === "object") { h.touchCount = b.touches.length || 0 } a.tlAddEvent(b, h) } } ()); TeaLeaf.Client.tlAddEvent = function (M, G, Q) { var Y = window.TeaLeaf, I = Y.Client, Z = I.Configuration, R = false, J, ab, ac, P = 0, aa, W, F, S = false, E, X, D, U, T, O, H, N, V, ad, ae, L, K; if (!M) { M = window.event } E = I.tlGetEventSource(M); if (!E) { return } ac = M.type.toLowerCase(); if (ac === "mousedown" && E.tagName === "BODY") { return } X = Y.getNodeType(E); K = I.tlGetXPathFromNode(E); if (!K && Z.tlDiscardInvalidXPath) { return } if (Z.tlEnableAttr) { ab = I.tlCheckAttributes(E, M) } I.tlSendKeys(); I.tlSendResize(); I.tlSendScroll(null, true); if (!E.TeaLeafFocusTime) { switch (ac) { case "keyup": case "change": case "click": case "dblclick": case "mousedown": E.TeaLeafFocusTime = new Date(); break } } if (ac === "blur" && X === "application/x-shockwave-flash") { return } if (ac === "click" && I.checkIsInput(E)) { Y.Event.Configuration.tlidoflastvisitedcontrol = I.tlGetName(E) } if (ac === "click" && (E.tagName.toUpperCase() === "A") && Y.tlBrowserIsIE()) { Z.tlIEhref = false; H = E.href; if (H === "#") { Z.tlIEhref = true } else { N = "javascript:"; O = H.substr(0, N.length); if (O.toLowerCase() === N) { Z.tlIEhref = true } } } ad = I.tlGetName(E); ae = E.id; if (!I.CheckIfIdValid(E)) { ae = "" } if ((ac === "blur" || ac === "change") && E.TeaLeafFocusTime) { P = Y.Event.tlDateDiff(new Date(), E.TeaLeafFocusTime); E.TeaLeafFocusTime = null } L = null; V = null; T = []; if (!I.tlIsExcluded(E)) { if (!E.value && ac === "change" && E.tagName.toUpperCase() === "SELECT") { F = E.selectedIndex; if (F >= 0 && F < E.options.length) { L = escape(E.options[F].text) } } else { L = I.tlReplaceValue(E) } if (L) { V = Y.Event.tlFormatXMLName(ad); if (!V) { V = K; V = Y.Event.tlFormatXMLName(V) } } if (X === "checkbox" || X === "radio") { R = true; S = !!E.checked } } U = { id: ae || K, idType: ae ? -1 : -2, type: E.tagName, tlType: Y.Event.getTlType(E) }; if (X) { U.subType = X } if (E.name) { U.name = E.name } if (P) { U.dwell = P } if (!I.tlIsExcluded(E)) { D = I.getSavedTargetState(); if (D.id === U.id) { if (Y.Configuration.enableUsability && D.visitCount) { U.visitedCount = D.visitCount } if (D.state) { U.prevState = D.state } } J = I.parseTarget(E); if (J.state) { U.currState = J.state } } W = { target: U }; aa = Y.Event.createGuiEvent(M.type, W); if (U.tlType === "textBox" && M.type === "change") { aa.event.tlEvent = "textChange" } if (typeof Q === "object") { Y.extend(Q, aa.event) } if (typeof G === "object") { aa.target.currState = aa.target.currState || {}; Y.extend(G, aa.target.currState) } if (Z.tlEnableAttr && ab) { Y.extend(ab, aa.target) } Y.eventQ.enqueue(aa); Y.tlKeepAlive() }; TeaLeaf.Client.tlQueueResize = function (b) { TeaLeaf.Client.tlSendKeys(); TeaLeaf.Client.tlSendScroll(null, true); if (!b) { b = window.event } if (b.clientX) { TeaLeaf.ResizeClientX = b.clientX; TeaLeaf.ResizeClientY = b.clientY; TeaLeaf.ResizeScreenX = b.screenX; TeaLeaf.ResizeScreenY = b.screenY } else { TeaLeaf.ResizeClientX = b.target.width; TeaLeaf.ResizeClientY = b.target.height } }; TeaLeaf.Client.tlAttachToAllControls = function () { TeaLeaf.Client.Configuration.tlcontrolsattached = true; TeaLeaf.Client.tlAttachToControls(window); if (TeaLeaf.Client.Configuration.attachToFrames) { try { var d; for (d = 0; d < window.frames.length; d++) { if (window === window.frames[d]) { continue } TeaLeaf.Client.tlAttachToControls(window.frames[d]) } } catch (c) { } } }; TeaLeaf.Client.tlSingleAttach = function () { var i, func, tldomsingleelements = TeaLeaf.Client.Configuration.tlSingleAttach, tlelement; for (i = 0; i < tldomsingleelements.length; i++) { if (tldomsingleelements[i].domelementID) { tlelement = document.getElementById(tldomsingleelements[i].domelementID); if (tlelement) { func = eval(tldomsingleelements[i].tlhandler); TeaLeaf.Event.tlAddHandler(tlelement, tldomsingleelements[i].domevent, func, false) } } } }; TeaLeaf.Client.tlAttachToControls = function (win) { try { var i, func, handlers = TeaLeaf.Client.Configuration.tlWindowHandlers; for (i = 0; i < handlers.length; i++) { if (handlers[i].load) { func = eval(handlers[i].tlhandler); TeaLeaf.Event.tlAddHandler(win, handlers[i].domevent, func, false) } } handlers = TeaLeaf.Client.Configuration.tlDocumentHandlers; for (i = 0; i < handlers.length; i++) { if (handlers[i].load) { func = eval(handlers[i].tlhandler); TeaLeaf.Event.tlAddHandler(win.document, handlers[i].domevent, func, false) } } TeaLeaf.Client.tlProcessNode(win.document.body) } catch (e) { } }; TeaLeaf.Client.tlCheckAttach = function (control) { var i, handlers; if (control.TeaLeaf || control.TeaLeafExclude) { return } control.TeaLeaf = true; control.TealeafVC = 0; switch (control.tagName) { case "INPUT": case "SELECT": case "TEXTAREA": TeaLeaf.Event.tlAddHandler(control, "focus", TeaLeaf.Client.tlSetFocusTime, false); TeaLeaf.Event.tlAddHandler(control, "blur", TeaLeaf.Client.tlHandleBlur, false); TeaLeaf.Event.tlAddHandler(control, "change", TeaLeaf.Client.tlAddEvent, false); break } if (TeaLeaf.Client.Configuration.tlUniversalAttach) { handlers = TeaLeaf.Client.Configuration.tlDocumentHandlers; for (i = 0; i < handlers.length; i++) { if (handlers[i].load) { TeaLeaf.Event.tlAddHandler(control, handlers[i].domevent, eval(handlers[i].tlhandler), false) } } } }; TeaLeaf.Client.tlProcessNode = function (k, o) { var m, e, n, j; if (typeof (k) === "string") { k = document.getElementById(k) } if (!k) { k = window.document.body } try { switch (k.tagName) { case "INPUT": case "SELECT": case "TEXTAREA": TeaLeaf.Client.tlCheckAttach(k); break; default: if (TeaLeaf.Client.Configuration.tlUniversalAttach && TeaLeaf.Client.tlTagNameAllowed(k.tagName)) { TeaLeaf.Client.tlCheckAttach(k) } break } if (!o) { n = ["INPUT", "SELECT", "TEXTAREA"]; for (m = 0; m < n.length; m++) { j = k.getElementsByTagName(n[m]); for (e = 0; e < j.length; e++) { TeaLeaf.Client.tlCheckAttach(j[e]) } } if (TeaLeaf.Client.Configuration.tlUniversalAttach) { if (TeaLeaf.Client.Configuration.tlExcludeTags) { j = k.getElementsByTagName("*"); for (m = 0; m < j.length; m++) { if (TeaLeaf.Client.tlTagNameAllowed(j[m].tagName)) { TeaLeaf.Client.tlCheckAttach(j[m]) } } } else { for (m in TeaLeaf.Client.Configuration.tlNodeTags) { j = k.getElementsByTagName(m); for (e = 0; e < j.length; e++) { TeaLeaf.Client.tlCheckAttach(j[e]) } } } } } } catch (l) { } }; (function (c) { var d = {}; c.parseTarget = function (a) { var m = 0, o = "", n = 0, k = {}, b = TeaLeaf.getNodeType(a), l = ""; if (!a || c.tlIsExcluded(a)) { return {} } o = c.CheckIfIdValid(a) ? a.id : ""; if (!o) { o = c.tlGetXPathFromNode(a); n = -2 } else { n = -1 } switch (b) { case "radio": case "checkbox": k.checked = a.checked; default: if (a.tagName.toUpperCase() === "SELECT") { m = a.selectedIndex; if (m >= 0 && m < a.options.length) { l = escape(a.options[m].text) } } else { l = a.value ? c.tlReplaceValue(a) : "" } break } k.value = l; return { id: o, idType: n, state: k} }; c.saveTargetState = function (a) { var b = c.parseTarget(a); if (d.id === b.id) { return } d = b; d.timestamp = (new Date()).getTime(); a.TealeafVC = a.TealeafVC || 0; a.TealeafVC += 1; d.visitCount = a.TealeafVC }; c.getSavedTargetState = function () { return d }; c.clearSavedTargetState = function () { d = {} } } (TeaLeaf.Client)); TeaLeaf.Client.tlSetFocusTime = function (g) { var e, f; if (!g) { g = window.event } e = TeaLeaf.Client.tlGetEventSource(g); f = TeaLeaf.getNodeType(e); if (!e || f === "application/x-shockwave-flash") { return } try { TeaLeaf.Client.saveTargetState(e); if (!e.TeaLeafFocusTime) { e.TeaLeafFocusTime = new Date() } } catch (h) { } if (TeaLeaf.Client.Configuration.tlsendfocus) { TeaLeaf.Client.tlAddEvent(g) } }; TeaLeaf.Client.tlHandleBlur = function (f) { var d, e; if (!f) { f = window.event } d = TeaLeaf.Client.tlGetEventSource(f); e = TeaLeaf.getNodeType(d); if (!d || e === "application/x-shockwave-flash") { return } TeaLeaf.Client.tlEndVisit(d); if (TeaLeaf.Client.checkIsInput(d)) { TeaLeaf.Event.Configuration.tlidoflastvisitedcontrol = TeaLeaf.Client.tlGetName(d) } if (TeaLeaf.Client.Configuration.tlsendblur) { TeaLeaf.Client.tlAddEvent(f) } d.TeaLeafFocusTime = null }; TeaLeaf.Client.tlEndVisit = function (h) { var g, e, f; if (h.TeaLeafFocusTime) { f = TeaLeaf.Client.tlGetName(h); if (!f) { f = TeaLeaf.Client.tlGetAnchor(h, false); if (f) { f = "LEVEL" + f } else { f = "unnamed" } } g = TeaLeaf.Event.tlDateDiff(h.TeaLeafFocusTime, new Date()); e = f + ":" + g; if (TeaLeaf.Event.Configuration.tlvisitorder) { TeaLeaf.Event.Configuration.tlvisitorder = TeaLeaf.Event.Configuration.tlvisitorder + ";" + e } else { TeaLeaf.Event.Configuration.tlvisitorder = e } } }; TeaLeaf.Client.tlDetachFromAllControls = function () { TeaLeaf.Client.Configuration.tlcontrolsattached = false; TeaLeaf.Client.tlDetachFromControls(window); try { var d, e; for (d = 0; d < window.frames.length; d++) { e = window.frames[d]; TeaLeaf.Client.tlDetachFromControls(e) } } catch (f) { } }; TeaLeaf.Client.tlDetachFromControls = function (win) { try { var i, func, handlers = TeaLeaf.Client.Configuration.tlWindowHandlers, items; for (i = 0; i < handlers.length; i++) { func = eval(handlers[i].tlhandler); TeaLeaf.Event.tlRemoveHandler(win, handlers[i].domevent, func, false) } handlers = TeaLeaf.Client.Configuration.tlDocumentHandlers; for (i = 0; i < handlers.length; i++) { func = eval(handlers[i].tlhandler); TeaLeaf.Event.tlRemoveHandler(win.document, handlers[i].domevent, func, false) } items = win.document.getElementsByTagName("INPUT"); for (i = 0; i < items.length; i++) { TeaLeaf.Event.tlRemoveHandler(items[i], "change", TeaLeaf.Client.tlAddEvent, false); TeaLeaf.Event.tlRemoveHandler(items[i], "blur", TeaLeaf.Client.tlHandleBlur, false); items[i].TeaLeaf = false } items = win.document.getElementsByTagName("SELECT"); for (i = 0; i < items.length; i++) { TeaLeaf.Event.tlRemoveHandler(items[i], "change", TeaLeaf.Client.tlAddEvent, false); TeaLeaf.Event.tlRemoveHandler(items[i], "blur", TeaLeaf.Client.tlHandleBlur, false); items[i].TeaLeaf = false } } catch (e) { } }; TeaLeaf.Client.tlAttachToControl = function (domelement, eventtype, eventHandler) { if (eventHandler) { TeaLeaf.Event.tlAddHandler(domelement, eventtype, eventHandler, false) } else { TeaLeaf.Event.tlAddHandler(domelement, eventtype, eval(TeaLeaf.Client.tlAddEvent), false) } }; TeaLeaf.Client.tlDetachFromControl = function (domelement, eventtype, eventHandler) { if (eventHandler) { TeaLeaf.Event.tlRemoveHandler(domelement, eventtype, eventHandler, false) } else { TeaLeaf.Event.tlRemoveHandler(domelement, eventtype, eval(TeaLeaf.Client.tlAddEvent), false) } }; TeaLeaf.Client.tlScanForAdditions = function () { var d, e; if (!TeaLeaf.Client.Configuration.tlScheduledScan) { return } TeaLeaf.Client.tlProcessNode(document.body); try { for (d = 0; d < window.frames.length; d++) { e = window.frames[d]; TeaLeaf.Client.tlProcessNode(e.document.body) } } catch (f) { } window.clearTimeout(TeaLeaf.Client.tlTimeoutID); TeaLeaf.Client.tlTimeoutID = window.setTimeout(TeaLeaf.Client.tlScanForAdditions, TeaLeaf.Client.Configuration.tlscanupdate) }; TeaLeaf.Client.tlTagNameAllowed = function (d) { if (!d) { return false } var c = TeaLeaf.Client.Configuration.tlNodeTags[d]; if (!c) { c = false } if (TeaLeaf.Client.Configuration.tlExcludeTags) { return !c } return c }; TeaLeaf.Client.tlSetup = function () { var b = TeaLeaf.tlGetCookieValue("tlQueuedXML"); if (b) { TeaLeaf.Event.tlQueuedXML += b.replace(/%3B/g, ";") } TeaLeaf.Client.tlAttachToAllControls(); TeaLeaf.Client.tlSingleAttach(); if (TeaLeaf.Event.Configuration.tlcatchpopups) { TeaLeaf.SavedWindowOpen = window.open; window.open = function (l, m, j, k) { var n, p = "blocked", o; if (typeof TeaLeaf.SavedWindowOpen === "function") { o = TeaLeaf.SavedWindowOpen.apply(this, arguments) } else { l = l || ""; m = m || ""; j = j || ""; o = TeaLeaf.SavedWindowOpen(l, m, j, k) } try { if (!o.closed) { p = "visible" } } catch (a) { } n = TeaLeaf.Event.createGuiEvent("WindowOpen", { status: p, url: escape(l), name: m, features: j, replace: k }); TeaLeaf.eventQ.enqueue(n); return o } } window.clearTimeout(TeaLeaf.Client.tlTimeoutID); if (TeaLeaf.Client.Configuration.tlscanupdate > 0) { TeaLeaf.Client.tlTimeoutID = window.setTimeout(TeaLeaf.Client.tlScanForAdditions, TeaLeaf.Client.Configuration.tlscanupdate) } }; TeaLeaf.Client.CallInit = function () { TeaLeaf.addOnLoad(TeaLeaf.Client.tlSetup) }; if (!TeaLeaf.Client.Configuration.tlinit) { TeaLeaf.Client.Configuration.tlinit = true; TeaLeaf.Client.CallInit() } } if (document.getElementsByClassName == undefined) { document.getElementsByClassName = function (e) { var d = new RegExp("(?:^|\\s)" + e + "(?:$|\\s)"); var f = document.getElementsByTagName("*"); var c = []; var b; for (var a = 0; (b = f[a]) != null; a++) { var g = b.className; if (g && g.indexOf(e) != -1 && d.test(g)) { c.push(b) } } return c } } function tlExtAddEvent(c, b, a) { if (b.addEventListener) { b.addEventListener(c, a, false) } else { if (b.attachEvent) { b.attachEvent("on" + c, a) } else { b[c] = a } } } var HOVERTIMEMIN = 3000; var AIRCRAFTIDTAG = "ctl00_ContentInfo_ucSeatEngineSelector_ucPlaneMap_lblEquipment"; var hoverNodes = document.getElementsByClassName("available legroom pitch"); var hoverTimeStart; for (var i = 0; i < hoverNodes.length; i++) { tlExtAddEvent("mouseover", hoverNodes[i], function () { hoverTimeStart = Date.now() }, false); tlExtAddEvent("mouseout", hoverNodes[i], function () { try { var d = Date.now() - hoverTimeStart; if (d >= HOVERTIMEMIN) { if ((typeof TeaLeaf != "undefined") && (typeof TeaLeaf.Event != "undefined") && (typeof TeaLeaf.Event.tlAddCustomEvent != "undefined")) { var a = "SeatHover"; var e = document.getElementById(AIRCRAFTIDTAG).innerHTML; var c = { HoverTime: d, SeatID: this.id, Aircraft: e }; TeaLeaf.Event.tlAddCustomEvent(a, c) } } } catch (b) { } }, false) } if (typeof TeaLeaf != undefined) { if (TeaLeaf.Extensions == undefined) { TeaLeaf.Extensions = {} } TeaLeaf.Extensions.captureClickParents = function (b) { var a = "clickTracking"; var c; if (b.srcElement) { c = b.srcElement } else { if (b.target) { c = b.target } } TeaLeaf.Extensions.nVO = { event: b.type, href: c.parentNode.href, src: c.parentNode.src }; TeaLeaf.Event.tlAddCustomEvent(a, TeaLeaf.Extensions.nVO) }; if (document.addEventListener) { document.addEventListener("click", function (a) { TeaLeaf.Extensions.captureClickParents(a) }) } else { if (document.attachEvent) { document.attachEvent("click", function (a) { TeaLeaf.Extensions.captureClickParents(a) }) } } };