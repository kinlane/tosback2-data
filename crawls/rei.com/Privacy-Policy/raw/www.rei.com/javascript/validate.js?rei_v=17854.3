// global variables for error flag
var errfound = false;
var msg = "";
var state = 0;

// function to validate by length
function ValidLength(item, len) {
   return (item.length >= len);
}

function endCheck (msg, emailState) {
	if (emailState == 0 || (emailState == 1 && state < 1)) {
		alert (msg);
		state = 1;
		return false;
	} else {
		return true;
	}
}

// function to validate an email address
function ValidEmail(emailStr) {
/* The following pattern is used to check if the entered e-mail address
   fits the user@domain format.  It also is used to separate the username
   from the domain. */
var emailPat=/^(.+)@(.+)$/
/* The following string represents the pattern for matching all special
   characters.  We don't want to allow special characters in the address.
   These characters include ( ) < > @ , ; : \ " . [ ]    */
var specialChars="\\(\\)<>@,;:\\\\\\\"\\.\\[\\]"
/* The following string represents the range of characters allowed in a
   username or domainname.  It really states which chars aren't allowed. */
var validChars="\[^\\s" + specialChars + "\]"
/* The following pattern applies if the "user" is a quoted string (in
   which case, there are no rules about which characters are allowed
   and which aren't; anything goes).  E.g. "jiminy cricket"@disney.com
   is a legal e-mail address. */
var quotedUser="(\"[^\"]*\")"
/* The following pattern applies for domains that are IP addresses,
   rather than symbolic names.  E.g. joe@[123.124.233.4] is a legal
   e-mail address. NOTE: The square brackets are required. */
var ipDomainPat=/^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/
/* The following string represents an atom (basically a series of
   non-special characters.) */
var atom=validChars + '+'
/* The following string represents one word in the typical username.
   For example, in john.doe@somewhere.com, john and doe are words.
   Basically, a word is either an atom or quoted string. */
var word="(" + atom + "|" + quotedUser + ")"
// The following pattern describes the structure of the user
var userPat=new RegExp("^" + word + "(\\." + word + ")*$")
/* The following pattern describes the structure of a normal symbolic
   domain, as opposed to ipDomainPat, shown above. */
var domainPat=new RegExp("^" + atom + "(\\." + atom +")*$")

/* Strip leading spaces */
while(''+emailStr.charAt(0)==' ')
  emailStr=emailStr.substring(1,emailStr.length);

/* Strip trailing spaces */
while(''+emailStr.charAt(emailStr.length-1)==' ')
  emailStr=emailStr.substring(0,emailStr.length-1);

/* Finally, let's start trying to figure out if the supplied address is
   valid. */

/* Begin with the coarse pattern to simply break up user@domain into
   different pieces that are easy to analyze. */
var matchArray=emailStr.match(emailPat);
if (matchArray==null) {
  /* Too many/few @'s or something; basically, this address doesn't
     even fit the general mould of a valid e-mail address. */
  msg = "Email address seems incorrect (check @ and .'s).";
  return endCheck(msg, 0);
}
var user=matchArray[1];
var domain=matchArray[2];

// See if "user" is valid
if (user.match(userPat)==null) {
    // user is not valid
    msg = "The username doesn't seem to be valid.";
    return endCheck(msg, 1);
}

/* if the e-mail address is at an IP address (as opposed to a symbolic
   host name) make sure the IP address is valid. */
var IPArray=domain.match(ipDomainPat);
if (IPArray!=null) {
    // this is an IP address
    for (var i=1;i<=4;i++) {
      if (IPArray[i] > 255) {
          msg = "Destination IP in email address is invalid!";
          return endCheck(msg, 0);
      }
    }
    return true
}

// Domain is symbolic name
var domainArray=domain.match(domainPat)
if (domainArray==null) {
  msg = "The domain name doesn't seem to be valid.";
  return endCheck(msg, 1);
}

/* domain name seems valid, but now make sure that it ends in a
   three-letter word (like com, edu, gov) or a two-letter word,
   representing country (uk, nl), and that there's a hostname preceding
   the domain or country. */

/* Now we need to break up the domain to get a count of how many atoms
   it consists of. */
var atomPat=new RegExp(atom,"g")
var domArr=domain.match(atomPat)
var len=domArr.length
if (domArr[domArr.length-1].length<2 ||
    domArr[domArr.length-1].length>6) {
   // the address must end in a two letter or three letter word.
   msg = "The email address must end with a two letter country, or up to a 6 character domain.";
   return endCheck(msg, 0);
}

// Make sure there's a host name preceding the domain.
if (len < 2) {
   msg = "This email address is missing a hostname!";
   return endCheck(msg, 0);
}

// If we've gotten this far, everything's valid!
return true;
}

// function to display an error alert
function error(elem, text) {
   if (errfound) return; // abort if we already found an error
   window.alert(text);
   elem.select();
   elem.focus();
   errfound = true;
}


// main validation function
function Validate(myForm) {
	if (state <= 1) {
   		errfound = false;
		if (!ValidLength(myForm.email.value, 5) && state < 2) { /* verify something is in email field */
			msg = "If you'd like a reply, please enter your e-mail address. No reply needed? Just click on Submit again.";
			state = 2;
			error(myForm.email, msg);
		}
      	if (!ValidEmail(myForm.email.value)) /* if not a valid address, give error */
			error(myForm.email, msg);
	} else if (ValidLength(myForm.email.value, 5) && state == 2) { /* condition to check email if something entered after message about wanting reply is given */
		state = 0;
   		errfound = false;
      	if (!ValidEmail(myForm.email.value))
			error(myForm.email, msg);
	} else if (state > 1) {
		errfound = false;
	}
	if (myForm.comment) { /* if field 'comment' present, always make sure it has something in it */
		if (!ValidLength(myForm.comment.value,6))
			error(myForm.comment,"Please verify that your comment is complete.");
	}
	
	
// Create CM reg tag
  var cmUserId = myForm.email.value;
  var cmEmail = myForm.email.value;
  var cmZip = null;
  if(myForm.zip) {
    cmZip = myForm.zip.value;
  } else if(myForm.oldzip){
    cmZip = myForm.oldzip.value;
  }
  var cmMemNum = null;
  if(myForm.memnum) {
    cmMemNum = myForm.memnum.value;
  }
  if(myForm.coopnum) {
    cmMemNum = myForm.coopnum.value;
  }
  var cmSession = getCookie("REIX");
  cmCreateRegistrationTag(cmUserId, cmEmail, cmZip, cmMemNum, cmSession);
	
	
	
	
	return !errfound; /* returns true if there are no errors */
}

// function to reset form
function clearForm(form) {
	state = 0;
	form.reset();
	form.elements[0].focus();
}



  // empty entry checker
  function noEntry(){
 if (Validate(document.contact)) {
  mt=document.contact.problem.value;
  if ((mt.length<4)||(mt.substring(0,6)=="******")){
  alert("Please enter the description of problems or comments you have about our jobs site.");
  document.contact.problem.select();
  document.contact.problem.focus();
  return false;
 // return;
  } else { //return true;
  document.contact.submit();
  }
  } else { //return false;
  return;}
  }
