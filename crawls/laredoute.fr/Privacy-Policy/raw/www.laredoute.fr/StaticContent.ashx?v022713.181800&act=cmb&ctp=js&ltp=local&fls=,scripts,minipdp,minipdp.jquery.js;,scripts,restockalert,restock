var $j = jQuery.noConflict();

var OriginForMiniPDP = '';
var pdpLinkCategoryid = null;
var pdpLinkpos = null;
var pdpLinknumpage = null;
var PDPCrossSellOrigin = 'Cross sell PDP';
var CrossSellVal = ''; //variable is declared to fix the Omniture AVAIL product
var sizeid = '';
var prodsize = '';
var prodcolor = '';
var prodsizeCode = '';
var colorindex = '';
var colorlabel = '';
var genericsizeCode = '';
var lineItemID = '';
var wlButton = 'add';
var source = '';
function popUp(strURL, strHeight, strWidth, largeur) {
    var left = (screen.width - largeur) / 2;
    var strOptions = "toolbar=no, location=no, directories=no, menubar=no, status=no, scrollbars=yes, resizable=yes, copyhistory=no, height=" + strHeight + ",width=" + strWidth + ", left=" + left + ", top=200";
    window.open(strURL, 'newWin', strOptions);
} /// <reference path="minipdp.jquery.js" />

var MiniPDPMessageFWCsts = {
    Section: 'MiniPDP',
    NoSizeSelected: 'NoSizeSelected',
    NoSizeAvailable: 'NoSizeAvailable',
    InvalidQuantity: 'InvalidQuantity',
    InvalidQuantityMax: 'InvalidQuantityMax',
    InvalidQuantityMin: 'InvalidQuantityMin'
};

jQuery.fn.addMiniPDPOnOrderDetail = function (productId, documentId, categoryId, color, size, pagename, customerTarget, OfferType) {

    try {
        if (!isNullOrUndefined(pagename) && pagename != '') {
            OriginForMiniPDP = pagename;
        }
    } catch (ex) { }


    $j(document).openMiniPDP(productId, documentId, categoryId, null, null, 0, null, null, size, color, null, OfferType, customerTarget, null, null);
};

jQuery.fn.addMiniPDPOnPush = function (strOrigin) {
    OriginForMiniPDP = strOrigin;

    function ParseUrl(url, paramName) {
        paramName = paramName.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regexS = "[\\?&]" + paramName + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var results = regex.exec(url);
        if (isNullOrUndefined(results)) return null;
        if (0 == results.length) return null;
        return unescape(results[1]);
    };
    this.parent('a').hover(function () {
        if ($j(this).find('div.quick_view_overlay').length == 0 && $j(this).find('span.minipdp_button').length == 0) {
            $j('<div class="quick_view_overlay"></div><span class="minipdp_button"></span>').click(function (e) {
                HideNewModalBox();
                e.preventDefault();

                var pdpLink = $j(this).parent('a').attr('href');
                var productId = ParseUrl(pdpLink, 'productid');
                var documentId = ParseUrl(pdpLink, 'documentid');
                var isCrossSell = ParseUrl(pdpLink, 'cssrc');
                if (isNullOrUndefined(isCrossSell)) {
                    isCrossSell = '0';
                } else {
                    CrossSellVal = isCrossSell;
                    isCrossSell = '1';
                }

                var categoryid = ParseUrl(pdpLink, 'categoryid');
                if (!isNullOrUndefined(categoryid) && categoryid != '0') {
                    pdpLinkCategoryid = categoryid;
                }
                if (isNullOrUndefined(categoryid)) {
                    categoryid = 0;
                }
                var pos = ParseUrl(window.location.href, 'pos');
                if (isNullOrUndefined(pos) || pos == '') {
                    pos = ParseHashQueryStringFromUrl(pdpLink, 'pos');
                }
                var numberpage = ParseUrl(window.location.href, 'numberpage');
                if (isNullOrUndefined(numberpage) || numberpage == '') {
                    numberpage = ParseHashQueryStringFromUrl(pdpLink, 'numberpage');
                }
                if (!isNullOrUndefined(ParseUrl(pdpLink, 'genericsize')))
                { genericsizeCode = ParseUrl(pdpLink, 'genericsize'); }
                else { genericsizeCode = ''; }

                if (!isNullOrUndefined(ParseUrl(pdpLink, 'colorlabel')))
                { colorlabel = ParseUrl(pdpLink, 'colorlabel'); }
                else { colorlabel = ''; }

                isAvailProdcut = false;
                var availLogScript = $j(this).parent('a').attr('availLogScript');
                if (!isNullOrUndefined(availLogScript) && availLogScript != '') {
                    isAvailProdcut = true;
                    eval(availLogScript);
                }
                var STValue = $j(this).parent('a').attr('stvalue');
                if (!isNullOrUndefined(STValue)) {
                    CrossSellVal = '';
                    setSubCookieAndCookie('M.R.Omniture', 'ST', STValue);
                }
                OriginForMiniPDP = strOrigin;
                $j(document).openMiniPDP(productId, documentId, categoryid, pos, numberpage, isCrossSell);
                return false;
            }).appendTo($j(this));
        }

        $j(this).find('div.quick_view_overlay').show();

        $j(this).find('.minipdp_button').show();
    }, function () {
        $j(this).find('.minipdp_button,div.quick_view_overlay').hide();
    });

    $j(this).parents('li').find('p a').click(function (e) {
        HideNewModalBox();
        e.preventDefault();

        var pdpLink = $j(this).parents('li').find('a:first').attr('href');
        var productId = ParseUrl(pdpLink, 'productid');
        var documentId = ParseUrl(pdpLink, 'documentid');
        var isCrossSell = ParseUrl(pdpLink, 'cssrc');
        if (isNullOrUndefined(isCrossSell)) {
            isCrossSell = '0';
        } else { isCrossSell = '1'; }

        var categoryid = ParseUrl(pdpLink, 'categoryid');
        if (!isNullOrUndefined(categoryid) && categoryid != '0') {
            pdpLinkCategoryid = categoryid;
        }
        if (isNullOrUndefined(categoryid)) {
            categoryid = 0;
        }

        var pos = ParseUrl(window.location.href, 'pos');
        if (isNullOrUndefined(pos) || pos == '') {
            pos = ParseHashQueryStringFromUrl(pdpLink, 'pos');
        }
        var numberpage = ParseUrl(window.location.href, 'numberpage');
        if (isNullOrUndefined(numberpage) || numberpage == '') {
            numberpage = ParseHashQueryStringFromUrl(pdpLink, 'numberpage');
        }
        if (!isNullOrUndefined(ParseUrl(pdpLink, 'genericsize')))
        { genericsizeCode = ParseUrl(pdpLink, 'genericsize'); }
        else { genericsizeCode = ''; }

        if (!isNullOrUndefined(ParseUrl(pdpLink, 'colorlabel')))
        { colorlabel = ParseUrl(pdpLink, 'colorlabel'); }
        else { colorlabel = ''; }

        isAvailProdcut = false;
        var availLogScript = $j(this).parents('li').find('a:first').attr('availLogScript');
        if (!isNullOrUndefined(availLogScript) && availLogScript != '') {
            isAvailProdcut = true;
        }

        var STValue = $j(this).parent('a').attr('stvalue');
        if (!isNullOrUndefined(STValue)) {
            CrossSellVal = '';
            setSubCookieAndCookie('M.R.Omniture', 'ST', STValue);
        }
        OriginForMiniPDP = strOrigin;
        $j(document).openMiniPDP(productId, documentId, categoryid, pos, numberpage, isCrossSell);
        return false;
    }).attr('href', 'javascript:void(0);');
};

jQuery.fn.addMiniPDPOnPDPCross = function (strOrigin) {
    function ParseUrl(url, paramName) {
        paramName = paramName.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regexS = "[\\?&]" + paramName + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var results = regex.exec(url);
        if (isNullOrUndefined(results)) return null;
        if (0 == results.length) return null;
        return unescape(results[1]);
    };

    this.live('mouseover', function () {
        $j(this).find('.minipdp_button').show();
    });
    this.live('mouseout', function () {
        $j(this).find('.minipdp_button').hide();
    });
    this.live('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
        var pdpLink = $j(this).attr('href');
        var productId = ParseUrl(pdpLink, 'productid');
        var documentId = ParseUrl(pdpLink, 'documentid');
        var categoryid = ParseUrl(pdpLink, 'categoryid');
        var pos = ParseHashQueryStringFromUrl(pdpLink, 'pos');
        var numberpage = ParseHashQueryStringFromUrl(pdpLink, 'numberpage');
        var offerType = ParseUrl(pdpLink, 'offertype');
        if (!isNullOrUndefined(ParseUrl(pdpLink, 'prodsize'))) {
            prodsize = ParseUrl(pdpLink, 'prodsize');
        }
        else
        { prodsize = ''; }

        if (!isNullOrUndefined(ParseUrl(pdpLink, 'prodcolor'))) {
            prodcolor = ParseUrl(pdpLink, 'prodcolor');
        } else
        { prodcolor = ''; }

        pdpLinkCategoryid = categoryid
        pdpLinkpos = pos;
        pdpLinknumpage = numberpage;

        var isCrossSell = ParseUrl(pdpLink, 'cssrc');
        if (isNullOrUndefined(isCrossSell)) {
            isCrossSell = '0';
        } else {
            CrossSellVal = isCrossSell;
            isCrossSell = '1';
        }
        isAvailProdcut = false;
        var availLogScript = $j(this).parents('li').find('a:first').attr('availLogScript');
        if (!isNullOrUndefined(availLogScript) && availLogScript != '') {
            isAvailProdcut = true;
            eval(availLogScript);
        }
        isSearchResultProduct = 0;
        OriginForMiniPDP = strOrigin;
        var STValue = $j(this).attr('stvalue');
        if (!isNullOrUndefined(STValue)) {
            CrossSellVal = '';
            setSubCookieAndCookie('M.R.Omniture', 'ST', STValue);
        }

        $j(document).openMiniPDP(productId, documentId, categoryid, pos, numberpage, isCrossSell, null, null, prodsize, prodcolor, null, offerType);
    });
};

jQuery.fn.addMiniPDP = function () {
    function ParseUrl(url, paramName) {
        paramName = paramName.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regexS = "[\\?&]" + paramName + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var results = regex.exec(url);
        if (isNullOrUndefined(results)) return null;
        if (0 == results.length) return null;
        return unescape(results[1]);
    };
    $j('<a class="quick_view_button" href="#"></a>').click(function (e) {
        HideNewModalBox();
        e.preventDefault();

        var pdpLink = $j(this).parent('a.visu').attr('href');
        var productId = ParseUrl(pdpLink, 'productid');
        var documentId = ParseUrl(pdpLink, 'documentid');
        var categoryid = ParseUrl(pdpLink, 'categoryid');
        var pos = ParseHashQueryStringFromUrl(pdpLink, 'pos');
        var numberpage = ParseHashQueryStringFromUrl(pdpLink, 'numberpage');
        var offerType = ParseUrl(pdpLink, 'offertype');
        var customerTarget = ParseUrl(pdpLink, 'customertarget');

        if (!isNullOrUndefined(ParseUrl(pdpLink, 'secintref'))) {
            prodsize = ParseUrl(pdpLink, 'secintref');
        }
        else {
            prodsize = '';
        }

        if (!isNullOrUndefined(ParseUrl(pdpLink, 'prodcolor'))) {
            prodcolor = ParseUrl(pdpLink, 'prodcolor');
        } else
        { prodcolor = ''; }
        pdpLinkCategoryid = categoryid
        pdpLinkpos = pos;
        pdpLinknumpage = numberpage;

        var isCrossSell = ParseUrl(pdpLink, 'cssrc');
        if (isNullOrUndefined(isCrossSell)) {
            isCrossSell = '0';
        } else {
            CrossSellVal = isCrossSell;
            isCrossSell = '1';
        }

        if (PageNameMiniPDP != '') {
            OriginForMiniPDP = PageNameMiniPDP;
        }
        var STValue = $j(this).parent('a').attr('stvalue');
        if (!isNullOrUndefined(STValue)) {
            CrossSellVal = '';
            setSubCookieAndCookie('M.R.Omniture', 'ST', STValue);
        }
        source = ParseUrl(pdpLink, 'source');
        if (!isNullOrUndefined(source)) {
            isSearchResultProduct = 1;
        }
        isAvailProdcut = false;
        var availLogScript = $j(this).parent('a').attr('availLogScript');
        if (!isNullOrUndefined(availLogScript) && availLogScript != '') {
            isAvailProdcut = true;
            eval(availLogScript);
        }
        var parentLi = $j(this).parents('li');
        var previousli = parentLi.prev();
        var nextli = parentLi.next();
        if (previousli.find('.product_not_available').length != 0) {
            previousli = null;
        }
        if (nextli.find('.product_not_available').length != 0) {
            nextli = null;
        }
        $j(document).openMiniPDP(productId, documentId, categoryid, pos, numberpage, isCrossSell, null, null, prodsize, prodcolor, null, offerType, customerTarget, previousli, nextli);
        return false;
    }).appendTo($j(this));

    if (!isTouchDevice()) {
        this.hover(function () {
            $j(this).find('a.quick_view_button').show();
        }, function () {
            $j(this).find('a.quick_view_button').hide();
        });
    } else {
        this.find('a.quick_view_button').show();
    }
};

jQuery.fn.addMiniPDPOnWL = function () {

    function ParseUrl(url, paramName) {
        paramName = paramName.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regexS = "[\\?&]" + paramName + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var results = regex.exec(url);
        if (isNullOrUndefined(results)) return null;
        if (0 == results.length) return null;
        return unescape(results[1]);
    };
    this.hover(function () {
        if ($j(this).find('span.minipdp_button').length == 0) {
            var miniPDPOpening = function (e) {
                HideNewModalBox();
                e.preventDefault();

                var pdpLink = $j(this).parent('a.visu').attr('href');
                var productId = ParseUrl(pdpLink, 'productid');
                var documentId = ParseUrl(pdpLink, 'documentid');
                var categoryid = ParseUrl(pdpLink, 'categoryid');
                var pos = ParseHashQueryStringFromUrl(pdpLink, 'pos');
                var numberpage = ParseHashQueryStringFromUrl(pdpLink, 'numberpage');
                var offerType = ParseUrl(pdpLink, 'offertype');
                var customerTarget = ParseUrl(pdpLink, 'customertarget');

                prodsize = ParseUrl(pdpLink, 'prodsize');
                prodcolor = ParseUrl(pdpLink, 'prodcolor');
                pdpLinkCategoryid = categoryid
                pdpLinkpos = pos;
                pdpLinknumpage = numberpage;

                var itemInfo = $j.parseJSON($j(this).parents('li').find('input.lineItemJSON').val());
                if (itemInfo != null) {
                    lineItemID = itemInfo.itemid;
                    if (itemInfo.availability != 'Available') {
                        wlButton = 'modify';
                    }
                    else {
                        wlButton = 'add';
                    }
                }

                var isCrossSell = ParseUrl(pdpLink, 'cssrc');
                if (isNullOrUndefined(isCrossSell)) {
                    isCrossSell = '0';
                } else {
                    CrossSellVal = isCrossSell;
                    isCrossSell = '1';
                }

                try {
                    if (!isNullOrUndefined(PageNameMiniPDP) && PageNameMiniPDP != '') {
                        OriginForMiniPDP = PageNameMiniPDP;
                    }
                } catch (ex) { }

                var STValue = $j(this).parent('a').attr('stvalue');
                if (!isNullOrUndefined(STValue)) {
                    CrossSellVal = '';
                    setSubCookieAndCookie('M.R.Omniture', 'ST', STValue);
                }

                $j(document).openMiniPDP(productId, documentId, categoryid, pos, numberpage, isCrossSell, null, null, prodsize, prodcolor, lineItemID, offerType, customerTarget);
                return false;
            };
            $j('<div class="quick_view_overlay"></div><span class="minipdp_button"></span>').click(miniPDPOpening).appendTo($j(this));
        }

        $j(this).find('div.quick_view_overlay').show();

        $j(this).find('span.minipdp_button').show();
    }, function () {
        $j(this).find('span.minipdp_button,div.quick_view_overlay').hide();
    });

    $j(this).parents('li').find('a.other_color.fixpng, a.other_size.fixpng, a.other_vendor.fixpng').click(function (e) {
        HideNewModalBox();
        e.preventDefault();

        var pdpLink = $j(this).parents('li').find('a.visu').attr('href');
        var productId = ParseUrl(pdpLink, 'productid');
        var documentId = ParseUrl(pdpLink, 'documentid');
        var categoryid = ParseUrl(pdpLink, 'categoryid');
        var pos = ParseHashQueryStringFromUrl(pdpLink, 'pos');
        var numberpage = ParseHashQueryStringFromUrl(pdpLink, 'numberpage');
        var offerType = ParseUrl(pdpLink, 'offertype');
        var customerTarget = ParseUrl(pdpLink, 'customertarget');

        prodsize = ParseUrl(pdpLink, 'prodsize');
        prodcolor = ParseUrl(pdpLink, 'prodcolor');
        pdpLinkCategoryid = categoryid
        pdpLinkpos = pos;
        pdpLinknumpage = numberpage;

        var itemInfo = $j.parseJSON($j(this).parents('li').find('input.lineItemJSON').val());
        if (itemInfo != null) {
            prodsizeCode = itemInfo.prescode;
            lineItemID = itemInfo.itemid;
            if (itemInfo.availability != 'Available') {
                wlButton = 'modify';
            }
            else {
                wlButton = 'add';
            }
        }

        var isCrossSell = ParseUrl(pdpLink, 'cssrc');
        if (isNullOrUndefined(isCrossSell)) {
            isCrossSell = '0';
        } else {
            CrossSellVal = isCrossSell;
            isCrossSell = '1';
        }

        try {
            OriginForMiniPDP = '';
            if (!isNullOrUndefined(PageNameMiniPDP) && PageNameMiniPDP != '') {
                OriginForMiniPDP = PageNameMiniPDP;
            }
        } catch (ex) { }

        if (OriginForMiniPDP == 'Wishlist destination') {

            wlButton = 'add';
        }

        var STValue = $j(this).parent('a').attr('stvalue');
        if (!isNullOrUndefined(STValue)) {
            CrossSellVal = '';
            setSubCookieAndCookie('M.R.Omniture', 'ST', STValue);
        }

        $j(document).openMiniPDP(productId, documentId, categoryid, pos, numberpage, isCrossSell, null, null, prodsize, prodcolor, lineItemID, offerType, customerTarget);
        return false;
    });

    $j(this).parents('li').find('a.similar.fixpng').click(function (e) {
        HideNewModalBox();
        e.preventDefault();

        var pdpLink = $j(this).parents('li').find('a.visu').attr('href');
        var productId = ParseUrl(pdpLink, 'productid');
        var documentId = ParseUrl(pdpLink, 'documentid');
        var categoryid = ParseUrl(pdpLink, 'categoryid');
        var pos = ParseHashQueryStringFromUrl(pdpLink, 'pos');
        var numberpage = ParseHashQueryStringFromUrl(pdpLink, 'numberpage');

        prodsize = ParseUrl(pdpLink, 'prodsize');
        prodcolor = ParseUrl(pdpLink, 'prodcolor');
        pdpLinkCategoryid = categoryid
        pdpLinkpos = pos;
        pdpLinknumpage = numberpage;

        var itemInfo = $j.parseJSON($j(this).parents('li').find('input.lineItemJSON').val());
        if (itemInfo != null) {
            lineItemID = itemInfo.itemid;
        }

        //default
        wlButton = 'add';

        var isCrossSell = ParseUrl(pdpLink, 'cssrc');
        if (isNullOrUndefined(isCrossSell)) {
            isCrossSell = '0';
        } else {
            CrossSellVal = isCrossSell;
            isCrossSell = '1';
        }

        try {
            if (!isNullOrUndefined(PageNameMiniPDP) && PageNameMiniPDP != '') {
                OriginForMiniPDP = PageNameMiniPDP;
            }
        } catch (ex) { }

        var STValue = $j(this).parent('a').attr('stvalue');
        OriginForMiniPDP = 'Wishlist substitution product';

        if (!isNullOrUndefined(STValue)) {
            CrossSellVal = '';
            setSubCookieAndCookie('M.R.Omniture', 'ST', STValue);
        }
        if (itemInfo != null)
            ShowSubstitutionLayer(productId, documentId, itemInfo.prescode, itemInfo.sizecode);
        else
            ShowSubstitutionLayer(productId, documentId, '', '');

        return false;
    });
};

jQuery.fn.addMiniPDPOnComparisonList = function () {

    function ParseUrl(url, paramName) {
        paramName = paramName.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regexS = "[\\?&]" + paramName + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var results = regex.exec(url);
        if (isNullOrUndefined(results)) return null;
        if (0 == results.length) return null;
        return unescape(results[1]);
    };

    $j('<a class="quick_view_button" href="#"></a>').click(function (e) {
        if ($j('.popUpWrap').length != 0) {
            $j('.popUpWrap').hide();
        }
        HideNewModalBox();
        e.preventDefault();

        var pdpLink = $j(this).parent('a.product-img-link').attr('href');
        var productId = ParseUrl(pdpLink, 'productid');
        var documentId = ParseUrl(pdpLink, 'documentid');
        var categoryid = ParseUrl(pdpLink, 'categoryid');
        var offerType = ParseUrl(pdpLink, 'offertype');
        var customerTarget = ParseUrl(pdpLink, 'customertarget');
        var pos = ParseHashQueryStringFromUrl(pdpLink, 'pos');
        var numberpage = ParseHashQueryStringFromUrl(pdpLink, 'numberpage');

        pdpLinkCategoryid = categoryid
        pdpLinkpos = pos;
        pdpLinknumpage = numberpage;

        var prodcolor = ParseUrl(pdpLink, 'prodcolor');
        var prodsize = ParseUrl(pdpLink, 'prodsize');

        var isCrossSell = ParseUrl(pdpLink, 'cssrc');
        if (isNullOrUndefined(isCrossSell)) {
            isCrossSell = '0';
        } else {
            CrossSellVal = isCrossSell;
            isCrossSell = '1';
        }
        try {
            if (!isNullOrUndefined(PageNameMiniPDP) && PageNameMiniPDP != '') {
                OriginForMiniPDP = PageNameMiniPDP;
            }
        } catch (ex) { }
        var STValue = $j(this).parent('a').attr('stvalue');
        if (!isNullOrUndefined(STValue)) {
            CrossSellVal = '';
            setSubCookieAndCookie('M.R.Omniture', 'ST', STValue);
        }
        var parentLi = $j(this).parents('li');
        var previousli = parentLi.prev();
        var nextli = parentLi.next();

        $j(document).openMiniPDP(productId, documentId, categoryid, pos, numberpage, isCrossSell, null, null, prodsize, prodcolor, null, offerType, customerTarget, previousli, nextli);
        return false;
    }).appendTo(this);
    if (!isTouchDevice()) {
        this.hover(function () {
            $j(this).find('a.quick_view_button').show();
        }, function () {
            $j(this).find('a.quick_view_button').hide();
        });
    } else {
        $j(this).find('a.quick_view_button').show();
    }
};

jQuery.fn.addMiniPDPOnComparisonResult = function () {

    function ParseUrl(url, paramName) {
        paramName = paramName.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regexS = "[\\?&]" + paramName + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var results = regex.exec(url);
        if (isNullOrUndefined(results)) return null;
        if (0 == results.length) return null;
        return unescape(results[1]);
    };

    $j('<a class="quick_view_button" href="#"></a>').click(function (e) {
        HideNewModalBox();
        e.preventDefault();

        var pdpLink = $j(this).parent('a.prd-pdp-link').attr('href');
        var productId = ParseUrl(pdpLink, 'productid');
        var documentId = ParseUrl(pdpLink, 'documentid');
        var categoryid = ParseUrl(pdpLink, 'categoryid');
        var pos = ParseHashQueryStringFromUrl(pdpLink, 'pos');
        var numberpage = ParseHashQueryStringFromUrl(pdpLink, 'numberpage');
        var offerType = ParseUrl(pdpLink, 'offertype');
        var customerTarget = ParseUrl(pdpLink, 'customertarget');
        var prodcolor = ParseUrl(pdpLink, 'prodcolor');

        pdpLinkCategoryid = categoryid
        pdpLinkpos = pos;
        pdpLinknumpage = numberpage;

        var isCrossSell = ParseUrl(pdpLink, 'cssrc');
        if (isNullOrUndefined(isCrossSell)) {
            isCrossSell = '0';
        } else {
            CrossSellVal = isCrossSell;
            isCrossSell = '1';
        }
        try {
            if (!isNullOrUndefined(PageNameMiniPDP) && PageNameMiniPDP != '') {
                OriginForMiniPDP = PageNameMiniPDP;
            }
        } catch (ex) { }
        var STValue = $j(this).parent('a').attr('stvalue');
        if (!isNullOrUndefined(STValue)) {
            CrossSellVal = '';
            setSubCookieAndCookie('M.R.Omniture', 'ST', STValue);
        }
        $j(document).openMiniPDP(productId, documentId, categoryid, pos, numberpage, isCrossSell, null, null, null, prodcolor, null, offerType, customerTarget);
        return false;
    }).appendTo(this);

    if (!isTouchDevice()) {
        this.hover(function () {
            $j(this).find('a.quick_view_button').show();
        }, function () {
            $j(this).find('a.quick_view_button').hide();
        });
    } else {
        $j(this).find('a.quick_view_button').show();
    }
};

jQuery.fn.addMiniPDPOnLastSeenProducts = function (strOrigin) {
    this.hover(function () {
        if ($j(this).find('div.quick_view_overlay').length == 0) {
            $j('<div class="quick_view_overlay"></div><a class="quick_view_overlay_button" href="#"></a>').click(function (e) {
                HideNewModalBox();
                e.preventDefault();
                var productId = $j(this).parent('li').attr('productid');
                var documentId = $j(this).parent('li').attr('documentid');
                var offerType = $j(this).parent('li').attr('offertype');
                var customerTarget = $j(this).parent('li').attr('customertarget');
                var isCrossSell = '0';
                var categoryid = 0;
                OriginForMiniPDP = strOrigin;
                setSubCookieAndCookie('M.R.Omniture', 'ST', "Derniers articles vus");
                $j(document).openMiniPDP(productId, documentId, categoryid, null, null, null, null, null, null, null, null, offerType, customerTarget);
                return false;
            }).appendTo($j(this));
        }
        $j(this).find('div.quick_view_overlay,a.quick_view_overlay_button').show();
    }, function () {
        $j(this).find('a.quick_view_overlay_button,div.quick_view_overlay').hide();
    });
};

jQuery.fn.addMiniPDPOnPreferedProducts = function (strOrigin) {
    this.hover(function () {
        if ($j(this).find('div.quick_view_overlay').length == 0) {
            $j('<div class="quick_view_overlay"></div><a class="quick_view_overlay_button" href="#"></a>').click(function (e) {
                HideNewModalBox();
                e.preventDefault();

                var productId = $j(this).parent('li').attr('productid');
                var documentId = $j(this).parent('li').attr('documentid');
                var offerType = $j(this).parent('li').attr('offertype');
                var customerTarget = $j(this).parent('li').attr('customertarget');
                var prodsize = $j(this).parent('li').attr('prodsize');
                var prodcolor = $j(this).parent('li').attr('prodcolor');

                var categoryid = 0;
                OriginForMiniPDP = strOrigin;
                setSubCookieAndCookie('M.R.Omniture', 'ST', "Articles préférés");
                $j(document).openMiniPDP(productId, documentId, categoryid, null, null, null, null, null, prodsize, prodcolor, null, offerType, customerTarget);
                return false;
            }).appendTo($j(this));
        }
        $j(this).find('div.quick_view_overlay,a.quick_view_overlay_button').show();
    }, function () {
        $j(this).find('a.quick_view_overlay_button,div.quick_view_overlay').hide();
    });
};

jQuery.fn.addMiniPDPOnGoodDeals = function (strOrigin) {
    OriginForMiniPDP = strOrigin;

    function ParseUrl(url, paramName) {
        paramName = paramName.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regexS = "[\\?&]" + paramName + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var results = regex.exec(url);
        if (isNullOrUndefined(results)) return null;
        if (0 == results.length) return null;
        return unescape(results[1]);
    };
    this.parent('a').hover(function () {

        if ($j(this).find('span.minipdp_button').length == 0) {
            $j('<span class="minipdp_button"></span>').click(function (e) {
                HideNewModalBox();
                e.preventDefault();
                e.stopPropagation();

                var pdpLink = $j(this).parent('a').attr('href');
                var productId = ParseUrl(pdpLink, 'productid');
                var documentId = ParseUrl(pdpLink, 'documentid');
                var isCrossSell = ParseUrl(pdpLink, 'cssrc');
                var offerType = ParseUrl(pdpLink, 'offertype');
                var customerTarget = ParseUrl(pdpLink, 'customertarget');

                if (isNullOrUndefined(isCrossSell)) {
                    isCrossSell = '0';
                } else {
                    CrossSellVal = isCrossSell;
                    isCrossSell = '1';
                }

                var categoryid = ParseUrl(pdpLink, 'categoryid');
                if (!isNullOrUndefined(categoryid) && categoryid != '0') {
                    pdpLinkCategoryid = categoryid;
                }
                if (isNullOrUndefined(categoryid)) {
                    categoryid = 0;
                }
                var pos = ParseUrl(window.location.href, 'pos');
                if (isNullOrUndefined(pos) || pos == '') {
                    pos = ParseHashQueryStringFromUrl(pdpLink, 'pos')
                }
                var numberpage = ParseUrl(window.location.href, 'numberpage');
                if (isNullOrUndefined(numberpage) || numberpage == '') {
                    numberpage = ParseHashQueryStringFromUrl(pdpLink, 'numberpage');
                }
                if (!isNullOrUndefined(ParseUrl(pdpLink, 'genericsize')))
                { genericsizeCode = ParseUrl(pdpLink, 'genericsize'); }
                else { genericsizeCode = ''; }

                if (!isNullOrUndefined(ParseUrl(pdpLink, 'colorlabel')))
                { colorlabel = ParseUrl(pdpLink, 'colorlabel'); }
                else { colorlabel = ''; }

                isAvailProdcut = false;
                var availLogScript = $j(this).parent('a').attr('availLogScript');
                if (!isNullOrUndefined(availLogScript) && availLogScript != '') {
                    isAvailProdcut = true;
                    eval(availLogScript);
                }
                var STValue = $j(this).parent('a').attr('stvalue');
                if (!isNullOrUndefined(STValue)) {
                    CrossSellVal = '';
                    setSubCookieAndCookie('M.R.Omniture', 'ST', STValue);
                }
                OriginForMiniPDP = strOrigin;

                var parentLi = $j(this).parents('li');
                prodsize = parentLi.find('select.size_select').val();
                prodcolor = parentLi.find('select.color_select').val();

                $j.fn.openMiniPDP(productId, documentId, categoryid, pos, numberpage, isCrossSell, null, null, prodsize, prodcolor, null, offerType, customerTarget);
                return false;
            }).appendTo($j(this));
        }

        $j(this).find('div.quick_view_overlay').show();

        $j(this).find('span.minipdp_button').show();
    }, function () {
        $j(this).find('span.minipdp_button,div.quick_view_overlay').hide();
    });

    $j(this).parents('li').find('a').click(function (e) {
        HideNewModalBox();
        e.preventDefault();
        e.stopPropagation();

        var pdpLink = $j(this).attr('href');
        var productId = ParseUrl(pdpLink, 'productid');
        var documentId = ParseUrl(pdpLink, 'documentid');
        var isCrossSell = ParseUrl(pdpLink, 'cssrc');
        if (isNullOrUndefined(isCrossSell)) {
            isCrossSell = '0';
        } else {
            CrossSellVal = isCrossSell;
            isCrossSell = '1';
        }

        var categoryid = ParseUrl(pdpLink, 'categoryid');
        if (!isNullOrUndefined(categoryid) && categoryid != '0') {
            pdpLinkCategoryid = categoryid;
        }
        if (isNullOrUndefined(categoryid)) {
            categoryid = 0;
        }
        var pos = ParseUrl(window.location.href, 'pos');
        if (isNullOrUndefined(pos) || pos == '') {
            pos = ParseHashQueryStringFromUrl(pdpLink, 'pos')
        }
        var numberpage = ParseUrl(window.location.href, 'numberpage');
        if (isNullOrUndefined(numberpage) || numberpage == '') {
            numberpage = ParseHashQueryStringFromUrl(pdpLink, 'numberpage');
        }
        if (!isNullOrUndefined(ParseUrl(pdpLink, 'genericsize')))
        { genericsizeCode = ParseUrl(pdpLink, 'genericsize'); }
        else { genericsizeCode = ''; }

        if (!isNullOrUndefined(ParseUrl(pdpLink, 'colorlabel')))
        { colorlabel = ParseUrl(pdpLink, 'colorlabel'); }
        else { colorlabel = ''; }

        isAvailProdcut = false;
        var availLogScript = $j(this).attr('availLogScript');
        if (!isNullOrUndefined(availLogScript) && availLogScript != '') {
            isAvailProdcut = true;
            eval(availLogScript);
        }
        var STValue = $j(this).attr('stvalue');
        if (!isNullOrUndefined(STValue)) {
            CrossSellVal = '';
            setSubCookieAndCookie('M.R.Omniture', 'ST', STValue);
        }
        OriginForMiniPDP = strOrigin;

        var parentLi = $j(this).parents('li');
        prodsize = parentLi.find('select.size_select').val();
        prodcolor = parentLi.find('select.color_select').val();

        $j.fn.openMiniPDP(productId, documentId, categoryid, pos, numberpage, isCrossSell, null, null, prodsize, prodcolor, null, null, null);
        return false;
    });
};


var lockBasketMiniPDP = false;

jQuery.fn.addMiniPDPOnBasketPage = function (strOrigin) {
    OriginForMiniPDP = strOrigin;

    function ParseUrl(url, paramName) {
        paramName = paramName.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regexS = "[\\?&]" + paramName + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var results = regex.exec(url);
        if (isNullOrUndefined(results)) return null;
        if (0 == results.length) return null;
        return unescape(results[1]);
    };
    $j(this).unbind('click');

    var pdpLink = $j(this).attr('pdpurl');
    var productId = ParseUrl(pdpLink, 'productid');
    var documentId = ParseUrl(pdpLink, 'documentid');

    if (isNullOrUndefined(productId) && isNullOrUndefined(documentId)) {
        $j(this).css({ 'cursor': 'default' });
    }

    $j(this).click(function (e) {

        if (lockBasketMiniPDP) return;
        lockBasketMiniPDP = true;

        if (currentLineItem != null) {
            oldCurrentLineItem = currentLineItem;
        }
        if (oldCurrentLineItem != null) {
            UnBindOldLineItem();
        }

        HideNewModalBox();

        if ($j(this).parents('tr').find('.validate:visible').length > 0) {
            return;
        }

        var pdpLink = $j(this).attr('pdpurl');
        var productId = ParseUrl(pdpLink, 'productid');
        var documentId = ParseUrl(pdpLink, 'documentid');
        var offerType = ParseUrl(pdpLink, 'offertype');
        var customerTarget = ParseUrl(pdpLink, 'customertarget');

        if (isNullOrUndefined(productId) && isNullOrUndefined(documentId)) {
            return;
        }

        var isCrossSell = ParseUrl(pdpLink, 'cssrc');
        if (isNullOrUndefined(isCrossSell)) {
            isCrossSell = '0';
        } else { isCrossSell = '1'; }

        var categoryid = ParseUrl(window.location.href, 'categoryid');
        if (isNullOrUndefined(categoryid)) {
            categoryid = 0;
        }
        var pos = ParseUrl(window.location.href, 'pos');
        if (isNullOrUndefined(pos) || pos == '') {
            pos = ParseHashQueryStringFromUrl(pdpLink, 'pos')
        }
        var numberpage = ParseUrl(window.location.href, 'numberpage');
        if (isNullOrUndefined(numberpage) || numberpage == '') {
            numberpage = ParseHashQueryStringFromUrl(pdpLink, 'numberpage');
        }
        var STValue = $j(this).parent('a').attr('stvalue');
        if (!isNullOrUndefined(STValue)) {
            CrossSellVal = '';
            setSubCookieAndCookie('M.R.Omniture', 'ST', STValue);
        }

        $j(document).openMiniPDP(productId, documentId, categoryid, pos, numberpage, isCrossSell, null, null, null, null, null, offerType, customerTarget);
    }).attr('href', 'javascript:void(0);');
};

jQuery.fn.addMiniPDPOnPLPColorLink = function (strOrigin) {
    OriginForMiniPDP = strOrigin;

    function ParseUrl(url, paramName) {
        paramName = paramName.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regexS = "[\\?&]" + paramName + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var results = regex.exec(url);
        if (isNullOrUndefined(results)) return null;
        if (0 == results.length) return null;
        return unescape(results[1]);
    };

    $j(this).click(function (e) {
        HideNewModalBox();

        var pdpLink = $j(this).attr('pdpurl');
        var productId = ParseUrl(pdpLink, 'productid');
        var documentId = ParseUrl(pdpLink, 'documentid');
        var offerType = ParseUrl(pdpLink, 'offertype');
        var customerTarget = ParseUrl(pdpLink, 'customertarget');

        if (!isNullOrUndefined(ParseUrl(pdpLink, 'prodsize'))) {
            prodsize = ParseUrl(pdpLink, 'prodsize');

        }
        else
        { prodsize = ''; }
        if (!isNullOrUndefined(ParseUrl(pdpLink, 'prodcolor'))) {
            prodcolor = ParseUrl(pdpLink, 'prodcolor');
        } else
        { prodcolor = ''; }

        if (isNullOrUndefined(productId) && isNullOrUndefined(documentId)) {
            return;
        }

        var isCrossSell = ParseUrl(pdpLink, 'cssrc');
        if (isNullOrUndefined(isCrossSell)) {
            isCrossSell = '0';
        } else { isCrossSell = '1'; }

        var categoryid = ParseUrl(pdpLink, 'categoryid');
        if (isNullOrUndefined(categoryid)) {
            categoryid = 0;
        }

        var pos = ParseHashQueryStringFromUrl(pdpLink, 'pos');
        var numberpage = ParseHashQueryStringFromUrl(pdpLink, 'numberpage');
        var STValue = $j(this).parent('a').attr('stvalue');
        if (!isNullOrUndefined(STValue)) {
            CrossSellVal = '';
            setSubCookieAndCookie('M.R.Omniture', 'ST', STValue);
        }
        OriginForMiniPDP = strOrigin;
        $j(document).openMiniPDP(productId, documentId, categoryid, pos, numberpage, isCrossSell, null, null, prodsize, prodcolor, null, offerType, customerTarget);
    }).attr('href', 'javascript:void(0);');
};

jQuery.fn.openMiniPDP = function (productId, documentId, categoryid, pos, numberpage, isCrossSell, forceSingle, showPDPLink, prodsize, prodcolor, lnitemid, offerType, customerTarget, previous, next) {
    if (isNullOrUndefined(productId) || productId == "undefined") {
        return;
    }

    LoggingMiniPDPClickToAvail(productId);

    if (isNullOrUndefined(documentId)) documentId = "999999";
    if (isNullOrUndefined(categoryid)) categoryid = "0";
    if (isNullOrUndefined(prodsize)) prodsize = "";
    if (isNullOrUndefined(prodcolor)) prodcolor = "";
    if (isNullOrUndefined(lnitemid)) lnitemid = "";

    offerTypeQueryParam = '&offertype=' + (isNullOrUndefined(offerType) ? "-1" : offerType);

    customerTargetQueryParam = '';
    if (!isNullOrUndefined(customerTarget)) {
        customerTargetQueryParam = "&customertarget=" + customerTarget;
    }

    var ajaxUrl = "/ProductDetail/MiniPDP.aspx?productid=" + productId + "&documentid=" + documentId + "&categoryid=" + categoryid + "&cssrc=" + CrossSellVal + "&prodsize=" + prodsize + "&prodcolor=" + prodcolor + "&wllineitemid=" + lnitemid + "&wlaction=" + wlButton + offerTypeQueryParam + customerTargetQueryParam;
    var opacitySettings = {
        tl: { radius: 6 },
        tr: { radius: 6 },
        bl: { radius: 6 },
        br: { radius: 6 },
        antiAlias: true,
        autoPad: false
    };

    var AVAIL_SEPARATOR_TEXT = '  ';
    var DEFAULT_SIZE_DROPDOWN_VALUE = 'Taille ou code';

    function FRProductFromM2Basket(m2basketObject, CategoryName) {
        this.Title = m2basketObject.DisplayName;
        this.ItemOfferId = m2basketObject.ItemOfferId;
        this.InternalReference = m2basketObject.InternalReference;
        this.SecInternalReference = m2basketObject.SecInternalReference;
        this.ProductId = m2basketObject.ProductId;
        this.DocumentId = m2basketObject.CatalogVersionId;
        this.CategoryId = m2basketObject.CategoryId;
        this.PresCode = m2basketObject.FirstLevelSku;
        this.SizeCode = m2basketObject.SizeCode;
        this.Origin = "1";
        this.AssociatedItemId = "0";
        this.CategoryName = CategoryName;

        this.Price = m2basketObject.Price;
        this.UnitPrice = m2basketObject.UnitPrice;
        this.Personalization = m2basketObject.Personalization;

        this.ColorText = m2basketObject.ColorText;
        this.SizeText = m2basketObject.SizeText;
        this.HasAssociatedService = m2basketObject.HasAncillaryService;

        this.CkgCode = "0";
        this.CkgPrice = "0";

        this.IsEcoPart = m2basketObject.IsEcoComplaint;
        this.Quantity = toFloat(m2basketObject.Quantity);
        this.Discount = m2basketObject.Discount;
        this.NoReductBrand = false;
        this.StrikePrice = m2basketObject.StrikePrice;
        this.ParentLineItemGUID = "";
        this.LineItemGUID = generateGuid();
        this.Description = m2basketObject.MediaImageUrl;
        this.ParentCategories = prodJson.Products[0].AscCats;

        this.BrandLabel = m2basketObject.BrandLabel;
        this.VendorId = m2basketObject.VendorId;
        this.IsMarketPlaceProduct = m2basketObject.IsMarketPlaceProduct;
        if (!isNullOrUndefined(m2basketObject.VendorName)) {
            this.VendorName = m2basketObject.VendorName;
        }
        else {
            this.VendorName = "";
        }
        this.CustomerTarget = m2basketObject.CustomerTarget;
    }

    function HideminiPdpBox() {
        var sPath = window.location.pathname;
        var sPage = sPath.substring(sPath.lastIndexOf('/') + 1);
        if (OriginForMiniPDP == 'Restock_Alert') {
            if (sPage == 'Basket.aspx' || sPage == 'BasketV2.aspx') {
                DeleteSelectedLineItems();
            }
        }
        $j(this).parents('.miniPdpBox').remove();
        urltemp = window.location.href;

        if (urltemp.indexOf('DirectOrderForm.aspx') > -1)
            window.location.href = '/order_from_catalog/DirectOrderForm.aspx';
    }
    function onMiniPdpError(XMLHttpRequest, textStatus, errorThrown) {
        lockBasketMiniPDP = false;
        var errChmZoneContent = '';
        try {
            var errorMessage = textStatus + '\n' + errorThrown + '\n';
            errorMessage += 'pId:' + productId + ' dId:' + documentId + ' cId:' + categoryid + '\n';
            errorMessage += 'UrlOriginOfMiniPDP:' + window.location.href;
            LogAjaxError("MiniPDPCall", errorMessage);

            if (XMLHttpRequest.responseText != "") {
                errChmZone = $j(XMLHttpRequest.responseText).find('.miniPDPChmZone');
                if (errChmZone != null && errChmZone != undefined)
                    errChmZoneContent = $j(errChmZone).html();
            }
        } catch (ex) {

        }
        $j('.waiting_box').hide();
        var loadingError = $j('<div class="miniPdpLoadingError"><p>Un problème technique est survenu, nous vous prions de bien vouloir nous excuser. </p><p class="help_message">Merci de réactualiser votre page en cliquant sur le bouton ci-dessous.</p><a href="javascript:void(0)"></a></div>');

        if (errChmZoneContent != '')
            loadingError = $j(errChmZoneContent);

        $j(loadingError).find('a').click(function () {
            $j(this).parents('.miniPdpLoadingError').remove();
            $j('.waiting_box').show();
            $j.ajax({
                type: 'POST',
                url: ajaxUrl,
                data: {},
                dataType: "text",
                success: onMiniPdpSuccess, //data
                error: onMiniPdpError,
                cache: false,
                async: setAsyncFalseForFF3x(),
                timeout: 16000
            });
        });
        $j(loadingError).appendTo('.miniPdpBoxContent');

    }
    function onMiniPdpSuccess(html) {
        lockBasketMiniPDP = false;
        $j('.waiting_box').hide();
        var index = html.indexOf('<div class="MiniPDPAjaxContent">');
        var content = html.substring(index);
        content = content.substring(0, content.indexOf('</form>'));
        var intermediate = $j(content);
        intermediate.appendTo('.miniPdpBoxContent');
        intermediate.hide();
        var errorMessage = null;
        try {
            if (((html) == null) || ($j.trim(html) == '')) {
                // There is no response from the server. Usually it happens in the maintenance mode #12261
                window.location = "/default.aspx";
            }
            else {
                if (!isNullOrUndefined(prodJson) && !isNullOrUndefined(prodJson.ErrMsgs) && !isNullOrUndefined(prodJson.ErrMsgs[0])) {
                    ReportMiniPDPTechnicalErrorsToOmniture("TE_" + productId + '_' + prodJson.ErrMsgs[0].Des);
                    errorMessage = 'MiniPDP error message in prodJson for product ' + productId + '. Message: ' + prodJson.ErrMsgs[0].Des;
                    ShowErrorText();
                }
                else if (isNullOrUndefined(prodJson) || isNullOrUndefined(prodJson.Products) || isNullOrUndefined(prodJson.Products[0])) {
                    ReportMiniPDPProductNotFoundErrorsToOmniture("PNF_" + productId);
                    ShowErrorText();
                }
                else {
                    BindMiniPDP();
                    setMiniPDPOmnitureTags(pos, numberpage, isCrossSell);
                    var error = 2 / 0;
                    // Tag Commendar Tracking                      
                    if (tagCmdJson != null) {
                        var tmanager = null;
                        tmanager = new RedcatsOT.TagCommenderTrackingManager();
                        tmanager.SetUserTagCmdVars();
                        tmanager.SetTreeStructureTagCmdVars();
                        tmanager.SetMiniPDPProducsTagCmdVars();
                        if (typeof (PostDataToTagcommendar) == "function")
                            PostDataToTagcommendar();
                    }
                }
            }
        } catch (ex) {
            ReportMiniPDPTechnicalErrorsToOmniture("Ex_" + productId + '_' + ex);
            errorMessage = "MiniPDP error for the product " + productId + '. Message: ' + ex;
            ShowErrorText();
        }
        if (!isNullOrUndefined(errorMessage)) {
            LogAjaxError('MiniPDP', errorMessage);
        }
    }

    function ShowErrorText() {
        var errChmZone = $j('.MiniPDPAjaxContent').find('.miniPDPChmZone');
        var loadingError = $j('<div class="miniPdpLoadingError"><p>Un problème technique est survenu, nous vous prions de bien vouloir nous excuser. </p><p class="help_message">Merci de réactualiser votre page en cliquant sur le bouton ci-dessous.</p><a href="javascript:void(0)"></a></div>');

        $j('.MiniPDPAjaxContent').remove();

        if (errChmZone != null && errChmZone != undefined)
            loadingError = errChmZone;

        loadingError.find('a').click(function () {
            $j(this).parents('.miniPdpLoadingError').remove();
            $j('.waiting_box').show();
            $j.ajax({
                type: 'POST',
                url: ajaxUrl,
                data: {},
                dataType: "text",
                success: onMiniPdpSuccess, //data
                error: onMiniPdpError,
                cache: false,
                async: setAsyncFalseForFF3x(),
                timeout: 16000
            });
        }); loadingError.appendTo('.miniPdpBoxContent').show();
    }

    function ValidateMiniPDPForm() {
        var miniPdp = $j('.MiniPDPAjaxContent');
        var colorSelect = miniPdp.find('select.color_select');
        var sizeSelect = miniPdp.find('select.size_select');
        var quantityBox = miniPdp.find('.quantity_box');
        var atbButton = miniPdp.find('a.atb_small_disabled,a.atb_small_enabled');
        var atwButton = miniPdp.find('p.atw_disabled,p.atw_enabled');
        var mtwButton = miniPdp.find('p.mtw_disabled,p.mtw_enabled');
        var bubbleContent = miniPdp.find('.error_bubble .message');

        if (sizeSelect.attr('disabled') == true || sizeSelect.attr('disabled') == 'disabled') {
            atbButton.attr('class', 'atb_small_disabled');
            atwButton.attr('class', 'atw_disabled');
            mtwButton.attr('class', 'mtw_disabled');
            var message = GetMessage(MiniPDPMessageFWCsts.Section, MiniPDPMessageFWCsts.NoSizeAvailable);
            if (isNullOrUndefined(message)) {
                bubbleContent.html('');
            } else {
                bubbleContent.html(message.MessageText);
            }
            return;
        }
        if (sizeSelect.val() == -1) {
            atbButton.attr('class', 'atb_small_disabled');
            atwButton.attr('class', 'atw_disabled');
            mtwButton.attr('class', 'mtw_disabled');
            var message = GetMessage(MiniPDPMessageFWCsts.Section, MiniPDPMessageFWCsts.NoSizeSelected);
            if (isNullOrUndefined(message)) {
                bubbleContent.html('');
            } else {
                bubbleContent.html(message.MessageText);
            }
            return;
        }
        if (isNaN(quantityBox.val())) {
            atbButton.attr('class', 'atb_small_disabled');
            atwButton.attr('class', 'atw_disabled');
            mtwButton.attr('class', 'mtw_disabled');
            var message = GetMessage(MiniPDPMessageFWCsts.Section, MiniPDPMessageFWCsts.InvalidQuantity);
            if (isNullOrUndefined(message)) {
                bubbleContent.html('');
            } else {
                bubbleContent.html(message.MessageText);
            }
            return;
        }
        try {
            var sizes = GetM2SizeJsonByInternalRefernce(prodJson, colorSelect.val());
            var quantityValue = quantityBox.val();
            for (var i = 0; i < sizes.length; i++) {
                if (sizes[i].Id == sizeSelect.val()) {
                    if (quantityValue < 1) {//sizes[i].QtyInf.Min
                        atbButton.attr('class', 'atb_small_disabled');
                        atwButton.attr('class', 'atw_disabled');
                        mtwButton.attr('class', 'mtw_disabled');
                        var message = GetMessage(MiniPDPMessageFWCsts.Section, MiniPDPMessageFWCsts.InvalidQuantityMin);
                        if (isNullOrUndefined(message)) {
                            bubbleContent.html('');
                        } else {
                            bubbleContent.html(message.MessageText.replace('{0}', 1));
                        }
                        return;
                    } else if (quantityValue > 15) {//sizes[i].QtyInf.Max
                        atbButton.attr('class', 'atb_small_disabled');
                        atwButton.attr('class', 'atw_disabled');
                        mtwButton.attr('class', 'mtw_disabled');
                        var message = GetMessage(MiniPDPMessageFWCsts.Section, MiniPDPMessageFWCsts.InvalidQuantityMax);
                        if (isNullOrUndefined(message)) {
                            bubbleContent.html('');
                        } else {
                            bubbleContent.html(message.MessageText.replace('{0}', 15));
                        }
                        return;
                    }
                }
            }
        } catch (ex) { }
        atbButton.attr('class', 'atb_small_enabled');
        atwButton.attr('class', 'atw_enabled');
        mtwButton.attr('class', 'mtw_enabled');
    }

    function BindMiniPDP() {
        var miniPdp = $j('.MiniPDPAjaxContent');
        miniPdp.find('a.RS24h').click(HideminiPdpBox);
        var qsForPDP = '';
        var pictureRulesManager = new RedcatsOT.PictureRulesManager();

        var previousButton = miniPdp.find('div.previous');

        if (isNullOrUndefined(previous) || previous.length == 0) {
            previousButton.hide();
        } else {
            previousButton.unbind('click');
            previousButton.bind('click', function () {
                previous.find('.quick_view_button:first').trigger('click');
            });
            var url = previous.find('a.visu img.thumb, img.img-product').attr('src');
            previousButton.find('img').attr('src', url + '?s=72');
        }
        var nextButton = miniPdp.find('div.next');

        if (isNullOrUndefined(next) || next.length == 0) {
            nextButton.hide();
        } else {
            nextButton.unbind('click');
            nextButton.bind('click', function () {
                next.find('.quick_view_button:first').trigger('click');
            });
            var url = next.find('a.visu img.thumb, img.img-product').attr('src');
            nextButton.find('img').attr('src', url + '?s=72');
        }

        if (!isNullOrUndefined(pdpLinkCategoryid)) {
            qsForPDP = qsForPDP + "&categoryid=" + categoryid;
        }
        if (!isNullOrUndefined(isAvailProdcut) && isAvailProdcut == true) {
            qsForPDP = qsForPDP + "&isavail=true";
        }
        if (!isNullOrUndefined(pdpLinkpos)) {
            qsForPDP = qsForPDP + "&pos=" + pos;
        }

        if (!isNullOrUndefined(pdpLinknumpage)) {
            qsForPDP = qsForPDP + "&numberpage=" + numberpage;
        }
        if (!isNullOrUndefined(isSearchResultProduct) && isSearchResultProduct == 1) {
            qsForPDP = qsForPDP + "&source=" + isSearchResultProduct;
        }
        if (!isNullOrUndefined(colorlabel) && colorlabel != '') {
            qsForPDP = qsForPDP + "&colorlabel=" + colorlabel;
        }
        if (!isNullOrUndefined(genericsizeCode) && genericsizeCode != '') {
            qsForPDP = qsForPDP + "&genericsize=" + genericsizeCode;
        }
        var vt = ParseQueryString('virtualtool')
        if ((vt != null || vt != undefined) && vt.indexOf('module_ampm') != -1)
            OriginForMiniPDP = "Module AMPM";

        var basePdpUrl = miniPdp.find('.hidPdpPath').val();

        if (isNullOrUndefined(showPDPLink) || showPDPLink) {
            // change made by mayankb - added " + "&prodsize=" + prodsize + "&prodcolor=" + prodcolor" to main_picture link. -- 1/2/2011.
            miniPdp.find('.main_picture a').attr('href', sortQueryStringParamsMiniPDP(basePdpUrl + '&MiniPDPLinkClicked=picture&OriginMiniPDP=' + OriginForMiniPDP + qsForPDP + '&cssrc=' + CrossSellVal + "&secintref=" + prodsize + "&prodcolor=" + prodcolor));
            //set image altText.
            if (prodAltText != null) {
                miniPdp.find('.main_picture a img').attr('alt', $j.trim(prodAltText));
            }
            miniPdp.find('.main_picture a').click(function () {
                if (typeof (setMiniPDPMultiVariateandDimesnsionCookie) == 'function') {
                    setMiniPDPMultiVariateandDimesnsionCookie();
                }
                return true;
            });
            miniPdp.find('.product_info_bottom a.go_to_pdp').attr('href', sortQueryStringParamsMiniPDP(basePdpUrl + '&MiniPDPLinkClicked=visuel&OriginMiniPDP=' + OriginForMiniPDP + qsForPDP + '&cssrc=' + CrossSellVal + "&secintref=" + prodsize + "&prodcolor=" + prodcolor));
            miniPdp.find('.product_info_bottom a.go_to_pdp').click(function () {
                if (typeof (setMiniPDPMultiVariateandDimesnsionCookie) == 'function') {
                    setMiniPDPMultiVariateandDimesnsionCookie();
                }
                return true;
            });
            miniPdp.find('.product_info_block_text a.go_to_pdp').attr('href', sortQueryStringParamsMiniPDP(basePdpUrl + '&MiniPDPLinkClicked=detail&OriginMiniPDP=' + OriginForMiniPDP + qsForPDP + '&cssrc=' + CrossSellVal + "&secintref=" + prodsize + "&prodcolor=" + prodcolor));
            miniPdp.find('.product_info_block_text a.go_to_pdp').click(function () {
                if (typeof (setMiniPDPMultiVariateandDimesnsionCookie) == 'function') {
                    setMiniPDPMultiVariateandDimesnsionCookie();
                }
                return true;
            });

        } else {
            miniPdp.find('.product_info_block_text a.go_to_pdp').hide();
            miniPdp.find('.product_info_bottom a.go_to_pdp').hide();
            miniPdp.find('.main_picture a').attr('href', 'javascript:void(0);');
        }

        //ATB Event Binding
        var atbButton = miniPdp.find('a.atb_small_disabled,a.atb_small_enabled');
        var atwButton = miniPdp.find('p.atw_disabled,p.atw_enabled');
        var mtwButton = miniPdp.find('p.mtw_disabled,p.mtw_enabled');

        atbButton.hover(function () {
            ValidateMiniPDPForm();
            if ($j(this).attr('class') == 'atb_small_disabled') {
                miniPdp.find('.error_bubble').css('bottom', '72px');
                miniPdp.find('.error_bubble').show();
            }
        }, function () {
            miniPdp.find('.error_bubble').hide();
        });

        atwButton.hover(function () {
            ValidateMiniPDPForm();
            if ($j(this).attr('class') == 'atw_disabled') {
                miniPdp.find('.error_bubble').css('bottom', '32px');
                miniPdp.find('.error_bubble').show();
            }
        }, function () {
            miniPdp.find('.error_bubble').hide();
        });

        mtwButton.hover(function () {
            ValidateMiniPDPForm();
            if ($j(this).attr('class') == 'mtw_disabled') {
                miniPdp.find('.error_bubble').css('bottom', '32px');
                miniPdp.find('.error_bubble').show();
            }
        }, function () {
            miniPdp.find('.error_bubble').hide();
        });

        atbButton.click(function () {
            if ($j(this).attr('class') == 'atb_small_enabled') {
                var miniPdp = $j('.MiniPDPAjaxContent');
                var productArray = Array();
                var selectedColor = miniPdp.find('select.color_select').val();
                var selectedSize = miniPdp.find('select.size_select').val();

                var colorJson = GetM2ColorJsonByInternalRefernce(prodJson, selectedColor);
                var sizeJson = GetM2SizeObjectFromM2Color(colorJson, selectedSize);

                var quantity = miniPdp.find('.quantity_box').val();
                if (MiniPDPOmnitureJson != null) {
                    var CategoryName = MiniPDPOmnitureJson.categoryLevel1;
                }
                try {
                    var m2basketobj = GetM2BasketJSONFromOffer(prodJson, sizeJson.Ofrs[0].ItemOfferId, quantity, '');
                    var data = new FRProductObjectFromM2BasketObject(m2basketobj);
                    if (data != null) {
                        data.Description = miniPdp.find('.pictures_block ul li:first').attr('src');
                        productArray[0] = data;



                        var atbObject = new RedcatsOT.Basket("MiniPDP");
                        atbObject.OnIntermediateCallBack = function () {
                            $j('.miniPdpBox').remove();
                        }

                        var sPath = window.location.pathname;
                        var sPage = sPath.substring(sPath.lastIndexOf('/') + 1);
                        if (sPage == 'Basket.aspx' || sPage == 'BasketV2.aspx') {
                            data.AvailablePaidServices = null;

                            atbObject.OnSuccessCallBack = function () {
                                UpdateBasketCount();
                                showModal(defaultContent);
                                GoToBasket();
                            }
                        }

                        atbObject.DoATB(productArray);
                    }
                } catch (ex) {
                    alert(ex);
                }
            }
        });

        atwButton.click(function () {

            if ($j(this).attr('class') == 'atw_enabled') {
                if (location.protocol == "http:") {
                    OpenCenteredPopUp("/Account/IdentifyAcctPopup.aspx?ReturnUrl=~/Wishlist/WishlistRedirectpage.aspx", 1000, 600);
                }
                else {
                    $j(document).ATWL($j(this), false);
                }
            }
        });

        jQuery.fn.ATWL = function (btnATWL, bUpdate) {
            if ($j(btnATWL).attr('class') == 'atw_enabled') {
                var miniPdp = $j('.MiniPDPAjaxContent');
                var productArray = Array();
                var selectedColor = miniPdp.find('select.color_select').val();
                var selectedSize = miniPdp.find('select.size_select').val();
                var quantity = miniPdp.find('.quantity_box').val();

                var colorJson = GetM2ColorJsonByInternalRefernce(prodJson, selectedColor);
                var sizeJson = GetM2SizeObjectFromM2Color(colorJson, selectedSize);

                if (MiniPDPOmnitureJson != null) {
                    var CategoryName = MiniPDPOmnitureJson.categoryLevel1;
                }
                try {
                    var m2basketobj = GetM2BasketJSONFromOffer(prodJson, sizeJson.Ofrs[0].ItemOfferId, quantity, '');
                    var data = new FRProductFromM2Basket(m2basketobj, CategoryName);
                    if (data != null) {
                        data.Description = miniPdp.find('.pictures_block ul li:first').attr('src');
                        productArray[0] = data;
                        var sPath = window.location.pathname;
                        var sPage = sPath.substring(sPath.lastIndexOf('/') + 1);
                        if (sPage == 'WishList.aspx') {
                            data.HasAssociatedService = false;
                        }
                        var options = { "mode": c_addMode, "forceCallingServices": data.HasAssociatedService, "callPushProduct": true };
                        AddToWishListCallingPage = EnumAddToWishListCallingPage.MiniPDP;
                        AddToWishList(productArray, options, null, null, null, null, null);
                    }
                } catch (ex) { }
            }
        };

        mtwButton.click(function () {
            if ($j(this).attr('class') == 'mtw_enabled') {
                var miniPdp = $j('.MiniPDPAjaxContent');
                var productArray = Array();
                var selectedColor = miniPdp.find('select.color_select').val();
                var selectedSize = miniPdp.find('select.size_select').val();
                var quantity = miniPdp.find('.quantity_box').val();

                var colorJson = GetM2ColorJsonByInternalRefernce(prodJson, selectedColor);
                var sizeJson = GetM2SizeObjectFromM2Color(colorJson, selectedSize);
                if (MiniPDPOmnitureJson != null) {
                    var CategoryName = MiniPDPOmnitureJson.categoryLevel1;
                }
                try {

                    var m2basketobj = GetM2BasketJSONFromOffer(prodJson, sizeJson.Ofrs[0].ItemOfferId, quantity, '');
                    var data = new FRProductFromM2Basket(m2basketobj, CategoryName);
                    if (data != null) {
                        data.Description = miniPdp.find('.pictures_block ul li:first').attr('src');
                        productArray[0] = data;
                        var sPath = window.location.pathname;
                        var sPage = sPath.substring(sPath.lastIndexOf('/') + 1);
                        if (sPage == 'WishList.aspx') {
                            data.HasAssociatedService = false;
                        }
                        var options = { "mode": c_updateMode, "forceCallingServices": data.HasAssociatedService, "callPushProduct": false };
                        AddToWishListCallingPage = EnumAddToWishListCallingPage.MiniPDP;
                        AddToWishList(productArray, options, null, null, null, lineItemID, null);
                    }
                } catch (ex) { }
            }
        });
        //END of ATB Event Binding

        miniPdp.find('.quantity_box').bind('change', function () {
            ValidateMiniPDPForm();
        });
        //END of Quantity Box Key Validation

        if (prodJson.Products[0].VsSty != "seduction") {
            miniPdp.find('a.size_chart').hide();
        }
        if (DisableSizeChart == "true") {
            miniPdp.find('a.size_chart').hide();
        }
        //Color Content Binding
        var colors = GetM2ColorJsonByInternalRefernce(prodJson);
        if (colors.length != 0) {
            var colorSelect = miniPdp.find('select.color_select');
            colorSelect.attr('disabled', '');
            var option;
            var isExactClrMatch = false;
            for (var i = 0; i < colors.length; i++) {
                option = $j('<option></option>');
                option.attr('value', colors[i].Id);
                if (prodcolor == colors[i].Id) {
                    colorindex = colors[i].Id;
                    isExactClrMatch = true;
                    prodsizeCode = null;
                }
                else if (colorlabel != '' && !isNullOrUndefined(colors[i].MscCds)) {
                    for (var miscIndex = 0; miscIndex < colors[i].MscCds.length; miscIndex++) {
                        if (colors[i].MscCds[miscIndex].BTy.Id == "GenericLabel") {
                            if (colors[i].MscCds[miscIndex].Des == colorlabel) {
                                colorindex = colors[i].AltId;
                                isExactClrMatch = true;
                            }
                            break;
                        }
                    }
                }
                option.html(colors[i].DN);
                option.appendTo(colorSelect);
            }

            if (colors.length == 1) {
                colorSelect.hide();
                var input = miniPdp.find('input.color_select');
                if (!JSONisNullOrUndefinedOrEmpty(colors[0].DN)) {
                    input.show();
                }
                input.attr('readonly', true);
                input.val(HtmlDecode(colors[0].DN));

            }
            if (colorindex != '') { colorSelect.val(colorindex); colorindex = ''; }
        }
        //END of Color Content Binding

        //Color Change Event Binding
        colorSelect.bind('change keyup', function () {
            var selectedColor = $j(this).val();
            var miniPdp = $j('.MiniPDPAjaxContent');
            var colorJson = GetM2ColorJsonByInternalRefernce(prodJson, selectedColor);
            //TT#12208
            if (isNullOrUndefined(showPDPLink) || showPDPLink) {
                updatePDPLinkWithSelectedColorSize(colorJson[0].Id, null);
            }
            //Picture Management

            if (!JSONisNullOrUndefinedOrEmpty(colorJson[0].Imgs)) {
                var colorPictureJson = Array();
                var myImg;
                var medPictOrder;
                var medBase;
                var mId = findIndexByKeyValue(colorJson[0].Imgs, "Id", "mediumPict");
                if (!isNullOrUndefined(mId)) {
                    medPictOrder = colorJson[0].Imgs[mId].Ord;
                    var medBaseSplit = colorJson[0].Imgs[mId].FlNm.split('_');
                    medBase = medBaseSplit[0];
                    for (var i = 0; i < colorJson[0].Imgs.length; i++) {
                        if (colorJson[0].Imgs[i].Ord == medPictOrder) {
                            myImg = null;
                            if (myImg == null) {
                                myImg = { Order: "1", Base: medBase };
                                myImg.small = getPictureURL(colorJson[0].Imgs, "Id", "firstLevelThumbOtherView", medPictOrder);
                                myImg.Big = getPictureURL(colorJson[0].Imgs, "Id", "firstLevelSmallOtherView", medPictOrder);
                                colorPictureJson.push(myImg);
                            }
                            break;
                        }

                    }
                }
                for (img in colorJson[0].Imgs) {
                    if (colorJson[0].Imgs[img].Id == "mediumPict" || colorJson[0].Imgs[img].Id == "smallPict") {
                        myImg = null;

                        var tmpSplit = colorJson[0].Imgs[img].FlNm.split('_');
                        var currentSrcStart = tmpSplit[0];

                        for (tmpImg in colorPictureJson) {
                            if (currentSrcStart == colorPictureJson[tmpImg].Base) {
                                myImg = colorPictureJson[tmpImg];
                                break;
                            }
                        }
                        if (myImg == null) {
                            myImg = { Order: colorJson[0].Imgs[img].Ord, Base: currentSrcStart };
                            colorPictureJson[colorPictureJson.length] = myImg;
                        }
                        if (colorJson[0].Imgs[img].Id == "mediumPict") {
                            myImg.Small = colorJson[0].Imgs[img].FlNm;
                        } else if (colorJson[0].Imgs[img].Id == "smallPict") {
                            myImg.Big = colorJson[0].Imgs[img].FlNm;
                        }
                    } else if (colorJson[0].Imgs[img].Id == "firstLevelSmallOtherView" || colorJson[0].Imgs[img].Id == "firstLevelThumbOtherView") {
                        myImg = null;

                        var tmpSplit = colorJson[0].Imgs[img].FlNm.split('_');
                        var currentSrcStart = tmpSplit[0];

                        for (tmpImg in colorPictureJson) {
                            if (currentSrcStart == colorPictureJson[tmpImg].Base) {
                                myImg = colorPictureJson[tmpImg];
                                break;
                            }
                        }
                        if (myImg == null) {
                            myImg = { Order: (colorJson[0].Imgs[img].Ord + 1), Base: currentSrcStart };
                            colorPictureJson[colorPictureJson.length] = myImg;
                        }
                        if (colorJson[0].Imgs[img].Id == "firstLevelThumbOtherView") {
                            myImg.Small = colorJson[0].Imgs[img].FlNm;
                        } else if (colorJson[0].Imgs[img].Id == "firstLevelSmallOtherView") {
                            myImg.Big = colorJson[0].Imgs[img].FlNm;
                        }
                    }
                }

                var basePictureJson = Array();
                var myImg;
                for (img in prodJson.Products[0].Imgs) {
                    if (prodJson.Products[0].Imgs[img].Id == "smallOtherView" || prodJson.Products[0].Imgs[img].Id == "bigOtherView") {
                        myImg = null;
                        for (tmpImg in basePictureJson) {
                            if (basePictureJson[tmpImg].Order == prodJson.Products[0].Imgs[img].Ord) {
                                myImg = basePictureJson[tmpImg];
                            }
                        }
                        if (myImg == null) {
                            myImg = { Order: prodJson.Products[0].Imgs[img].Ord };
                            basePictureJson[basePictureJson.length] = myImg;
                        }
                        if (prodJson.Products[0].Imgs[img].Id == "smallOtherView") {
                            myImg.Small = prodJson.Products[0].Imgs[img].FlNm; //72*72
                        } else if (prodJson.Products[0].Imgs[img].Id == "bigOtherView") {
                            myImg.Big = prodJson.Products[0].Imgs[img].FlNm; //400*400                        
                        }
                    }
                }
                var stickerSrc = pictureRulesManager.GetRegularStickerForOfferType(prodJson.Products[0].Imgs, minipdpBaseOfferType);
                if (stickerSrc != '') {
                    miniPdp.find('.pictures_block .main_picture img.sticker').attr('src', stickerSrc);
                    miniPdp.find('.pictures_block .main_picture img.sticker').show();
                } else {
                    miniPdp.find('.pictures_block .main_picture img.sticker').attr('src', '//media.laredoute.fr/images/spacer.gif');
                    miniPdp.find('.pictures_block .main_picture img.sticker').hide();
                }
                var ulAddPic = miniPdp.find('.pictures_block ul');
                ulAddPic.empty();

                var pictureJsonCount = 5;
                if (IsVMProduct)
                    pictureJsonCount = 4;

                for (var i = 0; i < colorPictureJson.length && i < pictureJsonCount; i++) {

                    var li = $j('<li><img /></li>');
                    try {
                        if (!isNullOrUndefined(colorPictureJson[i].Small)) {
                            li.find('img').attr('src', GetMediaImagePath3Level(colorPictureJson[i].Small));
                        } else {
                            li.find('img').attr('src', GetMediaImagePath3Level(colorPictureJson[i].Big));
                        }
                        li.attr('src', GetMediaImagePath3Level(colorPictureJson[i].Big));

                        li.appendTo(ulAddPic);
                    } catch (ex) { }
                }

                if (colorPictureJson.length < pictureJsonCount) {
                    //for(var i=0;i<limit && i<basePictureJson.length;i++){
                    var i = 0;
                    while (miniPdp.find('.pictures_block ul li').length < pictureJsonCount && i < basePictureJson.length) {
                        if (miniPdp.find('.pictures_block ul li img[src="' + GetMediaImagePath3Level(basePictureJson[i].Small) + '"]').length == 0) {

                            var li = $j('<li><img /></li>');

                            try {

                                if (!isNullOrUndefined(basePictureJson[i].Big)) {
                                    if (!isNullOrUndefined(basePictureJson[i].Small)) {
                                        li.find('img').attr('src', GetMediaImagePath3Level(basePictureJson[i].Small));
                                    } else {
                                        li.find('img').attr('src', GetMediaImagePath3Level(basePictureJson[i].Big));
                                    }

                                    li.attr('src', GetMediaImagePath3Level(basePictureJson[i].Big));

                                    li.appendTo(ulAddPic);
                                }
                            } catch (ex) { }
                        }
                        i++;
                    }
                }

                if (IsVMProduct) {
                    var li = $j('<li class="additional_pictos"><a href="#" class="look" target="_blank" /></li>');
                    try {
                        li.find('a').attr('href', LookAtMeVMURLLogo);
                        li.appendTo(ulAddPic);
                    } catch (ex) { }
                }
                ulAddPic.find('li.additional_pictos').click(function () {
                    try {
                        if (isNullOrUndefined(s)) return;
                        if (s.events != null) {
                            s.events = "";
                        }
                        s.events = "event45"; //event45-For MiniPDP and event44 - For PDP
                        /* calling method s.tl() */
                        s.tl(false, 'o', "MiniPDPVMLogoClick");
                    }
                    catch (e) {

                    }
                })

                ulAddPic.find('li').hover(function () {
                    $j(this).parent('ul').find('li.selected').removeClass('selected');
                    $j(this).addClass('selected');
                    $j('.MiniPDPAjaxContent .pictures_block .main_picture img.thumb').attr('src', $j(this).attr('src'));
                }, function () { });
                ulAddPic.find('li:first').addClass('first').addClass('selected');
                $j('.MiniPDPAjaxContent .pictures_block .main_picture img.thumb').attr('src', ulAddPic.find('li:first').attr('src'));
                //Set altText of additionalView images with 01.....n
                if (prodAltText != null) {
                    var indexInt = 1;
                    $j('.pictures_block ul li').each(function () {
                        var newText = '0' + indexInt + ' ' + $j.trim(prodAltText);
                        $j(this).find('img').attr('alt', newText);
                        indexInt += 1;
                    })
                }
            }
            //END of Picture Management

            var sizes = GetM2SizeJsonByInternalRefernce(prodJson, selectedColor);
            if (sizes.length != 0) {
                if (sizes.length == 1) {
                    miniPdp.find('a.size_chart').hide()
                } else {
                    if (DisableSizeChart == true) {
                        miniPdp.find('a.size_chart').hide()
                    } else {
                        miniPdp.find('a.size_chart').show()
                    }
                }
                var sizeSelect = miniPdp.find('select.size_select');
                var oldSelectValue = sizeSelect.val();
                if (isNullOrUndefined(oldSelectValue)) {
                    oldSelectValue = '-1';
                }
                sizeSelect.empty();
                sizeSelect.attr('disabled', '');
                sizeSelect.hide();
                var option;
                option = $j('<option></option>');
                option.attr('value', '-1');
                option.html(DEFAULT_SIZE_DROPDOWN_VALUE);
                option.appendTo(sizeSelect);
                var sizecode = '';
                var selindex = 0;
                var availSizesNb = 0;
                var selectedSizeIndex = 0;
                for (var i = 0; i < sizes.length; i++) {
                    if (sizes[i].Ofrs[0].Stk.AvSt != 0) {
                        option = $j('<option></option>');
                        option.attr('value', sizes[i].Id);
                        if (prodsize != '' && prodsize == sizes[i].Id) {
                            sizecode = sizes[i].Id;
                            selindex = i;
                        }
                        if (genericsizeCode != '' && !isNullOrUndefined(sizes[i].MscCds)) {
                            for (var miscIndex = 0; miscIndex < sizes[i].MscCds.length; miscIndex++) {
                                if (sizes[i].MscCds[miscIndex].BTy.Id == "GenericSizeCode") {
                                    if (sizes[i].MscCds[miscIndex].Des.toLowerCase() == genericsizeCode.toLowerCase()) {
                                        sizecode = sizes[i].Id;
                                        selindex = i;
                                    }
                                    break;
                                }
                            }
                        }
                        option.html(sizes[i].DN + AVAIL_SEPARATOR_TEXT + GetDeliveryInfoText(sizes[i].Ofrs[0].Stk.AvSt, sizes[i].Ofrs[0].Stk.FsAvDt, sizes[i].Ofrs[0].Stk.FsBkOrdDt));
                        option.appendTo(sizeSelect);
                        selectedSizeIndex = i;
                        availSizesNb++;
                    }
                }
                if (sizecode != '') {
                    // sizeSelect.val(sizecode);
                    prodsize = '';
                    if (availSizesNb > 1)
                        selectedSizeIndex = selindex + 1;
                    else
                        selectedSizeIndex = selindex;
                    oldSelectValue = sizecode;
                }
                miniPdp.find('.size_box').show();
                var inputColor = miniPdp.find('input.color_select');
                if (availSizesNb == 0) {
                    sizeSelect.show();
                    sizeSelect.attr('disabled', 'disabled');
                    var input = miniPdp.find('input.size_select');
                    input.hide();
                    sizeSelect.val(-1);
                } else if (availSizesNb == 1) {
                    sizeSelect.hide();
                    var input = miniPdp.find('input.size_select');
                    input.show();
                    input.attr('readonly', true);
                    if (isNullOrUndefined(sizes[selectedSizeIndex].DN)) {
                        input.val(GetDeliveryInfoText(sizes[selectedSizeIndex].Ofrs[0].Stk.AvSt, sizes[selectedSizeIndex].Ofrs[0].Stk.FsAvDt, sizes[selectedSizeIndex].Ofrs[0].Stk.FsBkOrdDt));
                    } else {
                        input.val(HtmlDecode(sizes[selectedSizeIndex].DN) + AVAIL_SEPARATOR_TEXT + GetDeliveryInfoText(sizes[selectedSizeIndex].Ofrs[0].Stk.AvSt, sizes[selectedSizeIndex].Ofrs[0].Stk.FsAvDt, sizes[selectedSizeIndex].Ofrs[0].Stk.FsBkOrdDt));
                    }
                    //Hide Taille Text
                    var sizeLabel = miniPdp.find('.taille_text');
                    if (!isNullOrUndefined(sizeLabel))
                        sizeLabel.hide();

                    sizeSelect.val(sizes[selectedSizeIndex].Id);
                    try {
                        if (sizes[selectedSizeIndex].MscCds[0].BTy.Id == 'HighSizeCode' &&
                            sizes[selectedSizeIndex].MscCds[0].Des == '99999' &&
                            (inputColor.val() == '' || inputColor.val() == '-')
                            ) {
                            miniPdp.find('.size_box').hide();
                        }
                    }
                    catch (e) { }
                } else {
                    sizeSelect.show();
                    var input = miniPdp.find('input.size_select');
                    input.hide();
                    if (sizeSelect.find('option[value=' + oldSelectValue + ']').length != 0) {
                        sizeSelect.val(oldSelectValue);
                    } else {
                        sizeSelect.val(-1);
                    }
                    //Show Taille Text
                    var sizeLabel = miniPdp.find('.taille_text');
                    if (!isNullOrUndefined(sizeLabel))
                        sizeLabel.show();
                }
                sizeSelect.trigger('change');
            }
            ValidateMiniPDPForm();
        });
        //END of Color Change Event Binding

        var previousVendorId = -1;

        //Size Change Event Binding
        //Change to Restock ALert
        miniPdp.find('select.size_select').bind('change keyup', function () {
            var gencolor;
            var genSize;
            var miniPdp = $j('.MiniPDPAjaxContent');
            var select = $j(this);
            var quantityField = miniPdp.find('.quantity_box');
            if (select.val() != -1) {
                var sizes = GetM2SizeJsonByInternalRefernce(prodJson, miniPdp.find('select.color_select').val());
                var selectedSizeJson;
                var categoryid = ParseQueryString('categoryid');
                for (var i = 0; i < sizes.length; i++) {
                    if (sizes[i].Id == select.val()) {
                        //                        
                        selectedSizeJson = sizes[i];

                        if (selectedSizeJson.Ofrs[0].ItemOfferId != null && selectedSizeJson.Ofrs[0].Stk != null
                                && selectedSizeJson.Ofrs[0].Stk.AvSt == 2 && selectedSizeJson.Ofrs[0].IsMktPr == false
                                && selectedSizeJson.Ofrs[0].CtmrTgt != '4') {
                            var EmailId = GetSubCookieValue("M.R.Basket", "UserID");
                            if (EmailId != null) {
                                $j('input.RSACustomeremailAddress').val(EmailId);
                            }
                            setItemofferid(selectedSizeJson.Ofrs[0].ItemOfferId, categoryid);
                            $j('div.sku_selection a.RS24h').css('display', 'block');
                        }
                        else {
                            $j('div.sku_selection a.RS24h').css('display', 'none');
                        }

                        if (isNullOrUndefined(showPDPLink) || showPDPLink) {
                            updatePDPLinkWithSelectedColorSize(null, sizes[i].Id); //TT#12208
                        }
                        //Binding quantity field & info
                        quantityField.attr('disabled', '');
                        if (quantityField.val() == '0') {
                            quantityField.val(1);
                        }

                        //                        $j('.MiniPDPAjaxContent .pictures_block .main_picture img.sticker').attr('src', "//media.laredoute.fr/images/spacer.gif");
                        //                        for (var k = 0; k < selectedSizeJson.Ofrs[0].Imgs.length; k++) {
                        //                            if (selectedSizeJson.Ofrs[0].Imgs[k].BTy.Id == "StdFileName") {
                        //                                $j('.MiniPDPAjaxContent .pictures_block .main_picture img.sticker').attr('src', GetMediaImagePath3Level(selectedSizeJson.Ofrs[0].Imgs[k].FlNm));
                        //                            }
                        //                        }
                        var stickerSrc = pictureRulesManager.GetRegularStickerForOfferType(prodJson.Products[0].Imgs, selectedSizeJson.Ofrs[0].OfrType);
                        if (stickerSrc != '') {
                            miniPdp.find('.pictures_block .main_picture img.sticker').attr('src', stickerSrc);
                            miniPdp.find('.pictures_block .main_picture img.sticker').show();
                        } else {
                            miniPdp.find('.pictures_block .main_picture img.sticker').attr('src', '//media.laredoute.fr/images/spacer.gif');
                            miniPdp.find('.pictures_block .main_picture img.sticker').hide();
                        }


                    }
                }

                setOmniturePropAndEvents(productId, selectedSizeJson.Ofrs[0].VdrInfo.Id);

                //Stock Alert
                var stockAlt = miniPdp.find('.stock_alert');
                if ((stockAlt != null || stockAlt != undefined) && selectedSizeJson.Ofrs[0].Stk.StAltQty != '0'
                    && selectedSizeJson.Ofrs[0].Stk.AvSt == 1) {
                    stockAlt.html(stockAlert.replace(deliveryDelimiter.toLowerCase(), selectedSizeJson.Ofrs[0].Stk.StAltQty));
                    stockAlt.show();
                }
                else
                    stockAlt.hide();

                //Price Management        
                var priceZone = miniPdp.find('.price_display');
                priceZone.find('.private_sales_original_price').hide();
                priceZone.find('span.discount').html('');
                priceZone.find('span.strike_price').html('');
                if (customerTarget != '4') {
                    if (selectedSizeJson.Ofrs[0].Dis != 0) {
                        priceZone.find('span.discount').html('<span>-' + formatDiscount(selectedSizeJson.Ofrs[0].Dis) + '%</span>');
                        priceZone.find('span.strike_price').html(formatPrice(selectedSizeJson.Ofrs[0].PrLiPr) + ' €');
                    }
                } else {
                    if (selectedSizeJson.Ofrs[0].PrLiPr != 0 && selectedSizeJson.Ofrs[0].PrLiPr != selectedSizeJson.Ofrs[0].LiPr) {
                        priceZone.find('.private_sales_original_price span').html(formatPrice(selectedSizeJson.Ofrs[0].PrLiPr) + ' €');
                        priceZone.find('.private_sales_original_price').show();
                    }
                }
                priceZone.find('div.price').html('<p><strong>' + formatPrice(selectedSizeJson.Ofrs[0].LiPr) + ' €</strong></p>');

                if (selectedSizeJson.Ofrs[0].EnvCmpl.FCpl == true) {//Eco part
                    priceZone.find('p.eco_part').html('+' + formatPrice(selectedSizeJson.Ofrs[0].EnvCmpl.CplFe) + ' € d\'&eacute;co-participation');
                } else {
                    priceZone.find('p.eco_part').html('');
                }
                priceZone.find('p.price_link').html('');
                priceZone.find('p.price_link').hide();
                if (isNullOrUndefined(showPDPLink) || showPDPLink) {
                    for (var i = 0; i < selectedSizeJson.Ofrs[0].PrmlPrTyps.length; i++) {
                        if (selectedSizeJson.Ofrs[0].PrmlPrTyps[i].DisPrmlPg == true) {
                            if (selectedSizeJson.Ofrs[0].PrmlPrTyps[i].DN == "PrixFuteItem") {
                                priceZone.find('p.price_link').show();
                                priceZone.find('p.price_link').html('<a href="javascript:void(0);" class="prix_fute">PRIX FUTE</a>');
                            } else if (selectedSizeJson.Ofrs[0].PrmlPrTyps[i].DN == "PrixMiniItem") {
                                priceZone.find('p.price_link').show();
                                if (miniPdp.find('.hidShoppingPrix').val().toLowerCase() != "on") {
                                    priceZone.find('p.price_link').html('<a href="javascript:popUp(\'/ProductDetail/pop-prix_mini.aspx\',200,798,778);" class="prix_mini">PRIX MINI</a>');
                                } else {
                                    priceZone.find('p.price_link').html('<a href="javascript:popUp(\'/ProductDetail/pop-prix_shopping.aspx\',200,798,778);" class="shopping_prix">Shopping <span>prix</span></a>');
                                }
                            } else if (selectedSizeJson.Ofrs[0].PrmlPrTyps[i].DN == "PageRougeItem") {
                                priceZone.find('p.price_link').show();
                                priceZone.find('p.price_link').html('<a href="javascript:popUp(\'/ProductDetail/pop-prix_rouge.aspx\',200,798,778);" class="prix_rouge">PRIX ROUGE</a>');
                            } else if (selectedSizeJson.Ofrs[0].PrmlPrTyps[i].DN == "PageVerteItem") {
                                priceZone.find('p.price_link').show();
                                priceZone.find('p.price_link').html('<a href="javascript:popUp(\'/ProductDetail/pop-prix_vert.aspx\',200,798,778);" class="prix_vert">PRIX VERT</a>');
                            }
                        }
                    }
                } else {
                    for (var i = 0; i < selectedSizeJson.Ofrs[0].PrmlPrTyps.length; i++) {
                        if (selectedSizeJson.Ofrs[0].PrmlPrTyps[i].DisPrmlPg == true) {
                            if (selectedSizeJson.Ofrs[0].PrmlPrTyps[i].DN == "PrixFuteItem") {
                                priceZone.find('p.price_link').show();
                                priceZone.find('p.price_link').html('<a href="javascript:void(0);" class="prix_fute">PRIX FUTE</a>');
                            } else if (selectedSizeJson.Ofrs[0].PrmlPrTyps[i].DN == "PrixMiniItem") {
                                priceZone.find('p.price_link').show();
                                if (miniPdp.find('.hidShoppingPrix').val().toLowerCase() != "on") {
                                    priceZone.find('p.price_link').html('<a href="javascript:void(0);" class="prix_mini">PRIX MINI</a>');
                                } else {
                                    priceZone.find('p.price_link').html('<a href="javascript:void(0);" class="shopping_prix">Shopping <span>prix</span></a>');
                                }
                            } else if (selectedSizeJson.Ofrs[0].PrmlPrTyps[i].DN == "PageRougeItem") {
                                priceZone.find('p.price_link').show();
                                priceZone.find('p.price_link').html('<a href="javascript:void(0);" class="prix_rouge">PRIX ROUGE</a>');
                            } else if (selectedSizeJson.Ofrs[0].PrmlPrTyps[i].DN == "PageVerteItem") {
                                priceZone.find('p.price_link').show();
                                priceZone.find('p.price_link').html('<a href="javascript:void(0);" class="prix_vert">PRIX VERT</a>');
                            }
                        }
                    }
                }

                var salesStickerSrc = pictureRulesManager.GetSalesStickerForOfferType(prodJson.Products[0].Imgs, selectedSizeJson.Ofrs[0].OfrType);
                if (salesStickerSrc != '') {
                    miniPdp.find('.sales_sticker').attr('src', salesStickerSrc);
                    miniPdp.find('.sales_sticker').show();
                } else {
                    miniPdp.find('.sales_sticker').attr('src', '//media.laredoute.fr/images/spacer.gif');
                    miniPdp.find('.sales_sticker').hide();
                }



                //END of Price Management
                if (selectedSizeJson.Ofrs[0].VdrInfo.Id != 0) {
                    var VendorURL = '/Vendor/VendorDetails.aspx?vid=' + selectedSizeJson.Ofrs[0].VdrInfo.Id;
                    miniPdp.find('.vendor_display a').attr('href', 'javascript:OpenCenteredPopUpNoScrolls(\'' + VendorURL + '\', 510, 440);');
                    miniPdp.find('.vendor_display a').addClass('vendor_partner');
                } else {
                    miniPdp.find('.vendor_display a').attr('href', 'javascript:void(0);');
                    miniPdp.find('.vendor_display a').addClass('vendor_redoute');
                }
                miniPdp.find('.vendor_display a span').html(selectedSizeJson.Ofrs[0].VdrInfo.VName);
                miniPdp.find('.vendor_display').show();

                if (isNullOrUndefined(showPDPLink) || showPDPLink) {
                    var AlsoSoldByOtherVendorsAvailable = Array();
                    var index = 0;
                    for (i = 0; i < selectedSizeJson.OfrCnt; i++) {
                        if (selectedSizeJson.Ofrs[i].Stk.AvSt != 0) {
                            AlsoSoldByOtherVendorsAvailable[index] = selectedSizeJson.Ofrs[i];
                            index++;
                        }
                    }
                    if (AlsoSoldByOtherVendorsAvailable.length > 1) {
                        var soldBy = miniPdp.find('.AlsoSoldBy');
                        soldBy.unbind('click');
                        soldBy.bind('click', function (e) {
                            e.preventDefault(); e.stopPropagation(); try { setViewOtherVendorOmnitureTags(); } catch (ex) { }
                            var currentLink = $j(this);
                            var func = function () {
                                window.location.href = currentLink.attr('href');
                            }
                            setTimeout(func, 1000);
                        });
                        if (AlsoSoldByOtherVendorsAvailable.length > 2) {
                            soldBy.html('Vendu aussi par ' + (AlsoSoldByOtherVendorsAvailable.length - 1) + ' autres vendeurs à partir de <span>' + formatPrice(AlsoSoldByOtherVendorsAvailable[1].LiPr) + ' €</span>');
                        } else {
                            soldBy.html('Vendu aussi par un autre vendeur à <span>' + formatPrice(AlsoSoldByOtherVendorsAvailable[1].LiPr) + ' €</span>');
                        }
                        soldBy.show();
                    } else {
                        miniPdp.find('.AlsoSoldBy').hide();
                    }
                } else {
                    miniPdp.find('.AlsoSoldBy').hide();
                }
            } else {
                miniPdp.find('.vendor_display').hide();
                miniPdp.find('.AlsoSoldBy').hide();
                quantityField.attr('disabled', 'disabled');
                quantityField.val('1');
                //Stock Alert
                var stockAlt = miniPdp.find('.stock_alert');
                stockAlt.hide();


                var salesStickerSrc = pictureRulesManager.GetSalesStickerForOfferType(prodJson.Products[0].Imgs, minipdpBaseOfferType);
                if (salesStickerSrc != '') {
                    miniPdp.find('.sales_sticker').attr('src', salesStickerSrc);
                    miniPdp.find('.sales_sticker').show();
                } else {
                    miniPdp.find('.sales_sticker').attr('src', '//media.laredoute.fr/images/spacer.gif');
                    miniPdp.find('.sales_sticker').hide();
                }


                //Price Management
                var priceZone = miniPdp.find('.price_display');
                priceZone.find('.private_sales_original_price').hide();
                if (prodJson.Products[0].Prcs.DiMx == 0) {
                    priceZone.find('span.discount').html('');
                    priceZone.find('span.strike_price').html('');
                    if (prodJson.Products[0].Prcs.LiPrMi != 0) {
                        if (prodJson.Products[0].Prcs.LiPrMi != prodJson.Products[0].Prcs.LiPrMx) {
                            priceZone.find('div.price').html('<p>&agrave; partir de</p><p><strong>' + formatPrice(prodJson.Products[0].Prcs.LiPrMi) + ' €</strong></p>');
                        } else {
                            priceZone.find('div.price').html('<p><strong>' + formatPrice(prodJson.Products[0].Prcs.LiPrMi) + ' €</strong></p>');
                        }
                    }
                } else {
                    priceZone.find('span.discount').html('');
                    priceZone.find('span.strike_price').html('');
                    if (customerTarget != '4') {
                        if (prodJson.Products[0].Prcs.DiMi != prodJson.Products[0].Prcs.DiMx) {
                            priceZone.find('span.discount').html('jusqu\'à <span>-' + formatDiscount(prodJson.Products[0].Prcs.DiMx) + '%</span>');
                        } else {
                            priceZone.find('span.discount').html('<span>-' + formatDiscount(prodJson.Products[0].Prcs.DiMx) + '%</span>');
                        }
                        priceZone.find('span.strike_price').html(formatPrice(prodJson.Products[0].Prcs.PrLiPrMi) + ' €');
                    } else {
                        if (prodJson.Products[0].Prcs.PrLiPrMi != 0 && prodJson.Products[0].Prcs.PrLiPrMi != prodJson.Products[0].Prcs.LiPrMi) {
                            priceZone.find('.private_sales_original_price span').html(formatPrice(prodJson.Products[0].Prcs.PrLiPrMi) + ' €');
                            priceZone.find('.private_sales_original_price').show();
                        }
                    }
                    if (prodJson.Products[0].Prcs.LiPrMi != prodJson.Products[0].Prcs.LiPrMx) {
                        priceZone.find('div.price').html('<p>&agrave; partir de</p><p><strong>' + formatPrice(prodJson.Products[0].Prcs.LiPrMi) + ' €</strong></p>');
                    } else {
                        priceZone.find('div.price').html('<p><strong>' + formatPrice(prodJson.Products[0].Prcs.LiPrMi) + ' €</strong></p>');
                    }

                }
                if (!isNullOrUndefined(prodJson.Products[0].EnvCmpl) && prodJson.Products[0].EnvCmpl.FCpl == true) {//Eco part
                    priceZone.find('p.eco_part').html('+' + formatPrice(prodJson.Products[0].EnvCmpl.MnCplFe) + ' € d\'&eacute;co-participation');
                } else {
                    priceZone.find('p.eco_part').html('');
                }
                priceZone.find('p.price_link').html('');
                priceZone.find('p.price_link').hide();
                try {
                    if (isNullOrUndefined(showPDPLink) || showPDPLink) {
                        for (var i = 0; i < prodJson.Products[0].Vrnts[0].Vrnts[0].Ofrs[0].PrmlPrTyps.length; i++) {
                            if (prodJson.Products[0].Vrnts[0].Vrnts[0].Ofrs[0].PrmlPrTyps[i].DisPrmlPg == true) {
                                if (prodJson.Products[0].Vrnts[0].Vrnts[0].Ofrs[0].PrmlPrTyps[i].DN == "PrixFuteItem") {
                                    priceZone.find('p.price_link').show();
                                    priceZone.find('p.price_link').html('<a href="javascript:void(0);" class="prix_fute">PRIX FUTE</a>');
                                } else if (prodJson.Products[0].Vrnts[0].Vrnts[0].Ofrs[0].PrmlPrTyps[i].DN == "PrixMiniItem") {
                                    priceZone.find('p.price_link').show();
                                    if (miniPdp.find('.hidShoppingPrix').val().toLowerCase() != "on") {
                                        priceZone.find('p.price_link').html('<a href="javascript:popUp(\'/ProductDetail/pop-prix_mini.aspx\',200,798,778);" class="prix_mini">PRIX MINI</a>');
                                    } else {
                                        priceZone.find('p.price_link').html('<a href="javascript:popUp(\'/ProductDetail/pop-prix_shopping.aspx\',200,798,778);" class="shopping_prix">Shopping <span>prix</span></a>');
                                    }
                                } else if (prodJson.Products[0].Vrnts[0].Vrnts[0].Ofrs[0].PrmlPrTyps[i].DN == "PageRougeItem") {
                                    priceZone.find('p.price_link').show();
                                    priceZone.find('p.price_link').html('<a href="javascript:popUp(\'/ProductDetail/pop-prix_rouge.aspx\',200,798,778);" class="prix_rouge">PRIX ROUGE</a>');
                                } else if (prodJson.Products[0].Vrnts[0].Vrnts[0].Ofrs[0].PrmlPrTyps[i].DN == "PageVerteItem") {
                                    priceZone.find('p.price_link').show();
                                    priceZone.find('p.price_link').html('<a href="javascript:popUp(\'/ProductDetail/pop-prix_vert.aspx\',200,798,778);" class="prix_vert">PRIX VERT</a>');
                                }
                            }
                        }
                    } else {
                        for (var i = 0; i < prodJson.Products[0].Vrnts[0].Vrnts[0].Ofrs[0].PrmlPrTyps.length; i++) {
                            if (prodJson.Products[0].Vrnts[0].Vrnts[0].Ofrs[0].PrmlPrTyps[i].DisPrmlPg == true) {
                                if (prodJson.Products[0].Vrnts[0].Vrnts[0].Ofrs[0].PrmlPrTyps[i].DN == "PrixFuteItem") {
                                    priceZone.find('p.price_link').show();
                                    priceZone.find('p.price_link').html('<a href="javascript:void(0);" class="prix_fute">PRIX FUTE</a>');
                                } else if (prodJson.Products[0].Vrnts[0].Vrnts[0].Ofrs[0].PrmlPrTyps[i].DN == "PrixMiniItem") {
                                    priceZone.find('p.price_link').show();

                                    if (miniPdp.find('.hidShoppingPrix').val().toLowerCase() != "on") {
                                        priceZone.find('p.price_link').html('<a href="javascript:void(0);" class="prix_mini">PRIX MINI</a>');
                                    } else {
                                        priceZone.find('p.price_link').html('<a href="javascript:void(0);" class="shopping_prix">Shopping <span>prix</span></a>');
                                    }

                                } else if (prodJson.Products[0].Vrnts[0].Vrnts[0].Ofrs[0].PrmlPrTyps[i].DN == "PageRougeItem") {
                                    priceZone.find('p.price_link').show();
                                    priceZone.find('p.price_link').html('<a href="javascript:void(0);" class="prix_rouge">PRIX ROUGE</a>');
                                } else if (prodJson.Products[0].Vrnts[0].Vrnts[0].Ofrs[0].PrmlPrTyps[i].DN == "PageVerteItem") {
                                    priceZone.find('p.price_link').show();
                                    priceZone.find('p.price_link').html('<a href="javascript:void(0);" class="prix_vert">PRIX VERT</a>');
                                }
                            }
                        }
                    }
                } catch (ex) { }
                //END of Price Management 
            }
            ValidateMiniPDPForm();
        });
        //END of Size Change Event Binding
        colorSelect.trigger('change');

        miniPdp.show();
        var additionlvwimage = '';

        for (img in prodJson.Products[0].Vrnts[0].Imgs) {
            if (prodJson.Products[0].Vrnts[0].Imgs[img].Id == "mediumPict") {
                additionlvwimage = prodJson.Products[0].Vrnts[0].Imgs[img].FlNm; //72*72
                break;
            }
        }
        documentId = prodJson.Products[0].CatVerId;
        if (isNullOrUndefined(offerType)) offerType = "";
        if (isNullOrUndefined(customerTarget)) customerTarget = "";
        try {
            if (!isNullOrUndefined(setStickyBarCookie)) {
                setStickyBarCookie(productId, documentId, additionlvwimage, 'PVPR', 10, offerType, customerTarget)
            }
        } catch (e) { }


        $j('.vendor_display.mp_block a.vendor_partner').live('mouseover', function (e) {
            positionTop = $j(this).parent().position().top - 39;
            $j('.miniPdpBox .miniPdpBoxContent .product_info_block .info_bubble').css('top', positionTop + 'px').show();
        });
        $j('.vendor_display.mp_block a.vendor_partner').live('mouseout', function (e) {
            $j('.miniPdpBox .miniPdpBoxContent .product_info_block .info_bubble').hide();
        });
    }

    $j('.miniPdpBox').remove();

    var miniPdpBox = $j('<div class="miniPdpBox"><div class="miniPdpBoxOpacity"></div><div class="miniPdpBoxBorder"></div><div class="miniPdpBoxContent"><div class="waiting_box"><img src="//media.laredoute.fr/images/common/ajax-loader.gif" class="loader" /><p>Page en cours de chargement.</p><p>Veuillez patienter.</p></div></div><a href="javascript:void(0);" class="close">Fermer</a></div>');

    miniPdpBox.find('a.close').click(HideminiPdpBox);

    var scrollTop = $j(window).scrollTop();
    scrollTop += ($j(window).height() - 470) / 2;

    var leftPos = ($j(window).width() - 720) / 2;
    miniPdpBox.css({ top: scrollTop + 'px', left: leftPos + 'px', display: 'none' });

    miniPdpBox.appendTo($j('body'));

    miniPdpBox.fadeIn('slow');

    //LOADING CONTENT
    $j.ajax({
        type: 'GET',
        url: ajaxUrl,
        data: {},
        dataType: "text",
        success: onMiniPdpSuccess, //data
        error: onMiniPdpError,
        cache: true,
        async: setAsyncFalseForFF3x(),
        timeout: 16000
    });
};

function setAsyncFalseForFF3x() {
    var ver = true;
    var ua = $j.browser;
    if (ua.mozilla && ua.version.slice(0, 3) == "1.9") {
        ver = false;
    }
    return ver;
}

//This function opens the "Guide des tailles" pop up        
function OpenSizePopUp(id) {
    var xPos = (screen.width - 650) / 2;
    var yPos = (screen.height - 500) / 2;
    window.open("http://www.laredoute.fr/StaticPage/BlankContentPage.aspx?pagename=guide_tailles&category=" + id, '', "menubar=yes,status=no,width=650,height=500,scrollbars=yes,resizable=yes,left=" + xPos + ",top=" + yPos);
}

function setMiniPDPOmnitureTags(pos, numberpage, isCrossSell) {
    try {
        if (isNullOrUndefined(s)) return;

        /* first clear the values of the variable */
        if (s.eVar29 != null) {
            s.eVar29 = "";
        }
        if (s.eVar12 != null) {
            s.eVar12 = "";
        }
        if (s.eVar31 != null) {
            s.eVar31 = "";
        }
        if (s.eVar54 != null) {
            s.eVar54 = "";
        }
        if (s.eVar32 != null) {
            s.eVar32 = "";
        }
        if (s.eVar33 != null) {
            s.eVar33 = "";
        }
        if (s.eVar34 != null) {
            s.eVar34 = "";
        }
        if (s.prop12 != null) {
            s.prop12 = "";
        }
        if (s.eVar7 != null) {
            s.eVar7 = "";
        }
        if (s.eVar10 != null) {
            s.eVar10 = "";
        }
        if (s.pageType != null) {
            s.pageType = "";
        }
        if (s.prop49 != null) {
            s.prop49 = "";
        }
        if (s.prop48 != null) {
            s.prop48 = "";
        }
        if (s.prop23 != null) {
            s.prop23 = "";
        }
        if (s.products != null) {
            s.products = "";
        }
        if (s.events != null) {
            s.events = "";
        }
        if (s.prop6 != null) {
            s.prop6 = "";
        }
        if (s.prop7 != null) {
            s.prop7 = "";
        }
        if (s.prop8 != null) {
            s.prop8 = "";
        }
        if (s.prop9 != null) {
            s.prop9 = "";
        }
        if (s.prop31 != null) {
            s.prop31 = "";
        }
        if (s.prop54 != null) {
            s.prop54 = "";
        }
        if (s.prop32 != null) {
            s.prop32 = "";
        }
        if (s.prop33 != null) {
            s.prop33 = "";
        }
        if (s.prop34 != null) {
            s.prop34 = "";
        }
        if (s.prop35 != null) {
            s.prop35 = "";
        }
        if (s.prop37 != null) {
            s.prop37 = "";
        }
        if (s.prop55 != null) {
            s.prop55 = "";
        }
        /* Add the proper value for s.prop6,7,8,9*/
        if (MiniPDPOmnitureJson != null) {
            s.prop6 = MiniPDPOmnitureJson.categoryLevel1;
            s.prop7 = MiniPDPOmnitureJson.categoryLevel2;
            s.prop8 = MiniPDPOmnitureJson.categoryLevel3;
            s.prop9 = MiniPDPOmnitureJson.categoryLevel4;
            s.prop12 = MiniPDPOmnitureJson.shoppingTool;
            s.prop55 = MiniPDPOmnitureJson.vendorID;

            var eVar22eVar23Value = '|evar22=null|evar23=null';
            if (!isNullOrUndefined(pos) && !isNullOrUndefined(numberpage) && (isNullOrUndefined(isCrossSell) || isCrossSell != "1")) {
                eVar22eVar23Value = "|evar22=" + pos + "|evar23=" + numberpage;
            }

            var eVar41Value = "|eVar41=MiniPDP:" + OriginForMiniPDP;
            var virtualTool = ParseQueryString('virtualtool');
            if (!isNullOrUndefined(virtualTool)) {
                if (virtualTool.indexOf('module_ampm') != -1) {
                    eVar41Value = "|eVar41=MiniPDP:Module AMPM";
                    s.prop12 = virtualTool;
                }

                s.eVar29 = virtualTool;
            }

            if (MiniPDPOmnitureJson.isMultiOffer) {
                eVar41Value = "|eVar41=MiniPDP Multi-vendor:" + OriginForMiniPDP;
            }

            s.products = MiniPDPOmnitureJson.productString + eVar22eVar23Value + eVar41Value;

            if (IsVMProduct)
                s.events = MiniPDPOmnitureJson.miniPDPEvents + ",event43";
            else
                s.events = MiniPDPOmnitureJson.miniPDPEvents;
        }
        else {
            s.prop12 = '';
        }

        //TT17339
        SetMiniPDPExternalCampaignTags();
        if (OriginForMiniPDP == 'IPAD')
            s.pageName = "FR:RE:IPAD:PDT:Mini fiche produit";
        else
            s.pageName = "FR:RE:PDT:Mini fiche produit";

        s.channel = "PDT";

        s.tl(false, 'o', "FRMiniPDP");

        //This logic is done for PDP page only to avoid Overriding PDP Cross Sell Omniture setting (Overriden when ATB is called)
        //if (OriginForMiniPDP != 'Restock_Alert')
        if (OriginForMiniPDP != 'Restock_Alert' && isSearchResultProduct != 1 && OriginForMiniPDP != 'PLP')
            OriginForMiniPDP = PDPCrossSellOrigin;
    }
    catch (e) {
    }
}

function ReportMiniPDPTechnicalErrorsToOmniture(linkName) {
    try {
        if (isNullOrUndefined(s)) return;

        if (s.events != null) {
            s.events = "";
        }

        s.channel = "ERREUR";
        s.pageName = "FR:RE:ERREUR:Page inaccessible";
        s.pageType = "TechnicalError";
        s.linkTrackVars = "prop47,prop48,prop49";

        s.prop1 = "FR";
        s.prop2 = "Redcats FR";
        s.prop3 = "LaRedoute";
        s.prop4 = "";
        s.prop5 = "LaRedoute FR";
        s.eVar1 = "FR";
        s.eVar2 = "Redcats FR";
        s.eVar3 = "LaRedoute";
        s.eVar4 = "";
        s.eVar5 = "LaRedoute FR";

        s.prop47 = window.location.href;
        s.prop48 = 'MiniPDP_' + linkName;
        s.prop49 = 'TechnicalError';

        SetMiniPDPExternalCampaignTags();

        hpeventscookieval = GetCookie("OEvent1");
        if (hpeventscookieval != null && hpeventscookieval != "") {
            s.events = hpeventscookieval;
        }
        DeleteCookie("OEvent1");

        SetOmnitureForErrorReporting();

        s.tl(false, 'o', linkName);
    }
    catch (e) {
    }
}

function ReportMiniPDPProductNotFoundErrorsToOmniture(linkName) {
    //linkName = OkClick or AddToBasketClick	
    try {
        if (isNullOrUndefined(s)) return;

        var callingPage;
        var callFrom;

        /* first clear the values of the variable */
        if (s.prop48 != null) {
            s.prop48 = "";
        }

        if (s.prop49 != null) {
            s.prop49 = "";
        }

        if (s.events != null) {
            s.events = "";
        }

        /* Set the linkTrackVars and linkTrackEvents */
        s.linkTrackVars = "prop47,prop48,prop49";

        s.prop1 = "FR";
        s.prop2 = "Redcats FR";
        s.prop3 = "LaRedoute";
        s.prop4 = "";
        s.prop5 = "LaRedoute FR";
        s.eVar1 = "FR";
        s.eVar2 = "Redcats FR";
        s.eVar3 = "LaRedoute";
        s.eVar4 = "";
        s.eVar5 = "LaRedoute FR";
        s.channel = "DISPO_PDT";
        s.pageName = "FR:RE:DISPO_PDT:Article non disponible";

        s.prop47 = window.location.href;
        s.prop48 = 'MiniPDP_' + linkName; ;
        s.prop49 = "ProductNotFoundError";
        //TT17339
        SetMiniPDPExternalCampaignTags();
        hpeventscookieval = GetCookie("OEvent1");
        if (hpeventscookieval != null && hpeventscookieval != "") {
            s.events = hpeventscookieval;
        }
        DeleteCookie("OEvent1");

        SetOmnitureForErrorReporting();

        s.tl(false, 'o', linkName);
    }
    catch (e) {

    }
}

function updatePDPLinkWithSelectedColorSize(colorVal, sizeVal) {
    var miniPdp = $j('.MiniPDPAjaxContent');
    var qsForPDP = '';

    if (!isNullOrUndefined(pdpLinkCategoryid)) {
        qsForPDP = qsForPDP + "&categoryid=" + pdpLinkCategoryid;
    }
    if (!isNullOrUndefined(isAvailProdcut) && isAvailProdcut == true) {
        qsForPDP = qsForPDP + "&isavail=true";
    }
    if (!isNullOrUndefined(pdpLinkpos)) {
        qsForPDP = qsForPDP + "&pos=" + pdpLinkpos;
    }

    if (!isNullOrUndefined(pdpLinknumpage)) {
        qsForPDP = qsForPDP + "&numberpage=" + pdpLinknumpage;
    }

    var basePdpUrl = miniPdp.find('.hidPdpPath').val();
    if (!isNullOrUndefined(colorVal))
        prodcolor = colorVal;
    if (!isNullOrUndefined(sizeVal))
        prodsize = sizeVal;
    var pdpurl = sortQueryStringParamsMiniPDP(basePdpUrl + '&MiniPDPLinkClicked=picture&OriginMiniPDP=' + OriginForMiniPDP + qsForPDP + '&cssrc=' + CrossSellVal);
    miniPdp.find('.main_picture a').attr('href', sortQueryStringParamsMiniPDP(basePdpUrl + '&MiniPDPLinkClicked=picture&OriginMiniPDP=' + OriginForMiniPDP + qsForPDP + '&cssrc=' + CrossSellVal + "&secintref=" + prodsize + "&prodcolor=" + prodcolor)); //TT#14494 - querystring param visuel changed to picture
    miniPdp.find('.product_info_bottom a.go_to_pdp').attr('href', sortQueryStringParamsMiniPDP(basePdpUrl + '&MiniPDPLinkClicked=visuel&OriginMiniPDP=' + OriginForMiniPDP + qsForPDP + '&cssrc=' + CrossSellVal + "&secintref=" + prodsize + "&prodcolor=" + prodcolor));

    miniPdp.find('.product_info_block_text a.go_to_pdp').attr('href', sortQueryStringParamsMiniPDP(basePdpUrl + '&MiniPDPLinkClicked=detail&OriginMiniPDP=' + OriginForMiniPDP + qsForPDP + '&cssrc=' + CrossSellVal + "&secintref=" + prodsize + "&prodcolor=" + prodcolor));
    //set image altText.
    if (prodAltText != null) {
        miniPdp.find('.main_picture a img').attr('alt', $j.trim(prodAltText));
    }
    miniPdp.find('a.AlsoSoldBy').attr('href', sortQueryStringParamsMiniPDP(basePdpUrl + '&MiniPDPLinkClicked=othervendor&OriginMiniPDP=' + OriginForMiniPDP + qsForPDP + '&cssrc=' + CrossSellVal + "&secintref=" + prodsize + "&prodcolor=" + prodcolor + '&OfferTab=1'));
}

//Function to order querystring parameters
function sortQueryStringParamsMiniPDP(hrefUrl) {
    if (isNullOrUndefined(hrefUrl)) {
        return hrefUrl;
    }

    var lowerCasehrefUrl = hrefUrl.toLowerCase();
    var vars = [], hash;
    var hashes = lowerCasehrefUrl.slice(lowerCasehrefUrl.indexOf('?') + 1).split('&');
    var myQueryKeys = new Array();

    for (var i = 0; i < hashes.length; i++) {
        hash = hashes[i].split('=');
        if (!isNullOrUndefined(hash[1])) {
            vars.push(hash[0]);
            vars[hash[0]] = hash[1];
            myQueryKeys[i] = hash[0];
        }
    }

    myQueryKeys.sort();

    //If there is no productid or documentid in the url then return the same url
    if (isNullOrUndefined(vars['productid']) || isNullOrUndefined(vars['documentid'])) {
        return hrefUrl;
    }
    var hashString = '';
    var seoqueryString = lowerCasehrefUrl.slice(0, lowerCasehrefUrl.indexOf('?')) + '?productid=' + vars['productid'] + '&' + 'documentid=' + vars['documentid'];
    for (var i = 0; i < myQueryKeys.length; i++) {
        if (myQueryKeys[i] != 'productid' && myQueryKeys[i] != 'documentid') {
            switch (myQueryKeys[i]) {
                case 'pos':
                case 'numberpage':
                case 'minipdplinkclicked':
                case 'originminipdp':
                    if (hashString != '') { hashString += '&'; }
                    hashString += myQueryKeys[i] + '=' + vars[myQueryKeys[i]];
                    break;
                default:
                    seoqueryString = seoqueryString + '&' + myQueryKeys[i] + '=' + vars[myQueryKeys[i]];
                    break;
            }
        }
    }
    if (hashString != '') { seoqueryString += '#' + hashString; }
    return seoqueryString;
}

function OpenCenteredPopUpNoScrolls(url, width, height) {
    var xPos = (screen.width - width) / 2;
    var yPos = (screen.height - height) / 2;
    window.open(url, '', "menubar=no,status=no,width=" + width + ",height=" + height + ",resizable=yes,left=" + xPos + ",top=" + yPos);
}

function GetMediaImagePath3Level(fileName) {

    if (isNullOrUndefined(fileName)) {
        return '';
    }

    var miniPdp = $j('.MiniPDPAjaxContent');

    if (miniPdp.find('.flag3level').val() == "true") {
        if (fileName.length > 13) {
            if (!isNaN(fileName.substring(6, 7)) && !isNaN(fileName.substring(7, 8)) && !isNaN(fileName.substring(8, 9))) {
                return miniPdp.find('.hidImgPath3level').val() + '/' + fileName.substring(6, 7) + '/' + fileName.substring(7, 8) + '/' + fileName.substring(8, 9) + '/' + fileName;
            }
            else {
                return miniPdp.find('.hidImgPath3level').val() + '/' + fileName.substring(0, 1) + '/' + fileName;
            }
        }
        else {
            return miniPdp.find('.hidImgPath3level').val() + '/' + fileName.substring(0, 1) + '/' + fileName;
        }
    }
    else {
        return miniPdp.find('.hidImgPath').val() + '/' + fileName.substring(0, 1) + '/' + fileName;
    }
}

function SetMiniPDPExternalCampaignTags() {
    // External Campaign
    if (s.eVar35 != null) {
        s.eVar35 = "";
    }
    if (s.eVar36 != null) {
        s.eVar36 = "";
    }
    if (s.eVar37 != null) {
        s.eVar37 = "";
    }
    if (s.eVar38 != null) {
        s.eVar38 = "";
    }
    if (s.eVar39 != null) {
        s.eVar39 = "";
    }
    if (s.eVar24 != null) {
        s.eVar24 = "";
    }
    s.campaign = '';
}

function setOmniturePropAndEvents(productid, vendorid) {
    if (isNullOrUndefined(s)) return;
    var tempVendorId;
    var previousVendorId = null;
    var vendorName;

    if (s.products != null) {
        tempVendorId = (/eVar27=(.*?)\|/gi).exec(s.products);
    }

    if (tempVendorId && tempVendorId.length > 0) {
        previousVendorId = tempVendorId[1];
    }

    if (vendorid == "0") {
        vendorName = "RE";
    }
    else {
        vendorName = "MP";
    }

    if (!isNullOrUndefined(previousVendorId) && previousVendorId != vendorid) {
        s.linkTrackVars = "products,events,prop55"; s.linkTrackEvents = "event38";
        s.products = ";" + productid + ";;;;eVar27= |eVar28= ";
        s.events = "event38";
        s.prop55 = vendorid;
        s.tl(this, 'o', 'Multioffer link');
    }
}
function findIndexByKeyValue(obj, key, value) {
    for (var i = 0; i < obj.length; i++) {
        if (obj[i][key] == value) {
            return i;
        }
    }
    return null;
}
function getPictureURL(obj, key, value, order) {
    for (var i = 0; i < obj.length; i++) {
        if (obj[i][key] == value && obj[i]["Ord"] == order) {
            return obj[i]["URL"];
        }
    }
    return null;
}



//Final version 



//Restock Layer Popup control ////////////
var OfferId;
var categoryid;
var RSPageFrom;
var AlertPlaceValue;
var CategoryId;
var newEmailId;
var avaibilityCode;
function ShowRSAOrderLayer(page, ALertPlace) {
    RSPageFrom = page;
    AlertPlaceValue = ALertPlace;
    if (currentModalBoxContent == null) {
        var scrollTop = $j(window).scrollTop();
        var height = $j(window).height();
        var halfHeight = (height / 2);
        var width = $j(window).width();
        var halfWidth = (width / 2);
        var pos = { left: (halfWidth - 225), top: (halfHeight + scrollTop - 115), right: null, bottom: null };
        EmailId = GetSubCookieValue("M.R.Basket", "UserID");

        if ($j('.CustomeremailAddress').val().length != 0) {
            $j('.CustomeremailAddress').css('background', 'none');
        };
        if (ALertPlace == 04) {
            if (isNullOrUndefined(s)) return;
            var tempeVar7 = s.eVar7;
            var tempevents = s.events;
            var tempProducts = s.products;

            //clear the va;ues
            if (s.eVar7 != null) {
                s.eVar7 = "";
            }
           if (s.events != null) {
                s.events = "";
            }
            if (s.pageName != null) {
                s.pageName = "";
            }
            if (s.channel != null) {
                s.channel = "";
            }
            if (s.products != null) {
                s.products = "";
            }
            //Restock Omniture tags on basket
            s.channel = "AUTRE";
            s.pageName = "FR:RE:AUTRE:Layer_inscription_Restock_Alert_basket";
            s.tl(false, 'o', "RestockAlert");

            //Reset back from temp variables
            if (tempProducts != null) {
                s.products = tempProducts;
            }
            if (tempeVar7 != null) {
                s.eVar7 = tempeVar7;
            }
            if (tempevents != null) {
                s.events = tempevents;
            }
            
        }
        if (ALertPlace == 03) {
            if (isNullOrUndefined(s)) return;
            if (s.pageName != null) {
                s.pageName = "";
            }
            if (s.channel != null) {
                s.channel = "";
            }
            //Restock Omniture tags on Directorder
            s.pageName = "FR:RE:AUTRE:Layer_inscription_Restock_Alert_DirectOrder";
            s.channel = "AUTRE";
            s.tl(false, 'o', "RestockAlert");
            
        }
        if (ALertPlace == 05) {
            if (isNullOrUndefined(s)) return;
            if (s.pageName != null) {
                s.pageName = "";
            }
            if (s.channel != null) {
                s.channel = "";
            }
            //Restock Omniture tags order detail
            s.pageName = "FR:RE:AUTRE:Layer_inscription_Restock_Alert_OrderDetailPage";
            s.channel = "AUTRE";
            s.tl(false, 'o', "RestockAlert");

        }
       
        if (ALertPlace == '03') {
             ShowNewBlockingModalBox('RSAOrderLayer', pos, function () { NOAlert(RSPageFrom); });

        }
        else {
            ShowNewBlockingModalBox('RSAOrderLayer', pos);
        }
    }
}

function setItemofferid(itemofferid,CtgoryId,aviablecode) {
    OfferId = itemofferid;
    CategoryId = CtgoryId;
    if (aviablecode != null || aviablecode != undefined) {
        avaibilityCode = aviablecode;
    }
       
}

function ShowRSAThxLayer() {
     if (currentModalBoxContent == null) {
        var scrollTop = $j(window).scrollTop();
        var height = $j(window).height();
        var halfHeight = (height / 2);
        var width = $j(window).width();
        var halfWidth = (width / 2);
        var pos = { left: (halfWidth - 292), top: (halfHeight + scrollTop - 190), right: null, bottom: null };
        ShowNewBlockingModalBox('RSAThxLayer', pos);
    }
}



function ShowRSADefaultLayer(page, ALertPlace) {
    RSPageFrom = page;
    AlertPlaceValue = ALertPlace;
    if (currentModalBoxContent == null) {
        var scrollTop = $j(window).scrollTop();
        var height = $j(window).height();
        var halfHeight = (height / 2);
        var width = $j(window).width();
        var halfWidth = (width / 2);
        var pos = { left: (halfWidth - 245), top: (halfHeight + scrollTop - 93), right: null, bottom: null };

        var EmailId = GetSubCookieValue("M.R.Basket", "UserID");
        if (EmailId != null) {
            $j('input.RSACustomeremailAddress').val(EmailId);
        }
        else {
            var newEmailId = $j('input.RSACustomeremailAddress').val();
            if (newEmailId != undefined && newEmailId != "") {
                $j('input.RSACustomeremailAddress').val(newEmailId);
            }
        }
      

        if (ALertPlace == 02 || ALertPlace == 01) {
            if (isNullOrUndefined(s)) return;

            //Temp variables to store current s variables which are cleared for Restock layer.
            var tempprop8 = s.prop8;
            var tempprop6 = s.prop6;
            var tempprop9 = s.prop9;
            var tempprop7 = s.prop7;
            var tempprop12 = s.prop12;
            var tempProducts = s.products;
            var tempevents = s.events;

            //clear the va;ues
            if (s.prop6 != null) {
                s.prop6 = "";
            }
            if (s.prop7 != null) {
                s.prop7 = "";
            }
            if (s.eVar7 != null) {
                s.eVar7 = "";
            }
            if (s.prop8 != null) {
                s.prop8 = "";
            }
            if (s.prop9 != null) {
                s.prop9 = "";
            }
            if (s.prop12 != null) {
                s.prop12 = "";
            }
            if (s.events != null) {
                s.events = "";
            }
            if (s.products != null) {
                s.products = "";
            }
            if (s.pageName != null) {
                s.pageName = "";
            }
            if (s.channel != null) {
                s.channel = "";
            }
            //Restock Omniture tags on PDP and MIniPDP       
            s.pageName = "FR:RE:AUTRE:Layer_inscription_Restock_Alert_pdp";
            if (RSPageFrom == "VM")
                s.pageName = "FR:RE:AUTRE:Layer_inscription_Restock_Alert_mannequin_Virtuel";
            s.channel = "AUTRE";
            //17339
            SetReStockExternalCampaignTags()
            s.tl(false, 'o', "RestockAlert");


            //Reset back from temp variables
            if (tempprop6 != null) {
                s.prop6 = tempprop6;
            }
            if (tempprop7 != null) {
                s.prop7 = tempprop7;
            }
            if (tempprop8 != null) {
                s.prop8 = tempprop8;
            }
            if (tempprop9 != null) {
                s.prop9 = tempprop9;
            }
            if (tempprop12 != null) {
                s.prop12 = tempprop12;
            }
            if (tempProducts != null) {
                s.products = tempProducts;
            }           
            if (tempevents != null) {
                s.events = tempevents;
            }
        }
        
            ShowNewBlockingModalBox('RSADefaultLayer', pos);
        
    }
}
/////////////////////////////////////////////////////////////////////////

//when we click on the fermer button or the layer is closed 
// if called from basket , call     DeleteSelectedLineItems(); 
// if called from  direct order call     ConfirmRowDeleting();

function NOAlert(PageCallFrom) {
   
   if (PageCallFrom == 'basket' || RSPageFrom =='basket') {
        $j('input.yesButtonClicked').val("true");
         DeleteSelectedLineItems();
     }
     else if (PageCallFrom == 'OD' || RSPageFrom == 'OD') {
         $j('input.yesButtonClicked').val("true");
         $j('input.noButtonClicked').val("true");
         $j('.cancel_bottom').trigger('click');     
    }
    else {
        $j('input.YesHiddenButton').val("true");
          ConfirmRowDeleting();
    }


}


//click on the ok button from the confirmation layer 
//pass proper alertPlace  "01" - pdp , "02" - minidpd , "03" - directorder ,"04"- basket , "05" -- order detail. 
function ConfirmAlert() {
    
     // var newEmailId;
    if (AlertPlaceValue == '03' || AlertPlaceValue =='04' || AlertPlaceValue =='05') {
         newEmailId = $j('input.CustomeremailAddress').val();
    }

     else {
         if (AlertPlaceValue == '01' || AlertPlaceValue == '02') {
             newEmailId = $j('input.RSACustomeremailAddress').val();
         
         }
    }
    if (newEmailId == "") {
        ErrorMessage(newEmailId, AlertPlaceValue, RSPageFrom);
    }
    else {
        var EmailId = GetSubCookieValue("M.R.Basket", "UserID");
        if (validateEmail(newEmailId)) {
            if (newEmailId == EmailId) {
                GetRestockAlertResponseFromAPI(EmailId, AlertPlaceValue);
            }
            else {
                GetRestockAlertResponseFromAPI(newEmailId, AlertPlaceValue);
            }
        }
        else {

            ErrorMessage(newEmailId, AlertPlaceValue, RSPageFrom);
        }
    }
    
  }

  function ErrorMessage(newEmailId, AlertPlaceValue, RSPageFrom) {
      $j('div.error').addClass('errorActive');
      $j('p.ErrorMessage').html('Cette adresse n\'existe pas ou est incorrecte.<br /> Merci de saisir une adresse e-mail valide.');
      $j('input.RSACustomeremailAddress').val(newEmailId);
      if (AlertPlaceValue == '01' || AlertPlaceValue == '02') {
          ShowRSADefaultLayer(RSPageFrom, AlertPlaceValue);
      }
      else {
          ShowRSAOrderLayer(RSPageFrom, AlertPlaceValue);
      }
  }

  function GetRestockAlertResponseFromAPI(EmailId, AlertPlace) {
      
    var url = "/RestockAlert/SendRestockAlertEmail.aspx";
    var CustomerId = GetSubCookieValue("M.R.User", "CustNmbr");
    if (CustomerId == undefined || CustomerId == "") {
        CustomerId = "";
    }
    $j.ajax({
        type: 'GET',
        url:url,
        data: {
            CustomerId: CustomerId,
            EmailId: EmailId,
            AlertPlace: AlertPlace,
            OfferId: OfferId,
            CategoryId: CategoryId
   
        },
        dataType: "json",
        timeout: (500000),
        success: onSuccessRA,
        error: onErrorRA,
        cache: false,
        async: false
    });

}


function onErrorRA(response) {
    return false;
}


// if the response is from basket , call     DeleteSelectedLineItems(); 
// if the response is from the direct order call     ConfirmRowDeleting();
// the logic is different than rest of the page  , please implement it properly.
function onSuccessRA(response) {
     //if no response from ajax call
    if (isNullOrUndefined(response)) {
        window.location.href = c_techErrorUrl;
        return;
    }
    else if (response.Status == 'WARNING') {
        $j('div.error').addClass('errorActive');
        $j('p.ErrorMessage').html(response.ReturnCode);
        ShowRSADefaultLayer(RSPageFrom, AlertPlaceValue);
    }
    if (response.Status == 'SUCCESS') {
        if (RSPageFrom == 'basket') {
            $j('input.yesButtonClicked').val("true");
            $j('input.IsDeleteBasket').val("true");
            HideNewModalBox();
            var EmailId = GetSubCookieValue("M.R.Basket", "UserID");
            if (newEmailId == EmailId) {
                CustomerLoggedMsg(EmailId);
            }
            else {
                CustomerNotLoggedMsg(newEmailId);
           }
            //ShowRSAThxLayer();
            BindRSProdSubLayer(response);


        }
        else if (RSPageFrom == 'DirectOrder') {
            $j('input.IsDeleteDO').val("false");
            HideNewModalBox();
            $j('input.YesHiddenButton').val("true");
            ConfirmRowDeleting();
            var EmailId = GetSubCookieValue("M.R.Basket", "UserID");
            if (newEmailId == EmailId) {
                CustomerLoggedMsg(EmailId);
            }
            else {
                CustomerNotLoggedMsg(newEmailId);
            }
            BindRSProdSubLayer(response);

        }
        if (AlertPlaceValue == '01' || AlertPlaceValue == '02' || AlertPlaceValue == '05') {
            $j('input.yesButtonClicked').val("true");
            $j('input.IsDeleteOD').val("true");
            HideNewModalBox();
            $j('input.IsDeleteOD').val("false");
            var EmailId = GetSubCookieValue("M.R.Basket", "UserID");
            if (newEmailId == EmailId) {
                // check for out of stock or backorder avaibilityCode
                if (avaibilityCode == 3) {
                    $j('#RSAThxLayer #stock').attr('style', 'display:inline');
                    $j('#RSAThxLayer #h24').attr('style', 'display:none');
                }
                if (avaibilityCode == 2) {
                    $j('#RSAThxLayer #stock').attr('style', 'display:none');
                    $j('#RSAThxLayer #h24').attr('style', 'display:inline');
                }
                CustomerLoggedMsg(EmailId); 
            }
            else {
                CustomerNotLoggedMsg(newEmailId);
            }
           // ShowRSAThxLayer();
            BindRSProdSubLayer(response);
        }
    }
}


function CustomerLoggedMsg(CustomerEmail) {
    $j('.logged #LoggedInCustomer').text(CustomerEmail);
    $j('.notLogged #NotLoggedInCustomer').text(CustomerEmail);
    $j('#RSAThxLayer .notLogged').attr('style', 'display:none');
    $j('#RSAThxLayer .logged').attr('style', 'display:block');
    if (isNullOrUndefined(s)) return;
    var tempprop6 = s.prop6;
    var tempprop7 = s.prop7;
    var tempprop8 = s.prop8;
    var tempProducts = s.products;
    var tempevents = s.events;

    //clear the va;ues
    if (s.prop6 != null) {
        s.prop6 = "";
    }
    if (s.prop7 != null) {
        s.prop7 = "";
    }
    if (s.eVar7 != null) {
        s.eVar7 = "";
    }
    if (s.prop8 != null) {
        s.prop8 = "";
    }
    if (s.events != null) {
        s.events = "";
    }
    if (s.products != null) {
        s.products = "";
    }
    s.pageName = "FR:RE:AUTRE:Layer_confirmation_inscription_Restock_Alert_Logged";
    s.channel = "AUTRE";
    //17339
    SetReStockExternalCampaignTags();
    s.tl(false, 'o', "RestockAlert");

    if (tempprop6 != null) {
        s.prop6 = tempprop6;
    }
    if (tempprop7 != null) {
        s.prop7 = tempprop7;
    }
    if (tempprop8 != null) {
        s.prop8 = tempprop8;
    }
    if (tempProducts != null) {
        s.products = tempProducts;
    }
    if (tempevents != null) {
        s.events = tempevents;
    }
}

function CustomerNotLoggedMsg(NewCustomerEmail) {
    $j('.logged #LoggedInCustomer').text(NewCustomerEmail);
    $j('.notLogged #NotLoggedInCustomer').text(NewCustomerEmail);
    $j('#RSAThxLayer .notLogged').attr('style', 'display:inline');
    $j('#RSAThxLayer .logged').attr('style', 'display:none');
    if (isNullOrUndefined(s)) return;
    
    var tempprop6 = s.prop6;
    var tempprop7 = s.prop7;
    var tempprop8 = s.prop8;
    var tempProducts = s.products;
    var tempevents = s.events;

    //clear the va;ues
    if (s.prop6 != null) {
        s.prop6 = "";
    }
    if (s.eVar7 != null) {
        s.eVar7 = "";
    }
    if (s.prop7 != null) {
        s.prop7 = "";
    }
    if (s.prop8 != null) {
        s.prop8 = "";
    }
    if (s.events != null) {
        s.events = "";
    }
    if (s.products != null) {
        s.products = "";
    }
    s.pageName = "FR:RE:AUTRE:Layer_confirmation_inscription_Restock_Alert_Non_Logged";
    s.channel = "AUTRE";
    //17339
    SetReStockExternalCampaignTags()
    s.tl(false, 'o', "RestockAlert");


    if (tempprop6 != null) {
        s.prop6 = tempprop6;
    }
    if (tempprop7 != null) {
        s.prop7 = tempprop7;
    }
    if (tempprop8 != null) {
        s.prop8 = tempprop8;
    }
    if (tempProducts != null) {
        s.products = tempProducts;
    }
    if (tempevents != null) {
        s.events = tempevents;
    }
}



function BindRSProdSubLayer(data) {
      if (data != null && data.PushProducts != null) {
        
        pushProducts = data.PushProducts;

        $j("#RSAThxLayer .associated_products_block").html(pushProducts);
        $j("#RSAThxLayer .associated_products_block").show();
        ShowRSAThxLayer();
        $j('#RSAThxLayer .associated_products .quick_view_overlay,#RSAThxLayer .associated_products .quick_view_overlay_button').remove();
        $j('#RSAThxLayer .associated_products .product_picture').addMiniPDPOnPush('Restock_Alert');
    }
    else {
        $j("#RSAThxLayer .associated_products_block").hide();
        ShowRSAThxLayer();
    }
    
   // setPDPSubstitutionLayerOmnitureTags(data.OmnitureSUBLJSON);
}

     function ShowPSLayer() {
           if (currentModalBoxContent == null) {
               var scrollTop = $j(window).scrollTop();
               var rightPosition = ($j(window).width() - 982) / 2;
               var pos = { left: null, top: (scrollTop + 120), right: (168 + rightPosition), bottom: null };
               ShowNewModalBox('RSAThxLayer', pos, null, null, false);
           }
       };


//function to validate email 
function validateEmail(txtEmail) {
    var filter =  /^[a-zA-Z0-9]+[a-zA-Z0-9_.-]+[a-zA-Z0-9_-]+@[a-z0-9-]+(\.[a-z0-9-]+)*\.([a-z]{2,4})$/;
    if (filter.test(txtEmail)) {
        return true;
    }
    else {
        return false;
    }
}
function SetReStockExternalCampaignTags() {
    // External Campaign
    if (s.eVar35 != null) {
        s.eVar35 = "";
    }
    if (s.eVar36 != null) {
        s.eVar36 = "";
    }
    if (s.eVar37 != null) {
        s.eVar37 = "";
    }
    if (s.eVar38 != null) {
        s.eVar38 = "";
    }
    if (s.eVar39 != null) {
        s.eVar39 = "";
    }
    if (s.eVar24 != null) {
        s.eVar24 = "";
    }
    s.campaign = '';
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	FILE:	atb.jquery.js
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
var isDO = false;

var EnumAddToBasketCallingPage = {
    Default: 'Default',
    PDP: 'ProductDetailPage',
    MPD: 'MultiProductDetailPage',
    ListPageCompResult: 'ComparisionResultPage',
    DirectOrder: 'DirectOrder',
    MiniPDP: 'MiniPDP',
    Basket: 'Basket',
    BasketProposedService: 'BasketProposedService',
    Wishlist: 'Wishlist'
};

var EnumAddToWishListCallingPage = {
    Default: 'Default',
    PDP: 'ProductDetailPage',
    MPD: 'MultiProductDetailPage',
    MiniPDP: 'MiniPDP',
    WishList: 'WishList'
};

var AddToBasketCallingPage = EnumAddToBasketCallingPage.Default;

var AddToWishListCallingPage = EnumAddToWishListCallingPage.Default;
var isSearchResultProduct = 0;
toNumber = function (val) {
    return parseInt(parseFloat(replaceCommaWithPeriod(val)));
};

replaceCommaWithPeriod = function (val) {
    var retString = '';
    if (isNullOrUndefined(val)) return '';
    var strVal = new String(val);
    var num_array = strVal.split(',');
    if (1 == num_array.length) return strVal;
    for (var index = 0, tot = (num_array.length - 1); index < tot; index++) {
        retString = retString + num_array[index];
    }
    retString = retString + "." + num_array[num_array.length - 1];
    return retString;
};

function toFloat(val) {
    if (val == null || typeof val == 'undefined') return 0;
    return parseFloat(replaceCommaWithPeriod(val));
}

function toBoolean(val) {
    if (val == null || typeof val == 'undefined') return false;
    return val.toLowerCase() == "true";
}


var c_serviceSizeCode = '99999';

//Add condition to check for the current basket page if it is new use new checkout urls.

var c_atbUrl = '/Shopping_Basket/AjaxAddToBasket.aspx';
var c_basketURL = "/Panier/Basket.aspx";
var c_atwlUrl = '/WishList/AjaxAddToWishList.aspx';
var c_addMode = 'add';
var c_updateMode = 'update';
var c_deleteMode = 'delete';
var c_setlowstockflag = 'setlowstockflag';
var c_getServicesQS = '?getServicesForProducts=true';
var c_getServicesFalseQS = '?getServicesForProducts=false';
var c_atbQS = '?addToBasket=true';
var c_atwlQS = '?addToWishList=true';
var c_sslayerQS = '?showSubLayer=true';
var c_getPushProductQS = '&getPushProducts=true';
var c_modifyQS = '?modifyBasket=true&lineItemId=';
var c_modifyWLQS = '?modifyWishList=true&lineItemId=';
var c_deleteQS = '?deleteBasket=true&lineItemId=';
var c_setlowstockflagQS = '?setlowstockflagWishList=true&lowstockflag=';
var c_deleteWLQS = '?deleteWishList=true&lineItemId=';
var c_deleteWLCountQA = '&totalwllineitemcount=';
var c_wishlistURL = "/MySpace/Wishlist.aspx";
var c_techErrorUrl = "/Error_Pages/Error404_technical_error.aspx";

var productsToAdd = null;
var services = null;
var pushProducts = null;
var currentOptions = null;
var currentIsEcoPart = null;
var TotalWLItemsCount = 0;
var isAvailProdcut = false;
var availRequestsJSON = null;

var modeOfOperation = null;
var productsToReportToAvail = null; 

function GenericATBError(showAlert) {
    if (!isNullOrUndefined(showAlert) && showAlert) {
        alert("Une erreur est survenue durant l'ajout au panier.");
    }
    return false;
}

function ValidateFRProductArray(frProducts, showAlert) {
    if (isNullOrUndefined(frProducts) || (frProducts.length <= 0)) {
        return GenericATBError(showAlert);
    }

    for (var j = 0; j < frProducts.length; j++) {
        if (!isNullOrUndefined(frProducts[j].SoldByMeter) && (frProducts[j].SoldByMeter.toString().toLowerCase() == "true")) {
            if (frProducts[j].Quantity > 15) {
                if (!isNullOrUndefined(showAlert) && showAlert) {
                    alert("Veuillez saisir une quantit\351 num\351rique inf\351rieure \340 1000.");
                }
                return false;
            }
        }
        else {
            if (frProducts[j].Quantity > 1500) {
                if (!isNullOrUndefined(showAlert) && showAlert) {
                    alert("Veuillez saisir une quantit\351 num\351rique inf\351rieure \340 200.");
                }
                return false;
            }
        }
    }

    return true;
}

function ATBIsSKUAvailable(size_json, showAlert) {
    if (isNullOrUndefined(size_json)) {
        if (!isNullOrUndefined(showAlert) && showAlert) {
            alert("Une produit n’est pas disponible pour cette taille ou ce coloris.");
        }
        return false;
    }

    if (size_json.AVCD == "1" || size_json.AVCD == "2") {
        return true;
    }

    if (!isNullOrUndefined(showAlert) && showAlert) {
        alert("Une produit n’est pas disponible pour cette taille ou ce coloris.");
    }
    return false;
}


function ATBGetServices(size_json, frProd) {
    if (isNullOrUndefined(size_json) || isNullOrUndefined(frProd) || isNullOrUndefined(size_json.Services) || (size_json.Services.length <= 0)) {
        return null;
    }
    var services = JSONQuery("[?SType=3]", size_json.Services);

    if (isNullOrUndefined(services) || (services.length <= 0)) {
        return null;
    }


    var ATBServices = null;
    var tempArr = new Array();
    ATBServices = $j.extend(true, tempArr, services);

    if (isNullOrUndefined(ATBServices) || (ATBServices.length <= 0)) {
        return null;
    }

    for (var j = 0; j < ATBServices.length; j++) {
        ATBServices[j].MainProductGUID = frProd.LineItemGUID;
    }

    return ATBServices;
}

function ATBGetProductDetailsJSON(productId, documentId, productJSONList) {
    if (isNullOrUndefined(productId) || isNullOrUndefined(documentId) || isNullOrUndefined(productJSONList)) {
        return null;
    }

    var prod_json_array;

    prod_json_array = JSONQuery("[?PIDDID='" + productId + documentId + "']", productJSONList);

    if (isNullOrUndefined(prod_json_array)) {
        return null;
    }

    var prod_details_json = prod_json_array[0].Details;
    if (isNullOrUndefined(prod_details_json)) {
        return null;
    }

    return prod_details_json;
}

function ATBGetColorJSON(prod_details_json, firstDimRef, bIntRef) {
    if (isNullOrUndefined(prod_details_json) || isNullOrUndefined(firstDimRef)) {
        return null;
    }

    var color_json_array;

    color_json_array = JSONQuery("[?IREF='" + firstDimRef + "']", prod_details_json.COLORS);

    if (isNullOrUndefined(color_json_array)) {
        return null;
    }

    if (color_json_array.length != 1) {
        return null;
    }

    var color_json = color_json_array[0];
    if (isNullOrUndefined(color_json)) {
        return null;
    }

    return color_json;
}

function ATBGetSizeJSON(color_json, secDimRef, bIntRef) {
    if (isNullOrUndefined(color_json) || isNullOrUndefined(secDimRef)) {
        return null;
    }
    var size_json_array;
    size_json_array = JSONQuery("[?SIREF='" + secDimRef + "']", color_json.SDIM);

    if (isNullOrUndefined(size_json_array)) {
        return null;
    }

    if (size_json_array.length != 1) {
        return null;
    }

    var size_json = size_json_array[0];
    if (isNullOrUndefined(size_json)) {
        return null;
    }

    return size_json;
}


function FRProduct(quantity, personalization, prod_details_json, color_json, size_json, categoryName) {
    if (isNullOrUndefined(quantity) || isNullOrUndefined(personalization) || isNullOrUndefined(prod_details_json) || isNullOrUndefined(color_json) || isNullOrUndefined(size_json)) {
        return null;
    }

    if (isNaN(quantity) || toNumber(quantity) < 1) {
        return null;
    }

    var atbLayerProdImage = color_json.SmallPict;
    if ($j.trim(atbLayerProdImage) == "") {
        atbLayerProdImage = color_json.BigPict;
    }
    this.InternalReference = color_json.IREF;
    this.SecInternalReference = size_json.SIREF;
    this.ItemOfferId = size_json.OID;

    this.Title = prod_details_json.TITL;
    this.ProductId = prod_details_json.PID;
    this.DocumentId = prod_details_json.DID;
    this.CategoryId = prod_details_json.CID;
    this.PresCode = color_json.PZ;
    this.SizeCode = size_json.HSZ;
    this.CategoryName = categoryName;

    this.Origin = "1";
    this.AssociatedItemId = "0";
    this.Price = replaceCommaWithPeriod(size_json.SPAS);
    this.UnitPrice = replaceCommaWithPeriod(size_json.UNPR);
    this.Personalization = personalization;
    this.ColorText = color_json.CNM;
    this.SizeText = size_json.TXT;
    this.HasAssociatedService = size_json.ISAS.toLowerCase();


    this.CkgCode = "0";
    this.CkgPrice = "0";
    this.IsEcoPart = toBoolean(size_json.D3EF) ? "true" : "false";

    this.Quantity = quantity;
    this.Discount = size_json.DSAM;
    this.NoReductBrand = size_json.SNRB.toLowerCase();
    this.StrikePrice = replaceCommaWithPeriod(size_json.STPR);
    this.ParentLineItemGUID = "";
    this.LineItemGUID = generateGuid();
    this.Description = atbLayerProdImage;
    this.CustomerTarget = 0;
    if (prod_details_json.Vdrinfo != null) {
        this.VendorId = prod_details_json.Vdrinfo.Id;
        this.isMarketPlaceProduct = prod_details_json.Vdrinfo.IsMktpr
        this.VendorName = prod_details_json.Vdrinfo.Vn;
    }

}

function ATBServiceToFRProduct(service, frProd) {
    if (isNullOrUndefined(service) || isNullOrUndefined(frProd)) {
        return null;
    }

    var prod = new FRProduct();
    if (isNullOrUndefined(prod)) {
        return null;
    }

    prod.PresCode = service.PZ;
    prod.SizeCode = c_serviceSizeCode;
    prod.Price = toFloat(service.Price);
    prod.ItemOfferId = service.OID;
    prod.Title = service.Desc;
    prod.Description = service.Img;
    prod.ParentLineItemGUID = frProd.LineItemGUID;
    prod.LineItemGUID = generateGuid();


    if (!isNullOrUndefined(frProd.SoldByMeter) && (frProd.SoldByMeter.toString().toLowerCase() == "true")) {
        prod.Quantity = 1;
    }
    else {
        prod.Quantity = frProd.Quantity;
    }
    prod.CustomerTarget = 0;
    return prod;
}

//Function to call to add products to the basket (or modify)
//productList : list of FRProduct object to add to the basket (products or services)
//options : var options={"mode":c_addMode,"forceCallingServices":false,"callPushProduct":false};
// -> mode : add/update/delete
// -> forceCallingServices : true/false to call MainframeAPI
// -> callPushProduct : true/false to call push product api instead of using parameters
//serviceList : list of services in case of showing service layer
//pushList : list of push products items to show in confirmation layer
//miniPdpObject : mini pdp that call the function (in case of MPDP)
//lineItemId : LineItemId of the product to modify
var blockATBActions = false;
var isServicesCall = false;
function AddToBasket(productList, options, serviceList, pushList, miniPdpObject, lineItemId, excludedAvailProducts) {
    if (blockATBActions == true) { return; }
    blockATBActions = true;
    productsToAdd = productList;
    currentOptions = options;
    pushProducts = pushList;
    modeOfOperation = options.mode;
    productsToReportToAvail = productList; 

    if (isNullOrUndefined(productsToAdd) || (currentOptions.mode != c_addMode && currentOptions.mode != c_updateMode && currentOptions.mode != c_deleteMode)) {
        ErrorDisplay("Une erreur est survenue durant l'ajout au panier.");
        blockATBActions = false;
        return;
    }
    if (options.forceCallingServices == true) {
        var url = c_getServicesQS;
        var onSuccess = function (data) {
            isServicesCall = false;

            if (data.StatusString == "KO") { ATB_Error(data.ErrorMessage, data.ErrorUrl); blockATBActions = false; return; }
            services = data.Services;
            if (options.mode == c_addMode) {
                var showServicesLayer = true;

                //verifying if showing services layer is needed
                for (product in productList) {
                    if (productList[product].ParentLineItemGUID != null && productList[product].ParentLineItemGUID != '') {
                        showServicesLayer = false;
                        break;
                    }
                }

                if (showServicesLayer && !isNullOrUndefined(services) && (services.length > 0)) {

                    if (AddToBasketCallingPage == EnumAddToBasketCallingPage.MiniPDP) {
                        $j('.miniPdpBox').remove();
                    }
                    BindServicesLayer(productList, services);
                    ShowServicesLayer(); blockATBActions = false;
                } else {
                    var url = c_atbQS;

                    if (options.callPushProduct == true && pushProducts == null) {
                        url += c_getPushProductQS;
                    }
                    if (!isNullOrUndefined(excludedAvailProducts)) {
                        url += '&availExclude=' + excludedAvailProducts;
                    }
                    var onSuccess = function (data) {
                        if (data.StatusString == "KO") { ATB_Error(data.ErrorMessage, data.ErrorUrl); blockATBActions = false; return; }
                        if (options.callPushProduct == true && pushProducts == null) {
                            pushProducts = data.PushProducts;
                        }

                        services = null;

                        if (AddToBasketCallingPage == EnumAddToBasketCallingPage.Basket) {//Basket Case
                            UpdateBasketCount();
                            blockATBActions = false;
                            showModal(defaultContent);
                            GoToBasket();
                            return true;
                        }
                        else if (AddToBasketCallingPage == EnumAddToBasketCallingPage.BasketProposedService) {//Basket Proposed Services Case
                            UpdateBasketCount();
                            blockATBActions = false;
                            //showModal(defaultContent);

                            //GoToBasket();
                            if (!isNullOrUndefined(lineItemId)) {
                                GoToSpecificBasketItem(lineItemId);
                            }
                            else {
                                GoToBasket();
                            }

                            return true;
                        }

                        else if (!isNullOrUndefined(isDO) && isDO) {//DO Case
                            UpdateBasketCount(); blockATBActions = false; showModal(defaultContent);
                            GoToBasket();
                            return true;
                        } else {

                            if (AddToBasketCallingPage == EnumAddToBasketCallingPage.MiniPDP) {
                                $j('.miniPdpBox').remove();
                            }

                            if (AddToBasketCallingPage == EnumAddToBasketCallingPage.Wishlist) {
                                showModal(defaultContent);
                                GoToBasket();
                                return true;
                            }
                            UpdateBasketCount();
                            BindATBLayer(productsToAdd);
                            ShowATBLayer();

                            //Binding MiniPDP on ATB Push
                            $j('#ATBLayer .associated_products .quick_view_overlay,#ATBLayer .associated_products .quick_view_overlay_button').remove();

                            $j('#ATBLayer .associated_products .product_picture').addMiniPDPOnPush('Cross sell ATB');

                            productsToAdd = null; services = null; pushProducts = null; currentOptions = null; blockATBActions = false;
                        }
                        setAddToBasketOmnitureTags(data.OmnitureATBJSON);
                    };
                    CallATBPage(url, productList, true, onSuccess);
                }
            } else if (options.mode == c_updateMode) {
                var url = c_modifyQS + lineItemId;
                if (!isNullOrUndefined(excludedAvailProducts)) {
                    url += '&availExclude=' + excludedAvailProducts;
                }
                var onSuccess = function (data) {
                    if (data.StatusString == "KO") { ATB_Error(data.ErrorMessage, data.ErrorUrl); return; }
                    var tmpInternalReference = productsToAdd[0].InternalReference;
                    productsToAdd = null; services = null; pushProducts = null; currentOptions = null; blockATBActions = false;
                    setAddToBasketOmnitureTags(data.OmnitureATBJSON);
                    if (AddToBasketCallingPage == EnumAddToBasketCallingPage.Basket) {//Basket Case
                        showModal(defaultContent);

                        if (!isNullOrUndefined(lineItemId)) {
                            GoToSpecificBasketItem(lineItemId);
                        }
                        else {
                            GoToBasket();
                        }
                    } else { GoToBasket(); }
                };
                CallATBPage(url, productList, true, onSuccess);
            } else if (options.mode == c_deleteMode) {
                var url = c_deleteQS + lineItemId;
                if (!isNullOrUndefined(excludedAvailProducts)) {
                    url += '&availExclude=' + excludedAvailProducts;
                }
                var onSuccess = function (data) {
                    if (data.StatusString == "KO") { ATB_Error(data.ErrorMessage, data.ErrorUrl); return; }
                    productsToAdd = null; services = null; pushProducts = null; currentOptions = null; blockATBActions = false;
                    setAddToBasketOmnitureTags(data.OmnitureATBJSON);
                    if (AddToBasketCallingPage == EnumAddToBasketCallingPage.Basket) {//Basket Case
                        showModal(defaultContent);
                    } GoToBasket();
                };
                CallATBPage(url, productList, true, onSuccess);
            }
        };
        isServicesCall = true;
        CallATBPage(url, productList, true, onSuccess);
    } else {
        services = serviceList;
        if (options.mode == c_addMode) {
            var showServicesLayer = true;

            //verifying if showing services layer is needed
            for (product in productList) {
                if (productList[product].ParentLineItemGUID != null && productList[product].ParentLineItemGUID != '') {
                    showServicesLayer = false;
                    break;
                }
            }

            if (showServicesLayer && !isNullOrUndefined(services) && (services.length > 0)) {

                if (AddToBasketCallingPage == EnumAddToBasketCallingPage.MiniPDP) {
                    $j('.miniPdpBox').remove();
                }
                BindServicesLayer(productList, services);
                ShowServicesLayer(); blockATBActions = false;
            } else {
                var url = c_atbQS;
                if (!isNullOrUndefined(excludedAvailProducts)) {
                    url += '&availExclude=' + excludedAvailProducts;
                }

                if (options.callPushProduct == true && pushProducts == null) {
                    url += c_getPushProductQS;
                }

                var onSuccess = function (data) {
                    if (data.StatusString == "KO") { ATB_Error(data.ErrorMessage, data.ErrorUrl); blockATBActions = false; return; }
                    if (options.callPushProduct == true && pushProducts == null) {
                        pushProducts = data.PushProducts;
                    }
                    services = null;
                    if (AddToBasketCallingPage == EnumAddToBasketCallingPage.Basket) {//Basket Case
                        UpdateBasketCount();
                        blockATBActions = false;
                        showModal(defaultContent);
                        GoToBasket();
                        return true;
                    }
                    else if (AddToBasketCallingPage == EnumAddToBasketCallingPage.BasketProposedService) {//Basket Proposed Services Case

                        UpdateBasketCount();
                        blockATBActions = false;
                        //showModal(defaultContent);
                        if (!isNullOrUndefined(lineItemId)) {
                            GoToSpecificBasketItem(lineItemId);
                        }
                        else {
                            GoToBasket();
                        }
                        return true;
                    }
                    if (AddToBasketCallingPage == EnumAddToBasketCallingPage.DirectOrder && !isNullOrUndefined(isDO) && isDO) {
                        if (pushProducts == null || (pushProducts != null && pushProducts.search("associated_products") == -1)) {
                            UpdateBasketCount();
                            blockATBActions = false;
                            showModal(defaultContent);
                            GoToBasket();
                            return true;
                        }
                        else {
                            if (options.callPushProduct == true) {
                                availRequestsJson = data.AvailRequestsJson;
                                GetPushProductsFromAvailForATB(availRequestsJson, excludedAvailProducts, data.AvailZone1Template, data.AvailZone2Template, pushProducts);
                            }
                            BindATBLayer(productsToAdd, isDO);
                            ShowATBLayer();
                            UpdateBasketCount();
                            $j('#ATBLayer .associated_products .quick_view_overlay,#ATBLayer .associated_products .quick_view_overlay_button').remove();
                            $j('#ATBLayer .associated_products .product_picture').addMiniPDPOnPush('Cross sell ATB direct');
                            blockATBActions = false;
                        }
                    }
                    else if ((location.href.indexOf('Basket.aspx') > -1 || location.href.indexOf('BasketV2.aspx') > -1) && !isNullOrUndefined(isDO) && isDO) {//DO Case
                        UpdateBasketCount();
                        blockATBActions = false;
                        showModal(defaultContent);
                        GoToBasket();
                        return true;
                    }
                    else {

                        if (options.callPushProduct == true) {
                            availRequestsJson = data.AvailRequestsJson;
                            GetPushProductsFromAvailForATB(availRequestsJson, excludedAvailProducts, data.AvailZone1Template, data.AvailZone2Template, pushProducts);
                        }
                        if (AddToBasketCallingPage == EnumAddToBasketCallingPage.MiniPDP) {
                            $j('.miniPdpBox').remove();
                        }

                        if (AddToBasketCallingPage == EnumAddToBasketCallingPage.Wishlist) {
                            showModal(defaultContent);
                            GoToBasket();
                            return true;
                        }
                        UpdateBasketCount();
                        BindATBLayer(productsToAdd);
                        ShowATBLayer();


                        //Binding MiniPDP on ATB Push
                        $j('#ATBLayer .associated_products .quick_view_overlay,#ATBLayer .associated_products .quick_view_overlay_button').remove();
                        $j('#ATBLayer .associated_products .product_picture').addMiniPDPOnPush('Cross sell ATB');

                        productsToAdd = null; services = null; pushProducts = null; currentOptions = null; blockATBActions = false;
                    }

                    setAddToBasketOmnitureTags(data.OmnitureATBJSON);
                };
                CallATBPage(url, productList, true, onSuccess);
            }
        } else if (options.mode == c_updateMode) {

            var url = c_modifyQS + lineItemId;
            if (!isNullOrUndefined(excludedAvailProducts)) {
                url += '&availExclude=' + excludedAvailProducts;
            }
            var onSuccess = function (data) {
                if (data.StatusString == "KO") { ATB_Error(data.ErrorMessage, data.ErrorUrl); return; }
                var tmpInternalReference = productsToAdd[0].InternalReference;
                productsToAdd = null; services = null; pushProducts = null; currentOptions = null; blockATBActions = false;
                setAddToBasketOmnitureTags(data.OmnitureATBJSON);
                if (AddToBasketCallingPage == EnumAddToBasketCallingPage.Basket) {//Basket Case
                    showModal(defaultContent);

                    if (!isNullOrUndefined(lineItemId)) {
                        GoToSpecificBasketItem(lineItemId);
                    }
                    else {
                        GoToBasket();
                    }

                } else { GoToBasket(); }
            };
            CallATBPage(url, productList, true, onSuccess);
        } else if (options.mode == c_deleteMode) {
            var url = c_deleteQS + lineItemId;
            if (!isNullOrUndefined(excludedAvailProducts)) {
                url += '&availExclude=' + excludedAvailProducts;
            }
            var onSuccess = function (data) {
                if (data.StatusString == "KO") { ATB_Error(data.ErrorMessage, data.ErrorUrl); return; }
                productsToAdd = null; services = null; pushProducts = null; currentOptions = null; blockATBActions = false;
                setAddToBasketOmnitureTags(data.OmnitureATBJSON);
                if (AddToBasketCallingPage == EnumAddToBasketCallingPage.Basket) {//Basket Case
                    showModal(defaultContent);
                } GoToBasket();
            };
            CallATBPage(url, productList, true, onSuccess);
        }
    }


}


//Function to call to add products to the wishlist (or modify)
//productList : list of FRProduct object to add to the wishlist (products)
//options : var options={"mode":c_addMode,"forceCallingServices":false,"callPushProduct":false};
// -> mode : add/update/delete
// -> forceCallingServices : true/false to call MainframeAPI
// -> callPushProduct : true/false to call push product api instead of using parameters
//serviceList : list of services in case of showing service layer
//pushList : list of push products items to show in confirmation layer
//miniPdpObject : mini pdp that call the function (in case of MPDP)
//lineItemId : LineItemId of the product to modify
var blockATWLActions = false;
var isServicesCallWL = false;
function AddToWishList(productList, options, serviceList, pushList, miniPdpObject, lineItemId, totalWLItemsCount) {

    if (blockATWLActions == true) { return; }
    blockATWLActions = true;
    productsToAdd = productList;
    currentOptions = options;
    pushProducts = pushList;
    TotalWLItemsCount = totalWLItemsCount;

    if (currentOptions.mode != c_setlowstockflag) {
        if (isNullOrUndefined(productsToAdd) || (currentOptions.mode != c_addMode && currentOptions.mode != c_updateMode && currentOptions.mode != c_deleteMode)) {
            ErrorDisplay("Une erreur est survenue durant l'ajout au vos favoris.");
            blockATBActions = false;
            return;
        }
    }

    services = serviceList;
    if (options.mode == c_addMode) {

        var url = c_atwlQS;

        if (options.callPushProduct == true && pushProducts == null) {
            url += c_getPushProductQS;
        }

        var onSuccess = function (data) {
            if (data.StatusString == "KO") { ATWL_Error(data.ErrorMessage, data.ErrorUrl); blockATWLActions = false; return; }
            if (options.callPushProduct == true && pushProducts == null) {
                pushProducts = data.PushProducts;
            }
            if (options.callPushProduct == true) {
                availRequestsJSON = data.AvailRequestsJSON;
                GetPushProductsFromSaasForATW(availRequestsJSON);
            }
            services = null;

            if (AddToWishListCallingPage == EnumAddToWishListCallingPage.WishList) {//WishList Case
                //UpdateBasketCount();
                blockATWLActions = false;
                showModal(defaultContent);

                GoToWishList();
                return true;
            }

            if (AddToWishListCallingPage == EnumAddToWishListCallingPage.MiniPDP) {
                $j('.miniPdpBox').remove();
            }

            var sPath = window.location.pathname;
            var sPage = sPath.substring(sPath.lastIndexOf('/') + 1);
            var isWLPage = false;

            if (sPage.toLowerCase() == "wishlist.aspx") {
                isWLPage = true;
            }

            BindWLLayer(productsToAdd, false);
            ShowWLLayer(isWLPage);

            //Binding MiniPDP on ATB Push
            $j('#ATWLayer .associated_products .quick_view_overlay,#ATWLayer .associated_products .quick_view_overlay_button').remove();
            $j('#ATWLayer .associated_products .product_picture').addMiniPDPOnPush('Wishlist AVAIL');

            productsToAdd = null; services = null; pushProducts = null; currentOptions = null; blockATBActions = false;

            setAddToWishListOmnitureTags(data.OmnitureATWLJSON);
        };

        CallATWLPage(url, productList, true, onSuccess);
    }
    else if (options.mode == c_updateMode) {

        var url = c_modifyWLQS + lineItemId;
        var onSuccess = function (data) {
            if (data.StatusString == "KO") { ATWL_Error(data.ErrorMessage, data.ErrorUrl); return; }
            var tmpInternalReference = productsToAdd[0].InternalReference;
            productsToAdd = null; services = null; pushProducts = null; currentOptions = null; blockATWLActions = false;

            setAddToWishListOmnitureTags(data.OmnitureATWLJSON);

            GoToWishList();
        };

        CallATWLPage(url, productList, true, onSuccess);

    }
    else if (options.mode == c_deleteMode) {
        var url = c_deleteWLQS + lineItemId + c_deleteWLCountQA + TotalWLItemsCount;
        var onSuccess = function (data) {
            if (data.StatusString == "KO") { ATWL_Error(data.ErrorMessage, data.ErrorUrl); return; }
            productsToAdd = null; services = null; pushProducts = null; currentOptions = null; blockATWLActions = false;

            setAddToWishListOmnitureTags(data.OmnitureATWLJSON);

            GoToWishList();
        };

        CallATWLPage(url, productList, true, onSuccess);
    }
    else if (options.mode == c_setlowstockflag) {
        var url = c_setlowstockflagQS + options.value;

        var onSuccess = function (data) {

            if (data.StatusString == "KO") { ATWL_Error(data.ErrorMessage, data.ErrorUrl); return; }

            productsToAdd = null; services = null; pushProducts = null; currentOptions = null; blockATWLActions = false;

            //setAddToWishListOmnitureTags(data.OmnitureATWLJSON);

            //GoToWishList();
        };

        CallATWLPage(url, productList, true, onSuccess);
    }

    blockATWLActions = false;
}

var blockShowSubActions = false;
function ShowSubstitutionLayer(prodid, docid, catid) {
    if (blockShowSubActions == true) { return; }
    blockShowSubActions = true;

    if (isNullOrUndefined(prodid) || isNullOrUndefined(docid)) {
        ErrorDisplay("Une erreur est survenue durant l'ajout au vos favoris.");
        blockShowSubActions = false;
        return;
    }

    var url = c_sslayerQS + '&productid=' + prodid + '&documentid=' + docid + '&categoryid=' + catid;

    var onSuccess = function (data) {
        if (data.StatusString == "KO") { ATB_Error(data.ErrorMessage, data.ErrorUrl); blockShowSubActions = false; return; }
        if (data != null && data.PushProducts != null) {
            pushProducts = data.PushProducts;
        }

        BindWLLayer(null, true);
        ShowWLLayer(false);

        //Binding MiniPDP on ATB Push
        $j('#ATWLayer .associated_products .quick_view_overlay,#ATWLayer .associated_products .quick_view_overlay_button').remove();
        $j('#ATWLayer .associated_products .product_picture').addMiniPDPOnPush('Wishlist substitution product');

        blockShowSubActions = false;

        setAddToWishListOmnitureTags(data.OmnitureATWLJSON);
    };

    CallATWLPage(url, null, true, onSuccess);

    blockShowSubActions = false;
}

function GoToSpecificBasket(presCode) {
    //check to see request is from new basket
    if (typeof (IsBasketV2) != 'undefined' && IsBasketV2 != null && IsBasketV2 == true) {
        c_basketURL = "/PanierV2/BasketV2.aspx";
    }
    window.location.href = c_basketURL + '?presCodeToGo=' + FirstInternalReference;
}

function GoToSpecificBasketItem(ItemID) {
    //check to see request is from new basket
    if (typeof (IsBasketV2) != 'undefined' && IsBasketV2 != null && IsBasketV2 == true) {
        c_basketURL = "/PanierV2/BasketV2.aspx";
    }
    window.location.href = c_basketURL + '?basketItemIdToGo=' + ItemID;
}


function GoToBasket() {
    //TT# 9961
    //check to see request is from new basket
    if (typeof (IsBasketV2) != 'undefined' && IsBasketV2 != null && IsBasketV2 == true) {
        c_basketURL = "/PanierV2/BasketV2.aspx";
    }
    var flag = true;
    flag = CheckCookiesEnabled();
    if (flag) window.location.href = c_basketURL;
}

function GoToWishList() {
    //TT# 9961
    var flag = true;
    flag = CheckCookiesEnabled();
    if (flag) window.location.href = c_wishlistURL;
}


//This method is used to bind the minipdp confirmation layer
function BindMPDPATBLayer(productList, miniPdpObject) {
    var product = productList[0];

    var productImage = $j(miniPdpObject).find(".atb_content .mini_pdp_product_picture");
    if ($j('#visualstyleBit').val() == 8) {
        productImage.hide()
    }
    else {
        productImage.attr('src', product.Description);
    }

    var productInfo = $j(miniPdpObject).find(".atb_content .product_text");
    $j(miniPdpObject).find(".atb_content .product_title").html(product.Title);
    var toAppend = '';
    if (!isNullOrUndefined(product.PresCode)) {
        toAppend = 'Ref : ' + product.PresCode + '<br />';
    }
    if (product.SizeText != null && product.SizeText != '') {
        toAppend += 'Taille : ' + product.SizeText + '<br/>';
    }
    if (product.ColorText != null && product.ColorText != '') {
        toAppend += 'Coloris : ' + product.ColorText + '<br/>';
    }
    toAppend += 'Quantité : ' + product.Quantity;
    productInfo.empty();
    productInfo.append(toAppend);

    var priceZone = $j(miniPdpObject).find(".atb_content .atb_price");

    if (!isIdentifiedCKG() || product.CkgPrice <= 0) {//Display CKG Price    
        toAppend = '<div class="normal_price"><div class="price_block">';

        if (product.StrikePrice > product.Price || product.Discount != 0) {
            toAppend += '<p>';

            if (product.StrikePrice != 0) {
                toAppend += '<span class="old_price">' + formatPrice(product.StrikePrice * product.Quantity) + ' €</span>';
            }
            if (product.Discount != 0) {
                toAppend += '<span class="discount"> -' + product.Discount + '%</span>';
            }
            toAppend += '</p>';
        }

        toAppend += '<p class="product_price">' + formatPrice(product.Price * product.Quantity) + ' €</p></div><div class="clear"></div></div>';


    } else {
        toAppend = '<div class="ckg_price"><div class="price_block"><p>-' + formatPrice((product.Price - product.CkgPrice) * product.Quantity) + '€ avec la <strong>Carte Kangourou</strong></p>';
        toAppend += '<p class="price_line">soit <span class="product_price">' + formatPrice(product.CkgPrice * product.Quantity) + ' €</span></p></div><div class="clear"></div></div>';
    }
    priceZone.empty();
    priceZone.append(toAppend);

    $j(miniPdpObject).find(".normal_content").fadeOut('normal', function () {
        $j(miniPdpObject).find(".product_main_info_block_content").children(".ATB_content").fadeIn('normal', function () {
            ShowGoToBasket();
        });
    });
    openedMiniPDP = null;
}

//This method is used to bind the services layer
function BindServicesLayer(products, services) {
    var ServicesBoxDynamicContent = $j('#ServicesLayer .services_list');
    var contentToAdd = '';
    var productName;
    var firstServiceForThisProduct;
    for (var i = 0; i < products.length; i++) {
        firstServiceForThisProduct = true
        for (var j = 0; j < services.length; j++) {
            if (services[j].MainProductGUID == products[i].LineItemGUID) {
                if (firstServiceForThisProduct) {
                    productName = products[i].Title;
                    if (contentToAdd != '') {
                        contentToAdd += '<li class="blank_line"></li>';
                    }
                    firstServiceForThisProduct = false;
                } else {
                    productName = '';
                }

                contentToAdd += '<li class="service_line">';
                contentToAdd += '<p class="product_name">' + productName;
                contentToAdd += '</p>';
                contentToAdd += '<div class="container_group_price">';
                contentToAdd += '<p class="group_name">';
                //TT9434:  Modify the Layer add a service when only 1 service
                if (services.length > 1) {
                    contentToAdd += '<input type="checkbox" class="' + services[j].OID + ' ' + services[j].MainProductGUID;
                    contentToAdd += '" id="service_' + services[j].OID + services[j].MainProductGUID + '" />';

                    /*if (services[j].URL != null && services[j].URL != '') {
                    contentToAdd += '<img class="picto width="40" height="40" src="' + services[j].URL + '" alt="Service ' + services[j].Title + '" />';
                    }*/

                    contentToAdd += '<span class="picto"></span>';
                    contentToAdd += '<label for="service_' + services[j].OID + services[j].MainProductGUID + '">';
                }
                else {
                    contentToAdd += '<input type="checkbox" class="' + services[j].OID + ' ' + services[j].MainProductGUID;
                    contentToAdd += '" id="service_' + services[j].OID + services[j].MainProductGUID + '" style="display:none" checked />';

                    /*if (FRProductList[i].AvailablePaidServices[j].Imgs[0].URL != null && FRProductList[i].AvailablePaidServices[j].Imgs[0].URL != '') {
                    contentToAdd += '<img class="picto width="40" height="40" src="' + services[j].URL + '" alt="Service ' + services[j].Title + '" />';
                    }*/

                    contentToAdd += '<span class="picto"></span>';
                    contentToAdd += '<label for="service_' + services[j].OID + services[j].MainProductGUID + '">';
                }
                contentToAdd += services[j].Desc + '</label>';
                contentToAdd += '<a class="question_mark" href="javascript:void(0);"></a></p>';
                contentToAdd += '<p class="price_line">';
                contentToAdd += '<span class="price">' + formatPrice(services[j].Price) + '€</span>';
                contentToAdd += '</p>';
                contentToAdd += '<div class="clear"></div>';
                contentToAdd += '</div>';
                contentToAdd += '</li>';

            }         

        }
    }
    ServicesBoxDynamicContent.empty();
    ServicesBoxDynamicContent.append(contentToAdd);
}


function AddServicesFromLayer() {
    $j('#ServicesLayer .services_list input[type=checkbox]').each(function () {
        if ($j(this).attr('checked') == true) {
            var tab = $j(this).attr('class').split(' ');
            ATBService(tab[0], tab[1]);
        }
    });


    var tmpOptions = { "mode": c_addMode, "forceCallingServices": false, "callPushProduct": false };
    if (currentOptions.mode == c_updateMode) {
        tmpOptions.mode = c_updateMode;
    }
    tmpOptions.callPushProduct = currentOptions.callPushProduct;
    HideNewModalBox();
    AddToBasket(productsToAdd, tmpOptions, null, pushProducts, null, null, currentIsEcoPart);
}



//This method is used to add a service to the basket using the services layer
function ATBService(serviceId, prodId) {
    var service = null;
    for (var i = 0; i < services.length; i++) {
        service = services[i];
        if (service.OID == serviceId && service.MainProductGUID == prodId) {
            break;
        }
    }
    var newProductsTab = Array();
    var j = 0;
    for (var i = 0; i < productsToAdd.length; i++) {
        if (productsToAdd[i].LineItemGUID == service.MainProductGUID) {
            newProductsTab[j] = productsToAdd[i];
            j++;

            var quant = 1;

            if (!isNullOrUndefined(productsToAdd[i].SoldByMeter) && (productsToAdd[i].SoldByMeter.toString().toLowerCase() == "true")) {
                quant = 1;
            }
            else {
                quant = productsToAdd[i].Quantity;
            }


            newProductsTab[j] = ServiceToFRProduct(service, quant);
        } else {
            newProductsTab[j] = productsToAdd[i];
        }
        j++;
    }
    productsToAdd = newProductsTab;


}

//This method is used to change a service object to a FRProduct
function ServiceToFRProduct(service, qty) {
    if (isNullOrUndefined(service) || isNullOrUndefined(qty)) {
        return null;
    }

    var prod = new FRProduct();
    if (isNullOrUndefined(prod)) {
        return null;
    }

    prod.PresCode = service.PZ;
    prod.ItemOfferId = service.OID;
    prod.SizeCode = c_serviceSizeCode;
    prod.Price = toFloat(service.Price);
    prod.Title = service.Desc;
    prod.Description = service.Img;
    prod.ParentLineItemGUID = service.MainProductGUID;
    prod.LineItemGUID = generateGuid();
    prod.Quantity = qty;
    return prod;
}

//This method is called from the services layer when the customer doesn't want to add services
function ValidateWithoutAddedServices() {
    var tmpOptions = { "mode": c_addMode, "forceCallingServices": false, "callPushProduct": false };
    if (currentOptions.mode == c_updateMode) {
        tmpOptions.mode = c_updateMode;
    }
    tmpOptions.callPushProduct = currentOptions.callPushProduct;
    AddToBasket(productsToAdd, tmpOptions, null, pushProducts, null, null, currentIsEcoPart);
}

//Generic method to call ATB page
function CallATBPage(urlParameters, postData, asyncValue, onSuccessFunction) {


    //fix done for TT  12846 -- if the ParentCategories is empty but not null set it to null.
    for (var pData = 0; pData < postData.length; pData++) {
        if (postData[pData].ParentCategories && postData[pData].ParentCategories.length <= 0) {
            postData[pData].ParentCategories = null;
        }
    }
        var basketObj = new RedcatsOT.Basket();
        basketObj.InvalidateBasketContentCache();
  
    urlParameters = urlParameters + "&ATBCallingPage=" + AddToBasketCallingPage;
    if (!isNullOrUndefined(isSearchResultProduct) && isSearchResultProduct == 1) {
        urlParameters = urlParameters + "&source=" + isSearchResultProduct;
    }
    if (!isNullOrUndefined(isAvailProdcut) && isAvailProdcut == true) {
        urlParameters = urlParameters + "&isavail=true";
    }
    //Tag Commendar Tracking
    try {
        var tmanager = null;
        tmanager = new RedcatsOT.TagCommenderTrackingManager();
        var prodInfo = tmanager.ATBLayerVars(postData);
        if (isDO && typeof (tc_ajx_exec_1) == 'function')
            tc_ajx_exec_1(prodInfo);
    } catch (exception) { }
    $j.ajax({
        type: 'POST',
        url: c_atbUrl + urlParameters + '&caching=' + (new Date().getTime()),
        data: {
            product: $j.toJSON(postData)
        },
        dataType: "json",
        success: function (data){
        AjaxATBSuccess(data);
        onSuccessFunction(data)
        } ,
        error: AjaxATBError,
        cache: false,
        async: asyncValue,
        timeout: 300000
    });
    isSearchResultProduct = 0;
}
 

//Generic method to call ATWL page
function CallATWLPage(urlParameters, postData, asyncValue, onSuccessFunction) {

    urlParameters = urlParameters + "&ATWLCallingPage=" + AddToWishListCallingPage;
    $j.ajax({
        type: 'POST',
        url: c_atwlUrl + urlParameters + '&caching=' + (new Date().getTime()),
        data: {
            product: $j.toJSON(postData)
        },
        dataType: "json",
        success: onSuccessFunction,
        error: AjaxATWLError,
        cache: false,
        async: asyncValue,
        timeout: 300000
    });

}



function AjaxATBSuccess(data) {
    if (data.IsLogAvailFromJs == true) {
        if (modeOfOperation == c_addMode) {
            ReportAddToCartToAvail(productsToReportToAvail, isAvailProdcut);
        }
        else if (modeOfOperation = c_deleteMode) {
            ReportRemoveFromCartToAvail(productsToReportToAvail);
        }
    }

}

function AjaxATBError(XMLHttpRequest, textStatus, errorThrown) {
    try {
        LogAjaxError("AjaxATB", textStatus + '\n' + errorThrown)
    } catch (ex) {

    }

    blockATBActions = false;
    if (isServicesCall) {
        isServicesCall = false;

        if (AddToBasketCallingPage == EnumAddToBasketCallingPage.DirectOrder) {
            ReportTechnicalErrorsToOmniture('AddToBasketClick_AjaxATBError_Services');
        }

        var tmpOptions = { "mode": c_addMode, "forceCallingServices": false, "callPushProduct": false };
        if (currentOptions.mode == c_updateMode) {
            tmpOptions.mode = c_updateMode;
        }
        tmpOptions.callPushProduct = currentOptions.callPushProduct;
        AddToBasket(productsToAdd, tmpOptions, null, pushProducts, null, null, currentIsEcoPart);
    } else {

        isServicesCall = false;
        if (AddToBasketCallingPage != EnumAddToBasketCallingPage.DirectOrder) {
            window.location.href = c_techErrorUrl + '?AjaxATBErrorReason=' + textStatus;
        }
        else {
            ShowGenericErrorMessage();
            ReportTechnicalErrorsToOmniture('AToBClick_' + textStatus + '_' + errorThrown);
        }

    }
}

function AjaxATWLError(XMLHttpRequest, textStatus, errorThrown) {

    try {
        LogAjaxError("AjaxATW", textStatus + '\n' + errorThrown)
    } catch (ex) {

    }
    blockATWLActions = false;
    window.location.href = c_techErrorUrl + '?AjaxATWLErrorReason=' + textStatus;
}

//This function is called if the ATB function return is an error (returnStatus==KO)
function ATB_Error(errorMessage, errorUrl) {

    blockATBActions = false;
    ReportTechnicalErrorsToOmniture('AddToBasketClick_AjaxATBError_KO');
    if (!isNullOrUndefined(errorUrl)) {
        if (errorUrl.indexOf('~') == 0) {
            errorUrl = errorUrl.substring(1);
        }
        window.location.replace(errorUrl);
    } else {
        ErrorDisplay(errorMessage);
    }
}

//This function is called if the ATWL function return is an error (returnStatus==KO)
function ATWL_Error(errorMessage, errorUrl) {
    blockATWLActions = false;
    // Todo
    //ReportTechnicalErrorsToOmniture('AddToBasketClick_AjaxATBError_KO');

    if (!isNullOrUndefined(errorUrl)) {
        if (errorUrl.indexOf('~') == 0) {
            errorUrl = errorUrl.substring(1);
        }
        if (errorUrl.indexOf('IdentifyAcctPopup') <= 0) {
            window.location.replace(errorUrl);
        }
        else {
            OpenCenteredPopUp(errorUrl, 1000, 600);
            ///window.open(errorUrl, '3D', 'resizable=yes,scrollbars=Yes,width=1000,height=600,left=50, top=50');
        }

    } else {
        ErrorDisplay(errorMessage);
    }
}

function OpenCenteredPopUp(url, width, height) {
    var xPos = (screen.width - width) / 2;
    var yPos = (screen.height - height) / 2;
    window.open(url, '', "menubar=no,status=no,width=" + width + ",height=" + height + ",scrollbars=yes,resizable=yes,left=" + xPos + ",top=" + yPos);
}

function ErrorDisplay(message) {
    productsToAdd = null; services = null; pushProducts = null; currentOptions = null;
    alert(message);
}

//This method removes all the content from the ServiceLayer and hide it
function HideServiceLayer() {
    HideNewModalBox();
    $j('#ServicesBoxDynamicContent').empty();
}


//This method hides the opacity layer and the specified div
function HideModalBox(divId) {
    $j("#wrapper").css({ position: "" });
    $j('#' + divId).hide();
    $j("#opacityLayer").hide();
}

//This method opens the specified div with an opacity layer
function ShowModalBox(divId) {
    var divWrapper = document.getElementById('wrapper');
    if (!document.getElementById('opacityLayer')) {
        var opacityLayer = document.createElement('div');
        opacityLayer.id = "opacityLayer";
        document.body.appendChild(opacityLayer);
        var layerHeight = document.body.offsetHeight;
        $j(opacityLayer).css({
            left: divWrapper.offsetLeft,
            top: 0,
            background: "black",
            height: layerHeight,
            width: divWrapper.offsetWidth,
            position: "absolute",
            zIndex: 500,
            filter: "alpha(opacity=55)",
            opacity: 0.55
        });
    } else {
        var opacityLayer = document.getElementById('opacityLayer');
    }
    $j("#wrapper").css({ position: "relative" });
    $j(opacityLayer).show();
    $j('#' + divId).css({ zIndex: 501 });
    $j('#' + divId).show();
}



//This method is used to show the confirmation ATB layer
function ShowATBLayer() {
    $j('#ATBLayer ul.added_products').attr('style', '');
    try {
        if (isTouchDevice()) {
            $j('#ATBLayer ul.added_products').css({
                'max-height': '20000px'
            });
        }
    } catch (ex) { }

    if (currentModalBoxContent == null) {
        $j('#ATBLayer ul.added_products').attr('style', '');
        try {
            if (isTouchDevice()) {
                $j('#ATBLayer ul.added_products').css({
                    'max-height': '20000px'
                });
            }
        } catch (ex) { }

        var scrollTop = $j(window).scrollTop();
        try {
            //var rightPosition = $j("#wrapper").position().left;
            var rightPosition = ($j(window).width() - 982) / 2;
        } catch (ex) {
            var rightPosition = 0;
        }
        var pos = { left: null, top: (scrollTop + 120), right: (168 + rightPosition), bottom: null };
        ShowNewModalBox('ATBLayer', pos);
    }
}

//This method is used to show the confirmation Services layer
function ShowServicesLayer() {
    if (currentModalBoxContent == null) {
        var scrollTop = $j(window).scrollTop();
        try {
            var rightPosition = $j("#wrapper").position().left;
        } catch (ex) {
            var rightPosition = 0;
        }
        var pos = { left: null, top: (scrollTop + 120), right: (168 + rightPosition), bottom: null };
        ShowNewBlockingModalBox('ServicesLayer', pos, function () { HideServiceLayer(); ValidateWithoutAddedServices(); });
    }
}






//This method is used to show the confirmation ATW layer
function ShowWLLayer(isWLPage) {
    $j('#ATWLayer ul.added_products').attr('style', '');
    try {
        if (isTouchDevice()) {
            $j('#ATWLayer ul.added_products').css({
                'max-height': 'auto'
            });
        }
    } catch (ex) { }
    if (currentModalBoxContent == null) {
        $j('#ATWLayer ul.added_products').attr('style', '');
        try {
            if (isTouchDevice()) {
                $j('#ATWLayer ul.added_products').css({
                    'max-height': 'auto'
                });
            }
        } catch (ex) { }
        var scrollTop = $j(window).scrollTop();
        //var rightPosition = $j("#wrapper").position().left;
        var rightPosition = ($j(window).width() - 982) / 2;
        var pos = { left: null, top: (scrollTop + 120), right: (168 + rightPosition), bottom: null };
        ShowNewModalBox('ATWLayer', pos, null, null, isWLPage);
        

    }
}


//This method is used to bind the content of the ATW layer
function BindWLLayer(products, isSubstitutionLayer) {

    var assoc_bloc;

    var totalPrice = 0;
    var totalDiscount = 0;

    if (!isSubstitutionLayer) {

        var baseUl = $j('#ATWLayer .added_products');
        var toAppend;
        var isEcoPart = false;
        baseUl.empty();
        var product = null;

        for (var i = 0; i < products.length; i++) {
            product = products[i];
            if (product != null) {
                if (!isNullOrUndefined(product.StrikePrice))
                { totalDiscount += (product.StrikePrice * product.Quantity); }
                totalPrice += (product.Price * product.Quantity);
            }
            if (product.ParentLineItemGUID != null && product.ParentLineItemGUID != '') {//For services
                toAppend = '<li class="service">';
                toAppend += '<span class="indentation"></span>';
                if (product.Description != null && product.Description != '') {
                    toAppend += '<img src="' + product.Description + '" alt="Service ' + product.Title + '" />';
                }
                toAppend += '<div class="infos"><strong>' + product.Title + '</strong><br />';
                if (!isNullOrUndefined(product.PresCode) && product.PresCode != 0 && (!product.IsMarketPlaceProduct)) {
                    toAppend += 'Ref : ' + product.PresCode;
                }
                
                toAppend += +'</div>';
                toAppend += '<div class="price"><p class="current_price">' + formatPrice(product.Price) + ' €</p></div>';
                toAppend += '<div class="clear"></div></li>';

            } else {

                if (i > 0) {
                    baseUl.append('<li class="separator"><span class="second"></span>');
                    baseUl.append('<div class="clear"></div></li>');
                }

                toAppend = '<li class="product">';
                if (product.Description != null && product.Description != '') {
                    toAppend += '<img width="72" height="72" src="' + product.Description + '" alt="Visuel du produit ' + product.Title + '" />';
                }
                toAppend += '<div class="infos"><strong>' + product.Title + '</strong><br />';
                if (!isNullOrUndefined(product.PresCode) && product.PresCode != 0 && (!product.IsMarketPlaceProduct)) {
                    toAppend += 'Ref : ' + product.PresCode + '<br />';
                }
                if (product.SizeText != null && product.SizeText != '') {
                    toAppend += 'Taille : ' + product.SizeText + '<br/>';
                }
                if (product.ColorText != null && product.ColorText != '') {
                    toAppend += 'Coloris : ' + product.ColorText + '<br/>';
                }
                toAppend += 'Quantité : ' + product.Quantity;
                toAppend += '</div>';

                if (product.IsEcoPart == "true" || product.IsEcoPart == true) { isEcoPart = true; }

                toAppend += '<div class="price">';

                if (product.StrikePrice > product.Price || product.Discount != 0) {
                    toAppend += '<p>';

                    if (product.StrikePrice != 0) {
                        toAppend += '<span class="old_price">' + formatPrice(product.StrikePrice * product.Quantity) + ' €</span>';
                    }
                    if (product.Discount != 0) {
                        toAppend += '<span class="discount"> -' + formatDiscount(product.Discount) + '%</span>';
                    }

                    toAppend += '</p>';
                }

                toAppend += '<p class="current_price">' + formatPrice(product.Price * product.Quantity) + ' €';
                if (product.IsEcoPart == "true" || product.IsEcoPart == true) {
                    toAppend += '*';
                }
                toAppend += '</p></div>';

                toAppend += '<div class="clear"></div></li>';
            }

            baseUl.append(toAppend);
        }
        if (products.length > 1) {
            if (totalDiscount != 0 && totalDiscount != totalPrice) {
                totalDiscount = Math.round(totalDiscount * 100) / 100;
                $j('#ATWLayer .atb_total_line p.strike_price').html(formatPrice(totalDiscount) + ' €').show();
            } else {
                $j('#ATWLayer .atb_total_line p.strike_price').hide();
            }
            totalPrice = Math.round(totalPrice * 100) / 100;
            $j('#ATWLayer .atb_total_line p.price').html(formatPrice(totalPrice) + ' €');
            $j('#ATWLayer .atb_total_line').show();
//            $j("#ATWLayer .atw_content .added_products .price, #ATWLayer .atw_content .added_products .ckg_price").css("float", "left");
            $j('#ATWLayer .add_to_basket_block:eq(1)').hide();
        } else {
            $j('#ATWLayer .atb_total_line').hide();
            $j('#ATWLayer .add_to_basket_block:eq(1)').show();
        }
        if (!isEcoPart) {
            $j('#ATWLayer .atw_content .eco').hide();
        } else {
            $j('#ATWLayer .atw_content .eco').show();
        }

        var sPath = window.location.pathname;
        var sPage = sPath.substring(sPath.lastIndexOf('/') + 1);
        if (sPage.toLowerCase() == "wishlist.aspx") {
            $j('#ATWLayer .add_to_basket_block .continue').attr({ 'href': "javascript:GoToWishList();" });
        }

        //$j('#ATWLayer .atw_title, #ATWLayer ul, #ATWLayer .add_to_basket_block').show();

        assoc_bloc = $j("#ATWLayer .associated_products_block");
        showPushProductsWL(assoc_bloc);
    }
    else {
        $j('#ATWLayer .atw_title, #ATWLayer ul, #ATWLayer .eco, #ATWLayer .add_to_basket_block').hide();

        assoc_bloc = $j("#ATWLayer .associated_products_block");
        assoc_bloc.empty();
        showPushProductsWL(assoc_bloc);
    }
}


function showPushProductsWL(assoc_bloc) {
    if (!isNullOrUndefined(assoc_bloc)) {
        if (pushProducts != null && trim(pushProducts) != '') {
            assoc_bloc.show();
            assoc_bloc.empty();
            assoc_bloc.append(pushProducts);
            assoc_bloc.find('.set').empty();
            assoc_bloc.find('li:gt(2)').empty().hide();
            if ($j(assoc_bloc).find('ul.products li').length == 0)
                $j(assoc_bloc).hide();
        }
        else {
            assoc_bloc.hide();
        }
    }
}


$j(document).ready(function () {
    $j('div.add-basket-img .fixpng').show();
});

/*
function to check if the user is ckg or not depending upon the cookie 
this function will return true if the user is ckg and return false for other cases.
*/
function isIdentifiedCKG() {
    var CKGUserCookieValue = GetSubCookieValue("M.R.User", "CKGUser");
    if (CKGUserCookieValue != null) {
        if (CKGUserCookieValue != "NotCKG") return true;
    }
    return false;
}
/*
// TT 19367 ALE
function to check if the user is a regular mcp consumer or not depending upon the cookie 
this function will return true if the user is a regular mcp consumer and return false if not. 
This function also create a cookie to store that statement.
*/
function isMcpRegularCustomer() {
    var MCPUserCookieValue = GetSubCookieValue("M.R.User", "MCPRegularUser");
    if (MCPUserCookieValue != null) return true;
    else {
        setSubCookieAndCookie('M.R.User', 'MCPRegularUser', true);
        return false;
    }
}

//This method properly formats the price
function formatPrice(originalPrice) {
    if (null == originalPrice && 'undefined' == typeof originalPrice) return 0;
    var newPrice = (originalPrice + "").split('.').join(',');

    if (newPrice.indexOf(',') == -1) {
        newPrice += ",00";
    } else {
        if (newPrice.split(',')[1].length == 1) {
            newPrice += "0";
        }
    }
    var cutPrice = newPrice.split(',');
    if (cutPrice[1].length > 2) {
        newPrice = cutPrice[0] + "," + cutPrice[1].substring(0, 2);
    }
    return newPrice;

}

function formatDiscount(originalDiscount) {
    var newDiscount = (originalDiscount + "").split('.')[0];
    return newDiscount;
}

//This method is used to bind the content of the ATB layer
function BindATBLayer(products, isDO) {
    var baseUl = $j('#ATBLayer .added_products');
    var toAppend;
    var isEcoPart = false;
    var hasAtLeastOneMPProduct = false;
    baseUl.empty();
    if (isNullOrUndefined(isDO) || !isDO) {
        var product = null;
        var totalPrice = 0;
        var totalDiscount = 0;

        /* BEGIN TO DELETE - usefull for testing several products and services */
        //products[2] = products[1];
        //products[3] = products[1];
        //products[4] = products[0];
        //products[5] = products[1];
        //products[6] = products[1];
        //products[7] = products[0];
        /* END TO DELETE - usefull for testing several products and services */

        for (var i = 0; i < products.length; i++) {
            product = products[i];
            if (product.IsMarketPlaceProduct) {
                hasAtLeastOneMPProduct = true;
            }
            if (product != null) {
                if (!isNullOrUndefined(product.GDPrice)) {
                    totalPrice += (product.GDPrice * product.Quantity);
                    if (!isNullOrUndefined(product.StrikePrice))
                    { totalDiscount += (product.Price * product.Quantity); }
                } else {
                    totalPrice += (product.Price * product.Quantity);
                    if (!isNullOrUndefined(product.StrikePrice))
                    { totalDiscount += (product.StrikePrice * product.Quantity); } else {
                        totalDiscount += (product.Price * product.Quantity);
                    }
                }
            }
            if (product.ParentLineItemGUID != null && product.ParentLineItemGUID != '') {//For services                
                toAppend = '<li class="service">';
                toAppend += '<span class="indentation"></span>';

                if (product.Description != null && product.Description != '') {
                    toAppend += '<img src="' + product.Description + '" alt="Service ' + product.Title + '" />';
                }
                toAppend += '<div class="infos"><strong>' + product.Title + '</strong><br />';
                if (!isNullOrUndefined(product.PresCode) && product.PresCode != 0 && (!product.IsMarketPlaceProduct)) {
                    toAppend += 'Ref : ' + product.PresCode + '<br/>';
                }
                if (product.IsQuantityComplementaryInformation) {
                    toAppend += 'Quantité : ' + product.ServiceComplementaryInfo;
                } else {
                    toAppend += 'Quantité : ' + product.Quantity;
                }
                var message = GetAdjunctServiceMessage(product.ServiceId, 'ATB_LAYER'); //GetMessage('Service','ATB_' + product.ServiceId);
                if (!isNullOrUndefined(message)) {
                    toAppend += '<p class="warning_msg_qty">' + message.Text + '</p>';
                }
                toAppend += '</div>';
                toAppend += '<div class="price"><p class="current_price">' + formatPrice(product.Price * product.Quantity) + ' €</p></div>';
                toAppend += '<div class="clear"></div>';


                toAppend += '</li>';


            } else {
                if (i > 0) {
                    baseUl.append('<li class="separator"><span class="second"></span>');
                    baseUl.append('<div class="clear"></div></li>');
                }
                toAppend = '<li class="product">';
                if (product.Description != null && product.Description != '') {
                    toAppend += '<img width="72" height="72" src="' + product.Description + '" alt="Visuel du produit ' + product.Title + '" />';
                }
                toAppend += '<div class="infos"><strong>' + product.Title + '</strong><br />';
                if (!isNullOrUndefined(product.PresCode) && product.PresCode != 0 && (!product.IsMarketPlaceProduct)) {
                    toAppend += 'Ref : ' + product.PresCode + '<br />';
                }

                if (product.SizeText != null && product.SizeText != '') {
                    toAppend += 'Taille : ' + product.SizeText + '<br/>';
                }
                if (product.ColorText != null && product.ColorText != '') {
                    toAppend += 'Coloris : ' + product.ColorText + '<br/>';
                }
                toAppend += 'Quantité : ' + product.Quantity;
                if (product.IsMarketPlaceProduct && product.VendorName != null) {
                    toAppend += '<br /><strong>Vendu et expédié par : ';
                    toAppend += '<a href="javascript:OpenCenteredPopUpNoScrolls(\'/Vendor/VendorDetails.aspx?vid=' + product.VendorId + '\', 510, 440)" class="vendor">'+ product.VendorName + '</a></strong></p>';
                }
                toAppend += '</div>';

                if (product.IsEcoPart == "true" || product.IsEcoPart == true) { isEcoPart = true; }

                toAppend += '<div class="price">';

                if (product.StrikePrice > product.Price || product.Discount != 0) {
                    toAppend += '<p>';

                    if (product.StrikePrice != 0 && product.StrikePrice != product.Price) {
                        toAppend += '<span class="old_price">' + formatPrice(product.StrikePrice * product.Quantity) + ' €</span>';
                    }
                    if (product.Discount != 0) {
                        toAppend += '<span class="discount"> -' + formatDiscount(product.Discount) + '%</span>';
                    }

                    toAppend += '</p>';
                }

                toAppend += '<p class="current_price">' + formatPrice(product.Price * product.Quantity) + ' €';
                if (product.IsEcoPart == "true" || product.IsEcoPart == true) {
                    toAppend += '*';
                }
                toAppend += '</p></div>';

                toAppend += '<div class="clear"></div></li>';

            }

            baseUl.append(toAppend);
        }
        if (products.length > 1) {
            if (totalDiscount != 0 && totalDiscount != totalPrice) {
                totalDiscount = Math.round(totalDiscount * 100) / 100;
                $j('#ATBLayer .atb_total_line p.strike_price').html(formatPrice(totalDiscount) + ' €').show();
            } else {
                $j('#ATBLayer .atb_total_line p.strike_price').hide();
            }
            totalPrice = Math.round(totalPrice * 100) / 100;
            $j('#ATBLayer .atb_total_line p.price').html(formatPrice(totalPrice) + ' €');
            $j('#ATBLayer .atb_total_line').show();
//            $j("#ATBLayer .atb_content .added_products .price, #ATBLayer .atb_content .added_products .ckg_price").css("float", "left");
            $j('#ATBLayer .add_to_basket_block:eq(1)').hide();
        } else {
            $j('#ATBLayer .atb_total_line').hide();
            $j('#ATBLayer .add_to_basket_block:eq(1)').show();
        }
    }
    if (!isEcoPart) {
        $j('#ATBLayer .add_to_basket_block span').hide();
    } else {
        $j('#ATBLayer .add_to_basket_block span').show();
    }
    if (!isNullOrUndefined(isDO) && isDO) {
        $j('#ATBLayer .atb_total_line').hide();
        $j('.atb_title').text('Vous venez d’ajouter votre sélection au panier');
        $j('#ATBLayer .continue').addClass('continue_DO');
        $j('#ATBLayer .continue_DO').removeClass('continue');
    } else {
        $j('.atb_title').text('Vous venez d\'ajouter au panier le(s) produit(s) suivant(s) : ');
        $j('#ATBLayer .continue').removeClass('continue_DO');
    }
    

    // TT 19367 ALE
    // Display MCP-informations on the ATB layer if the custoamer 
    // added a MCP product to the basket for the first time.
    if (hasAtLeastOneMPProduct && !isMcpRegularCustomer()) {
        $j('#ATBLayer .atb_mcp_block').show();
        var atb_mcp_legal = "javascript:OpenCenteredPopUp('/Vendor/VendorTermsConditions.aspx#" + product.VendorId + "', 800, 440)";
        $j('#ATBLayer .atb_mcp_legal').attr('href', atb_mcp_legal);
    }
    else {
        $j('#ATBLayer .atb_mcp_block').hide();
        var assoc_bloc = $j("#ATBLayer .associated_products_block");
        if (!isNullOrUndefined(assoc_bloc)) {
            if (pushProducts != null && trim(pushProducts) != '') {
                assoc_bloc.show();
                assoc_bloc.empty();
                assoc_bloc.append(pushProducts);
                assoc_bloc.find('.set').empty();
                //assoc_bloc.find('li:gt(2)').empty().hide();
            }
            else {
                assoc_bloc.hide();
            }
        }
    }
    try {
        if (!isNullOrUndefined(skuManager)) {
            skuManager.Refresh();
        }
    } catch (ex) { }
}

function trim(myString) {
    return myString.replace(/^\s+/g, '').replace(/\s+$/g, '')
}


function setAddToWishListOmnitureTags(ObjOmnitureATWLJSON) {

    if (isNullOrUndefined(s)) return;


    /* first clear the values of the variable */

    if (s.eVar30 != null) {
        s.eVar30 = "";
    }

    if (s.eVar12 != null) {
        s.eVar12 = "";
    }

    if (s.eVar41 != null) {
        s.eVar41 = "";
    }
    //17339
    SetATBExternalCampaignTags();

    if (s.prop12 != null) {
        s.prop12 = "";
    }
    //    TT#12330
    //    if (s.prop14 != null) {
    //        s.prop14 = "";
    //    }

    if (s.events != null) {
        s.events = "";
    }

    if (s.prop55 != null) {
        s.prop55 = "0";
    }

    /* Set the linkTrackVars and linkTrackEvents */
    ////    s.linkTrackVars = "eVar10,eVar11,eVar12,products,events";

    /* Add the proper value for prop 21 and prop22 */
    s.products = '';
    s.events = (ObjOmnitureATWLJSON != null) ? ObjOmnitureATWLJSON.ATWLEvents : '';
    s.eVar30 = (ObjOmnitureATWLJSON != null) ? ObjOmnitureATWLJSON.EVar30 : '';
    s.eVar12 = '';
    s.prop12 = '';
    //    TT#12330 s.prop14 = (ObjOmnitureATWLJSON != null) ? ObjOmnitureATWLJSON.MFCallStatusCode : '';

    if (ObjOmnitureATWLJSON != null && ObjOmnitureATWLJSON.PageName != '') {
        s.pageName = ObjOmnitureATWLJSON.PageName;
    }

    if (ObjOmnitureATWLJSON != null && ObjOmnitureATWLJSON.Channel != '') {
        s.channel = ObjOmnitureATWLJSON.Channel;
    }

    /* calling method s.tl() */
    s.tl(false, 'o', "FRAddToWishListFromPDP");

}

function setAddToBasketOmnitureTags(ObjOmnitureATBJSON) {

    if (isNullOrUndefined(s)) return;
}


function setAddToBasketOmnitureTags(ObjOmnitureATBJSON) {

    if (isNullOrUndefined(s)) return;


    /* first clear the values of the variable */

    if (s.eVar29 != null) {
        s.eVar29 = "";
    }
    if (s.eVar10 != null) {
        s.eVar10 = "";
    }
    //    TT#12332
    //    if (s.eVar11 != null) {
    //        s.eVar11 = "";
    //    }

    if (s.eVar12 != null) {
        s.eVar12 = "";
    }

    if (s.products != null) {
        s.products = "";
    }

    if (s.prop23 != null) {
        s.prop23 = "";
    }

    //TT#12332 if (s.prop11 != null) {
    //    s.prop11 = "";
    //}
    if (s.prop12 != null) {
        s.prop12 = "";
    }
    if (s.events != null) {
        s.events = "";
    }

    if (s.eVar46 != null) {
        s.eVar46 = "";
    }

    if (s.prop55 != null) {
        s.prop55 = "0";
    }

    /* Set the linkTrackVars and linkTrackEvents */
    s.linkTrackVars = "eVar10,eVar12,products,events"; //TT#12332 eVar11  

    /* Add the proper value for prop 21 and prop22 */
    s.products = (ObjOmnitureATBJSON != null) ? ObjOmnitureATBJSON.ProductString : '';
    s.events = (ObjOmnitureATBJSON != null) ? ObjOmnitureATBJSON.ATBEvents : '';

    var bshpclick = getUrlVars()['bshpclick'];

    if (bshpclick != null && bshpclick == 'true')
        s.eVar10 = 'shpmarques';
    else
        s.eVar10 = (ObjOmnitureATBJSON != null) ? ObjOmnitureATBJSON.SalesArea : '';

    // TT#12332 s.eVar11 = (ObjOmnitureATBJSON != null) ? ObjOmnitureATBJSON.ShoppingPref : '';
    s.eVar12 = (ObjOmnitureATBJSON != null) ? ObjOmnitureATBJSON.ShoppingTool : '';
    s.prop12 = (ObjOmnitureATBJSON != null) ? ObjOmnitureATBJSON.ShoppingTool : '';
    // TT#12332 s.prop11 = (ObjOmnitureATBJSON != null) ? ObjOmnitureATBJSON.ShoppingPref : '';

    if (ObjOmnitureATBJSON != null && ObjOmnitureATBJSON.Evar46String != null && ObjOmnitureATBJSON.Evar46String != '') {
        s.eVar46 = ObjOmnitureATBJSON.Evar46String;
    }
    //TT17339
    SetATBExternalCampaignTags();

    if (ObjOmnitureATBJSON != null && ObjOmnitureATBJSON.PageName != '') {
        s.pageName = ObjOmnitureATBJSON.PageName;
    }

    if (ObjOmnitureATBJSON != null && ObjOmnitureATBJSON.Channel != '') {
        s.channel = ObjOmnitureATBJSON.Channel;
    }

    /* calling method s.tl() */
    s.tl(false, 'o', "FRAddToBasketFromPDP");

}

function getUrlVars() {
    var vars = [], hash;
    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
    for (var i = 0; i < hashes.length; i++) {
        hash = hashes[i].split('=');
        vars.push(hash[0]);
        vars[hash[0]] = hash[1];
    }
    return vars;
}

function ReportTechnicalErrorsToOmniture(linkName) {
    //linkName = OkClick or AddToBasketClick	
    try {
        if (AddToBasketCallingPage != EnumAddToBasketCallingPage.DirectOrder) return;
        if (typeof (s) == "undefined") return;

        var callingPage;
        var callFrom;

        /* first clear the values of the variable */
        if (s.prop48 != null) {
            s.prop48 = "";
        }

        if (s.prop49 != null) {
            s.prop49 = "";
        }

        /* Set the linkTrackVars and linkTrackEvents */
        s.linkTrackVars = "prop47,prop48,prop49";

        s.prop1 = "FR";
        s.prop2 = "Redcats FR";
        s.prop3 = "LaRedoute";
        s.prop4 = "";
        s.prop5 = "LaRedoute FR";
        s.eVar1 = "FR";
        s.eVar2 = "Redcats FR";
        s.eVar3 = "LaRedoute";
        s.eVar4 = "";
        s.eVar5 = "LaRedoute FR";
        s.channel = "ERREUR";
        s.pageName = "FR:RE:ERREUR:Page inaccessible";
        s.pageType = "TechnicalError";

        var currentURL = window.location.protocol + "//" + window.location.host + '/order_from_catalog/DirectOrder09.aspx?' + linkName;
        s.prop47 = window.location.href;
        s.prop48 = currentURL;
        s.prop49 = 'TechnicalError';

        //TT17339
        SetATBExternalCampaignTags();

        hpeventscookieval = GetCookie("OEvent1");
        if (hpeventscookieval != null && hpeventscookieval != "") {
            s.events = hpeventscookieval;
        }
        DeleteCookie("OEvent1");

        SetOmnitureForErrorReporting();

        s.tl(false, 'o', linkName);
    }
    catch (e) {

    }
}

////////////////////////////
//                        //
// products scroller code //
//                        //
////////////////////////////
function ATBAjaxContentLoadEvet() {

    var scrollLeftFlag = false;
    var scrollRightFlag = true;
    var moverScale = (availItemsCount - 3) * 186;
    if (availItemsCount > 3) {
        //$j(".bottomScroller").children(".scrollLeft").css({ "visibility": "visible" });
        $j(".bottomScroller").children(".scrollRight").css({ "visibility": "visible" });
    }
    $j(".scrollRight").unbind('click');
    $j(".scrollLeft").unbind('click');
    $j(".scrollLeft").click(function () {
        if (scrollLeftFlag) {
            $j(this).parent().children(".productScroller").children(".products").animate({ "left": "+=" + moverScale + "px" }, "slow");
            scrollLeftFlag = false;
            scrollRightFlag = true;
            $j(".bottomScroller").children(".scrollLeft").css({ "visibility": "hidden" });
            $j(".bottomScroller").children(".scrollRight").css({ "visibility": "visible" });
        }

    });

    $j(".scrollRight").click(function () {
        if (scrollRightFlag) {
            $j(this).parent().children(".productScroller").children(".products").animate({ "left": "-=" + moverScale + "px" }, "slow");
            scrollLeftFlag = true;
            scrollRightFlag = false;

            $j(".bottomScroller").children(".scrollLeft").css({ "visibility": "visible" });
            $j(".bottomScroller").children(".scrollRight").css({ "visibility": "hidden" });
        }
    });
}
function SetATBExternalCampaignTags() {
    // External Campaign
    if (s.eVar35 != null) {
        s.eVar35 = "";
    }
    if (s.eVar36 != null) {
        s.eVar36 = "";
    }
    if (s.eVar37 != null) {
        s.eVar37 = "";
    }
    if (s.eVar38 != null) {
        s.eVar38 = "";
    }
    if (s.eVar39 != null) {
        s.eVar39 = "";
    }
    if (s.eVar24 != null) {
        s.eVar24 = "";
    }
    s.campaign = '';
}

function ATBGetServicesFromM2Services(M2AncSvcs, frProd) {

    if (isNullOrUndefined(frProd) || isNullOrUndefined(M2AncSvcs) || (M2AncSvcs.length <= 0)) {
        return null;
    }

    var ATBServices = null;

    for (var svcIndex = 0; svcIndex < M2AncSvcs.length; svcIndex++) {
        if (isNullOrUndefined(M2AncSvcs[svcIndex].BTy)) {
            continue;
        }
        if (M2AncSvcs[svcIndex].BTy.Id != 3) {
            continue;
        }

        var svc = new Services(M2AncSvcs[svcIndex]);
        if (isNullOrUndefined(svc)) {
            continue;
        }

        if (isNullOrUndefined(ATBServices)) {
            ATBServices = new Array();
        }

        ATBServices.push(svc);
    }

    if (isNullOrUndefined(ATBServices) || (ATBServices.length <= 0)) {
        return null;
    }

    for (var j = 0; j < ATBServices.length; j++) {
        ATBServices[j].MainProductGUID = frProd.LineItemGUID;
    }

    return ATBServices;
}

function Services(AncSvc) {
    if (isNullOrUndefined(AncSvc)) {
        return null;
    }

    if (isNullOrUndefined(AncSvc.ItemOfferId)) {
        return null;
    }

    this.ID = AncSvc.Id;
    this.Rank = AncSvc.Rnk;
    this.Price = AncSvc.LiPr;
    this.PZ = AncSvc.AltId;
    this.OID = AncSvc.ItemOfferId;
    this.Desc = AncSvc.DN;

    if (!isNullOrUndefined(AncSvc.Imgs) && (AncSvc.Imgs.length > 0) && !isNullOrUndefined(AncSvc.Imgs[0].FlNm)) {
        this.Img = "http://media.laredoute.fr/images/Pdp09/" + AncSvc.Imgs[0].FlNm;
    }

    this.Url = AncSvc.ExpURL;

    if (!isNullOrUndefined(AncSvc.BTy)) {
        this.SType = AncSvc.BTy.Id;
    }

    this.InBKT = "";
    this.MainProductGUID = "";
    this.TType = AncSvc.DisTmTy;
}


if (isNullOrUndefined(RedcatsOT)) {
    var RedcatsOT = {};
}

RedcatsOT.BusinessRulesManager = function () {
    return new function () {
        var DEFAULT_SIZE_DROPDOWN_VALUE = 'Taille';
        var AVAIL_SEPARATOR_TEXT = '  ';

        this.GetSizeRules = function (sizes, isOutOfStockSizeVisible) {
            var rulesObj = { 'Options': Array(), 'IsDropdownDisplayed': true, 'IsTextboxDisplayed': false, 'IsDropdownEnabled': true };

            var option;
            option = $j('<option></option>');
            option.attr('value', '-1');
            option.html(DEFAULT_SIZE_DROPDOWN_VALUE);
            rulesObj.Options.push(option);
            var availSizesNb = 0;
            var selectedSizeIndex = 0;
            var isUnikSku = false;
            for (var i = 0; i < sizes.length; i++) {
                var stkInfo = sizes[i].Ofrs[0].Stk;
                if (!isOutOfStockSizeVisible) {
                    if (stkInfo.AvSt != 0) {
                        availSizesNb++;
                        option = $j('<option></option>');
                        option.attr('value', sizes[i].Id);
                        if (!isNullOrUndefined(sizes[i].DN)) {
                            option.html(sizes[i].DN + AVAIL_SEPARATOR_TEXT + GetDeliveryInfoText(stkInfo.AvSt, stkInfo.FsAvDt, stkInfo.FsBkOrdDt));
                        } else {
                            option.html(GetDeliveryInfoText(stkInfo.AvSt, stkInfo.FsAvDt, stkInfo.FsBkOrdDt));
                        }
                        rulesObj.Options.push(option);
                    }
                } else {
                    option = $j('<option></option>');
                    option.attr('value', sizes[i].Id);
                    if (!isNullOrUndefined(sizes[i].DN)) {
                        option.html(sizes[i].DN + AVAIL_SEPARATOR_TEXT + GetDeliveryInfoText(stkInfo.AvSt, stkInfo.FsAvDt, stkInfo.FsBkOrdDt));
                    } else {
                        option.html(GetDeliveryInfoText(stkInfo.AvSt, stkInfo.FsAvDt, stkInfo.FsBkOrdDt));
                    }
                    rulesObj.Options.push(option);
                    availSizesNb++;
                }
                var tmp = Array();
                tmp.push(sizes[i]);
                if (GetSizeCodeFromM2Size(tmp) == '99999') {
                    isUnikSku = true;
                }
            }

            if (availSizesNb == 0) {
                if (!isOutOfStockSizeVisible) rulesObj.IsDropdownEnabled = false;
            } else if (availSizesNb == 1) {
                rulesObj.IsDropdownDisplayed = false;
                rulesObj.IsTextboxDisplayed = !isUnikSku;
            } else {
                rulesObj.IsDropdownDisplayed = true;
                rulesObj.IsTextboxDisplayed = false;
            }
            return rulesObj;
        }
    }
}

RedcatsOT.PictureRulesManager = function () {
    return new function () {
        this.GetRegularStickerForOfferType = function (images, offertype) {
            return GetSticker(images, offertype, "StdFileName");
        };
        this.GetComparisonStickerForOfferType = function (images, offertype) {
            return GetSticker(images, offertype, "CmpFileName");
        };
        this.GetSalesStickerForOfferType = function (images, offertype) {
            return GetSticker(images, offertype, "SalesFileName");
        };
        function GetSticker(images, offertype, stickertype) {
            var url = '';
            for (var i = 0; i < images.length; i++) {
                if (!isNullOrUndefined(images[i].BTy) && !isNullOrUndefined(images[i].BTy.Id)
                    && images[i].BTy.Id == 'Sticker' && !isNullOrUndefined(images[i].Id) && images[i].Id == stickertype
                    && images[i].OfrType == offertype) {
                    url = GetPicturePath(images[i].FlNm);
                }
            }
            return url;
        }
        function GetPicturePath(fileName) {
            var mediaPath = '//media.laredoute.fr/Product/EUPICTURES';
            if (isNullOrUndefined(fileName)) {
                return '';
            }
            if (fileName.length > 13) {
                if (!isNaN(fileName.substring(6, 7)) && !isNaN(fileName.substring(7, 8)) && !isNaN(fileName.substring(8, 9))) {
                    return mediaPath + '/' + fileName.substring(6, 7) + '/' + fileName.substring(7, 8) + '/' + fileName.substring(8, 9) + '/' + fileName;
                }
                else {
                    return mediaPath + '/' + fileName.substring(0, 1) + '/' + fileName;
                }
            }
            else {
                return mediaPath + '/' + fileName.substring(0, 1) + '/' + fileName;
            }
        }
    }
}
RedcatsOT.AvailabilityRulesManager = function () {
    return new function () {
        this.GetRules = function (offer) {
            var stkInfos = offer.Stk;
            var rule = { 'IsMktPr': offer.IsMktPr, 'VendorId': offer.VdrInfo.Id };
            switch (stkInfos.AvSt) {
                case 1: //Available
                    switch (stkInfos.FsAvPl) {
                        case 1: //Outlet
                            rule.DeliveryPlace = outletdelivery;
                            break;
                        case 2: //Home
                            rule.DeliveryPlace = homedelivery;
                            break;
                    }
                    rule.Status = "Available";
                    rule.DeliveryText = productavailablilityinstock;
                    var deliveryUnit = CalculateDeliveryUnit(stkInfos.FsAvDt);
                    var deliveryValue;
                    switch (deliveryUnit) {
                        case 1:
                            deliveryValue = stkInfos.FsAvDt * 24;
                            rule.DeliveryDate = deliverydelayhours.replace(deliveryDelimiter.toLowerCase(), deliveryValue);
                            break;
                        case 2:
                            deliveryValue = stkInfos.FsAvDt;
                            rule.DeliveryDate = deliverydelaydays.replace(deliveryDelimiter.toLowerCase(), deliveryValue);
                            break;
                        case 3:
                            deliveryValue = Math.floor(stkInfos.FsAvDt / 7);
                            rule.DeliveryDate = deliverydelayweeks.replace(deliveryDelimiter.toLowerCase(), deliveryValue);
                            break;
                    }
                    break;
                case 0: //Out of stock
                    rule.Status = "OutOfStock";
                    rule.DeliveryText = productavailablilityoutofstock;
                    //RestockAlert
                    if (!offer.IsMktPr && stkInfos.AvPrd != 0 && offer.CtmrTgt != '4') {
                        rule.IsRestockAlertVisible = true;
                    } else {
                        rule.IsRestockAlertVisible = false;
                    }
                    break;
                case 2: //Back ordered

                    rule.Status = "BackOrdered";
                    rule.DeliveryText = productavailablilitybackordered;
                    switch (stkInfos.FsBkOrdPl) {
                        case 1: //Outlet
                            rule.DeliveryPlace = outletdelivery;
                            break;
                        case 2: //Home
                            rule.DeliveryPlace = homedelivery;
                            break;
                    }
                    var deliveryUnit = CalculateDeliveryUnit(stkInfos.FsBkOrdDt);
                    var deliveryValue;
                    switch (deliveryUnit) {
                        case 1:
                            deliveryValue = stkInfos.FsBkOrdDt * 24;
                            rule.DeliveryDate = deliverydelayhours.replace(deliveryDelimiter.toLowerCase(), deliveryValue);
                            break;
                        case 2:
                            deliveryValue = stkInfos.FsBkOrdDt;
                            rule.DeliveryDate = deliverydelaydays.replace(deliveryDelimiter.toLowerCase(), deliveryValue);
                            break;
                        case 3:
                            deliveryValue = Math.floor(stkInfos.FsBkOrdDt / 7);
                            rule.DeliveryDate = deliverydelayweeks.replace(deliveryDelimiter.toLowerCase(), deliveryValue);
                            break;
                    }
                    //RestockAlert
                    if (!offer.IsMktPr && offer.CtmrTgt != '4') {
                        rule.IsRestockAlertVisible = true;
                    } else {
                        rule.IsRestockAlertVisible = false;
                    }
                    break;
            }
            return rule;
        }
    }
}
RedcatsOT.CACFRulesManager = function () {
    return new function () {
        var pricingRuleManager = new RedcatsOT.PricingRulesManager();
        var freeDeliveryLink = { 'Text': 'Livraison offerte', 'Link': 'javascript:popUp(\'/StaticPage/BlankContentPage.aspx?pagename=essayer_avant_payer\',560,630,700);' };

        this.GetRulesForOffer = function (offer) {
            var rule = {};
            rule.Links = Array();
            if (offer.Stk.AvSt != 0) {
                if (offer.IsMktPr) {//not Redoute
                    if (offer.LiPr >= 150) {
                        var link = { 'Text': 'Simuler mon achat', 'Link': 'javascript:popUp(\'http://www.finaref.fr/simulpart/Redoute/simulin.asp?product=rpremium&productprice=' + pricingRuleManager.formatPrice(offer.LiPr) + '\',560,630,700);' };
                        rule.Links.push(link);
                    } else {
                        var link = { 'Text': 'Plus d\'avantages', 'Link': 'javascript:popUp(\'/StaticPage/BlankContentPage.aspx?pagename=essayer_avant_payer\',560,630,700);' };
                        rule.Links.push(link);
                    }

                } else {//Redoute
                    if (offer.LiPr >= 150) {
                        var link = { 'Text': 'Simuler mon achat', 'Link': 'javascript:popUp(\'http://www.finaref.fr/simulpart/Redoute/simulin.asp?product=rpremium&productprice=' + pricingRuleManager.formatPrice(offer.LiPr) + '\',560,630,700);' };
                        rule.Links.push(link);
                        rule.Links.push(freeDeliveryLink);
                    } else if (offer.LiPr >= 39) {
                        rule.Links.push(freeDeliveryLink);
                    } else {
                        var link = { 'Text': 'Plus d\'avantages', 'Link': 'javascript:popUp(\'/StaticPage/BlankContentPage.aspx?pagename=essayer_avant_payer\',560,630,700);' };
                        rule.Links.push(link);
                    }
                }
            }
            return rule;
        }
        this.GetGenericRules = function () {
            var rule = {};
            rule.Links = Array();
            var link = { 'Text': 'Plus d\'avantages', 'Link': 'javascript:popUp(\'/StaticPage/BlankContentPage.aspx?pagename=essayer_avant_payer\',560,630,700);' };
            rule.Links.push(link);
            return rule;
        }
    }
}


RedcatsOT.ServicesRulesManager = function () {
    return new function () {
        this.GetSeductionServices = function (offer) {
            var services = Array();
            for (var i = 0; i < offer.AncSvcs.length; i++) {
                switch (offer.AncSvcs[i].Id) {
                    case '9001':
                    case '9002':
                    case '48':
                        var info = GetAdjunctService(offer.AncSvcs[i].Id);
                        if (!isNullOrUndefined(info)) {
                            var service = {};
                            service.Id = offer.AncSvcs[i].Id;
                            service.Text = info.DN;
                            service.Link = info.ExpURL;
                            services.push(service);
                        }
                        break;
                }
            }
            return services;
        }
        this.GetTechnicalServices = function (offer) {
            var services = Array();
            for (var i = 0; i < offer.AncSvcs.length; i++) {
                if (offer.AncSvcs[i].BTy.Id == 1) {
                    switch (offer.AncSvcs[i].Id) {
                        case '51':
                        case '60':
                        case '9002':
                        case '9003':
                        case '9008':
                            break;
                        default:
                            var info = GetAdjunctService(offer.AncSvcs[i].Id);
                            if (!isNullOrUndefined(info)) {
                                var service = {};
                                service.Id = offer.AncSvcs[i].Id;
                                service.Text = info.DN;
                                service.Link = info.ExpURL;
                                services.push(service);
                            }
                    }
                }
            }
            return services;
        }
        this.GetPaidServices = function (offer) {
            var services = Array();
            for (var i = 0; i < offer.AncSvcs.length; i++) {
                if (offer.AncSvcs[i].BTy.Id == 3) {
                    var info = GetAdjunctService(offer.AncSvcs[i].Id);
                    if (!isNullOrUndefined(info)) {
                        var service = {};
                        service.Id = offer.AncSvcs[i].Id;
                        service.Text = info.DN;
                        service.Link = info.ExpURL;
                        service.Price = offer.AncSvcs[i].LiPr;
                        service.IsOrderLevelService = !JSONisNullOrUndefinedOrEmpty(info.FOrdLvl) ? info.FOrdLvl : false;
                        service.IsQuantityComplementaryInformation = !JSONisNullOrUndefinedOrEmpty(info.FQtyCmpInf) ? info.FQtyCmpInf : false;
                        service.MaxQuantity = !JSONisNullOrUndefinedOrEmpty(info.MaxQty) ? info.MaxQty : 99;
                        services.push(service);
                    }
                }
            }
            return services;
        }
        this.GetServiceMessage = function (ServiceId, SectionId) {
            try {
                return GetAdjunctServiceMessage(ServiceId, SectionId);
            } catch (ex) {
                return null;
            }
        }
    }
}

RedcatsOT.PricingRulesManager = function () {
    return new function () {

        this.GetRulesForDeliveryFees = function (selectedOffer) {
            var deliveryFeesRule = { 'NormalDelivery': null, 'FastDelivery': null };
            //            if (selectedOffer.VdrInfo.Id == 0) {
            for (var i = 0; i < selectedOffer.AncSvcs.length; i++) {
                if (selectedOffer.AncSvcs[i].BTy.Id == "2") {
                    var service = selectedOffer.AncSvcs[i];
                    switch (service.Id) {
                        //                            case "50":       
                        //                            case "51":       
                        //                            case "52":       
                        //                            case "53":       
                        //                            case "54":       
                        //                                deliveryFeesRule.NormalDelivery = service.LiPr;       
                        //                                break;       
                        case "60":
                            deliveryFeesRule.FastDelivery = service.LiPr;
                            break;
                    }
                }
            }
            deliveryFeesRule.NormalDelivery = selectedOffer.VdrInfo.VenDelFee;
            //            } else if (!isNullOrUndefined(selectedOffer.VdrInfo.VenDelFee)) {
            //                deliveryFeesRule.NormalDelivery = selectedOffer.VdrInfo.VenDelFee;
            //            }
            return deliveryFeesRule;
        };
        this.GetRulesForSelectedOffer = function (selectedOffer) {
            var PriceRuleManagement = {};
            PriceRuleManagement.IsMultiDiscount = false;
            PriceRuleManagement.IsMultiPrice = false;
            if (selectedOffer.Dis != 0) {
                PriceRuleManagement.Discount = selectedOffer.Dis;
                PriceRuleManagement.StrikePrice = selectedOffer.PrLiPr;
            } else {
                PriceRuleManagement.Discount = 0;
                PriceRuleManagement.StrikePrice = 0;
            }
            PriceRuleManagement.Price = selectedOffer.LiPr;
            PriceRuleManagement.YearCollection = selectedOffer.YearCltn;
            PriceRuleManagement.OfferType = selectedOffer.OfrType;
            if (selectedOffer.EnvCmpl.FCpl == true) {
                PriceRuleManagement.EcoPart = selectedOffer.EnvCmpl.CplFe;
            } else {
                PriceRuleManagement.EcoPart = 0;
            }
            PriceRuleManagement.TotalPrice = PriceRuleManagement.Price + PriceRuleManagement.EcoPart;
            if (selectedOffer.LtUntPr != selectedOffer.LiPr) {
                PriceRuleManagement.UnitPrice = selectedOffer.LtUntPr;
            } else {
                PriceRuleManagement.UnitPrice = 0;
            }
            return PriceRuleManagement;
        }
        this.GetRulesForProduct = function (product) {
            var PriceRuleManagement = {};
            if (product.Prcs.DiMx == 0) {
                if (product.Prcs.PrLiPrMi != 0) {
                    if (product.Prcs.PrLiPrMi != product.Prcs.PrLiPrMx) {
                        PriceRuleManagement.IsMultiPrice = true;
                    } else {
                        PriceRuleManagement.IsMultiPrice = false;
                    }
                } else {
                    if (product.Prcs.LiPrMi != product.Prcs.LiPrMx) {
                        PriceRuleManagement.IsMultiPrice = true;
                    } else {
                        PriceRuleManagement.IsMultiPrice = false;
                    }
                }
                PriceRuleManagement.Price = product.Prcs.LiPrMi;
                PriceRuleManagement.Discount = 0;
                PriceRuleManagement.StrikePrice = 0;
            } else {
                if (product.Prcs.DiMi != product.Prcs.DiMx) {
                    PriceRuleManagement.IsMultiDiscount = true;
                } else {
                    PriceRuleManagement.IsMultiDiscount = false;
                }

                if (product.Prcs.LiPrMi != product.Prcs.LiPrMx) {
                    PriceRuleManagement.IsMultiPrice = true;
                } else {
                    PriceRuleManagement.IsMultiPrice = false;
                }

                if (product.Prcs.PrLiPrMi != product.Prcs.LiPrMi) {
                    PriceRuleManagement.StrikePrice = product.Prcs.PrLiPrMi;
                }
                else {
                    PriceRuleManagement.StrikePrice = 0;
                }

                PriceRuleManagement.Discount = product.Prcs.DiMx;
                PriceRuleManagement.Price = product.Prcs.LiPrMi;
            }
            if (product.EnvCmpl.FCpl == true) {
                PriceRuleManagement.EcoPart = product.EnvCmpl.MnCplFe;
            } else {
                PriceRuleManagement.EcoPart = 0;
            }
            PriceRuleManagement.TotalPrice = PriceRuleManagement.Price + PriceRuleManagement.EcoPart;

            if (product.Prcs.UnPrMi != product.Prcs.LiPrMi) {
                PriceRuleManagement.UnitPrice = product.Prcs.UnPrMi;
            } else {
                PriceRuleManagement.UnitPrice = 0;
            }
            return PriceRuleManagement;
        }

        this.GetRulesForGoodDealsProduct = function (product) {
            var PriceRuleManagement = { 'IsMultiPrice': false, 'Price': 0, 'StrikePrice': 0, 'TotalPrice': 0 };
            if (product.Prcs.LiPrMi != product.Prcs.LiPrMx) {
                PriceRuleManagement.IsMultiPrice = true;
            } else {
                PriceRuleManagement.IsMultiPrice = false;
            }
            PriceRuleManagement.Price = product.Prcs.MinDlPr;
            PriceRuleManagement.StrikePrice = product.Prcs.LiPrMi;

            if (!isNullOrUndefined(product.EnvCmpl) && product.EnvCmpl.FCpl == true) {
                PriceRuleManagement.EcoPart = product.EnvCmpl.MnCplFe;
            } else {
                PriceRuleManagement.EcoPart = 0;
            }
            PriceRuleManagement.TotalPrice = PriceRuleManagement.Price + PriceRuleManagement.EcoPart;
            return PriceRuleManagement;
        }
        this.GetRulesForGoodDealsProductOffer = function (offer) {
            var PriceRuleManagement = { 'IsMultiPrice': false, 'Price': 0, 'StrikePrice': 0, 'TotalPrice': 0 };
            PriceRuleManagement.Price = offer.DlPr;
            PriceRuleManagement.StrikePrice = offer.LiPr;
            if (!isNullOrUndefined(offer.EnvCmpl) && offer.EnvCmpl.FCpl == true) {
                PriceRuleManagement.EcoPart = offer.EnvCmpl.CplFe;
            } else {
                PriceRuleManagement.EcoPart = 0;
            }
            PriceRuleManagement.TotalPrice = PriceRuleManagement.Price + PriceRuleManagement.EcoPart;
            return PriceRuleManagement;
        }

        this.GetRulesForGoodDealsTotal = function (rules) {

            var PriceRuleManagement = { 'IsMultiPrice': false, 'Price': 0, 'StrikePrice': 0, 'TotalPrice': 0, 'EcoPart': 0 };

            for (var i = 0; i < rules.length; i++) {
                if (rules[i].IsMultiPrice) {
                    PriceRuleManagement.IsMultiPrice = true;
                }
                PriceRuleManagement.Price += rules[i].Price;
                PriceRuleManagement.StrikePrice += rules[i].StrikePrice;
                PriceRuleManagement.EcoPart += rules[i].EcoPart;
            }

            /*JS Number sum issue fix*/
            PriceRuleManagement.Price = Math.round(PriceRuleManagement.Price * 100) / 100;
            PriceRuleManagement.StrikePrice = Math.round(PriceRuleManagement.StrikePrice * 100) / 100;
            if (!isNaN(PriceRuleManagement.EcoPart)) {
                PriceRuleManagement.EcoPart = Math.round(PriceRuleManagement.EcoPart * 100) / 100;
            } else {
                PriceRuleManagement.EcoPart = 0;
            }
            /*End */

            PriceRuleManagement.TotalPrice = PriceRuleManagement.Price + PriceRuleManagement.EcoPart;
            return PriceRuleManagement;
        }

        this.GetPriceTag = function (PrmlPrTyps) {
            var PriceTagManagement = { 'Display': false };
            if (!isNullOrUndefined(PrmlPrTyps)) {
                for (var i = 0; i < PrmlPrTyps.length; i++) {
                    if (PrmlPrTyps[i].DisPrmlPg == true) {
                        switch (PrmlPrTyps[i].DN) {
                            case "PrixFuteItem":
                                PriceTagManagement.Display = true;
                                PriceTagManagement.Label = "PRIX FUTE";
                                PriceTagManagement.Link = 'javascript:void(0);';
                                PriceTagManagement.Css = 'prix_fute';
                                break;
                            case "PrixMiniItem":
                                PriceTagManagement.Display = true;
                                PriceTagManagement.Label = "Shopping <span>prix</span>";
                                PriceTagManagement.Link = 'javascript:popUp(\'/ProductDetail/pop-prix_shopping.aspx\',200,798,778);';
                                PriceTagManagement.Css = 'shopping_prix';
                                break;
                            case "PageRougeItem":
                                PriceTagManagement.Display = true;
                                PriceTagManagement.Label = "PRIX ROUGE";
                                PriceTagManagement.Link = 'javascript:popUp(\'/ProductDetail/pop-prix_rouge.aspx\',200,798,778);';
                                PriceTagManagement.Css = 'prix_rouge';
                                break;
                            case "PageVerteItem":
                                PriceTagManagement.Display = true;
                                PriceTagManagement.Label = "PRIX VERT";
                                PriceTagManagement.Link = 'javascript:popUp(\'/ProductDetail/pop-prix_vert.aspx\',200,798,778);';
                                PriceTagManagement.Css = 'prix_vert';
                                break;
                        }
                    }
                }
            }
            return PriceTagManagement;
        }
        this.formatPrice = function (originalPrice) {
            if (null == originalPrice && 'undefined' == typeof originalPrice) return 0;
            var newPrice = (originalPrice + "").split('.').join(',');

            if (newPrice.indexOf(',') == -1) {
                newPrice += ",00";
            } else {
                if (newPrice.split(',')[1].length == 1) {
                    newPrice += "0";
                }
            }
            var cutPrice = newPrice.split(',');
            if (cutPrice[1].length > 2) {
                newPrice = cutPrice[0] + "," + cutPrice[1].substring(0, 2);
            }
            return newPrice;

        }

        this.formatDiscount = function (originalDiscount) {
            var newDiscount = (originalDiscount + "").split('.')[0];
            return newDiscount;
        }
    }
}





if (isNullOrUndefined(RedcatsOT)) {
    var RedcatsOT = {};
}

RedcatsOT.Basket = function (callingPage) {
    return new function () {
        var AjaxPageUrl = '/Shopping_BasketV2/AjaxAddToBasketV3.aspx?cp=' + callingPage;
        this.isATBRunning = false;
        var itself = this;
        this.OnIntermediateCallBack = null;
        this.OnSuccessCallBack = null;
        this.GoodDealsCombinationToPush = null;

        this.DoATB = function (FRProductList) {
            if (itself.isATBRunning) return;
            itself.isATBRunning = true;
            if (!isNullOrUndefined(isAvailProdcut) && isAvailProdcut == true) {
                AjaxPageUrl = AjaxPageUrl + "&isavail=true";
            }
            LookForGoodDealsATBPush(FRProductList);

            var shouldShowServiceLayer = false;

            var orderLevelServicesAlreadyAdded = GetSubCookieValue('M.R.Basket', 'OLS');
            if (!isNullOrUndefined(orderLevelServicesAlreadyAdded)) {
                orderLevelServicesAlreadyAdded = orderLevelServicesAlreadyAdded.split('|');
            } else {
                orderLevelServicesAlreadyAdded = Array();
            }

            for (var i = 0; i < FRProductList.length; i++) {
                if (FRProductList[i].AvailablePaidServices != null && jQuery.isArray(FRProductList[i].AvailablePaidServices)) {
                    var areAllServicesAlreadyAdded = true;
                    for (var s = 0; s < FRProductList[i].AvailablePaidServices.length; s++) {
                        var isAdded = false;
                        if (FRProductList[i].AvailablePaidServices[s].IsQuantityComplementaryInformation) {
                            for (var a = 0; a < orderLevelServicesAlreadyAdded.length; a++) {
                                if (orderLevelServicesAlreadyAdded[a] == FRProductList[i].AvailablePaidServices[s].Id) {
                                    isAdded = true;
                                    FRProductList[i].AvailablePaidServices[s].AlreadyBeenAdded = true;
                                }
                            }
                        }
                        for (var p = 0; p < FRProductList.length; p++) {
                            if (FRProductList[p].ItemOfferId == FRProductList[i].AvailablePaidServices[s].ItemOfferId) {
                                isAdded = true;
                                FRProductList[i].AvailablePaidServices[s].AlreadyBeenAdded = true;
                            }
                        }
                        if (!isAdded) {
                            areAllServicesAlreadyAdded = false;
                        }
                    }
                    if (!areAllServicesAlreadyAdded) {
                        shouldShowServiceLayer = true;
                    }
                }
            }

            if (shouldShowServiceLayer) {
                if (!isNullOrUndefined(itself.OnIntermediateCallBack)) {
                    itself.OnIntermediateCallBack();
                }
                OpenServiceLayer(FRProductList);
            } else {
                CallATB(FRProductList);
            }
        }



        function LookForGoodDealsATBPush(FRProductList) {
            itself.GoodDealsCombinationToPush = null;
            for (var i = 0; i < FRProductList.length; i++) {
                if (!isNullOrUndefined(FRProductList[i].AvailableDeals) && jQuery.isArray(FRProductList[i].AvailableDeals)) {
                    for (var j = 0; j < FRProductList[i].AvailableDeals.length; j++) {
                        //Looking if all products that were added to the basket are parts of the good deals combination
                        var areAllProductsPartOfCombination = true;
                        for (var k = 0; k < FRProductList.length; k++) {
                            var productFound = false;
                            try {
                                for (var l = 0; l < FRProductList[i].AvailableDeals[j].Prs.length; l++) {
                                    //                                    if (FRProductList[i].AvailableDeals[j].Prs[l].Id == FRProductList[k].ProductId) {
                                    //                                        productFound = true;
                                    //                                    }
                                    for (var m = 0; m < FRProductList[i].AvailableDeals[j].Prs[l].Vrnts.length; m++) {
                                        for (var n = 0; n < FRProductList[i].AvailableDeals[j].Prs[l].Vrnts[m].Vrnts.length; n++) {
                                            for (var o = 0; o < FRProductList[i].AvailableDeals[j].Prs[l].Vrnts[m].Vrnts[n].Ofrs.length; o++) {
                                                if (FRProductList[i].AvailableDeals[j].Prs[l].Vrnts[m].Vrnts[n].Ofrs[o].ItemOfferId == FRProductList[k].ItemOfferId) {
                                                    productFound = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            } catch (ex) { }
                            if (!productFound) {
                                areAllProductsPartOfCombination = false;
                                break;
                            }
                        }
                        if (areAllProductsPartOfCombination) {
                            itself.GoodDealsCombinationToPush = FRProductList[i].AvailableDeals[j];
                            break;
                        }
                    }
                }
                if (!isNullOrUndefined(itself.GoodDealsCombinationToPush)) {
                    break;
                }
            }
            for (var i = 0; i < FRProductList.length; i++) {
                if (!isNullOrUndefined(FRProductList[i].AvailableDeals) && jQuery.isArray(FRProductList[i].AvailableDeals)) {
                    FRProductList[i].AvailableDeals = null;
                }
            }
        }


        function OpenServiceLayer(FRProductList) {
            var ServicesBoxDynamicContent = $j('#OfferServicesLayer .services_list');
            var contentToAdd = '';
            var productName;
            var firstServiceForThisProduct;
            var serviceCnt = 0;
            for (var i = 0; i < FRProductList.length; i++) {
                if (serviceCnt > 1) {
                    break;
                }
                if (FRProductList[i].AvailablePaidServices != null && jQuery.isArray(FRProductList[i].AvailablePaidServices)) {
                    serviceCnt += FRProductList[i].AvailablePaidServices.length;
                }
            }
            var servicesAlreadyInLayer = Array();
            for (var i = 0; i < FRProductList.length; i++) {
                if (FRProductList[i].AvailablePaidServices != null && jQuery.isArray(FRProductList[i].AvailablePaidServices)) {
                    firstServiceForThisProduct = true;
                    for (var j = 0; j < FRProductList[i].AvailablePaidServices.length; j++) {
                        if (!isNullOrUndefined(FRProductList[i].AvailablePaidServices[j].AlreadyBeenAdded) &&
                            FRProductList[i].AvailablePaidServices[j].AlreadyBeenAdded && FRProductList[i].AvailablePaidServices[j].IsQuantityComplementaryInformation) {
                            FRProductList[i].AvailablePaidServices[j].AlreadyBeenAdded = false;
                            continue;
                        }
                        var isAlreadyExist = false;
                        if (FRProductList[i].AvailablePaidServices[j].IsOrderLevelService) {
                            for (var cnt = 0; cnt < servicesAlreadyInLayer.length; cnt++) {
                                if (servicesAlreadyInLayer[cnt] == FRProductList[i].AvailablePaidServices[j].Id) {
                                    isAlreadyExist = true;
                                }
                            }
                            servicesAlreadyInLayer.push(FRProductList[i].AvailablePaidServices[j].Id);
                        }
                        if (isAlreadyExist) continue;
                        if (firstServiceForThisProduct) {
                            productName = FRProductList[i].Title;
                        } else {
                            productName = '';
                        }
                        contentToAdd += '<li class="service_line" initialPrice="' + FRProductList[i].AvailablePaidServices[j].LiPr + '"';
                        contentToAdd += ' IsQuantityComplementaryInformation="' + FRProductList[i].AvailablePaidServices[j].IsQuantityComplementaryInformation + '"';
                        contentToAdd += ' maxQuantity="' + FRProductList[i].AvailablePaidServices[j].MaxQuantity + '"';
                        contentToAdd += '>';
                        if (firstServiceForThisProduct) {
                            contentToAdd += '<p class="product_name">' + productName + ' (Quantité ' + FRProductList[i].Quantity + ')';
                            contentToAdd += '</p>';
                        }
                        contentToAdd += '<div class="container_group_price">';
                        contentToAdd += '<p class="group_name">';
                        if (serviceCnt > 1) {
                            contentToAdd += '<input type="checkbox" class="' + FRProductList[i].AvailablePaidServices[j].Id + ' ' + FRProductList[i].ItemOfferId;
                            contentToAdd += '" id="service_' + FRProductList[i].AvailablePaidServices[j].Id + '_' + FRProductList[i].ItemOfferId + '" checked ';
                            if (FRProductList[i].AvailablePaidServices[j].AlreadyBeenAdded) {
                                contentToAdd += ' disabled="disabled" ';
                            }
                            contentToAdd += '/>';

                            if (!isNullOrUndefined(FRProductList[i].AvailablePaidServices[j].Imgs) && FRProductList[i].AvailablePaidServices[j].Imgs.length > 0
                                && !isNullOrUndefined(FRProductList[i].AvailablePaidServices[j].Imgs[0]) && !isNullOrUndefined(FRProductList[i].AvailablePaidServices[j].Imgs[0].URL)
                                && FRProductList[i].AvailablePaidServices[j].Imgs[0].URL != '') {
                                contentToAdd += '<img src="' + FRProductList[i].AvailablePaidServices[j].Imgs[0].URL + '" />';
                            }

                            contentToAdd += '<label for="service_' + FRProductList[i].AvailablePaidServices[j].Id + '_' + FRProductList[i].ItemOfferId + '">';
                        }
                        else {
                            contentToAdd += '<input type="checkbox" class="' + FRProductList[i].AvailablePaidServices[j].Id + ' ' + FRProductList[i].ItemOfferId;
                            contentToAdd += '" id="service_' + FRProductList[i].AvailablePaidServices[j].Id + '_' + FRProductList[i].ItemOfferId + '" style="display:none" checked  />';


                            if (!isNullOrUndefined(FRProductList[i].AvailablePaidServices[j].Imgs) && FRProductList[i].AvailablePaidServices[j].Imgs.length > 0
                                && !isNullOrUndefined(FRProductList[i].AvailablePaidServices[j].Imgs[0]) && !isNullOrUndefined(FRProductList[i].AvailablePaidServices[j].Imgs[0].URL)
                                && FRProductList[i].AvailablePaidServices[j].Imgs[0].URL != '') {
                                contentToAdd += '<img src="' + FRProductList[i].AvailablePaidServices[j].Imgs[0].URL + '" />';
                            }
                            contentToAdd += '<label>';
                        }
                        contentToAdd += FRProductList[i].AvailablePaidServices[j].DN + '</label>';
                        if (!isNullOrUndefined(FRProductList[i].AvailablePaidServices[j].ExpURL)) {
                            contentToAdd += '<a class="question_mark" href="javascript:OpenServicePopUp(\'' + FRProductList[i].AvailablePaidServices[j].ExpURL + '\');"></a>';
                        }
                        contentToAdd += '</p><p class="price_line">';
                        contentToAdd += '<span class="price">' + formatPrice(FRProductList[i].AvailablePaidServices[j].LiPr) + ' €</span>';
                        contentToAdd += '</p>';
                        contentToAdd += '<div class="qty_service" ' + ((FRProductList[i].Quantity == 1 && !FRProductList[i].AvailablePaidServices[j].IsQuantityComplementaryInformation || FRProductList[i].AvailablePaidServices[j].AlreadyBeenAdded) ? 'style="display:none"' : '') + '>';
                        contentToAdd += '<label>Quantité :</label>';
                        contentToAdd += '<select class="quantity_select" autocomplete="off">';
                        var maxQty = FRProductList[i].Quantity;

                        if (FRProductList[i].AvailablePaidServices[j].IsQuantityComplementaryInformation) {
                            maxQty = FRProductList[i].AvailablePaidServices[j].MaxQuantity;
                        }
                        if (maxQty == 99) maxQty = 1;
                        for (var q = 1; q <= maxQty; q++) {
                            contentToAdd += '<option ' + (q == 1 ? 'selected="selected"' : '') + ' value="' + q + '">' + q + '</option>';
                        }
                        contentToAdd += '</select>';
                        contentToAdd += '<div class="clear"></div>';
                        contentToAdd += '</div>';
                        var message = GetAdjunctServiceMessage(FRProductList[i].AvailablePaidServices[j].Id, 'SVC_LAYER'); //GetMessage('Service', 'PUSH_' + FRProductList[i].AvailablePaidServices[j].Id);
                        if (!isNullOrUndefined(message)) {
                            contentToAdd += '<p class="warning_msg_qty">' + message.Text + '</p>';
                        }
                        contentToAdd += '<div class="clear"></div>';
                        contentToAdd += '</div>';
                        contentToAdd += '</li>';

                        firstServiceForThisProduct = false;
                        FRProductList[i].AvailablePaidServices[j].AlreadyBeenAdded = false;
                    }

                }

            }
            ServicesBoxDynamicContent.empty();
            ServicesBoxDynamicContent.append(contentToAdd);
            astbManagement();


            function astbManagement() {
                var div = $j(this).parent().parent();
                var select = div.find('select.quantity_select');
                if (select.find('option').length > 1) {
                    select.val(1);
                    select.trigger('change');
                    if ($j(this).attr('checked') || $j(this).attr('checked') == 'checked') {
                        div.find('div.qty_service').show();
                    } else {
                        div.find('div.qty_service').hide();
                    }
                } else {
                    div.find('div.qty_service').hide();
                }
                var atbButton = $j('#OfferServicesLayer div.layer_buttons a:first');
                if ($j('#OfferServicesLayer input:checked').length == 0) {
                    //disabled services layer ATB
                    atbButton.toggleClass('add_services', false);
                    atbButton.toggleClass('add_services_disabled', true);
                } else {
                    //enable services layer ATB
                    atbButton.toggleClass('add_services', true);
                    atbButton.toggleClass('add_services_disabled', false);
                }
            };

            $j('#OfferServicesLayer input[type=checkbox]').bind('change', astbManagement);

            $j('#OfferServicesLayer a.add_services').unbind('click');
            $j('#OfferServicesLayer a.add_services').bind('click', function () {
                if ($j(this).attr('class').indexOf('add_services_disabled') != -1) {//Button is disabled
                    return;
                }
                var newFrProductList = Array();
                for (var i = 0; i < FRProductList.length; i++) {
                    newFrProductList.push(FRProductList[i]);
                    if (!isNullOrUndefined(FRProductList[i].AvailablePaidServices) && jQuery.isArray(FRProductList[i].AvailablePaidServices)) {
                        for (var j = 0; j < FRProductList[i].AvailablePaidServices.length; j++) {
                            var cb = $j('#OfferServicesLayer #service_' + FRProductList[i].AvailablePaidServices[j].Id + '_' + FRProductList[i].ItemOfferId + ':not(:disabled)');
                            if (cb.length != 0 && cb.attr('checked') == true) {
                                var serviceFRProduct = {};
                                serviceFRProduct.PresCode = FRProductList[i].AvailablePaidServices[j].AltId;
                                serviceFRProduct.SizeCode = "99999";
                                serviceFRProduct.ItemOfferId = FRProductList[i].AvailablePaidServices[j].ItemOfferId;
                                serviceFRProduct.Price = toFloat(FRProductList[i].AvailablePaidServices[j].LiPr);
                                serviceFRProduct.Title = FRProductList[i].AvailablePaidServices[j].DN;
                                if (isNullOrUndefined(FRProductList[i].AvailablePaidServices[j].Imgs)) {
                                    serviceFRProduct.Description = ""; //Should be picture
                                } else {
                                    if (FRProductList[i].AvailablePaidServices[j].Imgs.length > 0) {
                                        serviceFRProduct.Description = FRProductList[i].AvailablePaidServices[j].Imgs[0].URL;
                                    }
                                }
                                serviceFRProduct.ParentLineItemGUID = FRProductList[i].LineItemGUID;
                                serviceFRProduct.LineItemGUID = generateGuid();
                                var li = cb.parents('li.service_line');
                                if (li.attr('IsQuantityComplementaryInformation').toLowerCase() == 'true') {
                                    serviceFRProduct.Quantity = 1;
                                    serviceFRProduct.ServiceComplementaryInfo = li.find('select.quantity_select').val();
                                    serviceFRProduct.IsOrderLevelService = true;
                                    serviceFRProduct.IsQuantityComplementaryInformation = true;
                                } else {
                                    serviceFRProduct.Quantity = li.find('select.quantity_select').val();
                                }
                                serviceFRProduct.ServiceId = FRProductList[i].AvailablePaidServices[j].Id;
                                newFrProductList.push(serviceFRProduct);
                            }
                        }
                    }
                }
                HideNewModalBox();
                CallATB(newFrProductList);
            });
            $j('#OfferServicesLayer a.no_services').unbind('click');
            $j('#OfferServicesLayer a.no_services').bind('click', function () {
                HideNewModalBox();
                CallATB(FRProductList);
            });

            HideNewModalBox();
            if (currentModalBoxContent == null) {
                var scrollTop = $j(window).scrollTop();
                try {
                    //var rightPosition = $j("#wrapper").position().left;
                    var rightPosition = ($j(window).width()) / 2 - ($j('#OfferServicesLayer').width() + 36) / 2;
                } catch (ex) {
                    var rightPosition = 0;
                }
                var pos = { left: null, top: (scrollTop + 120), right: (rightPosition), bottom: null };
                ShowNewBlockingModalBox('OfferServicesLayer', pos, function () {
                    HideNewModalBox();
                    CallATB(FRProductList);
                });
                //Omniture tag
                var tmpOmn = {
                    'pageName': s.pageName,
                    'events': s.events,
                    'products': s.products,
                    'prop6': s.prop6,
                    'prop7': s.prop7,
                    'prop8': s.prop8,
                    'prop12': s.prop12,
                    'prop50': s.prop50,
                    'channel': s.channel,
                    'evar10': s.eVar10,
                    'evar12': s.eVar12
                }
                if (isNullOrUndefined(s)) return;
                if (s.pageName != null) {
                    s.pageName = "";
                }
                s.events = '';
                s.products = '';
                s.prop6 = ''; s.prop7 = ''; s.prop8 = '';
                s.prop12 = ''; s.prop50 = '';
                s.eVar10 = '';
                s.eVar12 = '';

                s.pageName = 'FR:RE:AUTRES:Layer de choix des services';
                s.channel = 'AUTRES';
                s.tl(false, 'o', "FRServicesLayer");

                //Putting back old values
                s.pageName = tmpOmn.pageName;
                s.events = tmpOmn.events;
                s.products = tmpOmn.products;
                s.prop6 = tmpOmn.prop6; s.prop7 = tmpOmn.prop7; s.prop8 = tmpOmn.prop8;
                s.prop12 = tmpOmn.prop12; s.prop50 = tmpOmn.prop50;
                s.eVar10 = tmpOmn.evar10;
                s.eVar12 = tmpOmn.eVar12;
                s.channel = tmpOmn.channel;

            }
        }

        function CallATB(FRProductList) {
            try {
                //Tag Commendar Tracking - Adding a try/catch to avoid ATB not working in case of tag commander failure            
                var tmanager = null;
                tmanager = new RedcatsOT.TagCommenderTrackingManager();
                var prodInfo = tmanager.ATBLayerVars(FRProductList);

                if (typeof (tc_ajx_exec_1) == 'function')
                    tc_ajx_exec_1(prodInfo);
            } catch (exception) {
            }
            itself.InvalidateBasketContentCache();
            $j.ajax({
                type: 'POST',
                url: AjaxPageUrl,
                data: {
                    product: $j.toJSON(FRProductList)
                },
                dataType: "json",
                success: function (data) {
                    itself.isATBRunning = false;
                    OnATBSuccess(data, FRProductList);
                },
                error: function () {
                    itself.isATBRunning = false;
                    alert('error');
                },
                complete: function () {
                    itself.isATBRunning = false;
                },
                cache: false,
                async: true,
                timeout: 300000
            });
        }

        function OnATBSuccess(data, FRProductList) {

            if (data.IsLogAvailFromJs == true) {
                ReportAddToCartToAvail(FRProductList, isAvailProdcut);
            }

            itself.isATBRunning = false;

            if (!isNullOrUndefined(itself.OnIntermediateCallBack)) {
                itself.OnIntermediateCallBack();
            }
            if (data.StatusString == "OK") {


                //// Add the Omniture event for displaying Good Deal on ATB layer.
                if (!isNullOrUndefined(itself.GoodDealsCombinationToPush)) {
                    data.OmnitureATBJSON.ATBEvents = data.OmnitureATBJSON.ATBEvents + ",event46";
                }

                setAddToBasketOmnitureTags(data.OmnitureATBJSON);

                if (!isNullOrUndefined(itself.OnSuccessCallBack)) {
                    itself.OnSuccessCallBack();
                }
                else {

                    pushProducts = data.PushProducts;
                    UpdateBasketCount();
                    BindATBLayer(FRProductList);
                    if (!isNullOrUndefined(itself.GoodDealsCombinationToPush)) {
                        $j('#ATBLayer .associated_products_block').hide();
                        $j('#ATBLayer .gd').show();
                        var gdManager = new RedcatsOT.AddToBasketGoodDealsManager($j('#ATBLayer div.GoodDeals'));
                        var excludeProducts = Array();
                        for (var i = 0; i < FRProductList.length; i++) {
                            excludeProducts.push(FRProductList[i].ProductId);
                        }
                        gdManager.Binding([itself.GoodDealsCombinationToPush], excludeProducts);
                    } else {
                        $j('#ATBLayer .associated_products_block').show();
                        $j('#ATBLayer .gd').hide();
                        GetPushProductsFromAvailForATB(data.AvailRequestsJson, false, data.AvailZone1Template, data.AvailZone2Template, data.PushProducts);

                        //Binding MiniPDP on ATB Push
                        $j('#ATBLayer .associated_products .quick_view_overlay,#ATBLayer .associated_products .quick_view_overlay_button').remove();
                        //$j('#ATBLayer .associated_products .product_picture').addMiniPDPOnPush('Cross sell ATB');
                    }
                    ShowATBLayer();
                }
            } else {
                ReportTechnicalErrorsToOmniture('AddToBasketClick_AjaxATBError_KO');
                if (!isNullOrUndefined(data.ErrorUrl)) {
                    if (data.ErrorUrl.indexOf('~') == 0) {
                        data.ErrorUrl = data.ErrorUrl.substring(1);
                    }
                    window.location.replace(data.ErrorUrl);
                } else {
                    alert(trim(data.ErrorMessage));
                }
            }
        }


        var BasketContentCacheKey = "BasketContent";
        var BasketContentCacheCookieKey = "HasBasketContentInCache";
        this.GetBasketContent = function (callBackFunction) {

            var basketContent = GetBasketContentFromCache();
            if (isNullOrUndefined(basketContent)) {
                $j.ajax({
                    url: "/Shopping_BasketV2/AjaxGetBasket.aspx",
                    type: "GET",
                    async: true,
                    cache: false,
                    timeout: 10000,
                    dataType: "json",
                    success: function (jsonData) {
                        SetBasketContentInCache(jsonData);
                        UpdateBasketCount();
                        callBackFunction(jsonData, false);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        callBackFunction({ 'Products': [] }, false);
                    }
                });
            } else {
                callBackFunction(basketContent, true);
            }
        };
        this.InvalidateBasketContentCache = function () {
            if (!isNullOrUndefined(jQuery.jStorage) && jQuery.jStorage.storageAvailable()) {
                jQuery.jStorage.deleteKey(BasketContentCacheKey);
                SetTempCookie(BasketContentCacheCookieKey, 'false');
            }
        };
        function SetBasketContentInCache(basketContent) {
            if (!isNullOrUndefined(jQuery.jStorage) && jQuery.jStorage.storageAvailable()) {
                jQuery.jStorage.set(BasketContentCacheKey, basketContent);
                SetTempCookie(BasketContentCacheCookieKey, 'true');
            }
        }
        function GetBasketContentFromCache() {
            if (!isNullOrUndefined(jQuery.jStorage) && jQuery.jStorage.storageAvailable()) {
                var cookieValue = GetCookie(BasketContentCacheCookieKey);
                if (!isNullOrUndefined(cookieValue) && cookieValue == 'true') {
                    return jQuery.jStorage.get(BasketContentCacheKey);
                }
            }
            return null;
        }


    };
}


if (isNullOrUndefined(RedcatsOT)) {
    var RedcatsOT = {};
}

RedcatsOT.GoodDealsManager = function (objPM, objContainer) {
    return new function () {
        var jQueryContainer = objContainer;
        var productDetailManager = objPM;
        this.atwlObjects = null;
        this.combinations = {};

        var dealManagers = Array();

        var itself = this;

        this.AddToBasket = function (products) {
            var atbObject = new RedcatsOT.Basket("GoodDealPage");
            atbObject.DoATB(products);
        }

        this.Binding = function (obj) {
            combinations = obj;
            var dealManager = null;

            for (var i = 0; i < combinations.length; i++) {
                dealManager = new RedcatsOT.DealManager(jQueryContainer.find('div.deal:eq(' + i + ')'), itself);
                dealManager.Binding(combinations[i]);
                dealManagers.push(dealManager);
            }
            jQueryContainer.find('ul.addition li a img').addMiniPDPOnGoodDeals('gooddeals');


            if (jQueryContainer.find('a.seeall').length > 0) {
                jQueryContainer.find('a.seeall').bind('click', function () {
                    if (productDetailManager != null) {
                        productDetailManager.GoTo('div.product_tabs');
                        productDetailManager.OpenSpecificTab('gooddeals');
                    }
                });
            }
        }

        this.OnChange = function (totalPriceRule, isATBOk) {
            var discountValue = (1 - (totalPriceRule.Price / totalPriceRule.StrikePrice)) * 100;
            discountValue = Math.round(discountValue) + "%";
            jQueryContainer.find('p.economy span.discount').html(discountValue);
            if (!isATBOk) {
                jQueryContainer.find('p.economy span.from').show();
            } else {
                jQueryContainer.find('p.economy span.from').hide();
            }
        }
    }
}


RedcatsOT.AddToBasketGoodDealsManager = function (objContainer) {
    return new function () {
        var jQueryContainer = objContainer;
        this.atwlObjects = null;
        var basketObject = new RedcatsOT.Basket("gooddealonatb");
        this.combinations = {};

        var dealManagers = Array();
        var dealBox = jQueryContainer.find('div.deal');


        var itself = this;

        this.AddToBasket = function (products) {
            basketObject.DoATB(products);
        }

        this.Binding = function (obj, excludeList) {
            combinations = obj;
            var dealManager = null;
            dealBox.empty();

            for (var i = 0; i < combinations.length; i++) {

                var box = jQueryContainer.find('div.deal_template').clone();

                box.find('ul').empty();
                var initialLi = jQueryContainer.find('div.deal_template:first ul li');

                var gdProductList = Array();

                for (var j = 0; j < combinations[i].Prs.length; j++) {
                    var isHidden = false;
                    for (var h = 0; h < excludeList.length; h++) {
                        if (excludeList[h] == combinations[i].Prs[j].Id) {
                            isHidden = true;
                        }
                    }
                    if (!isHidden) {
                        gdProductList.push(combinations[i].Prs[j]);
                        var li = initialLi.clone();
                        li.appendTo(box.find('ul'));
                        li.find('p.designation a span').html(combinations[i].Prs[j].DN);
                        if (!isNullOrUndefined(combinations[i].Prs[j].Br)) {
                            li.find('p.brand a span').html(combinations[i].Prs[j].Br.DN);
                        }
                        var colorSelect = li.find('select.color_select');
                        for (var k = 0; k < combinations[i].Prs[j].Vrnts.length; k++) {
                            var option = $j('<option/>');
                            option.attr('value', combinations[i].Prs[j].Vrnts[k].Id);
                            option.html(combinations[i].Prs[j].Vrnts[k].DN);
                            option.appendTo(colorSelect);
                        }
                    } else {
                        var tmpArray = Array();
                        for (var c = 0; c < excludeList.length; c++) {
                            if (excludeList[c] != combinations[i].Prs[j].Id) {
                                tmpArray.push(excludeList[c]);
                            }
                        }
                        excludeList = tmpArray;
                    }
                }
                //combinations[i].Prs = gdProductList;
                var tmpCombination = { 'Prs': gdProductList };

                if (!isNullOrUndefined(combinations[i].ExPr) && !isNullOrUndefined(combinations[i].ExPr.ExPrLi)
                    && combinations[i].ExPr.ExPrLi.length > 0 && combinations[i].ExPr.ExPrLi[0].Ky == 'CombinationDisplayEndDate') {
                    tmpCombination.ExPr = { 'ExPrLi': [{ 'Ky': 'CombinationDisplayEndDate', 'Val': combinations[i].ExPr.ExPrLi[0].Val}] };
                }

                box.appendTo(dealBox);

                dealManager = new RedcatsOT.DealManager(box, itself);
                //dealManager.Binding(combinations[i]);
                dealManager.Binding(tmpCombination);

                dealManagers.push(dealManager);

                box.find('.color_select').trigger('change');
                box.show();
            }

            //jQueryContainer.find('ul.addition li a img').addMiniPDPOnGoodDeals('gooddeals');
        }

        this.OnChange = function (totalPriceRule, isATBOk) {
            var discountValue = (1 - (totalPriceRule.Price / totalPriceRule.StrikePrice)) * 100;
            discountValue = Math.round(discountValue) + "%";
            jQueryContainer.find('p.economy span.discount').html(discountValue);
            if (!isATBOk) {
                jQueryContainer.find('p.economy span.from').show();
            } else {
                jQueryContainer.find('p.economy span.from').hide();
            }
        }
    }
}

RedcatsOT.DealManager = function (objContainer, manager) {
    return new function () {
        var pricingRuleManager = new RedcatsOT.PricingRulesManager();

        var jQueryContainer = objContainer;
        var mainManager = manager;

        var combination = {};

        var productManagers = Array();

        var totalZone = jQueryContainer.find('div.total');
        var priceBox = totalZone.find('div.sumup');

        var atbButton = totalZone.find('a.atb_small_enabled,a.atb_small_disabled');
        var errorBubble = totalZone.find('div.error_bubble');

        var itself = this;
        this.Binding = function (obj) {
            combination = obj;
            var productManager = null;

            for (var j = 0; j < combination.Prs.length; j++) {
                productManager = new RedcatsOT.DealProductManager(jQueryContainer.find('li:eq(' + j + ')'), itself);
                productManager.Binding(combination.Prs[j]);
                productManagers.push(productManager);
            }

            atbButton.hover(function () {
                if ($j(this).attr('class').indexOf('disabled') != -1) {
                    errorBubble.show();
                }
            }, function () {
                errorBubble.hide();
            });
            atbButton.bind('click', function (e) {

                e.preventDefault();
                if ($j(this).attr('class').indexOf('enabled') != -1) {
                    var tab = new Array();
                    for (var count = 0; count < productManagers.length; count++) {
                        if (!isNullOrUndefined(productManagers[count])) {
                            tab.push(productManagers[count].GetBasketObject());
                        }
                    }
                    mainManager.AddToBasket(tab);
                }
            });

            if (!isNullOrUndefined(combination.ExPr) && !isNullOrUndefined(combination.ExPr.ExPrLi)
                    && combination.ExPr.ExPrLi.length > 0 && combination.ExPr.ExPrLi[0].Ky == 'CombinationDisplayEndDate') {
                jQueryContainer.find('div.legal p.soldby').show();
                var expiryDate = new Date(combination.ExPr.ExPrLi[0].Val);
                var expiryDateString = zfill(expiryDate.getDate(),2) + "/" + zfill(expiryDate.getMonth() + 1, 2) + "/" + expiryDate.getFullYear();
                jQueryContainer.find('div.legal p.soldby').html('Offre valable jusqu\'au ' + expiryDateString + ' dans la limite des stocks disponibles.');
            } else {
                jQueryContainer.find('div.legal p.soldby').hide();
            }
        }

        this.OnCombinationChange = function () {
            var pricingRules = Array();
            var HasAllSkusSelected = true;
            for (var j = 0; j < productManagers.length; j++) {
                if (!productManagers[j].IsSkuSelected()) {
                    HasAllSkusSelected = false;
                }
                pricingRules.push(productManagers[j].GetPricingRule());
            } 
            var dealPriceRules = pricingRuleManager.GetRulesForGoodDealsTotal(pricingRules); 
            UpdatePriceInfos(dealPriceRules);

            atbButton.toggleClass('atb_small_enabled', HasAllSkusSelected);
            atbButton.toggleClass('atb_small_disabled', !HasAllSkusSelected);

            mainManager.OnChange(dealPriceRules, HasAllSkusSelected);
        }

        function zfill(num, len) { return (Array(len).join("0") + num).slice(-len); }

        function UpdatePriceInfos(rules) {
            if (rules.IsMultiPrice == true) {
                priceBox.find('p.from').css("visibility", "visible");
            } else {
                priceBox.find('p.from').css("visibility", "hidden");
            }
            priceBox.find('p.price').html(pricingRuleManager.formatPrice(rules.Price) + ' €');

            priceBox.find('p.striked_price').html(pricingRuleManager.formatPrice(rules.StrikePrice) + ' €');
            
            if (rules.EcoPart == 0) {
                priceBox.find('p.ecopart').hide();
            } else {
                priceBox.find('p.ecopart').show();
                priceBox.find('p.ecopart').html('+ ' + pricingRuleManager.formatPrice(rules.EcoPart) + ' € d\'éco-part. soit <span>' + rules.TotalPrice + ' €</span>');
            }
        }
    }
}

RedcatsOT.DealProductManager = function (objContainer, manager) {
    return new function () {
        var pricingRuleManager = new RedcatsOT.PricingRulesManager();
        var businessRulesManager = new RedcatsOT.BusinessRulesManager();

        var jQueryContainer = objContainer;
        var mainManager = manager;


        var mainPicture = jQueryContainer.find('img');

        var colorSelect = jQueryContainer.find('select.color_select');
        var sizeSelect = jQueryContainer.find('select.size_select');
        var sizeInput = jQueryContainer.find('input.size_select');

        var priceBox = jQueryContainer.find('p.price');

        var product = {};

        var itself = this;

        this.Binding = function (obj) {
            product = { 'Products': [obj] };
            
            colorSelect.bind('keyup change', function () {
                var selectedColor = $j(this).val(); 
                var colorJson = GetM2ColorJsonByInternalRefernce(product, selectedColor);

                UpdatePicture(colorJson[0]);

                var sizes = colorJson[0].Vrnts;

                if (sizes.length != 0) {

                    var bRules = businessRulesManager.GetSizeRules(sizes, false);

                    var oldSelectValue = sizeSelect.val();
                    if (isNullOrUndefined(oldSelectValue)) {
                        oldSelectValue = '-1';
                    }
                    sizeSelect.empty();
                    for (var i = 0; i < bRules.Options.length; i++) {
                        if (i < bRules.Options.length) {
                            bRules.Options[i].appendTo(sizeSelect);
                        }
                    }
                    if (sizeSelect.find('option[value=' + oldSelectValue + ']').length == 0) {
                        oldSelectValue = -1;
                    }
                    sizeSelect.val(oldSelectValue);
                    if (bRules.IsDropdownDisplayed) {
                        sizeSelect.show();
                    } else {
                        sizeSelect.val(sizeSelect.find('option:eq(1)').attr('value'));
                        sizeSelect.hide();
                    }
                    if (bRules.IsDropdownEnabled) {
                        sizeSelect.attr('disabled', '');
                    } else {
                        sizeSelect.attr('disabled', 'disabled');
                    }
                    if (bRules.IsTextboxDisplayed) {
                        sizeInput.show();
                        sizeInput.val(sizeSelect.find('option:eq(1)').html());
                    } else {
                        sizeInput.hide();
                    }
                    if (!bRules.IsTextboxDisplayed && !bRules.IsDropdownDisplayed) {
                        sizeSelect.val(sizeSelect.find('option:eq(1)').attr('value'));
                    }
                    sizeSelect.trigger('change');
                }

            });

            sizeSelect.bind('change keyup', function () {
                UpdatePriceInfos(itself.GetPricingRule());
                mainManager.OnCombinationChange();
            });

        }
        this.GetBasketObject = function () {
            var selectedColor = colorSelect.val();
            var colorJson = GetM2ColorJsonByInternalRefernce(product, selectedColor);
            var selectedSizeJson = GetM2SizeObjectFromM2Color(colorJson, sizeSelect.val());
            
            var offerid = selectedSizeJson.Ofrs[0].ItemOfferId;

            var m2basketobj = GetM2BasketJSONFromOffer(product, offerid, 1, '');
            var frproductobj = new FRProductObjectFromM2BasketObject(m2basketobj);
            frproductobj.GDPrice = selectedSizeJson.Ofrs[0].DlPr;
            return frproductobj;
        }

        this.IsSkuSelected = function () {
            return (sizeSelect.val() != '-1');
        }
        this.GetPricingRule = function () {
            var rule = {};
            var selectedColor = colorSelect.val();
            var colorJson = GetM2ColorJsonByInternalRefernce(product, selectedColor);
            if (itself.IsSkuSelected()) {
                var selectedSizeJson = GetM2SizeObjectFromM2Color(colorJson, sizeSelect.val());
                rule = pricingRuleManager.GetRulesForGoodDealsProductOffer(selectedSizeJson.Ofrs[0]);
            } else {
                rule = pricingRuleManager.GetRulesForGoodDealsProduct(product.Products[0]);
            }
            return rule;
        }

        function UpdatePriceInfos(rules) {
            var priceInfo = '';
            if (rules.IsMultiPrice == true) {
                priceInfo = 'à partir de ';
            }
            priceInfo += '<span class="value">' + pricingRuleManager.formatPrice(rules.StrikePrice) + ' €</span>';
            priceBox.html(priceInfo);
        }

        function UpdatePicture(color) {
            var src = null;
            for (var i = 0; i < color.Imgs.length; i++) {
                if (color.Imgs[i].Id == "bigOtherView" || color.Imgs[i].Id == "HDZOtherView"
                    || color.Imgs[i].Id == "bigPict" || color.Imgs[i].Id == "HDZ"
                    || color.Imgs[i].Id == "firstLevelBigOtherView" || color.Imgs[i].Id == "firstLevelHDZOtherView") {
                    src = color.Imgs[i].URL + "?s=150";
                    break;
                }
            }
            if (isNullOrUndefined(src)) {
                for (var i = 0; i < product.Products[0].Imgs.length; i++) {
                    if (product.Products[0].Imgs[i].Id == "bigOtherView" || product.Products[0].Imgs[i].Id == "HDZOtherView"
                    || product.Products[0].Imgs[i].Id == "bigPict" || product.Products[0].Imgs[i].Id == "HDZ"
                    || product.Products[0].Imgs[i].Id == "firstLevelBigOtherView" || product.Products[0].Imgs[i].Id == "firstLevelHDZOtherView") {
                        src = color.Imgs[i].URL + "?s=114";
                        break;
                    }
                }
            }

            if (!isNullOrUndefined(src)) mainPicture.attr('src', src);
        }
    }
}

//Acessor Methods
var origin = 'DirectOrder';
var intermPageUrl = '/Order_from_catalog/DOM2ServicesCallPage.aspx?';
var directOrderURL = '';
var ISM2AjaxFailed = false;
var blockingM2Call = false;
var userPresCode = '';

function GetM2ProductAsJSON(SKUParam, usePresCode, callback, origin, vendorid, pId, dId, customerTarget) {
    if (blockingM2Call == true) { return; }
    blockingM2Call = true;
    var callBackParam = "";
    if (usePresCode) {
        directOrderURL = intermPageUrl + 'prescode=' + SKUParam;
        callBackParam = SKUParam;
    } else {
        directOrderURL = intermPageUrl + 'itemofferid=' + SKUParam;
        callBackParam = lineItemInfo.internalreference;
    }
    userPresCode = SKUParam;

    if (!JSONisNullOrUndefinedOrEmpty(origin)) {
        if (origin == 2 || origin == 4) {
            directOrderURL += '&ro=do';
        } else {
            directOrderURL += '&ro=web';
        }
    }
    if (!JSONisNullOrUndefinedOrEmpty(vendorid)) {
        directOrderURL += '&vid=' + vendorid;
    }
    if (!JSONisNullOrUndefinedOrEmpty(pId)) {
        directOrderURL += '&pid=' + pId;
    }
    if (!JSONisNullOrUndefinedOrEmpty(dId)) {
        directOrderURL += '&did=' + dId;
    }

    if (!JSONisNullOrUndefinedOrEmpty(customerTarget)) {
        directOrderURL += '&ct=' + customerTarget;
    }
    var onSuccessFunction = function (data) {
        callback(data, callBackParam);
        blockingM2Call = false;
    }
    $j.ajax({
        type: 'POST',
        url: directOrderURL,
        dataType: "json",
        data: {},
        success: onSuccessFunction,
        error: onM2Error,
        cache: false,
        async: true,
        timeout: 300000
    });

}

function onM2Error(XMLHttpRequest, textStatus, errorThrown) {
    try {
        LogAjaxError("DirectOrderM2Call", textStatus + '\n' + errorThrown)
    } catch (ex) {

    }
    ISM2AjaxFailed = true;
    ShowGenericErrorMessage();
    ReportTechnicalErrorsToOmniture('OkClick_' + textStatus + '_' + userPresCode);
    blockingM2Call = false;
}

function IsValidM2Product(M2DOProductJson) {
    if (JSONisNullOrUndefinedOrEmpty(M2DOProductJson) || JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products)) {
        return false;
    }
    var Product = M2DOProductJson.Products[0];
    if (JSONisNullOrUndefinedOrEmpty(Product)) {
        return false;
    }
    else {
        return true;
    }
}

/*
This method accepts Direct Order Product Json and return the Title of the Product.
*/
function GetM2ProductTitle(M2DOProductJson) {

    if (JSONisNullOrUndefinedOrEmpty(M2DOProductJson) || JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products)) {
        return null;
    }
    var M2ProductTitle = M2DOProductJson.Products[0].DN;

    if (JSONisNullOrUndefinedOrEmpty(M2ProductTitle)) {
        return null;
    }
    return M2ProductTitle;
}
/*
This method accepts Direct Order Product Json and return the Description of the Product.
*/
function GetM2ProductDescription(M2DOProductJson) {

    if (JSONisNullOrUndefinedOrEmpty(M2DOProductJson) || JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products)) {
        return null;
    }
    var M2ProductDescription = M2DOProductJson.Products[0].Des;

    if (JSONisNullOrUndefinedOrEmpty(M2ProductDescription)) {
        return null;
    }
    return M2ProductDescription;
}
/*
This method accepts Direct Order Product Json and return the Brand label of the Product.
*/
function GetM2ProductBrand(M2DOProductJson) {
    if (JSONisNullOrUndefinedOrEmpty(M2DOProductJson) || JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products)) {
        return null;
    }
    if (JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products[0].Br)) {
        return null;
    }
    var M2ProductBrand = M2DOProductJson.Products[0].Br.DN;

    if (JSONisNullOrUndefinedOrEmpty(M2ProductBrand)) {
        return null;
    }
    return M2ProductBrand;
}
/*
This method accepts Direct Order Product Json and return the IPM code or Unit label of the Product.
*/
function GetM2ProductUnitLabel(M2DOProductJson) {

    if (JSONisNullOrUndefinedOrEmpty(M2DOProductJson) || JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products)) {
        return null;
    }
    var M2ProductUnitLabel = M2DOProductJson.Products[0].MsrmtTyp.DN;

    if (JSONisNullOrUndefinedOrEmpty(M2ProductUnitLabel)) {
        return null;
    }
    return M2ProductUnitLabel;
}
/*
This method accepts Direct Order Product Json and return 
the Allow personalization text boolean value.
*/
function IsM2PersonalizationExist(M2DOProductJson, FirstLevelSku, SecondInternalReference) {

    if (JSONisNullOrUndefinedOrEmpty(M2DOProductJson) || JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products)) {
        return null;
    }

    var FirstLevelSkuBlock = JSONQuery(".[?AltId='" + FirstLevelSku + "']", M2DOProductJson.Products[0].Vrnts);

    var AllowPersonalization = JSONQuery(".[?Id='" + SecondInternalReference + "'][0].AlwPrsz", FirstLevelSkuBlock[0].Vrnts);

    if (JSONisNullOrUndefinedOrEmpty(AllowPersonalization)) {
        return null;
    }
    return AllowPersonalization;
}

/*
This method accepts Direct Order Product Json, Internal Reference and SecInternalReference and return  
the Allow personalization text boolean value.
*/
function IsM2PersonalizationExistByInternalReference(M2DOProductJson, InternalReference, SecondInternalReference) {

    if (JSONisNullOrUndefinedOrEmpty(M2DOProductJson) || JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products)) {
        return null;
    }

    var AllowPersonalization = JSONQuery(".[?Id='" + InternalReference + "']..[?Id='" + SecondInternalReference + "'][0].AlwPrsz", M2DOProductJson.Products[0].Vrnts);

    if (JSONisNullOrUndefinedOrEmpty(AllowPersonalization)) {
        return null;
    }
    return AllowPersonalization;
}



/*
This Function accepts M2DOProduct Json and PressCode.
If the PressCode is null, all the Colors (First Level Variants) will be returned.
Else Only the specified color( first level variant) is returned.
*/
function GetM2ColorJsonByPresscode(M2DOProductJson, FirstLevelSku) {

    if (JSONisNullOrUndefinedOrEmpty(M2DOProductJson) || JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products)) {
        return null;
    }

    if (JSONisNullOrUndefinedOrEmpty(FirstLevelSku)) {
        var M2ColorJson = JSONQuery("[?AltId!='']", M2DOProductJson.Products[0].Vrnts);
    }
    else {
        var M2ColorJson = JSONQuery("[?AltId='" + FirstLevelSku + "']", M2DOProductJson.Products[0].Vrnts);
    }

    if (JSONisNullOrUndefinedOrEmpty(M2ColorJson)) {
        return null;
    }
    return M2ColorJson;
}

/*
This Function accepts M2DOProduct Json and PressCode.
If the presscode is not null or empty, all the sizes(second level variants) 
pertaining to that color will be returned.
*/
function GetM2SizeJsonByPresscode(M2DOProductJson, FirstLevelSku) {

    if (JSONisNullOrUndefinedOrEmpty(M2DOProductJson) || JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products)) {
        return null;
    }

    if (JSONisNullOrUndefinedOrEmpty(FirstLevelSku)) {
        return null;
    }
    else {
        var M2SizeJson = JSONQuery("[?AltId='" + FirstLevelSku + "']", M2DOProductJson.Products[0].Vrnts)[0].Vrnts;
    }

    if (JSONisNullOrUndefinedOrEmpty(M2SizeJson)) {
        return null;
    }
    return M2SizeJson;
}

/*
This Function accepts M2DOProduct Json and Internal refernce.
If the Internal refernce is null, all the Colors (First Level Variants) will be returned.
Else Only the specified color( first level variant) is returned.
*/
function GetM2ColorJsonByInternalRefernce(M2DOProductJson, FirstLevelSku) {

    if (JSONisNullOrUndefinedOrEmpty(M2DOProductJson) || JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products)) {
        return null;
    }

    if (JSONisNullOrUndefinedOrEmpty(FirstLevelSku)) {
        var M2ColorJson = JSONQuery("[?Id!='']", M2DOProductJson.Products[0].Vrnts);
    }
    else {
        var M2ColorJson = JSONQuery("[?Id='" + FirstLevelSku + "']", M2DOProductJson.Products[0].Vrnts);
    }

    if (JSONisNullOrUndefinedOrEmpty(M2ColorJson)) {
        return null;
    }
    return M2ColorJson;
}

/*
This Function accepts M2DOProduct Json and Intenal Refernce.
If the Intenal Refernce is not null or empty, all the sizes(second level variants) 
pertaining to that color will be returned.
*/
function GetM2SizeJsonByInternalRefernce(M2DOProductJson, InternalReference) {

    if (JSONisNullOrUndefinedOrEmpty(M2DOProductJson) || JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products)) {
        return null;
    }

    if (JSONisNullOrUndefinedOrEmpty(InternalReference)) {
        return null;
    }
    else {
        var M2SizeJson = JSONQuery("[?Id='" + InternalReference + "']", M2DOProductJson.Products[0].Vrnts)[0].Vrnts;
    }

    if (JSONisNullOrUndefinedOrEmpty(M2SizeJson)) {
        return null;
    }
    return M2SizeJson;
}

function GetM2SizeObjectFromM2Color(M2Color, Id) {
    if (JSONisNullOrUndefinedOrEmpty(M2Color) || JSONisNullOrUndefinedOrEmpty(Id)) {
        return null;
    }
    var M2SizeObject = JSONQuery("[?Id='" + Id + "']", M2Color[0].Vrnts)[0];
    if (JSONisNullOrUndefinedOrEmpty(M2SizeObject)) {
        return null;
    }
    return M2SizeObject;
}

/*
This method accepts Direct Order Product Json , Presscode and SecondInternalReference
and returns the Quantity Json.
*/
function GetM2ProductQuantity(M2DOProductJson, FirstLevelSku, SecondInternalReference) {

    if (JSONisNullOrUndefinedOrEmpty(M2DOProductJson) || JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products)) {
        return null;
    }

    var M2ProductQuantity = JSONQuery(".[?AltId='" + FirstLevelSku + "']..[?Id='" + SecondInternalReference + "'][0].QtyInf", M2DOProductJson.Products[0].Vrnts);

    if (JSONisNullOrUndefinedOrEmpty(M2ProductQuantity)) {
        return null;
    }
    return M2ProductQuantity;
} /*
***************** This method has changed for MP2T , notr being called *****************
This method accepts Direct Order Product Json , Internal Reference and SecondInternalReference
and returns the Quantity Json.
*/
function GetM2ProductQuantityByInternalReference(M2DOProductJson, InternalReference, SecondInternalReference) {

    if (JSONisNullOrUndefinedOrEmpty(M2DOProductJson) || JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products)) {
        return null;
    }

    var M2ProductQuantity = JSONQuery(".[?Id='" + InternalReference + "']..[?Id='" + SecondInternalReference + "'][0].QtyInf", M2DOProductJson.Products[0].Vrnts);

    if (JSONisNullOrUndefinedOrEmpty(M2ProductQuantity)) {
        return null;
    }
    return M2ProductQuantity;
}

function FRProductObjectFromM2BasketObject(m2basketObject) {
    this.Title = m2basketObject.DisplayName;
    this.ItemOfferId = m2basketObject.ItemOfferId;
    this.InternalReference = m2basketObject.InternalReference;
    this.SecInternalReference = m2basketObject.SecInternalReference;
    this.ProductId = m2basketObject.ProductId;
    this.DocumentId = m2basketObject.CatalogVersionId;
    this.CategoryId = m2basketObject.CategoryId;
    this.PresCode = m2basketObject.FirstLevelSku;
    this.SizeCode = m2basketObject.SizeCode;
    this.Origin = "1";
    this.AssociatedItemId = "0";
    this.CategoryName = m2basketObject.CategoryName;

    this.Price = m2basketObject.Price;
    this.UnitPrice = m2basketObject.UnitPrice;
    this.Personalization = m2basketObject.Personalization;

    this.ColorText = m2basketObject.ColorText;
    this.SizeText = m2basketObject.SizeText;
    this.HasAssociatedService = m2basketObject.HasAncillaryService;

    this.CkgCode = "0";
    this.CkgPrice = "0";


    this.IsEcoPart = m2basketObject.IsEcoComplaint;
    this.Quantity = toFloat(m2basketObject.Quantity);
    this.Discount = m2basketObject.Discount;
    this.NoReductBrand = false;
    this.StrikePrice = m2basketObject.StrikePrice;
    this.ParentLineItemGUID = "";
    this.LineItemGUID = generateGuid();
    this.Description = m2basketObject.MediaImageUrl;

    this.BrandLabel = m2basketObject.BrandLabel;
    this.VendorId = m2basketObject.VendorId;
    this.IsMarketPlaceProduct = m2basketObject.IsMarketPlaceProduct;
    if (!isNullOrUndefined(m2basketObject.VendorName)) {
        this.VendorName = m2basketObject.VendorName;
    }
    else {
        this.VendorName = "";
    }
    this.AvailablePaidServices = m2basketObject.AvailablePaidServices;
    this.AvailableDeals = m2basketObject.AvailableDeals;
    this.CustomerTarget = m2basketObject.CustomerTarget;
}

function FRProductObjectFromM2Service(service, relatedProduct) {
    var prod = new FRProduct();
    prod.ServiceId = service.Id;
    prod.PresCode = service.AltId;
    prod.SizeCode = '99999';
    prod.Price = toFloat(service.LiPr);
    prod.ItemOfferId = service.ItemOfferId;
    prod.Title = service.DN;
    if (!isNullOrUndefined(service.Imgs)) {
        prod.Description = service.Imgs[0].URL;
    }
    prod.ParentLineItemGUID = relatedProduct.LineItemGUID;
    prod.LineItemGUID = generateGuid();


    if (!isNullOrUndefined(relatedProduct.SoldByMeter) && (relatedProduct.SoldByMeter.toString().toLowerCase() == "true")) {
        prod.Quantity = 1;
    }
    else {
        prod.Quantity = relatedProduct.Quantity;
    }

    prod.CustomerTarget = 0;
    return prod;
}
var EnumVirtualSite = {
    AMPM: '16270749',
    LESAubaines: '23107224'
};
function GetM2BasketJSONFromOffer(M2DOProductJson, offerid, quantity, personalization) {
    for (var i = 0; i < M2DOProductJson.Products[0].Vrnts.length; i++) {
        for (var j = 0; j < M2DOProductJson.Products[0].Vrnts[i].Vrnts.length; j++) {
            for (var k = 0; k < M2DOProductJson.Products[0].Vrnts[i].Vrnts[j].Ofrs.length; k++) {
                if (M2DOProductJson.Products[0].Vrnts[i].Vrnts[j].Ofrs[k].ItemOfferId == offerid) {
                    var product = M2DOProductJson.Products[0];
                    var color = M2DOProductJson.Products[0].Vrnts[i];
                    var size = M2DOProductJson.Products[0].Vrnts[i].Vrnts[j];
                    var sizeArray = Array();
                    sizeArray.push(size);
                    var offer = M2DOProductJson.Products[0].Vrnts[i].Vrnts[j].Ofrs[k];

                    var availablePaidServices = JSONQuery("[?BTy.Id=3]", offer.AncSvcs);

                    if (availablePaidServices != null && availablePaidServices.length > 0 && jQuery.isArray(availablePaidServices)) {
                        for (var a = 0; a < availablePaidServices.length; a++) {
                            var info = GetAdjunctService(availablePaidServices[a].Id);
                            if (info != null) {
                                availablePaidServices[a].DN = !JSONisNullOrUndefinedOrEmpty(info.DN) ? info.DN : "";
                                availablePaidServices[a].ExpURL = !JSONisNullOrUndefinedOrEmpty(info.ExpURL) ? info.ExpURL : "";
                                availablePaidServices[a].IsOrderLevelService = !JSONisNullOrUndefinedOrEmpty(info.FOrdLvl) ? info.FOrdLvl : false;
                                availablePaidServices[a].IsQuantityComplementaryInformation = !JSONisNullOrUndefinedOrEmpty(info.FQtyCmpInf) ? info.FQtyCmpInf : false;
                                availablePaidServices[a].MaxQuantity = !JSONisNullOrUndefinedOrEmpty(info.MaxQty) ? info.MaxQty : 99;
                                if (!JSONisNullOrUndefinedOrEmpty(info.Imgs) && info.Imgs.length > 0) {
                                    availablePaidServices[a].Imgs = [{ 'URL': info.Imgs[0].URL}];
                                }
                            }
                        }
                    }

                    var availableDeals = (M2DOProductJson.Products[0].Dl != null && M2DOProductJson.Products[0].Dl.Cmbs != null && M2DOProductJson.Products[0].Dl.Cmbs.length > 0) ? M2DOProductJson.Products[0].Dl.Cmbs : null;
                    var categoryId = product.PCId;
                    if (!JSONisNullOrUndefinedOrEmpty(product.AscCats) && product.AscCats.length > 0 && !JSONisNullOrUndefinedOrEmpty(product.AscCats[0].Id)) {
                        if (product.AscCats[0].Id != EnumVirtualSite.LESAubaines) {
                            categoryId = product.AscCats[0].Id;
                        }
                        else {                           
                            categoryId = product.AscCats[1].Id;
                        }
                    }

                    basketJson =
		                {
		                    "DisplayName": product.DN,
		                    "ItemOfferId": offerid,
		                    "InternalReference": color.Id,
		                    "SecInternalReference": size.Id,
		                    "ProductId": product.Id,
		                    "CatalogVersionId": product.CatVerId,
		                    "CategoryId": categoryId,
		                    "FirstLevelSku": offer.AltId,
		                    "SizeCode": GetSizeCodeFromM2Size(sizeArray),
		                    "Price": offer.LiPr,
		                    "UnitPrice": offer.LtUntPr,
		                    "Personalization": personalization,
		                    "ColorText": color.DN,
		                    "SizeText": size.DN,
		                    "HasAncillaryService": !JSONisNullOrUndefinedOrEmpty(offer.AncSvcs) ? offer.AncSvcs[0].FAv : false,
		                    //D3EE
		                    "IsEcoComplaint": offer.EnvCmpl.FCpl,
		                    "Quantity": quantity,
		                    "Discount": offer.Dis,
		                    "StrikePrice": offer.PrLiPr,
		                    //Product Image
		                    "MediaImageUrl": (!JSONisNullOrUndefinedOrEmpty(color.Imgs)) ? GetSmallOrMediumPict(color.Imgs) : '',
		                    "BrandLabel": !JSONisNullOrUndefinedOrEmpty(product.Br) ? product.Br.DN : '',
		                    "VendorId": !JSONisNullOrUndefinedOrEmpty(offer.VdrInfo) ? offer.VdrInfo.Id : 0,
		                    "IsMarketPlaceProduct": !JSONisNullOrUndefinedOrEmpty(offer.VdrInfo) ? offer.VdrInfo.IsMktPr : false,
		                    "VendorName": !JSONisNullOrUndefinedOrEmpty(offer.VdrInfo) ? offer.VdrInfo.VName : '',
		                    "CategoryName": GetCategoryName(M2DOProductJson),
		                    "AvailablePaidServices": (availablePaidServices.length == 0 ? null : availablePaidServices),
		                    "AvailableDeals": availableDeals,
		                    "CustomerTarget": (!JSONisNullOrUndefinedOrEmpty(offer.CtmrTgt) ? offer.CtmrTgt : '0')
		                }
                    return basketJson;
                }
            }
        }
    }
    return null;
}

function GetSmallOrMediumPict(imgs) {
    var smallPict = '';
    var mediumPict = '';

    for (var i = 0; i < imgs.length; i++) {
        if (imgs[i].Id == "smallPict") {
            if (!JSONisNullOrUndefinedOrEmpty(imgs[i].URL)) {
                smallPict = imgs[i].URL;
            }
            else {
                smallPict = imgs[i].FlNm
            }
            break;
        }

        if (imgs[i].Id == "mediumPict") {
            if (!JSONisNullOrUndefinedOrEmpty(imgs[i].URL)) {
                mediumPict = imgs[i].URL;
            }
            else {
                mediumPict = imgs[i].FlNm
            }
        }
    }

    if (smallPict.length > 0)
        return smallPict;
    else if (mediumPict.length > 0)
        return mediumPict;
    else
        return '';
}

/*
This method accepts Direct Order Product Json , InternalReference and SecondInternalReference
and returns the Basket Json.
*********** With MP2T 
*/
function GetM2BasketJSON(M2DOProductJson, PressCode, SecInternalReference, quantity, personalization) {
    try {
        if (JSONisNullOrUndefinedOrEmpty(M2DOProductJson) || JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products)) {
            return null;
        }

        var M2ColorJson = JSONQuery("[?AltId='" + PressCode + "']", M2DOProductJson.Products[0].Vrnts);
        var M2SizeJson = JSONQuery("[?Id='" + SecInternalReference + "']", M2ColorJson[0].Vrnts);

        if (JSONisNullOrUndefinedOrEmpty(M2ColorJson) || JSONisNullOrUndefinedOrEmpty(M2SizeJson)) {
            return null;
        }
        basketJson =
		    {
		        "DisplayName": M2DOProductJson.Products[0].DN,
		        "ItemOfferId": M2SizeJson[0].ItemOfferId,
		        "InternalReference": M2ColorJson[0].Id,
		        "SecInternalReference": M2SizeJson[0].Id,
		        "ProductId": M2DOProductJson.Products[0].Id,
		        "CatalogVersionId": M2DOProductJson.Products[0].CatVerId,
		        "CategoryId": M2DOProductJson.Products[0].PCId,
		        "FirstLevelSku": M2ColorJson[0].AltId,
		        "SizeCode": GetSizeCodeFromM2Size(M2SizeJson),
		        "CancelledFlag": "false",
		        "IsMeasurable": "false",
		        "Origin": origin,
		        "Price": M2SizeJson[0].LiPr,
		        "UnitPrice": M2SizeJson[0].LtUntPr,
		        "Personalization": personalization,
		        "ColorText": M2ColorJson[0].DN,
		        "SizeText": M2SizeJson[0].DN,
		        "HasAncillaryService": !JSONisNullOrUndefinedOrEmpty(M2SizeJson[0].AncSvcs) ? M2SizeJson[0].AncSvcs[0].FAv : false,
		        //D3EE
		        "IsEcoComplaint": M2SizeJson[0].EnvCmpl.FCpl,
		        "Quantity": quantity,
		        "Discount": M2SizeJson[0].Dis,
		        "StrikePrice": M2SizeJson[0].PrLiPr,
		        //Product Image
		        "MediaImageUrl": (!JSONisNullOrUndefinedOrEmpty(M2ColorJson[0].Imgs)) ? GetSmallOrMediumPict(M2ColorJson[0].Imgs) : '',
		        "BrandLabel": !JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products[0].Br) ? M2DOProductJson.Products[0].Br.DN : '',
		        "VendorId": !JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products[0].VdrInfo) ? M2DOProductJson.Products[0].VdrInfo.Id : 0,
		        "IsMarketPlaceProduct": !JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products[0].VdrInfo) ? M2DOProductJson.Products[0].VdrInfo.IsMktPr : false,
		        "VendorName": !JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products[0].VdrInfo) ? M2DOProductJson.Products[0].VdrInfo.DN : '',
		        "CategoryName": GetCategoryName(M2DOProductJson)
		    }

        var M2BasketJSON = basketJson;

        if (JSONisNullOrUndefinedOrEmpty(M2BasketJSON)) {
            return null;
        }
        return M2BasketJSON;
    }
    catch (e) {
        return null;
    }
}

/*
This method accepts Direct Order Product Json , InternalRefernce  and SecondInternalReference
and returns the Basket Json.
*/
function GetM2BasketJSONByInternalReference(M2DOProductJson, InternalReference, SecondInternalReference, quantity, personalization) {
    try {
        if (JSONisNullOrUndefinedOrEmpty(M2DOProductJson) || JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products)) {
            return null;
        }
        var M2ColorJson = JSONQuery("[?Id='" + InternalReference + "']", M2DOProductJson.Products[0].Vrnts);
        var M2SizeJson = JSONQuery("[?Id='" + SecondInternalReference + "']", M2ColorJson[0].Vrnts);

        if (JSONisNullOrUndefinedOrEmpty(M2ColorJson) || JSONisNullOrUndefinedOrEmpty(M2SizeJson)) {
            return null;
        }
        var offer = M2SizeJson[0].Ofrs[0];
        basketJson =
		    {
		        "DisplayName": M2DOProductJson.Products[0].DN,
		        "ItemOfferId": offer.ItemOfferId,
		        "InternalReference": M2ColorJson[0].Id,
		        "SecInternalReference": M2SizeJson[0].Id,
		        "ProductId": M2DOProductJson.Products[0].Id,
		        "CatalogVersionId": M2DOProductJson.Products[0].CatVerId,
		        "CategoryId": M2DOProductJson.Products[0].PCId,
		        "FirstLevelSku": M2ColorJson[0].AltId,
		        "SizeCode": GetSizeCodeFromM2Size(M2SizeJson),
		        "Origin": origin,
		        "Price": offer.LiPr,
		        "UnitPrice": offer.LtUntPr,
		        "Personalization": personalization,
		        "ColorText": M2ColorJson[0].DN,
		        "SizeText": M2SizeJson[0].DN,
		        "HasAncillaryService": !JSONisNullOrUndefinedOrEmpty(offer.AncSvcs) ? offer.AncSvcs[0].FAv : false,
		        //D3EE
		        "IsEcoComplaint": offer.EnvCmpl.FCpl,
		        "Quantity": quantity,
		        "Discount": offer.Dis,
		        "StrikePrice": offer.PrLiPr,
		        //Product Image
		        "MediaImageUrl": (!JSONisNullOrUndefinedOrEmpty(M2ColorJson[0].Imgs)) ? GetSmallOrMediumPict(M2ColorJson[0].Imgs) : '',
		        "BrandLabel": !JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products[0].Br) ? M2DOProductJson.Products[0].Br.DN : '',
		        "VendorId": !JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products[0].VdrInfo) ? M2DOProductJson.Products[0].VdrInfo.Id : 0,
		        "IsMarketPlaceProduct": !JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products[0].VdrInfo) ? M2DOProductJson.Products[0].VdrInfo.IsMktPr : false,
		        "CategoryName": GetCategoryName(M2DOProductJson),
		        "CustomerTarget": (!JSONisNullOrUndefinedOrEmpty(offer.CtmrTgt) ? offer.CtmrTgt : '0')
		    }

        var M2BasketJSON = basketJson;

        if (JSONisNullOrUndefinedOrEmpty(M2BasketJSON)) {
            return null;
        }
        return M2BasketJSON;
    }
    catch (e) {
        return null;
    }
}

function GetSizeCodeFromM2Size(M2SizeObj) {
    for (var i = 0; i < M2SizeObj[0].MscCds.length; i++) {
        if (M2SizeObj[0].MscCds[i].BTy.Id == "HighSizeCode") {
            return M2SizeObj[0].MscCds[i].Des;
        }
    }
    return "";
}

function JSONisNullOrUndefinedOrEmpty(jsonobject) {
    if (jsonobject == undefined || null == jsonobject || jsonobject.length <= 0) return true;
    return false;
}

function IsSoldByMeter(MsrmtTypId) {
    if (MsrmtTypId == 2) { return true };
    return false;
}


function SetOrigin(originName) {
    if (JSONisNullOrUndefinedOrEmpty(originName)) {
        origin = 'DirectOrder';
    }
    else {
        origin = originName;
    }
}

function GetCategoryName(M2DOProductJson) {
    var categoryName = '';
    if (!JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products[0].IsMlOrdPrd) && M2DOProductJson.Products[0].IsMlOrdPrd == true)
        categoryName = 'Papier';
    else if (!JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products[0].AscCats) &&
        M2DOProductJson.Products[0].AscCats.length >= 2)
        categoryName = M2DOProductJson.Products[0].AscCats[0].DN;

    return categoryName;
}


function GetM2ServicesByOfferID(M2DOProductJson, offerId) {
    if (JSONisNullOrUndefinedOrEmpty(M2DOProductJson) || JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products) || (M2DOProductJson.Products.length <= 0)) {
        return null;
    }
    var AncSvcs = null;
    var colors = M2DOProductJson.Products[0].Vrnts;
    for (var i = 0; i < colors.length; i++) {
        var currentColor = colors[i];
        var sizes = currentColor.Vrnts;
        for (var j = 0; j < sizes.length; j++) {
            var offers = sizes[j].Ofrs;
            for (var k = 0; k < offers.length; k++) {
                if (offers[k].ItemOfferId == offerId) {
                    AncSvcs = offers[k].AncSvcs;
                }
            }
        }
    }
    return (AncSvcs == null || AncSvcs.length == 0) ? null : AncSvcs;
}

function GetM2ServicesByInternalReferenceAndSecondInternalReference(M2DOProductJson, InternalReference, SecInternalReference) {

    if (JSONisNullOrUndefinedOrEmpty(M2DOProductJson) || JSONisNullOrUndefinedOrEmpty(M2DOProductJson.Products) || (M2DOProductJson.Products.length <= 0)) {
        return null;
    }

    return GetM2ServicesForProduct(M2DOProductJson.Products[0], InternalReference, SecInternalReference);
}

function GetM2ServicesForProduct(ProdJson, intRef, secIntRef) {

    if (JSONisNullOrUndefinedOrEmpty(ProdJson) || JSONisNullOrUndefinedOrEmpty(ProdJson.Vrnts) || (ProdJson.Vrnts.length <= 0)) {
        return null;
    }

    var Colors = ProdJson.Vrnts;
    var Sizes = null;
    for (var i = 0; i < Colors.length; i++) {
        if (Colors[i].Id == intRef) {
            Sizes = Colors[i].Vrnts;
            break;
        }
    }

    if (JSONisNullOrUndefinedOrEmpty(Sizes) || (Sizes.length <= 0)) {
        return null;
    }

    var AncSvcs = null;
    for (var j = 0; j < Sizes.length; j++) {
        if (Sizes[j].Id == secIntRef) {
            AncSvcs = Sizes[j].AncSvcs;
            break;
        }
    }

    if (JSONisNullOrUndefinedOrEmpty(AncSvcs) || (AncSvcs.length <= 0)) {
        return null;
    }

    return AncSvcs;
}


var currentModalBoxContent = null;

var LayerClosingOnClick = function () { HideNewModalBox(); };

var baseDiv = "#wrapper";

var count = 1;
function HideNewModalBox(evt) {
    if (currentModalBoxContent == null) return;
    var IsGILayerVisible = $j("#GILayer").is(':visible');
    var isATBLayer = $j('#ATBLayer').is(":visible");    
    $j('#' + currentModalBoxContent).hide();
    $j(baseDiv + ' .newModalBox').remove();
    currentModalBoxContent = null;
    var urltemp = window.location.href;


    if (!isNullOrUndefined(evt) && urltemp.indexOf('DirectOrderForm.aspx') > -1 && isATBLayer)         
        window.location.href = '/order_from_catalog/DirectOrderForm.aspx';
   
    var UnBindLayerClosing = function () {
        $j('#aspnetForm,#leftClickDiv,#rightClickDiv').unbind('click', LayerClosingOnClick);
        $j('#leftClickDiv,#rightClickDiv,#blockingDiv').remove();
        
    };
    setTimeout(UnBindLayerClosing, '1000');
    var RestockAlertBasket = $j('input.RestockAlertClass').val();
    var RestockAlertDO = $j('input.DirectOrder').val();
    var IsDeleteDirectO = $j('input.IsDeleteDO').val();
    var ISDeleteBasket = $j('input.IsDeleteBasket').val();
    var isBasketLayer = $j('input.Isbasketlayer').val();
    var RestockAlertOD = $j('input.RestockAlertOD').val();
    var IsDeleteOrderDetail = $j('input.IsDeleteOD').val();
    
    if (count == 1) {
       $j('input.Isbasketlayer').val("false");
    }
   count = 2;

   if (!IsGILayerVisible && RestockAlertBasket == 'basket' && ISDeleteBasket == 'false') {

        NOAlert(RestockAlertBasket);

    }

    if (!IsGILayerVisible && RestockAlertDO == 'DirectOrder' && IsDeleteDirectO == 'true') {
        NOAlert(RestockAlertDO);
    }
    if (!IsGILayerVisible && RestockAlertOD == 'OD' && IsDeleteOrderDetail == 'false') {
        NOAlert(RestockAlertOD);
    }
    if (!isNullOrUndefined(evt) && urltemp.indexOf('BasketV2.aspx') > -1 || urltemp.indexOf('Basket.aspx') > -1) {
        if ($j('input.Isbasketlayer').val() == "true") {
            DeleteSelectedLineItems();
        }
    }
    $j('input.Isbasketlayer').val("true");
    $j('div.error').removeClass('errorActive');

    
}




function ShowNewModalBox(content, settings, closeBinding, hideCloseLink, refreshWLOnClose) {

    currentModalBoxContent = content;
    var layerContent = $j('#' + content);
    var modalBox = $j('.newModalBox').clone();
    if(isNullOrUndefined(baseDiv)){
        baseDiv = "#wrapper";
    }
    modalBox.appendTo($j(baseDiv));
    var modalBoxOpacity = modalBox.children('.newModalBoxOpacity');
    var modalBoxBorder = modalBox.children('.newModalBoxBorder');
    var modalBoxContent = modalBox.children('.newModalBoxContent');
    if (settings.top != null) {
        modalBox.css({ top: settings.top + 'px' });
        if (!isNullOrUndefined(hideCloseLink)) {
            if (hideCloseLink) {
                layerContent.css({ top: settings.top + 18 + 'px' });
            } else {
                layerContent.css({ top: settings.top + 48 + 'px' });
            }
        } else {
            layerContent.css({ top: settings.top + 48 + 'px' });
        }
    } else {
        modalBox.css({ bottom: settings.bottom });
        layerContent.css({ bottom: settings.bottom + 18 + 'px' });
    }
    if (settings.left != null) {
        modalBox.css({ left: settings.left });
        layerContent.css({ left: settings.left + 18 + 'px' });
    } else {
        modalBox.css({ right: settings.right });
        layerContent.css({ right: settings.right + 18 + 'px' });
    }

    var strChUserAgent = navigator.userAgent;
    var intSplitStart = strChUserAgent.indexOf("(", 0);
    var intSplitEnd = strChUserAgent.indexOf(")", 0);
    var strChStart = strChUserAgent.substring(0, intSplitStart);
    var strChMid = strChUserAgent.substring(intSplitStart, intSplitEnd);
    var strChEnd = strChUserAgent.substring(strChEnd);
    var hModif = 0;
    if (strChMid.indexOf("MSIE 7") != -1)
        hModif = 10;
    if (!isNullOrUndefined(hideCloseLink)) {
        if (hideCloseLink) {
            modalBox.css({
                height: layerContent.height() + 36 + hModif + 'px',
                width: layerContent.innerWidth() + 36 + 'px'
            });

            modalBoxOpacity.css({
                height: layerContent.height() + 36 + hModif + 'px',
                width: layerContent.innerWidth() + 36 + 'px'
            });


            modalBoxBorder.css({
                height: layerContent.height() + 2 + hModif + 'px',
                width: layerContent.innerWidth() + 2 + 'px'
            });
            modalBoxContent.css({
                height: layerContent.height() + hModif + 'px',
                width: layerContent.innerWidth() + 'px'
            });
        } else {
            modalBox.css({
                height: layerContent.height() + 76 + hModif + 'px',
                width: layerContent.innerWidth() + 36 + 'px'
            });

            modalBoxOpacity.css({
                height: layerContent.height() + 76 + hModif + 'px',
                width: layerContent.innerWidth() + 36 + 'px'
            });


            modalBoxBorder.css({
                height: layerContent.height() + 42 + hModif + 'px',
                width: layerContent.innerWidth() + 2 + 'px'
            });
            modalBoxContent.css({
                height: layerContent.height() + 40 + hModif + 'px',
                width: layerContent.innerWidth() + 'px'
            });
        }
    } else {
        modalBox.css({
            height: layerContent.height() + 76 + hModif + 'px',
            width: layerContent.innerWidth() + 36 + 'px'
        });

        modalBoxOpacity.css({
            height: layerContent.height() + 76 + hModif + 'px',
            width: layerContent.innerWidth() + 36 + 'px'
        });


        modalBoxBorder.css({
            height: layerContent.height() + 42 + hModif + 'px',
            width: layerContent.innerWidth() + 2 + 'px'
        });
        modalBoxContent.css({
            height: layerContent.height() + 40 + hModif + 'px',
            width: layerContent.innerWidth() + 'px'
        });
    }

    modalBox.attr("id", "newModalBox");
    modalBoxOpacity.attr("id", "newModalBoxOpacity");
    modalBoxBorder.attr("id", "newModalBoxBorder");
    modalBoxContent.attr("id", "newModalBoxContent");


    cornerSettings = {
        tl: { radius: 8 },
        tr: { radius: 8 },
        bl: { radius: 8 },
        br: { radius: 8 },
        antiAlias: true,
        autoPad: true
    }

    modalBox.show();
    layerContent.show();



    var BindLayerClosing = function () {
        var wrapper = $j(baseDiv);
        var leftDiv = $j('<div id="leftClickDiv"></div>');
        leftDiv.css({
            position: 'absolute',
            zIndex: '1000',
            left: 0,
            top: 0,
            width: (wrapper.position().left),
            height: (wrapper.height()),
            backgroundColor: 'Transparent'
        });
        $j(document.body).append(leftDiv);

        var rightDiv = $j('<div id="rightClickDiv"></div>');
        rightDiv.css({
            position: 'absolute',
            zIndex: '1000',
            right: 0,
            top: 0,
            width: (wrapper.position().left),
            height: (wrapper.height()),
            backgroundColor: 'Transparent'
        });
        $j(document.body).append(rightDiv);

        $j('#aspnetForm,#leftClickDiv,#rightClickDiv').bind('click', LayerClosingOnClick);
    };
    setTimeout(BindLayerClosing, '1000');

    if (!isNullOrUndefined(closeBinding)) {
        modalBox.find('.close').click(closeBinding);
    }
    if (!isNullOrUndefined(hideCloseLink)) {
        if (hideCloseLink) {
            modalBox.find('.close').hide();
        }
    }

    if (!isNullOrUndefined(refreshWLOnClose) && refreshWLOnClose == true) {
        modalBox.find('.close').attr("href", "javascript:GoToWishList()");
    }
        
}

function ShowNewBlockingModalBox(content, settings, closeBinding, hideCloseLink) {

    currentModalBoxContent = content;
    var layerContent = $j('#' + content);
    var modalBox = $j('.newModalBox').clone();
    modalBox.appendTo($j(baseDiv));
    var modalBoxOpacity = modalBox.children('.newModalBoxOpacity');
    var modalBoxBorder = modalBox.children('.newModalBoxBorder');
    var modalBoxContent = modalBox.children('.newModalBoxContent');

    if (isNullOrUndefined(settings)) {
        var scrollTop = $j(window).scrollTop();
        var leftPosition = ($j(window).width() - 982) / 2;
        settings = { left: leftPosition +218, top: ($j(window).scrollTop() + 120), right: null, bottom: null };
    }

    if (settings.top != null) {
        modalBox.css({ top: settings.top + 'px' });
        layerContent.css({ top: settings.top + 48 + 'px' });
    } else {
        modalBox.css({ bottom: settings.bottom });
        layerContent.css({ bottom: settings.bottom + 18 + 'px' });
    }
    if (settings.left != null) {
        modalBox.css({ left: settings.left });
        layerContent.css({ left: settings.left + 18 + 'px' });
    } else {
        modalBox.css({ right: settings.right });
        layerContent.css({ right: settings.right + 18 + 'px' });
    }

    var strChUserAgent = navigator.userAgent;
    var intSplitStart = strChUserAgent.indexOf("(", 0);
    var intSplitEnd = strChUserAgent.indexOf(")", 0);
    var strChStart = strChUserAgent.substring(0, intSplitStart);
    var strChMid = strChUserAgent.substring(intSplitStart, intSplitEnd);
    var strChEnd = strChUserAgent.substring(strChEnd);
    var hModif = 0;
    if (strChMid.indexOf("MSIE 7") != -1)
        hModif = 10;


    modalBox.css({
        height: layerContent.height() + 76 + hModif + 'px',
        width: layerContent.innerWidth() + 36 + 'px'
    });

    modalBoxOpacity.css({
        height: layerContent.height() + 76 + hModif + 'px',
        width: layerContent.innerWidth() + 36 + 'px'
    });


    modalBoxBorder.css({
        height: layerContent.height() + 42 + hModif + 'px',
        width: layerContent.innerWidth() + 2 + 'px'
    });
    modalBoxContent.css({
        height: layerContent.height() + 40 + hModif + 'px',
        width: layerContent.innerWidth() + 'px'
    });
    modalBox.attr("id", "newModalBox");
    modalBoxOpacity.attr("id", "newModalBoxOpacity");
    modalBoxBorder.attr("id", "newModalBoxBorder");
    modalBoxContent.attr("id", "newModalBoxContent");


    cornerSettings = {
        tl: { radius: 8 },
        tr: { radius: 8 },
        bl: { radius: 8 },
        br: { radius: 8 },
        antiAlias: true,
        autoPad: true
    }

    modalBox.show();
    layerContent.show();



    var wrapper = $j(baseDiv);
    var blockingDiv = $j('<div id="blockingDiv"></div>');
    blockingDiv.css({
        position: 'absolute',
        zIndex: '550',
        left: 0,
        top: 0,
        width: '100%',
        height: (wrapper.height()),
        backgroundColor: '#FFFFFF',
        opacity: 0,
        display: 'none'
    });
    $j(document.body).append(blockingDiv);
    blockingDiv.show();


    if (!isNullOrUndefined(closeBinding)) {
        modalBox.find('.close').click(closeBinding);
    }
    if (!isNullOrUndefined(hideCloseLink)) {
        if (hideCloseLink) {
            modalBox.find('.close').hide();
        }
    }
}

var FRRED = "FRRED0";

function ReportProductInfoToAvail( products, trackingCode, isJSLogEnabled, isLogEnabled) {
    if (isLogEnabled != "True") return;
    if (isJSLogEnabled != "True") {

        var postUrl = "/Product/AjaxReportToAvail.aspx?";
        var postData = "products=" + products + "&tcode=" + trackingCode;

        $j.ajax({
            async: false,
            type: "GET",
            url: postUrl,
            data: postData,
            timeout: 10000,
            success: onSuccess,
            error: ""
        });
        return true;
        function onSuccess(response) {
            var trackingCode = response;
            //alert('Product Click successfully reported to Avail. TrackCode' + trackingCode);
            // set tracking cookie
            setSubCookieAndCookie("Avail", "TrackingCode", trackingCode);
        }
    }
    else {
        ReportProductInfoToAvailFromJS(products, trackingCode);
    }
}
//Avai.jquery.js

function ReportProductInfoToAvailFromJS(products, trackingCode) {
    if (!Emark) return;
    var emark = new Emark();
    var availResult = emark.logClickedOn(FRRED+""+products ,trackingCode);
    emark.commit(function () { 
         setSubCookieAndCookie("Avail", "TrackingCode", trackingCode);       
    });
}

function logPurchaseToAvail(userID, productIDs, prices, orderID, currency) {
    for (var i = 0; i < productIDs.length; i++) {
        productIDs[i] = FRRED + "" + productIDs[i];
    }
    if (!Emark) return;
    var emark = new Emark();
    var availResult = emark.logPurchase(userID, productIDs, prices, orderID, currency);
    emark.commit(function () {
    });
}

function ReportAddToCartToAvail(products, isAvail) {
    if (!Emark) return;
    var emark = new Emark();
    var availCookie = "0";
    if (isAvail) {
        availCookie = GetSubCookieValue("Avail", "TrackingCode");
        for (var i = 0; i < products.length; i++) {
            var availResult = emark.logAddedToCart(FRRED + "" + products[i].ProductId, availCookie);
            emark.commit(function () {
            });
        }
    }
    else {
        for (var i = 0; i < products.length; i++) {
            var availResult = emark.logAddedToCart(FRRED + "" + products[i].ProductId);
            emark.commit(function () {
            });
        }
    }
}

function ReportRemoveFromCartToAvail(products) {
     if (!Emark) return;
     var emark = new Emark();
     for (var i = 0; i < products.length; i++) {
         var availResult = emark.logRemovedFromCart(FRRED + "" + products[i]);
        emark.commit(function () {
        });
    }
}

function GetAvailProductsForMPPDP() {
    if ($j('.push_products ul li').length == 0)
        $j('.push_products').hide();
    else
        $j('.push_products').show();
    if (isAvailEnabled != 'True') return;

    $j.fn.OnAvailSuccessCallback = function () {
        if (availSaaSResponse.length > 0) {
            for (idxRes = 0; idxRes < availSaaSResponse.length; idxRes++) {
                if (availSaaSResponse[idxRes].TemplateName == csAvailtemplate)
                { GetAndBindAvailProductsUIOnMPCrossSellZone(availSaaSResponse[idxRes]); }
                if (availSaaSResponse[idxRes].TemplateName == upsellAvailTemp)
                { GetAndBindAvailProductsUIOnMPUpsellZone(availSaaSResponse[idxRes]); }
            }
        }
        if ($j('.push_products ul li').length == 0)
            $j('.push_products').hide();
        if ($j('.cross_products ul li').length == 0)
            $j('.cross_products').hide();

    }
    if (AvailRequestsJson != null & AvailRequestsJson != '') {
        var availRequestsData = $j.parseJSON(AvailRequestsJson);
        // Avoid Avail Call for Cross sell Zone if enough Manual Products are available
        if ($j('.push_products ul li').length == crossPrdsCnt) {
            for (tIdx = 0; tIdx < availRequestsData.length; tIdx++) {
                if (availRequestsData[tIdx].TemplateName == csAvailtemplate)
                    availRequestsData.splice(tIdx, 1);
            }
        }
        GetRecommdentationsFromSaaS(availRequestsData);
    }
}


function GetAndBindAvailProductsUIOnMPCrossSellZone(availResponse) {
    if (availResponse.AvailRecommendedPIds == null || availResponse.AvailRecommendedPIds == '') return;
    var productids = availResponse.AvailRecommendedPIds;
    var trackingCode = availResponse.TrackingCode;
    var pushProductIds = $j('.push_products .hidPushProductIds').val();
    var excludedProductIds = pushProductIds.replace(/;/g, ",");
    var maxProducts = 0;
    if (!isNullOrUndefined(crossPrdsCnt))
        maxProducts = crossPrdsCnt;
    var callingUrl = "/ProductDetail/AjaxAvailSaaSProducts.aspx?productids=" + productids + "&maxProducts=" + maxProducts + "&availExclude=" + excludedProductIds + "&availZone=CrossSell" + "&isMarketPlace=true" + "&customertarget=" + ParseQueryStringIgnoreCase("customertarget");
    var returnUI;
    $j.ajax({
        type: 'GET',
        url: callingUrl,
        dataType: "json",
        success: showAdditionvAvailProductsUI,
        error: function (data) {
        },
        cache: true,
        timeout: 300000
    });
    function showAdditionvAvailProductsUI(availUI) {
        if ($j.trim(availUI.ProductUI) == '') {
            $j('.push_products').hide();
            return;
        }
        var associatedAvail = $j('.push_products ul');

        if (!isNullOrUndefined(associatedAvail)) {
            availUI.ProductUI = availUI.ProductUI.replace(/tcode/g, trackingCode);
            $j(associatedAvail).append(availUI.ProductUI);
            $j('.push_products').show();
            $j(associatedAvail).find('li:gt(' + (crossPrdsCnt - 1) + ')').remove();
        }
    }

}


function GetAndBindAvailProductsUIOnMPUpsellZone(availResponse) {
    if (availResponse.AvailRecommendedPIds == null || availResponse.AvailRecommendedPIds == '') return;
    var productids = availResponse.AvailRecommendedPIds;
    var trackingCode = availResponse.TrackingCode;
    var pushProductIds = $j('.push_products .hidPushProductIds').val();
    var excludedProductIds = pushProductIds.replace(/;/g, ",");
    var maxProducts = 0;
    if (!isNullOrUndefined(upsellPrdsCnt))
        maxProducts = upsellPrdsCnt;
    var callingUrl = "/ProductDetail/AjaxAvailSaaSProducts.aspx?productids=" + productids + "&maxProducts=" + maxProducts + "&availExclude=" + excludedProductIds + "&availZone=UpSell" + "&isMarketPlace=true";
    var returnUI;
    $j.ajax({
        type: 'GET',
        url: callingUrl,
        dataType: "json",
        success: showAdditionvAvailProductsUI,
        error: function (data) {
            //alert("Error" + data);
        },
        cache: true,
        timeout: 300000
    });
    function showAdditionvAvailProductsUI(availUI) {
        if ($j.trim(availUI.ProductUI) == '') {
            $j('.additionAvail').hide();
            return;
        }
        var associatedAvail2 = $j('.cross_products ul');
        if (!isNullOrUndefined(associatedAvail2)) {
            availUI.ProductUI = availUI.ProductUI.replace(/tcode/g, trackingCode);
            $j(associatedAvail2).html(availUI.ProductUI);
            $j('.cross_products').show();
            if ($j('.cross_products ul li').length > 0) {
                var upsellPrds = $j('.cross_products  ul li');
                var crossSell = $j('.push_products');
                for (liIdx = 0; liIdx < upsellPrds.length; liIdx++) {
                    var prodId = $j(upsellPrds[liIdx]).attr('productid');
                    if ($j('.crosssellProducts  ul.products li[productid="' + prodId + '"]').length > 0)
                        $j(upsellPrds[liIdx]).empty().hide();
                }
            }
            var visProducts = $j('.cross_products ul li:visible');
            $j(visProducts).slice(upsellPrdsCnt).empty().hide();
            if ($j('.cross_products  ul li').length == 0)
                $j('.cross_products').hide();
        }
    }

}



function GetAvailProductsForPDP() {
    if ($j('.crosssellProducts .associated_products ul.products li').length == 0)
        $j('.crosssellProducts').hide();
    else
        $j('.crosssellProducts').show();
    if (isAvailEnabled != 'True') return;

    $j.fn.OnAvailSuccessCallback = function () {
        if (availSaaSResponse.length > 0) {
            for (idxRes = 0; idxRes < availSaaSResponse.length; idxRes++) {
                if (availSaaSResponse[idxRes].TemplateName == csAvailtemplate)
                { GetAndBindAvailProductsUIOnCrossSellZone(availSaaSResponse[idxRes]); }
                if (availSaaSResponse[idxRes].TemplateName == upsellAvailTemp)
                { GetAndBindAvailProductsUIOnUpsellZone(availSaaSResponse[idxRes]); }
            }
        }
        if ($j('.crosssellProducts .associated_products ul.products li').length == 0)
            $j('.crosssellProducts').hide();
        if ($j('.upsellProducts .associated_products ul.products li').length == 0)
            $j('.upsellProducts').hide();
    }
    if (AvailRequestsJson != null & AvailRequestsJson != '') {
        var availRequestsData = $j.parseJSON(AvailRequestsJson);
        // Avoid Avail Call for Cross sell Zone if enough Manual Products are available
        if ($j('.crosssellProducts .associated_products ul.products li').length == crossPrdsCnt) {
            for (tIdx = 0; tIdx < availRequestsData.length; tIdx++) {
                if (availRequestsData[tIdx].TemplateName == csAvailtemplate)
                    availRequestsData.splice(tIdx, 1);
            }
        }
        GetRecommdentationsFromSaaS(availRequestsData);
    }
}
function GetAndBindAvailProductsUIOnCrossSellZone(availResponse) {
    if (availResponse.AvailRecommendedPIds == null || availResponse.AvailRecommendedPIds == '') return;
    var productids = availResponse.AvailRecommendedPIds;
    var trackingCode = availResponse.TrackingCode;
    var excludedProductIds = csManualProductIds.replace(/;/g, ",");
    //if (!isNullOrUndefined(upsellPrdsCnt))
    var maxProducts = '0';
    var callingUrl = "/ProductDetail/AjaxAvailSaaSProducts.aspx?productids=" + productids + "&maxProducts=" + maxProducts + "&availExclude=" + excludedProductIds + "&availZone=CrossSell";
    var returnUI;
    $j.ajax({
        type: 'GET',
        url: callingUrl,
        dataType: "json",
        success: showAdditionvAvailProductsUI,
        error: function (data) {
            //alert("Error" + data);
        },
        cache: true,
        timeout: 300000
    });
    function showAdditionvAvailProductsUI(availUI) {
        if ($j.trim(availUI.ProductUI) == '') {
            $j('.additionAvail').hide();
            return;
        }
        var associatedAvail = $j('.crosssellProducts .associated_products ul.products');

        if (!isNullOrUndefined(associatedAvail)) {
            availUI.ProductUI = availUI.ProductUI.replace(/tcode/g, trackingCode);
            $j(associatedAvail).append(availUI.ProductUI);
            //$j(associatedAvail).find('li:gt(2)').empty().hide();
            $j('.crosssellProducts .associated_products .product_picture').addMiniPDPOnPush('Cross sell PDP');
            $j('.crosssellProducts').show();
            $j(associatedAvail).find('li:gt(' + (crossPrdsCnt - 1) + ')').remove();
        }
    }

}
function GetAndBindAvailProductsUIOnUpsellZone(availResponse) {
    if (availResponse.AvailRecommendedPIds == null || availResponse.AvailRecommendedPIds == '') return;
    var productids = availResponse.AvailRecommendedPIds;
    var trackingCode = availResponse.TrackingCode;
    var excludedProductIds = csManualProductIds.replace(/;/g, ",");
    //if (!isNullOrUndefined(upsellPrdsCnt))
    //var maxProducts = upsellPrdsCnt;
    var maxProducts = 0;
    var callingUrl = "/ProductDetail/AjaxAvailSaaSProducts.aspx?productids=" + productids + "&maxProducts=" + maxProducts + "&availExclude=" + excludedProductIds + "&availZone=UpSell";
    var returnUI;
    $j.ajax({
        type: 'GET',
        url: callingUrl,
        dataType: "json",
        success: showAdditionvAvailProductsUI,
        error: function (data) {
            //alert("Error" + data);
        },
        cache: true,
        timeout: 300000
    });
    function showAdditionvAvailProductsUI(availUI) {
        if ($j.trim(availUI.ProductUI) == '') {
            $j('.additionAvail').hide();
            return;
        }
        var associatedAvail2 = $j('.additionAvail .associated_products ul.products');
        if (!isNullOrUndefined(associatedAvail2)) {
            availUI.ProductUI = availUI.ProductUI.replace(/tcode/g, trackingCode);
            $j(associatedAvail2).html(availUI.ProductUI);
            $j('.additionAvail .associated_products .product_picture').addMiniPDPOnPush('Up sell PDP');
            $j('.additionAvail').show();
            if ($j('.crosssellProducts ul.products li').length > 0) {
                var upsellPrds = $j('.additionAvail  ul.products li');
                var crossSell = $j('.crosssellProducts');
                for (liIdx = 0; liIdx < upsellPrds.length; liIdx++) {
                    var prodId = $j(upsellPrds[liIdx]).attr('productid');
                    if ($j('.crosssellProducts  ul.products li[productid="' + prodId + '"]').length > 0)
                        $j(upsellPrds[liIdx]).empty().hide();
                }
            }
            var visProducts = $j('.additionAvail  ul.products li:visible');
            $j(visProducts).slice(upsellPrdsCnt).empty().hide();
            if ($j('.additionAvail  ul.products li').length == 0)
                $j('.additionAvail').hide();
        }
    }

}
function GetAvailProductsForSearchPage() {
    if (isAvailEnabled != 'True') return;
    $j.fn.OnAvailSuccessCallback = function () {
        if (availSaaSResponse.length > 0) {
            for (idxRes = 0; idxRes < availSaaSResponse.length; idxRes++) {
                if (availSaaSResponse[idxRes].TemplateName == searchAvailTemp)
                { GetAndBindAvailProductsUIOnSearchResultPage(availSaaSResponse[idxRes]); }
            }
        }
    }
    //searchAvailTemp
    if (showAvailProducts != null && showAvailProducts == 'True') {
        if (AvailRequestsJson != null && AvailRequestsJson != '') {
            var availRequestsData = $j.parseJSON(AvailRequestsJson);
            GetRecommdentationsFromSaaS(availRequestsData);
        }
    }
}
function GetAndBindAvailProductsUIOnSearchResultPage(availResponse) {
    if (availResponse.AvailRecommendedPIds == null || availResponse.AvailRecommendedPIds == '') return;
    var productids = availResponse.AvailRecommendedPIds;
    var trackingCode = availResponse.TrackingCode;
    var excludedProductIds = '';
    if (!isNullOrUndefined(searchAvailPrdsCnt))
        var maxProducts = searchAvailPrdsCnt;
    var callingUrl = "/ProductDetail/AjaxAvailSaaSProducts.aspx?productids=" + productids + "&maxProducts=" + maxProducts + "&availExclude=" + excludedProductIds + "&availZone=SearchResult";
    var returnUI;
    $j.ajax({
        type: 'GET',
        url: callingUrl,
        dataType: "json",
        success: showAdditionvAvailProductsUI,
        error: function (data) {
            //alert("Error" + data);
        },
        cache: true,
        timeout: 300000
    });
    function showAdditionvAvailProductsUI(availUI) {
        if ($j.trim(availUI.ProductUI) == '') {
            $j('.searchAvailProducts').hide();
            return;
        }
        var associatedAvail2 = $j('.searchAvailProducts ol.search-page-list');
        if (!isNullOrUndefined(associatedAvail2)) {
            availUI.ProductUI = availUI.ProductUI.replace(/tcode/g, trackingCode);
            $j(associatedAvail2).html(availUI.ProductUI);
            $j('.searchAvailProducts ol.search-page-list .block-visu a.visu').addMiniPDP();
            $j('.searchAvailProducts').show();
        }
    }
}
function GetAvailProductsForBasket() {
    if ($j('.cob_bottomleft .associated_products li').length == 0)
        $j('.cob_bottomleft .associated_products_block').hide();
    if (isAvailEnabled != 'True') return;
    //Basket Page
    if ($j('.cob_bottomleft').length == 0) return;
    if ($j('.cob_bottomleft .associated_products li').length == maxCrossSellProducts)
        return;
    $j.fn.OnAvailSuccessCallback = function () {
        if (availSaaSResponse.length > 0) {
            for (idxRes = 0; idxRes < availSaaSResponse.length; idxRes++) {
                if (availSaaSResponse[idxRes].TemplateName == basketAvailTemplate) {
                    GetAndBindAvailProductsUIOnBasket(availSaaSResponse[idxRes]);
                }
            }
        }
        if ($j('.cob_bottomleft .associated_products li').length == 0)
            $j('.cob_bottomleft .associated_products_block').hide();
    }
    //Basket Page
    if (AvailRequestsJson != null & AvailRequestsJson != '') {
        var availRequestsData = $j.parseJSON(AvailRequestsJson);
        GetRecommdentationsFromSaaS(availRequestsData);
    }
}
function GetAndBindAvailProductsUIOnBasket(availResponse) {
    if (availResponse.AvailRecommendedPIds == null || availResponse.AvailRecommendedPIds == '') return;
    var productids = availResponse.AvailRecommendedPIds;
    var trackingCode = availResponse.TrackingCode;
    var excludedProductIds = basketProductIds;
    var wishlstPrdsCnt = $j('.cob_bottomleft .associated_products li').length;
    var availPrdsCnt = maxCrossSellProducts - wishlstPrdsCnt;
    //if (!isNullOrUndefined(maxCrossSellProducts))
    var maxProducts = availPrdsCnt;
    var callingUrl = "/ProductDetail/AjaxAvailSaaSProducts.aspx?productids=" + productids + "&maxProducts=" + maxProducts + "&availExclude=" + excludedProductIds + "&availZone=Basket";
    var returnUI;
    $j.ajax({
        type: 'GET',
        url: callingUrl,
        dataType: "json",
        success: showAdditionvAvailProductsUI,
        error: function (data) {
            //alert("Error" + data);
        },
        cache: true,
        timeout: 300000
    });
    function showAdditionvAvailProductsUI(availUI) {
        if ($j.trim(availUI.ProductUI) == '') {
            return;
        }
        var associatedAvail2 = $j('.cob_bottomleft .associated_products_block .associated_products ul.products');
        if (!isNullOrUndefined(associatedAvail2)) {
            availUI.ProductUI = availUI.ProductUI.replace(/tcode/g, trackingCode);
            $j(associatedAvail2).append(availUI.ProductUI);
            $j('.cob_bottomleft .associated_products ul.products li .product_picture').addMiniPDPOnPush('Cross sell Basket');
            $j('.cob_bottomleft .associated_products_block').show();
            $j('.cob_bottomleft .associated_products ul.products').find('li:gt(' + (maxCrossSellProducts - 1) + ')').empty().hide();
        }
    }
}
function GetAvailProductsForOutOfStock() {
    $j('.outOfStock_inner_wrapper .associated_products_block').hide();
    if (isAvailEnabled != 'True') return;
    //OutOfStock
    $j.fn.OnAvailSuccessCallback = function () {
        if (availSaaSResponse.length > 0) {
            for (idxRes = 0; idxRes < availSaaSResponse.length; idxRes++) {
                if (availSaaSResponse[idxRes].TemplateName == outofStockAvailTemplate) {
                    GetAndBindAvailProductsUIOnOutOfStock(availSaaSResponse[idxRes]);
                }
            }
        }
        if ($j('.outOfStock_inner_wrapper .associated_products ul.products li').length == 0)
            $j('.outOfStock_inner_wrapper .associated_products_block').hide();
    }
    //OutOfStock
    if (AvailRequestsJson != null & AvailRequestsJson != '') {
        var availRequestsData = $j.parseJSON(AvailRequestsJson);
        GetRecommdentationsFromSaaS(availRequestsData);
    }
}
function GetAndBindAvailProductsUIOnOutOfStock(availResponse) {
    if (availResponse.AvailRecommendedPIds == null || availResponse.AvailRecommendedPIds == '') return;
    var productids = availResponse.AvailRecommendedPIds;
    var trackingCode = availResponse.TrackingCode;
    var excludedProductIds = '';
    if (!isNullOrUndefined(maxCrossSellProducts))
        var maxProducts = maxCrossSellProducts;
    var callingUrl = "/ProductDetail/AjaxAvailSaaSProducts.aspx?productids=" + productids + "&maxProducts=" + maxProducts + "&availExclude=" + excludedProductIds + "&availZone=OutOfStock";
    var returnUI;
    $j.ajax({
        type: 'GET',
        url: callingUrl,
        dataType: "json",
        success: showAdditionvAvailProductsUI,
        error: function (data) {
            //alert("Error" + data);
        },
        cache: true,
        timeout: 300000
    });
    function showAdditionvAvailProductsUI(availUI) {
        if ($j.trim(availUI.ProductUI) == '') {
            $j('.outOfStock_inner_wrapper .associated_products_block').hide();
            return;
        }
        var associatedAvail2 = $j('.outOfStock_inner_wrapper .associated_products ul.products');
        if (!isNullOrUndefined(associatedAvail2)) {
            availUI.ProductUI = availUI.ProductUI.replace(/tcode/g, trackingCode);
            $j(associatedAvail2).html(availUI.ProductUI);
            $j('.outOfStock_inner_wrapper .associated_products ul.products li .product_picture').addMiniPDPOnPush('Cross sell Pepuise');
            $j('.outOfStock_inner_wrapper .associated_products_block').show();
        }
    }

}
function GetPushProductsFromAvailForATB(availRequestData, excludedAvailProducts, zone1Template, zone2Template, pushPrds) {
    if (isAvailEnabled != 'True') return;
    $j.fn.OnAvailSuccessCallback = function () {
        if (availSaaSResponse.length == 1) {
            GetAndBindAvailProductsUIOnATBZone2(availSaaSResponse[0], '', excludedAvailProducts);
        }
        if (availSaaSResponse.length == 2) {
            for (idxRes = 0; idxRes < availSaaSResponse.length; idxRes++) {
                if (availSaaSResponse[idxRes].TemplateName == zone1Template) {
                    if ($j("#ATBLayer .zone1").length > 0) {
                        GetAndBindAvailProductsUIOnATBZone1(availSaaSResponse[idxRes], excludedAvailProducts);
                    }
                }
                if (availSaaSResponse[idxRes].TemplateName == zone2Template)
                { GetAndBindAvailProductsUIOnATBZone2(availSaaSResponse[idxRes], excludedAvailProducts); }
            }
        }
    }
    $j("#ATBLayer .zone2").hide();
    if (availRequestData != null & availRequestData != '') {
        if (pushPrds != null && trim(pushPrds) != '') {
            if ($j(pushPrds).find('li').length == 3) {
                for (tIdx = 0; tIdx < availRequestData.length; tIdx++) {
                    if (availRequestData[tIdx].TemplateName == zone1Template)
                        availRequestData.splice(tIdx, 1);
                }
            }
        }
        GetRecommdentationsFromSaaS(availRequestData);
    }
}
function GetAndBindAvailProductsUIOnATBZone1(availResponse, excludedAvailProducts) {
    if (availResponse.AvailRecommendedPIds == null || availResponse.AvailRecommendedPIds == '') return;
    var productids = availResponse.AvailRecommendedPIds;
    var trackingCode = availResponse.TrackingCode;
    var excludedProductIds = '';
    if (!isNullOrUndefined(excludedAvailProducts))
        excludedProductIds = excludedAvailProducts;
    var maxProducts = '3';
    var callingUrl = "/ProductDetail/AjaxAvailSaaSProducts.aspx?productids=" + productids + "&maxProducts=" + maxProducts + "&availExclude=" + excludedProductIds + "&availZone=ATB&isDO=" + isDO;
    var returnUI;
    $j.ajax({
        type: 'GET',
        url: callingUrl,
        dataType: "json",
        success: showAdditionvAvailProductsUI,
        error: function (data) {
            //alert("Error on getting avauil ui" + data);
        },
        cache: true,
        timeout: 300000
    });
    function showAdditionvAvailProductsUI(availUI) {
        var assoc_bloc = $j("#ATBLayer .zone1  ul.products");
        availUI.ProductUI = availUI.ProductUI.replace(/tcode/g, trackingCode);
        var pushProducts = availUI.ProductUI;
        if (!isNullOrUndefined(assoc_bloc)) {
            if (pushProducts != null && trim(pushProducts) != '') {
                assoc_bloc.show();
                //assoc_bloc.empty();
                assoc_bloc.append(pushProducts);
                assoc_bloc.find('.set').empty();
                assoc_bloc.find('li:gt(2)').remove();
                $j("#ATBLayer .zone1  ul.products li .product_picture").attr("width", "105");
                $j("#ATBLayer .zone1  ul.products li .product_picture").attr("height", "105");

                $j('#ATBLayer .associated_products .quick_view_overlay,#ATBLayer .associated_products .quick_view_overlay_button').remove();
                $j('#ATBLayer .associated_products .product_picture').addMiniPDPOnPush('Cross sell ATB');
            }
            else {
                if ($j("#ATBLayer .zone1  ul.products li").length == 0)
                    assoc_bloc.hide();
            }
        }
        availRequestsJson = null;
    }
}
function GetAndBindAvailProductsUIOnATBZone2(availResponse, excludedAvailProducts) {
    if (availResponse.AvailRecommendedPIds == null || availResponse.AvailRecommendedPIds == '') return;
    var productids = availResponse.AvailRecommendedPIds;
    var trackingCode = availResponse.TrackingCode;
    var excludedProductIds = '';
    if (!isNullOrUndefined(excludedAvailProducts))
        excludedProductIds = excludedAvailProducts;
    var maxProducts = '6';
    var callingUrl = "/ProductDetail/AjaxAvailSaaSProducts.aspx?productids=" + productids + "&maxProducts=" + maxProducts + "&availExclude=" + excludedProductIds + "&availZone=ATB&isDO=" + isDO;
    var returnUI;
    $j.ajax({
        type: 'GET',
        url: callingUrl,
        dataType: "json",
        success: showAdditionvAvailProductsUI,
        error: function (data) {
            // alert("Error on getting avail UI" + data);
        },
        cache: true,
        timeout: 300000
    });

    function showAdditionvAvailProductsUI(availUI) {
        var assoc_bloc = $j("#ATBLayer .zone2  ul.products");
        availUI.ProductUI = availUI.ProductUI.replace(/tcode/g, trackingCode);
        var pushProducts = availUI.ProductUI;
        if (!isNullOrUndefined(assoc_bloc)) {
            if (pushProducts != null && trim(pushProducts) != '') {
                //assoc_bloc.show();
                assoc_bloc.empty();
                assoc_bloc.append(pushProducts);
                //ul.products li .product_picture
                $j("#ATBLayer .zone2  ul.products li .product_picture").attr("width", "105");
                $j("#ATBLayer .zone2  ul.products li .product_picture").attr("height", "105");

                $j('#ATBLayer .associated_products .quick_view_overlay,#ATBLayer .associated_products .quick_view_overlay_button').remove();
                if (isDO) {
                    $j('#ATBLayer .associated_products .product_picture').addMiniPDPOnPush('Cross sell ATB direct');
                }
                else {
                    $j('#ATBLayer .associated_products .product_picture').addMiniPDPOnPush('Cross sell ATB');
                    if ($j("#ATBLayer .zone1").length > 0) {
                        var zone2Prds = $j('#ATBLayer .zone2  ul.products li');
                        var zon1 = $j('#ATBLayer .zone1');
                        for (liIdx = 0; liIdx < zone2Prds.length; liIdx++) {
                            var prodId = $j(zone2Prds[liIdx]).attr('productid');
                            if ($j('#ATBLayer .zone1  ul.products li[productid="' + prodId + '"]').length > 0)
                                $j(zone2Prds[liIdx]).empty().hide();
                        }
                        //$j('#ATBLayer .zone2  ul.products li:hidden').remove();
                    }
                    //$j('#ATBLayer .zone2').find('li:gt(5)').empty().hide();
                }
                if ($j('#ATBLayer .zone2  ul.products li').length > 0)
                    $j("#ATBLayer .zone2").show();
                HideNewModalBox();
                ShowATBLayer();

                availItemsCount = $j('#ATBLayer .zone2  ul.products li:visible').length;
                topItemsCount = $j("#ATBLayer .zone1  ul.products li").length;
                ATBAjaxContentLoadEvet();
            }
            else {
                assoc_bloc.hide();
                if (isDO) {
                    showModal(defaultContent);
                    GoToBasket();
                }
            }
        }
        availRequestsJson = null;
    }
}
function GetPushProductsFromSaasForATW(AvailRequestsJson) {
    if (isAvailEnabled != 'True') return;
    $j.fn.OnAvailSuccessCallback = function () {
        if (availSaaSResponse.length > 0) {
            GetAndBindAvailProductsUIOnATW(availSaaSResponse[0]);
        }
    }
    if (AvailRequestsJson != null & AvailRequestsJson != '') {
        GetRecommdentationsFromSaaS(AvailRequestsJson);
    }
}
function GetAndBindAvailProductsUIOnATW(availResponse) {
    if (availResponse.AvailRecommendedPIds == null || availResponse.AvailRecommendedPIds == '') return;
    var productids = availResponse.AvailRecommendedPIds;
    var trackingCode = availResponse.TrackingCode;
    var excludedProductIds = '';
    //if (!isNullOrUndefined(maxCrossSellProducts))
    var maxProducts = '3';
    var callingUrl = "/ProductDetail/AjaxAvailSaaSProducts.aspx?productids=" + productids + "&maxProducts=" + maxProducts + "&availExclude=" + excludedProductIds + "&availZone=ATW";
    var returnUI;
    $j.ajax({
        type: 'GET',
        url: callingUrl,
        dataType: "json",
        success: showAdditionvAvailProductsUI,
        error: function (data) {
            //alert("Error on getting avail ui" + data);
        },
        cache: true,
        timeout: 300000
    });
    function showAdditionvAvailProductsUI(availUI) {
        availUI.ProductUI = availUI.ProductUI.replace(/tcode/g, trackingCode);
        var pushProductsUI = availUI.ProductUI;
        var assoc_bloc = $j("#ATWLayer .associated_products_block .associated_products ul.products");
        if (!isNullOrUndefined(assoc_bloc)) {
            if (pushProductsUI != null && trim(pushProductsUI) != '') {
                assoc_bloc.show();
                assoc_bloc.empty();
                assoc_bloc.append(pushProductsUI);
                assoc_bloc.find('.set').empty();
                assoc_bloc.find('li:gt(2)').empty().hide();

                var sPath = window.location.pathname;
                var sPage = sPath.substring(sPath.lastIndexOf('/') + 1);
                var isWLPage = false;

                if (sPage.toLowerCase() == "wishlist.aspx") {
                    isWLPage = true;
                }

                if ($j('#ATWLayer .associated_products_block  ul.products li').length > 0)
                    $j("#ATWLayer .associated_products_block").show();
                HideNewModalBox();
                ShowWLLayer(isWLPage);

                $j('#ATWLayer .associated_products .quick_view_overlay,#ATWLayer .associated_products .quick_view_overlay_button').remove();
                $j('#ATWLayer .associated_products .product_picture').addMiniPDPOnPush('Wishlist AVAIL');
            }
            else {
                assoc_bloc.hide();
            }
        }
    }
}


//AvailWS.js

function LoggingMiniPDPClickToAvail(productId) {
    if (!Emark) return;
    var emark = new Emark();
    var templateName = 'LoggingMiniPDPClick';
    var inputParamsStr = "ProductID: FRRED0" + productId;
    var dynamicParams = '';
    var availResponse = emark.getRecommendations(templateName, [inputParamsStr], dynamicParams);
    emark.commit(function () { });
}
function populatePredictions(availRequestData) {   
    var emark = new Emark();
    var templateName = availRequestData.TemplateName;
    var inputParams = availRequestData.InputParameters;
    // ProductId: FRRED0324167825
    var inputParamsStr = '';
    for (key in inputParams) {
        var ipVal = inputParams[key];
        key = key.replace(/[0-9]/gi, '');
        if (inputParamsStr == '') {
            inputParamsStr = key + ":" + ipVal;
        }
        else
            inputParamsStr += "," + key + ":" + ipVal;

    }
    //Ex: "append rule in subtemplate 1 with MarkdownPrice>=10"
    var dynamicParams = availRequestData.DynamicParams;
    var dynamicParamsStr = '';
    if (dynamicParams != undefined && dynamicParams != null)
        dynamicParamsStr = dynamicParams;

    var availResponse = emark.getRecommendations(templateName, [inputParamsStr], dynamicParamsStr);

    emark.commit(function () {
        var response = new AvailSaaSResponseJSON(availRequestData, availResponse);
        if (response != null) {
            availSaaSResponse[processedReqCnt] = response;
        }
        ajaxPageUrlForM2 = availRequestData.AjaxPageUrlForM2;
        processedReqCnt++;
        if (processedReqCnt == AvailRequestsJson.length) {
            OnAllRequestCompletion();
        }
    });


}
function AvailSaaSResponseJSON(availRequestData, availResponseInfo) {
    this.TemplateName = availRequestData.TemplateName;
    this.ProductId = availRequestData.ProductId;
    this.SessionId = availRequestData.SessionId;
    this.ReturnStatus = '';
    this.ErrorMessage = '';
    this.TrackingCode = availResponseInfo.trackingcode;
    this.AvailRecommendedPIds = availResponseInfo.values.toString();
    this.AvailProductsJson = Array();
}
function GetRecommdentationsFromSaaS(availRequestDatas) {   
    if (!Emark) return;
    processedReqCnt = 0;
    availSaaSResponse = Array(); ;
    AvailRequestsJson = availRequestDatas;
    if (availRequestDatas == null || availRequestDatas == undefined) return;
    if (availRequestDatas.length == 0) return;
    for (reqIdx = 0; reqIdx < availRequestDatas.length; reqIdx++) {
        var availRequest = availRequestDatas[reqIdx];
        populatePredictions(availRequest);
    }
}

var availSaaSResponse = Array();
var i = 0;
var processedReqCnt = 0;
var ajaxPageUrlForM2 = '';
function OnAllRequestCompletion() {
    //alert('onallrequest completion');  
    var productIds = '';
    for (prodIds = 0; prodIds < availSaaSResponse.length; prodIds++) {
        if (availSaaSResponse[prodIds].AvailRecommendedPIds != '') {
            if (productIds == '')
                productIds = availSaaSResponse[prodIds].AvailRecommendedPIds;
            else {
                var availPIds = availSaaSResponse[prodIds].AvailRecommendedPIds.split(',');
                for (pidx = 0; pidx < availPIds.length; pidx++) {
                    if (productIds.indexOf(availPIds[pidx]) == -1)
                        productIds += "," + availPIds[pidx];
                }
            }
        }
    }
    if (ajaxPageUrlForM2 != '') {
        getProductsJson(productIds);
    }
    else {
        if (!isNullOrUndefined($j.fn.OnAvailSuccessCallback)) {
            $j.fn.OnAvailSuccessCallback();
        }
    }
}

function getProductsJson(productIds) {
    var ajaxUrl = ajaxPageUrlForM2 + "?productids=" + productIds;

    $j.ajax({
        type: 'GET',
        url: ajaxUrl,
        dataType: 'json',
        success: onAjaxAvailSuccess,
        error: onAjaxAvailError,
        cache: false,
        async: false,
        timeout: 30000
    });

    function onAjaxAvailSuccess(productsJsonInfo) {
        setProductsInResponse(productsJsonInfo);
        if (!isNullOrUndefined($j.fn.OnAvailSuccessCallback)) {
            $j.fn.OnAvailSuccessCallback();
        }
    }
    function onAjaxAvailError(XMLHttpRequest, textStatus, errorThrown) {
        var errorMessage = textStatus + '\n' + errorThrown + '\n';
        //alert(errorMessage);
    }
}
function setProductsInResponse(productsJson) {
    var products = productsJson.products;
    for (prodIdx = 0; prodIdx < products.length; prodIdx++) {
        for (resIdx = 0; resIdx < availSaaSResponse.length; resIdx++) {
            var pIds = availSaaSResponse[resIdx].AvailRecommendedPIds;
            if (pIds != '' && pIds.indexOf(products[prodIdx].Id) != -1) {
                availSaaSResponse[resIdx].AvailProductsJson.push(products[prodIdx]);
            }
        }
    }
    for (resIdx = 0; resIdx < availSaaSResponse.length; resIdx++) {
        availSaaSResponse[resIdx].ReturnStatus = productsJson.status;
        availSaaSResponse[resIdx].ErrorMessage = productsJson.message;
    }
}

//AvailPlugin.js

var availSHPSaaSResponse = Array();
var processedSHPReqCnt = 0;
var MaxProduct = 0;
var HPSHPAvailRequestsJson;
var bindUI = '';
var availDisplayUI = '';
var flag = 'false';
var HPSHPAvailTrackingCode = '';
var productPictureSize = '194';

function populatePredictionsHPSHP(availRequestData) {
    
    var emark = new Emark();
    var templateName = availRequestData.TemplateName;
    var inputParams = availRequestData.InputParameters;
    // ProductId: FRRED0324167825
    var inputParamsStr = '';
    var isUserIdParam = false;
    for (key in inputParams) {
        var ipVal = inputParams[key];
        key = key.replace(/[0-9]/gi, '');
        if (inputParamsStr == '') {
            if (key.search(/userid/i) != -1) {
                inputParamsStr = ipVal;
                isUserIdParam = true;
            }
            else
                inputParamsStr = key + ":" + ipVal;
        }
        else
            inputParamsStr += "," + key + ":" + ipVal;

    }
   
    var dynamicParamsStr = '';
    var availResponse;
    if (isUserIdParam == true)
        availResponse = emark.getUserPredictions(inputParamsStr, templateName, [dynamicParamsStr]);
    else
        availResponse = emark.getRecommendations(templateName, [inputParamsStr], [dynamicParamsStr]);

    emark.commit(function () {
        var response = new availSHPSaaSResponseJSON(availRequestData, availResponse);
        if (response != null) {
            availSHPSaaSResponse[processedSHPReqCnt] = response;
        }
        processedSHPReqCnt++;
        if (processedSHPReqCnt == HPSHPAvailRequestsJson.length) {
            OnAllRequestCompletionHPSHP();
        }
    });

}

function availSHPSaaSResponseJSON(availRequestData, availResponseInfo) {
    
    this.TemplateName = availRequestData.TemplateName;
    this.ProductId = availRequestData.ProductId;
    this.SessionId = availRequestData.SessionId;
    this.MaxProducts = availRequestData.MaxProduct;
    this.ProductPictureSize = availRequestData.ProductPictureSize;
    this.ReturnStatus = '';
    this.ErrorMessage = '';
    this.UI = availRequestData.UI;
    this.TrackingCode = availResponseInfo.trackingcode;
    this.AvailRecommendedPIds = availResponseInfo.values.toString();
    this.AvailProductsJson = Array();
}
function GetAvailPluginRecommendation(availRequestDatas) {
    if (!Emark) return;
    processedSHPReqCnt = 0;
    availSHPSaaSResponse = Array();
    HPSHPAvailRequestsJson = $j.parseJSON(availRequestDatas);
    if (HPSHPAvailRequestsJson == null || HPSHPAvailRequestsJson == undefined) return;
    if (HPSHPAvailRequestsJson.length == 0) return;

    for (reqIdx = 0; reqIdx < HPSHPAvailRequestsJson.length; reqIdx++) {          
        var availRequest = HPSHPAvailRequestsJson[reqIdx];
        populatePredictionsHPSHP(availRequest);        
    }
}
function OnAllRequestCompletionHPSHP() {
    // debugger;
    var productIds = '';
    var maxProducts = '';
    var pictureSize = '';
    if (!isNullOrUndefined(availSHPSaaSResponse))
        for (prodIds = 0; prodIds < availSHPSaaSResponse.length + 1; prodIds++) {
            if (!isNullOrUndefined(availSHPSaaSResponse[prodIds]))
                if (availSHPSaaSResponse[prodIds].AvailRecommendedPIds != '') {
                    availDisplayUI = '';
                    productIds = availSHPSaaSResponse[prodIds].AvailRecommendedPIds
                    availDisplayUI = availSHPSaaSResponse[prodIds].UI;
                    HPSHPAvailTrackingCode = availSHPSaaSResponse[prodIds].TrackingCode;
                    maxProducts = availSHPSaaSResponse[prodIds].MaxProducts;
                    if (!isNullOrUndefined(availSHPSaaSResponse[prodIds].ProductPictureSize) && availSHPSaaSResponse[prodIds].ProductPictureSize != '') {
                        pictureSize = availSHPSaaSResponse[prodIds].ProductPictureSize;
                    }
                    else {
                        pictureSize = productPictureSize;
                    }
                    if (availDisplayUI != '') {
                        getProductsJsonForHPSHP(productIds, maxProducts, pictureSize);
                    }                    
                }
        }

}

function getProductsJsonForHPSHP(productIds, maxProducts, pictureSize) {
    var excludedProductIds = '';
    var ajaxUrl = "/ProductDetail/AjaxAvailSaaSProducts.aspx?productids=" + productIds + "&maxProducts=" + maxProducts + "&availExclude=" + excludedProductIds + "&productPictureSize=" + pictureSize + "&availZone=HPSHP" + "&isMarketPlace=true";
    $j.ajax({
        type: 'GET',
        url: ajaxUrl,
        dataType: 'json',
        success: onAjaxAvailSuccess,
        error: onAjaxAvailError,
        cache: true,
        async: false,
        timeout: 30000
    });

    function onAjaxAvailSuccess(productsJsonInfo) {
        //alert('Sucess');
        setProductsInResponseHPSHP(productsJsonInfo);
    }
    function onAjaxAvailError(XMLHttpRequest, textStatus, errorThrown) {
        var errorMessage = XMLHttpRequest + '\n' + textStatus + '\n' + errorThrown + '\n';
        //alert(errorMessage);
    }
}
function setProductsInResponseHPSHP(availUI) {
    //debugger;
    //alert(availDisplayUI + '_1' + availUI.ProductUI);
    bindUI = availDisplayUI;
    var availbindUI = '.' + bindUI + ' ul';
    var availDiv = '.' + bindUI;
    var associatedAvail = $j(availbindUI);
    //alert(availbindUI);
    if ($j.trim(availUI.ProductUI) == '') {
        $j(availDiv).hide();
        return;
    }

    if (!isNullOrUndefined(associatedAvail)) {
        availUI.ProductUI = availUI.ProductUI.replace(/tcode/g, HPSHPAvailTrackingCode);
        $j(availbindUI).append(availUI.ProductUI);
        $j(availDiv).show();
        //$j(associatedAvail).find('li:gt(' + (crossPrdsCnt - 1) + ')').remove();
        $j(availDiv).find('.product_picture').addMiniPDPOnPush('HP SHP Avail');
        availUI = '';
    }
}

$j(document).ready(function () {

    var scrambler = new Object();
    scrambler.base = ["|p|", "http:"];
    scrambler.baseSecure = ["|ps|", "https:"];
    scrambler.basewww = ["|w|", "www"];
    scrambler.slash = ["|s|", "/"];
    scrambler.equalSign = ["|e|", "="];
    scrambler.dotSign = ["|d|", "."];
    scrambler.qSign = ["|q|", "?"];
    scrambler.ampSign = ["|a|", "&"];
    scrambler.browserNameDetector = navigator.appName;
    jQuery.each($j("span.redoutespan"), function () {

        var convertedString = "";
        if ($j(this).attr("locator") != undefined) {
            var strngToConvert = $j(this).attr("locator").split("$");
            for (var i = 0; i < strngToConvert.length; i++) {

                if (strngToConvert[i] != undefined) {
                    if (strngToConvert[i] == scrambler.base[0]) {

                        convertedString = convertedString + scrambler.base[1];

                    } else if (strngToConvert[i] == scrambler.baseSecure[0]) {

                        convertedString = convertedString + scrambler.baseSecure[1];

                    } else if (strngToConvert[i] == scrambler.basewww[0]) {

                        convertedString = convertedString + scrambler.basewww[1];

                    } else if (strngToConvert[i] == scrambler.slash[0]) {

                        convertedString = convertedString + scrambler.slash[1];

                    } else if (strngToConvert[i] == scrambler.dotSign[0]) {

                        convertedString = convertedString + scrambler.dotSign[1];

                    } else if (strngToConvert[i] == scrambler.equalSign[0]) {
                        convertedString = convertedString + scrambler.equalSign[1];

                    } else if (strngToConvert[i] == scrambler.qSign[0]) {

                        convertedString = convertedString + scrambler.qSign[1];

                    } else if (strngToConvert[i] == scrambler.ampSign[0]) {

                        convertedString = convertedString + scrambler.ampSign[1];

                    } else {
                        convertedString = convertedString + strngToConvert[i];
                    }
                }
            }
        }
        $j(this).attr("href", convertedString);
        $j(this).removeAttr("locator");
        var spanHtml = $j('<div>').append($j(this).clone()).remove().html();
        if (scrambler.browserNameDetector == "Microsoft Internet Explorer") {
            spanHtml = spanHtml.replace("<SPAN", "<a");
            var endTag = "</SPAN>";
            var n = spanHtml.lastIndexOf(endTag);
            if (n >= 0 && n + endTag.length >= spanHtml.length) {
                spanHtml = spanHtml.substring(0, n) + "</a>";
            }

        } else {
            spanHtml = spanHtml.replace("<span", "<a");
            var endTag = "</span>";
            var n = spanHtml.lastIndexOf(endTag);
            if (n >= 0 && n + endTag.length >= spanHtml.length) {
                spanHtml = spanHtml.substring(0, n) + "</a>";
            }
        }

        $j(this).after($j(spanHtml));
        $j(this).remove();
    });
});
/**
* Suggestlist - jQuery plugin
*
* 
* Creates a layer underneath the concerned <input> element, in which suggested values are showed up depending on the input value.
* 
* 
* Options :
* 	- url : an ajax URL called which must return a data JSON format ;
*   - jsonObjectRec : If 'localJsonObject' = true, then the data used be the 'jsonObjectRec' data. This is only useful for testing, when the ajax call doesn't work ;
*   - localJsonObject : boolean that gives the option to switch from a sample JSON data ('jsonObjectRec') if set to true ;
* 	- maxElements : maximum number of elements to be showed up in the layer ;
*   - layerName : name of the layer (must be different if 2 search engines (or more) use the plugin on the same page) ;
*   - submitButton : submitButton to launch the search when a suggested values is clicked (must be different if 2 search engines (or more) use the plugin on the same page) ;
*   - schtype : argument which value is 1 (Dimension search) or 2 (Record search) ;
*   - layerTitle : Title displayed at the top of the layer ;
*   - OmnitureVariableSetFunction : Function that is called to set omniture variables when search is launched from autocompletion layer ;
* 
*  
*  Author : Mathieu CALLAGHAN - mathieu.callaghan@gmail.com
*  
*  Date : Wednesday 8th June 2011
*  
*  version : 1.0
*/

(function ($) {
    $.fn.suggestlist = function (options) {

        var settings = {
            'url': 'http://localhost',            
            'jsonObjectRec': [{ "MsgId": "2d1bc4dd-1f82-42f3-b60e-6fa7da8a1122", "MsgNm": "Search Response", "TmStmp": "\/Date(1333729425403+0000)\/", "KwdRes": [], "Smy": {}}],
            'localJsonObject': false,
            'maxElements': 10,
            'layerName': 'suggestlist',
            'submitButton': '',
            'schtype': 1,
            'isApr': true,
            'wordSuggestEnable': true,
            'productsRecEnable': true,
            'sugWordsTitle': 'Mot(s) cl&eacute;(s) sugg&eacute;r&eacute;(s) : ',
            'recProdcutsTitle': 'Produit(s) sugg&eacute;r&eacute;(s) :',
            'OmnitureVariableSetFunction': function () { }
        };
        var $inputObject = this;
        var xhr;
        var layerName;
        var layer;
        var activeResult;
        var launchAjax;
        var oldValue;
        var jsonRecProducts;
        var jsonSuggestedWords;
        var pricingRuleManager = new RedcatsOT.PricingRulesManager();
        var sugWords;
        var recProducts;
        var img_Hash = {};

        return this.each(function () {
            // If options exist, lets merge them with our default settings
            if (options) {
                $.extend(settings, options);
            }
            layerName = settings.layerName;
            layer = "div#" + layerName;
            activeResult = layer + ' ul li a.active';
            sugWords = layer + ' .suggested_products';
            recProducts = layer + ' .recommended_products';

            $(this).keyup(function (event) {
                if ((event.keyCode >= 48 && event.keyCode <= 57) || (event.keyCode >= 65 && event.keyCode <= 90) ||
			    		(event.keyCode >= 96 && event.keyCode <= 109) || (event.keyCode >= 106 && event.keyCode <= 195) ||
			    		(event.keyCode >= 219 && event.keyCode <= 223) || (event.keyCode == 111) || (event.keyCode == 226)) {
                    if ($(this).val().length > 2) {
                        oldValue = $(this).val();
                        getSuggestedProducts(settings.url, $(this).val().toLowerCase());
                    } else {
                        $(layer).hide();
                    }
                } else if (event.keyCode == 40 && $(layer + ' ul li').size() > 0) {
                    if ($(activeResult).size() <= 0) {
                        goToFirst();
                    } else if ($(activeResult).parent().next().size() == 0) {
                        if ($(activeResult).parents('.suggested_content').hasClass('suggested_products')) {
                            goToFirstRecommendedProduct();
                        } else if ($(activeResult).parents('.suggested_content').hasClass('recommended_products')) {
                            goToFirstSuggestedWord();
                        }
                    } else {
                        goToNext();
                    }
                    $(this).val($(activeResult).attr('title'));
                } else if (event.keyCode == 38 && $(layer + ' ul li').size() > 0) {
                    if ($(activeResult).size() > 0) {
                        if ($(activeResult).parent().prev().size() == 0 && $(activeResult).parents('.suggested_content').hasClass('recommended_products')) {
                            goToLastSuggestedWord();
                        } else {
                            goToPrevious();
                        }
                    }
                    if ($(activeResult).size() > 0) {
                        $(this).val($(activeResult).attr('title'));
                    } else {
                        $(this).val(oldValue);
                    }
                } else if (event.keyCode == 13) { // ENTER Key
                    if (!isNullOrUndefined($(activeResult).attr('title'))) {
                        $(this).val($(activeResult).attr('title'));
                        $(layer).hide();
                        document.location = $(activeResult).attr('href');
                    }
                } else if (event.keyCode == 9) { // TAB Key
                    return false;
                } else if ($(this).val().length <= 2) {
                    clearSuggestedProducts();
                    $(layer).hide();
                } else if ($(this).val().length > 2 && oldValue != $(this).val()) {
                    oldValue = $(this).val();
                    getSuggestedProducts(settings.url, $(this).val().toLowerCase());
                }
            });

            $(this).blur(function () {
                var closeLayer = function () { $(layer).hide(); };
                setTimeout(closeLayer, 200);
            });

            $(this).focus(function () {
                if ($(layer).find('ul li').size() > 0) {
                    $(layer).css('display', 'block');
                }
            });
        });

        function goToFirst() {
            if ($(sugWords + ' ul li').size() > 0) {
                goToFirstSuggestedWord();
            } else if ($(recProducts + ' ul li').size() > 0) {
                goToFirstRecommendedProduct();
            }
        }

        function goToFirstSuggestedWord() {
            $(activeResult).removeClass('active');
            if ($(sugWords + ' ul li').size() > 0) {
                $(sugWords + ' ul li').first().find('a').addClass('active');
            } else {
                goToFirstRecommendedProduct();
            }
        }

        function goToLastSuggestedWord() {
            $(activeResult).removeClass('active');
            $(sugWords + ' ul li').last().find('a').addClass('active');
        }

        function goToFirstRecommendedProduct() {
            $(activeResult).removeClass('active');
            if ($(recProducts + ' ul li').size() > 0) {
                $(recProducts + ' ul li').first().find('a').addClass('active');
            } else {
                goToFirstSuggestedWord();
            }
        }

        function goToNext() {
            parentActive = $(activeResult).parent();
            $(activeResult).removeClass('active');
            parentActive.next().find('a').addClass('active');
        }

        function goToPrevious() {
            parentActive = $(activeResult).parent();
            $(activeResult).removeClass('active');
            parentActive.prev().find('a').addClass('active');
        }

        function getSuggestedProducts(url, to_search) {
            to_search = $.trim(to_search);
            resultAll = "";
            countResult = 0;
            img_Hash = {}
            bindUrl = settings.url.replace('{0}', encodeURIComponent(to_search)).replace('{1}', settings.schtype).replace('{2}', settings.isApr);

            var vsn = "";
            if ($j('body#virtual_la').size()) {
                vsn = "&vsn=lesaub";
            } else if ($j('body#virtual_ampm').size()) {
                vsn = "&vsn=ampm";
            }
            bindUrl += vsn;

            if (settings.localJsonObject == true) {
                jsonSuggestedWords = settings.jsonObjectRec[0].KwdRes;
                jsonRecProducts = settings.jsonObjectRec[0].Prs;
                parseAndDisplayResult(jsonSuggestedWords, jsonRecProducts, to_search);
            } else if (settings.localJsonObject == false && (settings.wordSuggestEnable || settings.productsRecEnable)) {
                if (!isTouchDevice() || (isTouchDevice() && settings.wordSuggestEnable)) {
                    if (xhr != null) {
                        xhr.abort();
                    }

                    callAjax = function () {
                        xhr = $.ajax({
                            url: bindUrl,
                            dataType: "json",
                            success: function (data) {
                                jsonSuggestedWords = data.KwdRes;
                                jsonRecProducts = data.Prs;
                                parseAndDisplayResult(jsonSuggestedWords, jsonRecProducts, to_search);
                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                $(layer).hide();
                            }
                        });
                    };
                    clearTimeout(launchAjax);
                    launchAjax = setTimeout(callAjax, 300);
                }
            }
        }

        function clearSuggestedProducts() {
            $(layer + ' ul').empty();
            $(layer + ' .bg').height($(layer).height() - 10);
        }
        function bindResultSelectionHover() {
            $(layer + ' ul li a').hover(function () {
                $(layer + ' ul li a').removeClass('active');
                $(this).addClass('active');
            });
        }
        function bindSearchLaunch() {
            if (settings.submitButton != null && settings.submitButton != '') {
                $(layer + ' ul li a').bind('click', function () {
                    if (settings.OmnitureVariableSetFunction != null) {
                        settings.OmnitureVariableSetFunction();
                    }
                    $inputObject.val($(this).attr('title'));
                    $(settings.submitButton).trigger('click');
                });
            }
        }

        function parseAndDisplayResult(jsonSuggestedWords, jsonRecProducts, to_search) {
            if (settings.wordSuggestEnable && !isNullOrUndefined(jsonSuggestedWords)) {
                $.each(jsonSuggestedWords, function (i, s) {
                    clearSuggestedProducts();

                    originalString = $('<span></span>').html(s.kwd).text();

                    compareString = $('<span></span>').html(s.kwd).text().toLowerCase();

                    resultAll += '<li><a href=\'javascript:void(0)\' title="' + compareString + '">';
                    resultAll += getFormattedString(to_search, originalString, compareString, resultAll);
                    resultAll += '</a></li>';
                });
            }

            /* ----------------------- Recommended Products ----------------------- */
            if (settings.productsRecEnable && !isNullOrUndefined(jsonRecProducts)) {
                resultRecommendedProducts = "";
                start_price_label = "";
                if (!isTouchDevice()) {
                    resultRecommendedProducts = "";
                    $.each(jsonRecProducts, function (i, s) {
                        rules = pricingRuleManager.GetRulesForProduct(s)
                        originalString = $('<span></span>').html(s.DN).text();
                        compareString = $('<span></span>').html(s.DN).text().toLowerCase();
                        start_price_label = "";

                        if (rules.IsMultiPrice == true) {
                            start_price_label = "à partir de ";
                        }

                        if (settings.isApr) {
                            isAprString = "&isApr=true";
                        }
                        else {
                            isAprString = "";
                        }

                        var urlImgHd = null;

                        /* MCA 04052012
                        * Keep this code for HD Images, once "WCM Images Phase 2" is done.
                        * ----------------------------------------------------------------- */
                        /*for (var j = 0; j < s.Imgs.length; j++) {
                        if (s.Imgs[j].BTy.DN == "P_SKU_Image_HDZ") {
                        urlImgHd = s.Imgs[j].URL;
                        break;
                        }
                        }*/
                        /* ----------------------------------------------------------------- */

                        if (isNullOrUndefined(urlImgHd)) {
                            for (var y = 0; y < s.Imgs.length; y++) {
                                if (s.Imgs[y].BTy.DN == "P_Image_Thumb") {
                                    urlImgHd = s.Imgs[y].URL;
                                    break;
                                }
                            }
                        }

                        if (isNullOrUndefined(urlImgHd)) {
                            urlImgHd = "http://media.laredoute.fr/images/absence_visuel.png";
                        }

                        resultRecommendedProducts += '<li>';
                        resultRecommendedProducts += '  <a href="/product.aspx?productid=' + s.Id + '&documentid=' + s.CatVerId + '&categoryid=0&customertarget=' + s.AggrVrnts.CtmrTgt + '&offertype=' + s.AggrVrnts.OfrType + isAprString + '" title="' + compareString + '">';
                        resultRecommendedProducts += '      <img class="img_prd_' + i + '" src="' + urlImgHd + '?s=50" width="50" height="50">';
                        resultRecommendedProducts += '      <div class="detail_product">';
                        resultRecommendedProducts += '          <div class="product_label">' + getFormattedString(to_search, originalString, compareString, resultRecommendedProducts) + '</div>';
                        resultRecommendedProducts += '          <div class="brand">' + s.Br.DN + '</div>';
                        resultRecommendedProducts += '          <div class="price">' + start_price_label + "<strong>" + pricingRuleManager.formatPrice(rules.Price) + ' &euro;</strong></div>';
                        resultRecommendedProducts += '      </div>';
                        resultRecommendedProducts += '      <div class="clear"></div>';
                        resultRecommendedProducts += '  </a>';
                        resultRecommendedProducts += '</li>';
                    });
                }
            }
            /* -------------------------------------------------------------------- */

            if (countResult > 0 && $inputObject.val().length > 2) {
                if ($(layer).length == 0) {
                    $inputObject.after('<div id="' + layerName + '" class="suggestlist"><div class="bg"></div><div class="suggested_content suggested_products"><p>' + settings.sugWordsTitle + '</p><ul></ul></div><div class="suggested_content recommended_products"><p>' + settings.recProdcutsTitle + '</p><ul></ul></div><div class="clear"></div></div>');
                }
                clearSuggestedProducts();

                if (settings.wordSuggestEnable && !isNullOrUndefined(jsonSuggestedWords)) {
                    $(layer + ' .suggested_products ul').append(resultAll);
                    $(layer + ' .suggested_products').show();
                } else {
                    $(layer + ' .suggested_products').hide();
                }

                /* ----------------------- Recommended Products ----------------------- */
                if (settings.productsRecEnable && !isTouchDevice() && !isNullOrUndefined(jsonRecProducts)) {
                    if (settings.wordSuggestEnable) {
                        $(layer + ' .recommended_products').css('border-top', '1px solid #DBDBDB');
                        $(layer + ' .recommended_products').css('margin-top', '0');
                    } else {
                        $(layer + ' .recommended_products').css('border', '0');
                        $(layer + ' .recommended_products').css('margin-top', '1px');
                    }
                    $(layer + ' .recommended_products ul').append(resultRecommendedProducts);
                    $(layer + ' .recommended_products').show();
                } else {
                    $(layer + ' .recommended_products').hide();
                }

                /* -------------------------------------------------------------------- */

                $(layer).show();
                $(layer + ' .bg').height($(layer).height() - 10).width($(layer).width() - 10);
                bindResultSelectionHover();
                bindSearchLaunch();
            } else {
                clearSuggestedProducts();
                $(layer).hide();
            }
        }

        function getFormattedString(to_search, originalString, compareString, resultAll) {

            result = "";
            compareStringNoSpeChars = convertStringWithoutSpecialCharacters(compareString);
            to_search = convertStringWithoutSpecialCharacters(to_search);
            if (to_search.substr(to_search.length - 1) == ' ') {
                to_search = to_search.substr(0, to_search.length - 1);
            }
            startIndexOf = compareStringNoSpeChars.indexOf(to_search);

            if (startIndexOf != -1) {
                existingSuggestString = "title=\"" + compareString + "\"";
                if (result.indexOf(existingSuggestString) == -1) {
                    normalBegin = originalString.substr(0, startIndexOf);
                    normalEnd = originalString.substr(startIndexOf + to_search.length);
                    textBold = originalString.substr(normalBegin.length, to_search.length);

                    result = normalBegin + '<strong>' + textBold + '</strong>' + normalEnd;
                }
            } else {
                tabStrToSearch = to_search.split(" ");
                //tabStrCompare = compareString.split(" ");
                tabOriginalString = originalString.split(" ");
                tabStrCompare = originalString.split(" ");

                for (i = 0; i < tabStrToSearch.length; i++) {
                    for (j = 0; j < tabStrCompare.length; j++) {
                        if (tabStrToSearch[i] == convertStringWithoutSpecialCharacters(tabStrCompare[j])) {
                            tabStrCompare[j] = "<strong>" + tabOriginalString[j] + "</strong>";
                            break;
                        } else {
                            toCompareTemp = tabStrCompare[j].replace('<strong>', '').replace('</strong>', '');
                            currentStrongChars = "";
                            currentNormalChars = "";

                            if (tabStrCompare[j].indexOf('<strong>') > -1) {
                                temp = tabStrCompare[j].replace('<strong>', '');
                                temp = temp.substring(0, temp.indexOf('</strong>'));
                                currentStrongChars = temp;
                                currentNormalChars = tabStrCompare[j].substring(tabStrCompare[j].indexOf('</strong>') + ('</strong>').length);
                            }
                            toCompareTemp = toCompareTemp.toLowerCase();

                            if (tabStrToSearch[i].substr(0, 1) == convertStringWithoutSpecialCharacters(toCompareTemp.substr(0, 1))) {
                                strongChars = "";
                                normalChars = "";
                                for (k = 0; k < tabStrToSearch[i].length; k++) {
                                    if (tabStrToSearch[i].substr(k, 1) == convertStringWithoutSpecialCharacters(toCompareTemp.substr(k, 1))) {
                                        strongChars += tabOriginalString[j].substr(k, 1);
                                    } else {
                                        break;
                                    }
                                }

                                if (strongChars.length < currentStrongChars.length) {
                                    strongChars = currentStrongChars;
                                    normalChars = currentNormalChars;
                                } else {
                                    normalChars = tabOriginalString[j].substr(k, (tabOriginalString[j].length) - 1);
                                }

                                tabStrCompare[j] = "<strong>" + strongChars + "</strong>" + normalChars;
                            }
                        }
                    }
                }
                result = tabStrCompare.join(" ");
            }
            countResult++;
            return result;
        }


        /*
        * Converts a string with special characters to the equivalent without special characters
        * e.g . : convertsStringWithoutSpecialCharacters("canapé d'été") => "canape d'ete"
        */
        function convertStringWithoutSpecialCharacters(chaine) {
            accent = "ÀÁÂÃÄÅàáâãäåÒÓÔÕÖØòóôõöøÈÉÊËèéêëÌÍÎÏìíîïÙÚÛÜùúûüÿÑñÇç";
            sansAccent = "AAAAAAaaaaaaOOOOOOooooooEEEEeeeeIIIIiiiiUUUUuuuuyNnCc";

            tabAccent = accent.split('');
            tabSansAccent = sansAccent.split('');

            for (index = 0; index < accent.length; index++) {
                while (chaine.indexOf(tabAccent[index]) != -1) {
                    chaine = chaine.replace(tabAccent[index], tabSansAccent[index]);
                }
            }
            return (chaine);
        }
    };
})(jQuery);
