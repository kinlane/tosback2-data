
    
/*  Prototype JavaScript framework, version 1.7
 *  (c) 2005-2010 Sam Stephenson
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *  For details, see the Prototype web site: http://www.prototypejs.org/
 *
 *--------------------------------------------------------------------------*/
/*  Prototype JavaScript framework, version 1.7
 *  (c) 2005-2010 Sam Stephenson
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *  For details, see the Prototype web site: http://www.prototypejs.org/
 *
 *--------------------------------------------------------------------------*/

var Prototype = {

  Version: '1.7',

  Browser: (function(){
    var ua = navigator.userAgent;
    var isOpera = Object.prototype.toString.call(window.opera) == '[object Opera]';
    return {
      IE:             !!window.attachEvent && !isOpera,
      Opera:          isOpera,
      WebKit:         ua.indexOf('AppleWebKit/') > -1,
      Gecko:          ua.indexOf('Gecko') > -1 && ua.indexOf('KHTML') === -1,
      MobileSafari:   /Apple.*Mobile/.test(ua)
    }
  })(),

  BrowserFeatures: {
    XPath: !!document.evaluate,

    SelectorsAPI: !!document.querySelector,

    ElementExtensions: (function() {
      var constructor = window.Element || window.HTMLElement;
      return !!(constructor && constructor.prototype);
    })(),
    SpecificElementExtensions: (function() {
      if (typeof window.HTMLDivElement !== 'undefined')
        return true;

      var div = document.createElement('div'),
          form = document.createElement('form'),
          isSupported = false;

      if (div['__proto__'] && (div['__proto__'] !== form['__proto__'])) {
        isSupported = true;
      }

      div = form = null;

      return isSupported;
    })()
  },

  ScriptFragment: '<script[^>]*>([\\S\\s]*?)<\/script>',
  JSONFilter: /^\/\*-secure-([\s\S]*)\*\/\s*$/,

  emptyFunction: function() { },

  K: function(x) { return x }
};

if (Prototype.Browser.MobileSafari)
  Prototype.BrowserFeatures.SpecificElementExtensions = false;


var Abstract = { };


var Try = {
  these: function() {
    var returnValue;

    for (var i = 0, length = arguments.length; i < length; i++) {
      var lambda = arguments[i];
      try {
        returnValue = lambda();
        break;
      } catch (e) { }
    }

    return returnValue;
  }
};

/* Based on Alex Arnell's inheritance implementation. */

var Class = (function() {

  var IS_DONTENUM_BUGGY = (function(){
    for (var p in { toString: 1 }) {
      if (p === 'toString') return false;
    }
    return true;
  })();

  function subclass() {};
  function create() {
    var parent = null, properties = $A(arguments);
    if (Object.isFunction(properties[0]))
      parent = properties.shift();

    function klass() {
      this.initialize.apply(this, arguments);
    }

    Object.extend(klass, Class.Methods);
    klass.superclass = parent;
    klass.subclasses = [];

    if (parent) {
      subclass.prototype = parent.prototype;
      klass.prototype = new subclass;
      parent.subclasses.push(klass);
    }

    for (var i = 0, length = properties.length; i < length; i++)
      klass.addMethods(properties[i]);

    if (!klass.prototype.initialize)
      klass.prototype.initialize = Prototype.emptyFunction;

    klass.prototype.constructor = klass;
    return klass;
  }

  function addMethods(source) {
    var ancestor   = this.superclass && this.superclass.prototype,
        properties = Object.keys(source);

    if (IS_DONTENUM_BUGGY) {
      if (source.toString != Object.prototype.toString)
        properties.push("toString");
      if (source.valueOf != Object.prototype.valueOf)
        properties.push("valueOf");
    }

    for (var i = 0, length = properties.length; i < length; i++) {
      var property = properties[i], value = source[property];
      if (ancestor && Object.isFunction(value) &&
          value.argumentNames()[0] == "$super") {
        var method = value;
        value = (function(m) {
          return function() { return ancestor[m].apply(this, arguments); };
        })(property).wrap(method);

        value.valueOf = method.valueOf.bind(method);
        value.toString = method.toString.bind(method);
      }
      this.prototype[property] = value;
    }

    return this;
  }

  return {
    create: create,
    Methods: {
      addMethods: addMethods
    }
  };
})();
(function() {

  var _toString = Object.prototype.toString,
      NULL_TYPE = 'Null',
      UNDEFINED_TYPE = 'Undefined',
      BOOLEAN_TYPE = 'Boolean',
      NUMBER_TYPE = 'Number',
      STRING_TYPE = 'String',
      OBJECT_TYPE = 'Object',
      FUNCTION_CLASS = '[object Function]',
      BOOLEAN_CLASS = '[object Boolean]',
      NUMBER_CLASS = '[object Number]',
      STRING_CLASS = '[object String]',
      ARRAY_CLASS = '[object Array]',
      DATE_CLASS = '[object Date]',
      NATIVE_JSON_STRINGIFY_SUPPORT = window.JSON &&
        typeof JSON.stringify === 'function' &&
        JSON.stringify(0) === '0' &&
        typeof JSON.stringify(Prototype.K) === 'undefined';

  function Type(o) {
    switch(o) {
      case null: return NULL_TYPE;
      case (void 0): return UNDEFINED_TYPE;
    }
    var type = typeof o;
    switch(type) {
      case 'boolean': return BOOLEAN_TYPE;
      case 'number':  return NUMBER_TYPE;
      case 'string':  return STRING_TYPE;
    }
    return OBJECT_TYPE;
  }

  function extend(destination, source) {
    for (var property in source)
      destination[property] = source[property];
    return destination;
  }

  function inspect(object) {
    try {
      if (isUndefined(object)) return 'undefined';
      if (object === null) return 'null';
      return object.inspect ? object.inspect() : String(object);
    } catch (e) {
      if (e instanceof RangeError) return '...';
      throw e;
    }
  }

  function toJSON(value) {
    return Str('', { '': value }, []);
  }

  function Str(key, holder, stack) {
    var value = holder[key],
        type = typeof value;

    if (Type(value) === OBJECT_TYPE && typeof value.toJSON === 'function') {
      value = value.toJSON(key);
    }

    var _class = _toString.call(value);

    switch (_class) {
      case NUMBER_CLASS:
      case BOOLEAN_CLASS:
      case STRING_CLASS:
        value = value.valueOf();
    }

    switch (value) {
      case null: return 'null';
      case true: return 'true';
      case false: return 'false';
    }

    type = typeof value;
    switch (type) {
      case 'string':
        return value.inspect(true);
      case 'number':
        return isFinite(value) ? String(value) : 'null';
      case 'object':

        for (var i = 0, length = stack.length; i < length; i++) {
          if (stack[i] === value) { throw new TypeError(); }
        }
        stack.push(value);

        var partial = [];
        if (_class === ARRAY_CLASS) {
          for (var i = 0, length = value.length; i < length; i++) {
            var str = Str(i, value, stack);
            partial.push(typeof str === 'undefined' ? 'null' : str);
          }
          partial = '[' + partial.join(',') + ']';
        } else {
          var keys = Object.keys(value);
          for (var i = 0, length = keys.length; i < length; i++) {
            var key = keys[i], str = Str(key, value, stack);
            if (typeof str !== "undefined") {
               partial.push(key.inspect(true)+ ':' + str);
             }
          }
          partial = '{' + partial.join(',') + '}';
        }
        stack.pop();
        return partial;
    }
  }

  function stringify(object) {
    return JSON.stringify(object);
  }

  function toQueryString(object) {
    return $H(object).toQueryString();
  }

  function toHTML(object) {
    return object && object.toHTML ? object.toHTML() : String.interpret(object);
  }

  function keys(object) {
    if (Type(object) !== OBJECT_TYPE) { throw new TypeError(); }
    var results = [];
    for (var property in object) {
      if (object.hasOwnProperty(property)) {
        results.push(property);
      }
    }
    return results;
  }

  function values(object) {
    var results = [];
    for (var property in object)
      results.push(object[property]);
    return results;
  }

  function clone(object) {
    return extend({ }, object);
  }

  function isElement(object) {
    return !!(object && object.nodeType == 1);
  }

  function isArray(object) {
    return _toString.call(object) === ARRAY_CLASS;
  }

  var hasNativeIsArray = (typeof Array.isArray == 'function')
    && Array.isArray([]) && !Array.isArray({});

  if (hasNativeIsArray) {
    isArray = Array.isArray;
  }

  function isHash(object) {
    return object instanceof Hash;
  }

  function isFunction(object) {
    return _toString.call(object) === FUNCTION_CLASS;
  }

  function isString(object) {
    return _toString.call(object) === STRING_CLASS;
  }

  function isNumber(object) {
    return _toString.call(object) === NUMBER_CLASS;
  }

  function isDate(object) {
    return _toString.call(object) === DATE_CLASS;
  }

  function isUndefined(object) {
    return typeof object === "undefined";
  }

  extend(Object, {
    extend:        extend,
    inspect:       inspect,
    toJSON:        NATIVE_JSON_STRINGIFY_SUPPORT ? stringify : toJSON,
    toQueryString: toQueryString,
    toHTML:        toHTML,
    keys:          Object.keys || keys,
    values:        values,
    clone:         clone,
    isElement:     isElement,
    isArray:       isArray,
    isHash:        isHash,
    isFunction:    isFunction,
    isString:      isString,
    isNumber:      isNumber,
    isDate:        isDate,
    isUndefined:   isUndefined
  });
})();
Object.extend(Function.prototype, (function() {
  var slice = Array.prototype.slice;

  function update(array, args) {
    var arrayLength = array.length, length = args.length;
    while (length--) array[arrayLength + length] = args[length];
    return array;
  }

  function merge(array, args) {
    array = slice.call(array, 0);
    return update(array, args);
  }

  function argumentNames() {
    var names = this.toString().match(/^[\s\(]*function[^(]*\(([^)]*)\)/)[1]
      .replace(/\/\/.*?[\r\n]|\/\*(?:.|[\r\n])*?\*\//g, '')
      .replace(/\s+/g, '').split(',');
    return names.length == 1 && !names[0] ? [] : names;
  }

  function bind(context) {
    if (arguments.length < 2 && Object.isUndefined(arguments[0])) return this;
    var __method = this, args = slice.call(arguments, 1);
    return function() {
      var a = merge(args, arguments);
      return __method.apply(context, a);
    }
  }

  function bindAsEventListener(context) {
    var __method = this, args = slice.call(arguments, 1);
    return function(event) {
      var a = update([event || window.event], args);
      return __method.apply(context, a);
    }
  }

  function curry() {
    if (!arguments.length) return this;
    var __method = this, args = slice.call(arguments, 0);
    return function() {
      var a = merge(args, arguments);
      return __method.apply(this, a);
    }
  }

  function delay(timeout) {
    var __method = this, args = slice.call(arguments, 1);
    timeout = timeout * 1000;
    return window.setTimeout(function() {
      return __method.apply(__method, args);
    }, timeout);
  }

  function defer() {
    var args = update([0.01], arguments);
    return this.delay.apply(this, args);
  }

  function wrap(wrapper) {
    var __method = this;
    return function() {
      var a = update([__method.bind(this)], arguments);
      return wrapper.apply(this, a);
    }
  }

  function methodize() {
    if (this._methodized) return this._methodized;
    var __method = this;
    return this._methodized = function() {
      var a = update([this], arguments);
      return __method.apply(null, a);
    };
  }

  return {
    argumentNames:       argumentNames,
    bind:                bind,
    bindAsEventListener: bindAsEventListener,
    curry:               curry,
    delay:               delay,
    defer:               defer,
    wrap:                wrap,
    methodize:           methodize
  }
})());



(function(proto) {


  function toISOString() {
    return this.getUTCFullYear() + '-' +
      (this.getUTCMonth() + 1).toPaddedString(2) + '-' +
      this.getUTCDate().toPaddedString(2) + 'T' +
      this.getUTCHours().toPaddedString(2) + ':' +
      this.getUTCMinutes().toPaddedString(2) + ':' +
      this.getUTCSeconds().toPaddedString(2) + 'Z';
  }


  function toJSON() {
    return this.toISOString();
  }

  if (!proto.toISOString) proto.toISOString = toISOString;
  if (!proto.toJSON) proto.toJSON = toJSON;

})(Date.prototype);


RegExp.prototype.match = RegExp.prototype.test;

RegExp.escape = function(str) {
  return String(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
};
var PeriodicalExecuter = Class.create({
  initialize: function(callback, frequency) {
    this.callback = callback;
    this.frequency = frequency;
    this.currentlyExecuting = false;

    this.registerCallback();
  },

  registerCallback: function() {
    this.timer = setInterval(this.onTimerEvent.bind(this), this.frequency * 1000);
  },

  execute: function() {
    this.callback(this);
  },

  stop: function() {
    if (!this.timer) return;
    clearInterval(this.timer);
    this.timer = null;
  },

  onTimerEvent: function() {
    if (!this.currentlyExecuting) {
      try {
        this.currentlyExecuting = true;
        this.execute();
        this.currentlyExecuting = false;
      } catch(e) {
        this.currentlyExecuting = false;
        throw e;
      }
    }
  }
});
Object.extend(String, {
  interpret: function(value) {
    return value == null ? '' : String(value);
  },
  specialChar: {
    '\b': '\\b',
    '\t': '\\t',
    '\n': '\\n',
    '\f': '\\f',
    '\r': '\\r',
    '\\': '\\\\'
  }
});

Object.extend(String.prototype, (function() {
  var NATIVE_JSON_PARSE_SUPPORT = window.JSON &&
    typeof JSON.parse === 'function' &&
    JSON.parse('{"test": true}').test;

  function prepareReplacement(replacement) {
    if (Object.isFunction(replacement)) return replacement;
    var template = new Template(replacement);
    return function(match) { return template.evaluate(match) };
  }

  function gsub(pattern, replacement) {
    var result = '', source = this, match;
    replacement = prepareReplacement(replacement);

    if (Object.isString(pattern))
      pattern = RegExp.escape(pattern);

    if (!(pattern.length || pattern.source)) {
      replacement = replacement('');
      return replacement + source.split('').join(replacement) + replacement;
    }

    while (source.length > 0) {
      if (match = source.match(pattern)) {
        result += source.slice(0, match.index);
        result += String.interpret(replacement(match));
        source  = source.slice(match.index + match[0].length);
      } else {
        result += source, source = '';
      }
    }
    return result;
  }

  function sub(pattern, replacement, count) {
    replacement = prepareReplacement(replacement);
    count = Object.isUndefined(count) ? 1 : count;

    return this.gsub(pattern, function(match) {
      if (--count < 0) return match[0];
      return replacement(match);
    });
  }

  function scan(pattern, iterator) {
    this.gsub(pattern, iterator);
    return String(this);
  }

  function truncate(length, truncation) {
    length = length || 30;
    truncation = Object.isUndefined(truncation) ? '...' : truncation;
    return this.length > length ?
      this.slice(0, length - truncation.length) + truncation : String(this);
  }

  function strip() {
    return this.replace(/^\s+/, '').replace(/\s+$/, '');
  }

  function stripTags() {
    return this.replace(/<\w+(\s+("[^"]*"|'[^']*'|[^>])+)?>|<\/\w+>/gi, '');
  }

  function stripScripts() {
    return this.replace(new RegExp(Prototype.ScriptFragment, 'img'), '');
  }

  function extractScripts() {
    var matchAll = new RegExp(Prototype.ScriptFragment, 'img'),
        matchOne = new RegExp(Prototype.ScriptFragment, 'im');
    return (this.match(matchAll) || []).map(function(scriptTag) {
      return (scriptTag.match(matchOne) || ['', ''])[1];
    });
  }

  function evalScripts() {
    return this.extractScripts().map(function(script) { return eval(script) });
  }

  function escapeHTML() {
    return this.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
  }

  function unescapeHTML() {
    return this.stripTags().replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&amp;/g,'&');
  }


  function toQueryParams(separator) {
    var match = this.strip().match(/([^?#]*)(#.*)?$/);
    if (!match) return { };

    return match[1].split(separator || '&').inject({ }, function(hash, pair) {
      if ((pair = pair.split('='))[0]) {
        var key = decodeURIComponent(pair.shift()),
            value = pair.length > 1 ? pair.join('=') : pair[0];

        if (value != undefined) value = decodeURIComponent(value);

        if (key in hash) {
          if (!Object.isArray(hash[key])) hash[key] = [hash[key]];
          hash[key].push(value);
        }
        else hash[key] = value;
      }
      return hash;
    });
  }

  function toArray() {
    return this.split('');
  }

  function succ() {
    return this.slice(0, this.length - 1) +
      String.fromCharCode(this.charCodeAt(this.length - 1) + 1);
  }

  function times(count) {
    return count < 1 ? '' : new Array(count + 1).join(this);
  }

  function camelize() {
    return this.replace(/-+(.)?/g, function(match, chr) {
      return chr ? chr.toUpperCase() : '';
    });
  }

  function capitalize() {
    return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase();
  }

  function underscore() {
    return this.replace(/::/g, '/')
               .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')
               .replace(/([a-z\d])([A-Z])/g, '$1_$2')
               .replace(/-/g, '_')
               .toLowerCase();
  }

  function dasherize() {
    return this.replace(/_/g, '-');
  }

  function inspect(useDoubleQuotes) {
    var escapedString = this.replace(/[\x00-\x1f\\]/g, function(character) {
      if (character in String.specialChar) {
        return String.specialChar[character];
      }
      return '\\u00' + character.charCodeAt().toPaddedString(2, 16);
    });
    if (useDoubleQuotes) return '"' + escapedString.replace(/"/g, '\\"') + '"';
    return "'" + escapedString.replace(/'/g, '\\\'') + "'";
  }

  function unfilterJSON(filter) {
    return this.replace(filter || Prototype.JSONFilter, '$1');
  }

  function isJSON() {
    var str = this;
    if (str.blank()) return false;
    str = str.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@');
    str = str.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']');
    str = str.replace(/(?:^|:|,)(?:\s*\[)+/g, '');
    return (/^[\],:{}\s]*$/).test(str);
  }

  function evalJSON(sanitize) {
    var json = this.unfilterJSON(),
        cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    if (cx.test(json)) {
      json = json.replace(cx, function (a) {
        return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
      });
    }
    try {
      if (!sanitize || json.isJSON()) return eval('(' + json + ')');
    } catch (e) { }
    throw new SyntaxError('Badly formed JSON string: ' + this.inspect());
  }

  function parseJSON() {
    var json = this.unfilterJSON();
    return JSON.parse(json);
  }

  function include(pattern) {
    return this.indexOf(pattern) > -1;
  }

  function startsWith(pattern) {
    return this.lastIndexOf(pattern, 0) === 0;
  }

  function endsWith(pattern) {
    var d = this.length - pattern.length;
    return d >= 0 && this.indexOf(pattern, d) === d;
  }

  function empty() {
    return this == '';
  }

  function blank() {
    return /^\s*$/.test(this);
  }

  function interpolate(object, pattern) {
    return new Template(this, pattern).evaluate(object);
  }

  return {
    gsub:           gsub,
    sub:            sub,
    scan:           scan,
    truncate:       truncate,
    strip:          String.prototype.trim || strip,
    stripTags:      stripTags,
    stripScripts:   stripScripts,
    extractScripts: extractScripts,
    evalScripts:    evalScripts,
    escapeHTML:     escapeHTML,
    unescapeHTML:   unescapeHTML,
    toQueryParams:  toQueryParams,
    parseQuery:     toQueryParams,
    toArray:        toArray,
    succ:           succ,
    times:          times,
    camelize:       camelize,
    capitalize:     capitalize,
    underscore:     underscore,
    dasherize:      dasherize,
    inspect:        inspect,
    unfilterJSON:   unfilterJSON,
    isJSON:         isJSON,
    evalJSON:       NATIVE_JSON_PARSE_SUPPORT ? parseJSON : evalJSON,
    include:        include,
    startsWith:     startsWith,
    endsWith:       endsWith,
    empty:          empty,
    blank:          blank,
    interpolate:    interpolate
  };
})());

var Template = Class.create({
  initialize: function(template, pattern) {
    this.template = template.toString();
    this.pattern = pattern || Template.Pattern;
  },

  evaluate: function(object) {
    if (object && Object.isFunction(object.toTemplateReplacements))
      object = object.toTemplateReplacements();

    return this.template.gsub(this.pattern, function(match) {
      if (object == null) return (match[1] + '');

      var before = match[1] || '';
      if (before == '\\') return match[2];

      var ctx = object, expr = match[3],
          pattern = /^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/;

      match = pattern.exec(expr);
      if (match == null) return before;

      while (match != null) {
        var comp = match[1].startsWith('[') ? match[2].replace(/\\\\]/g, ']') : match[1];
        ctx = ctx[comp];
        if (null == ctx || '' == match[3]) break;
        expr = expr.substring('[' == match[3] ? match[1].length : match[0].length);
        match = pattern.exec(expr);
      }

      return before + String.interpret(ctx);
    });
  }
});
Template.Pattern = /(^|.|\r|\n)(#\{(.*?)\})/;

var $break = { };

var Enumerable = (function() {
  function each(iterator, context) {
    var index = 0;
    try {
      this._each(function(value) {
        iterator.call(context, value, index++);
      });
    } catch (e) {
      if (e != $break) throw e;
    }
    return this;
  }

  function eachSlice(number, iterator, context) {
    var index = -number, slices = [], array = this.toArray();
    if (number < 1) return array;
    while ((index += number) < array.length)
      slices.push(array.slice(index, index+number));
    return slices.collect(iterator, context);
  }

  function all(iterator, context) {
    iterator = iterator || Prototype.K;
    var result = true;
    this.each(function(value, index) {
      result = result && !!iterator.call(context, value, index);
      if (!result) throw $break;
    });
    return result;
  }

  function any(iterator, context) {
    iterator = iterator || Prototype.K;
    var result = false;
    this.each(function(value, index) {
      if (result = !!iterator.call(context, value, index))
        throw $break;
    });
    return result;
  }

  function collect(iterator, context) {
    iterator = iterator || Prototype.K;
    var results = [];
    this.each(function(value, index) {
      results.push(iterator.call(context, value, index));
    });
    return results;
  }

  function detect(iterator, context) {
    var result;
    this.each(function(value, index) {
      if (iterator.call(context, value, index)) {
        result = value;
        throw $break;
      }
    });
    return result;
  }

  function findAll(iterator, context) {
    var results = [];
    this.each(function(value, index) {
      if (iterator.call(context, value, index))
        results.push(value);
    });
    return results;
  }

  function grep(filter, iterator, context) {
    iterator = iterator || Prototype.K;
    var results = [];

    if (Object.isString(filter))
      filter = new RegExp(RegExp.escape(filter));

    this.each(function(value, index) {
      if (filter.match(value))
        results.push(iterator.call(context, value, index));
    });
    return results;
  }

  function include(object) {
    if (Object.isFunction(this.indexOf))
      if (this.indexOf(object) != -1) return true;

    var found = false;
    this.each(function(value) {
      if (value == object) {
        found = true;
        throw $break;
      }
    });
    return found;
  }

  function inGroupsOf(number, fillWith) {
    fillWith = Object.isUndefined(fillWith) ? null : fillWith;
    return this.eachSlice(number, function(slice) {
      while(slice.length < number) slice.push(fillWith);
      return slice;
    });
  }

  function inject(memo, iterator, context) {
    this.each(function(value, index) {
      memo = iterator.call(context, memo, value, index);
    });
    return memo;
  }

  function invoke(method) {
    var args = $A(arguments).slice(1);
    return this.map(function(value) {
      return value[method].apply(value, args);
    });
  }

  function max(iterator, context) {
    iterator = iterator || Prototype.K;
    var result;
    this.each(function(value, index) {
      value = iterator.call(context, value, index);
      if (result == null || value >= result)
        result = value;
    });
    return result;
  }

  function min(iterator, context) {
    iterator = iterator || Prototype.K;
    var result;
    this.each(function(value, index) {
      value = iterator.call(context, value, index);
      if (result == null || value < result)
        result = value;
    });
    return result;
  }

  function partition(iterator, context) {
    iterator = iterator || Prototype.K;
    var trues = [], falses = [];
    this.each(function(value, index) {
      (iterator.call(context, value, index) ?
        trues : falses).push(value);
    });
    return [trues, falses];
  }

  function pluck(property) {
    var results = [];
    this.each(function(value) {
      results.push(value[property]);
    });
    return results;
  }

  function reject(iterator, context) {
    var results = [];
    this.each(function(value, index) {
      if (!iterator.call(context, value, index))
        results.push(value);
    });
    return results;
  }

  function sortBy(iterator, context) {
    return this.map(function(value, index) {
      return {
        value: value,
        criteria: iterator.call(context, value, index)
      };
    }).sort(function(left, right) {
      var a = left.criteria, b = right.criteria;
      return a < b ? -1 : a > b ? 1 : 0;
    }).pluck('value');
  }

  function toArray() {
    return this.map();
  }

  function zip() {
    var iterator = Prototype.K, args = $A(arguments);
    if (Object.isFunction(args.last()))
      iterator = args.pop();

    var collections = [this].concat(args).map($A);
    return this.map(function(value, index) {
      return iterator(collections.pluck(index));
    });
  }

  function size() {
    return this.toArray().length;
  }

  function inspect() {
    return '#<Enumerable:' + this.toArray().inspect() + '>';
  }









  return {
    each:       each,
    eachSlice:  eachSlice,
    all:        all,
    every:      all,
    any:        any,
    some:       any,
    collect:    collect,
    map:        collect,
    detect:     detect,
    findAll:    findAll,
    select:     findAll,
    filter:     findAll,
    grep:       grep,
    include:    include,
    member:     include,
    inGroupsOf: inGroupsOf,
    inject:     inject,
    invoke:     invoke,
    max:        max,
    min:        min,
    partition:  partition,
    pluck:      pluck,
    reject:     reject,
    sortBy:     sortBy,
    toArray:    toArray,
    entries:    toArray,
    zip:        zip,
    size:       size,
    inspect:    inspect,
    find:       detect
  };
})();

function $A(iterable) {
  if (!iterable) return [];
  if ('toArray' in Object(iterable)) return iterable.toArray();
  var length = iterable.length || 0, results = new Array(length);
  while (length--) results[length] = iterable[length];
  return results;
}


function $w(string) {
  if (!Object.isString(string)) return [];
  string = string.strip();
  return string ? string.split(/\s+/) : [];
}

Array.from = $A;


(function() {
  var arrayProto = Array.prototype,
      slice = arrayProto.slice,
      _each = arrayProto.forEach; // use native browser JS 1.6 implementation if available

  function each(iterator, context) {
    for (var i = 0, length = this.length >>> 0; i < length; i++) {
      if (i in this) iterator.call(context, this[i], i, this);
    }
  }
  if (!_each) _each = each;

  function clear() {
    this.length = 0;
    return this;
  }

  function first() {
    return this[0];
  }

  function last() {
    return this[this.length - 1];
  }

  function compact() {
    return this.select(function(value) {
      return value != null;
    });
  }

  function flatten() {
    return this.inject([], function(array, value) {
      if (Object.isArray(value))
        return array.concat(value.flatten());
      array.push(value);
      return array;
    });
  }

  function without() {
    var values = slice.call(arguments, 0);
    return this.select(function(value) {
      return !values.include(value);
    });
  }

  function reverse(inline) {
    return (inline === false ? this.toArray() : this)._reverse();
  }

  function uniq(sorted) {
    return this.inject([], function(array, value, index) {
      if (0 == index || (sorted ? array.last() != value : !array.include(value)))
        array.push(value);
      return array;
    });
  }

  function intersect(array) {
    return this.uniq().findAll(function(item) {
      return array.detect(function(value) { return item === value });
    });
  }


  function clone() {
    return slice.call(this, 0);
  }

  function size() {
    return this.length;
  }

  function inspect() {
    return '[' + this.map(Object.inspect).join(', ') + ']';
  }

  function indexOf(item, i) {
    i || (i = 0);
    var length = this.length;
    if (i < 0) i = length + i;
    for (; i < length; i++)
      if (this[i] === item) return i;
    return -1;
  }

  function lastIndexOf(item, i) {
    i = isNaN(i) ? this.length : (i < 0 ? this.length + i : i) + 1;
    var n = this.slice(0, i).reverse().indexOf(item);
    return (n < 0) ? n : i - n - 1;
  }

  function concat() {
    var array = slice.call(this, 0), item;
    for (var i = 0, length = arguments.length; i < length; i++) {
      item = arguments[i];
      if (Object.isArray(item) && !('callee' in item)) {
        for (var j = 0, arrayLength = item.length; j < arrayLength; j++)
          array.push(item[j]);
      } else {
        array.push(item);
      }
    }
    return array;
  }

  Object.extend(arrayProto, Enumerable);

  if (!arrayProto._reverse)
    arrayProto._reverse = arrayProto.reverse;

  Object.extend(arrayProto, {
    _each:     _each,
    clear:     clear,
    first:     first,
    last:      last,
    compact:   compact,
    flatten:   flatten,
    without:   without,
    reverse:   reverse,
    uniq:      uniq,
    intersect: intersect,
    clone:     clone,
    toArray:   clone,
    size:      size,
    inspect:   inspect
  });

  var CONCAT_ARGUMENTS_BUGGY = (function() {
    return [].concat(arguments)[0][0] !== 1;
  })(1,2)

  if (CONCAT_ARGUMENTS_BUGGY) arrayProto.concat = concat;

  if (!arrayProto.indexOf) arrayProto.indexOf = indexOf;
  if (!arrayProto.lastIndexOf) arrayProto.lastIndexOf = lastIndexOf;
})();
function $H(object) {
  return new Hash(object);
};

var Hash = Class.create(Enumerable, (function() {
  function initialize(object) {
    this._object = Object.isHash(object) ? object.toObject() : Object.clone(object);
  }


  function _each(iterator) {
    for (var key in this._object) {
      var value = this._object[key], pair = [key, value];
      pair.key = key;
      pair.value = value;
      iterator(pair);
    }
  }

  function set(key, value) {
    return this._object[key] = value;
  }

  function get(key) {
    if (this._object[key] !== Object.prototype[key])
      return this._object[key];
  }

  function unset(key) {
    var value = this._object[key];
    delete this._object[key];
    return value;
  }

  function toObject() {
    return Object.clone(this._object);
  }



  function keys() {
    return this.pluck('key');
  }

  function values() {
    return this.pluck('value');
  }

  function index(value) {
    var match = this.detect(function(pair) {
      return pair.value === value;
    });
    return match && match.key;
  }

  function merge(object) {
    return this.clone().update(object);
  }

  function update(object) {
    return new Hash(object).inject(this, function(result, pair) {
      result.set(pair.key, pair.value);
      return result;
    });
  }

  function toQueryPair(key, value) {
    if (Object.isUndefined(value)) return key;
    return key + '=' + encodeURIComponent(String.interpret(value));
  }

  function toQueryString() {
    return this.inject([], function(results, pair) {
      var key = encodeURIComponent(pair.key), values = pair.value;

      if (values && typeof values == 'object') {
        if (Object.isArray(values)) {
          var queryValues = [];
          for (var i = 0, len = values.length, value; i < len; i++) {
            value = values[i];
            queryValues.push(toQueryPair(key, value));
          }
          return results.concat(queryValues);
        }
      } else results.push(toQueryPair(key, values));
      return results;
    }).join('&');
  }

  function inspect() {
    return '#<Hash:{' + this.map(function(pair) {
      return pair.map(Object.inspect).join(': ');
    }).join(', ') + '}>';
  }

  function clone() {
    return new Hash(this);
  }

  return {
    initialize:             initialize,
    _each:                  _each,
    set:                    set,
    get:                    get,
    unset:                  unset,
    toObject:               toObject,
    toTemplateReplacements: toObject,
    keys:                   keys,
    values:                 values,
    index:                  index,
    merge:                  merge,
    update:                 update,
    toQueryString:          toQueryString,
    inspect:                inspect,
    toJSON:                 toObject,
    clone:                  clone
  };
})());

Hash.from = $H;
Object.extend(Number.prototype, (function() {
  function toColorPart() {
    return this.toPaddedString(2, 16);
  }

  function succ() {
    return this + 1;
  }

  function times(iterator, context) {
    $R(0, this, true).each(iterator, context);
    return this;
  }

  function toPaddedString(length, radix) {
    var string = this.toString(radix || 10);
    return '0'.times(length - string.length) + string;
  }

  function abs() {
    return Math.abs(this);
  }

  function round() {
    return Math.round(this);
  }

  function ceil() {
    return Math.ceil(this);
  }

  function floor() {
    return Math.floor(this);
  }

  return {
    toColorPart:    toColorPart,
    succ:           succ,
    times:          times,
    toPaddedString: toPaddedString,
    abs:            abs,
    round:          round,
    ceil:           ceil,
    floor:          floor
  };
})());

function $R(start, end, exclusive) {
  return new ObjectRange(start, end, exclusive);
}

var ObjectRange = Class.create(Enumerable, (function() {
  function initialize(start, end, exclusive) {
    this.start = start;
    this.end = end;
    this.exclusive = exclusive;
  }

  function _each(iterator) {
    var value = this.start;
    while (this.include(value)) {
      iterator(value);
      value = value.succ();
    }
  }

  function include(value) {
    if (value < this.start)
      return false;
    if (this.exclusive)
      return value < this.end;
    return value <= this.end;
  }

  return {
    initialize: initialize,
    _each:      _each,
    include:    include
  };
})());



var Ajax = {
  getTransport: function() {
    return Try.these(
      function() {return new XMLHttpRequest()},
      function() {return new ActiveXObject('Msxml2.XMLHTTP')},
      function() {return new ActiveXObject('Microsoft.XMLHTTP')}
    ) || false;
  },

  activeRequestCount: 0
};

Ajax.Responders = {
  responders: [],

  _each: function(iterator) {
    this.responders._each(iterator);
  },

  register: function(responder) {
    if (!this.include(responder))
      this.responders.push(responder);
  },

  unregister: function(responder) {
    this.responders = this.responders.without(responder);
  },

  dispatch: function(callback, request, transport, json) {
    this.each(function(responder) {
      if (Object.isFunction(responder[callback])) {
        try {
          responder[callback].apply(responder, [request, transport, json]);
        } catch (e) { }
      }
    });
  }
};

Object.extend(Ajax.Responders, Enumerable);

Ajax.Responders.register({
  onCreate:   function() { Ajax.activeRequestCount++ },
  onComplete: function() { Ajax.activeRequestCount-- }
});
Ajax.Base = Class.create({
  initialize: function(options) {
    this.options = {
      method:       'post',
      asynchronous: true,
      contentType:  'application/x-www-form-urlencoded',
      encoding:     'UTF-8',
      parameters:   '',
      evalJSON:     true,
      evalJS:       true
    };
    Object.extend(this.options, options || { });

    this.options.method = this.options.method.toLowerCase();

    if (Object.isHash(this.options.parameters))
      this.options.parameters = this.options.parameters.toObject();
  }
});
Ajax.Request = Class.create(Ajax.Base, {
  _complete: false,

  initialize: function($super, url, options) {
    $super(options);
    this.transport = Ajax.getTransport();
    this.request(url);
  },

  request: function(url) {
    this.url = url;
    this.method = this.options.method;
    var params = Object.isString(this.options.parameters) ?
          this.options.parameters :
          Object.toQueryString(this.options.parameters);

    if (!['get', 'post'].include(this.method)) {
      params += (params ? '&' : '') + "_method=" + this.method;
      this.method = 'post';
    }

    if (params && this.method === 'get') {
      this.url += (this.url.include('?') ? '&' : '?') + params;
    }

    this.parameters = params.toQueryParams();

    try {
      var response = new Ajax.Response(this);
      if (this.options.onCreate) this.options.onCreate(response);
      Ajax.Responders.dispatch('onCreate', this, response);

      this.transport.open(this.method.toUpperCase(), this.url,
        this.options.asynchronous);

      if (this.options.asynchronous) this.respondToReadyState.bind(this).defer(1);

      this.transport.onreadystatechange = this.onStateChange.bind(this);
      this.setRequestHeaders();

      this.body = this.method == 'post' ? (this.options.postBody || params) : null;
      this.transport.send(this.body);

      /* Force Firefox to handle ready state 4 for synchronous requests */
      if (!this.options.asynchronous && this.transport.overrideMimeType)
        this.onStateChange();

    }
    catch (e) {
      this.dispatchException(e);
    }
  },

  onStateChange: function() {
    var readyState = this.transport.readyState;
    if (readyState > 1 && !((readyState == 4) && this._complete))
      this.respondToReadyState(this.transport.readyState);
  },

  setRequestHeaders: function() {
    var headers = {
      'X-Requested-With': 'XMLHttpRequest',
      'X-Prototype-Version': Prototype.Version,
      'Accept': 'text/javascript, text/html, application/xml, text/xml, */*'
    };

    if (this.method == 'post') {
      headers['Content-type'] = this.options.contentType +
        (this.options.encoding ? '; charset=' + this.options.encoding : '');

      /* Force "Connection: close" for older Mozilla browsers to work
       * around a bug where XMLHttpRequest sends an incorrect
       * Content-length header. See Mozilla Bugzilla #246651.
       */
      if (this.transport.overrideMimeType &&
          (navigator.userAgent.match(/Gecko\/(\d{4})/) || [0,2005])[1] < 2005)
            headers['Connection'] = 'close';
    }

    if (typeof this.options.requestHeaders == 'object') {
      var extras = this.options.requestHeaders;

      if (Object.isFunction(extras.push))
        for (var i = 0, length = extras.length; i < length; i += 2)
          headers[extras[i]] = extras[i+1];
      else
        $H(extras).each(function(pair) { headers[pair.key] = pair.value });
    }

    for (var name in headers)
      this.transport.setRequestHeader(name, headers[name]);
  },

  success: function() {
    var status = this.getStatus();
    return !status || (status >= 200 && status < 300) || status == 304;
  },

  getStatus: function() {
    try {
      if (this.transport.status === 1223) return 204;
      return this.transport.status || 0;
    } catch (e) { return 0 }
  },

  respondToReadyState: function(readyState) {
    var state = Ajax.Request.Events[readyState], response = new Ajax.Response(this);

    if (state == 'Complete') {
      try {
        this._complete = true;
        (this.options['on' + response.status]
         || this.options['on' + (this.success() ? 'Success' : 'Failure')]
         || Prototype.emptyFunction)(response, response.headerJSON);
      } catch (e) {
        this.dispatchException(e);
      }

      var contentType = response.getHeader('Content-type');
      if (this.options.evalJS == 'force'
          || (this.options.evalJS && this.isSameOrigin() && contentType
          && contentType.match(/^\s*(text|application)\/(x-)?(java|ecma)script(;.*)?\s*$/i)))
        this.evalResponse();
    }

    try {
      (this.options['on' + state] || Prototype.emptyFunction)(response, response.headerJSON);
      Ajax.Responders.dispatch('on' + state, this, response, response.headerJSON);
    } catch (e) {
      this.dispatchException(e);
    }

    if (state == 'Complete') {
      this.transport.onreadystatechange = Prototype.emptyFunction;
    }
  },

  isSameOrigin: function() {
    var m = this.url.match(/^\s*https?:\/\/[^\/]*/);
    return !m || (m[0] == '#{protocol}//#{domain}#{port}'.interpolate({
      protocol: location.protocol,
      domain: document.domain,
      port: location.port ? ':' + location.port : ''
    }));
  },

  getHeader: function(name) {
    try {
      return this.transport.getResponseHeader(name) || null;
    } catch (e) { return null; }
  },

  evalResponse: function() {
    try {
      return eval((this.transport.responseText || '').unfilterJSON());
    } catch (e) {
      this.dispatchException(e);
    }
  },

  dispatchException: function(exception) {
    (this.options.onException || Prototype.emptyFunction)(this, exception);
    Ajax.Responders.dispatch('onException', this, exception);
  }
});

Ajax.Request.Events =
  ['Uninitialized', 'Loading', 'Loaded', 'Interactive', 'Complete'];








Ajax.Response = Class.create({
  initialize: function(request){
    this.request = request;
    var transport  = this.transport  = request.transport,
        readyState = this.readyState = transport.readyState;

    if ((readyState > 2 && !Prototype.Browser.IE) || readyState == 4) {
      this.status       = this.getStatus();
      this.statusText   = this.getStatusText();
      this.responseText = String.interpret(transport.responseText);
      this.headerJSON   = this._getHeaderJSON();
    }

    if (readyState == 4) {
      var xml = transport.responseXML;
      this.responseXML  = Object.isUndefined(xml) ? null : xml;
      this.responseJSON = this._getResponseJSON();
    }
  },

  status:      0,

  statusText: '',

  getStatus: Ajax.Request.prototype.getStatus,

  getStatusText: function() {
    try {
      return this.transport.statusText || '';
    } catch (e) { return '' }
  },

  getHeader: Ajax.Request.prototype.getHeader,

  getAllHeaders: function() {
    try {
      return this.getAllResponseHeaders();
    } catch (e) { return null }
  },

  getResponseHeader: function(name) {
    return this.transport.getResponseHeader(name);
  },

  getAllResponseHeaders: function() {
    return this.transport.getAllResponseHeaders();
  },

  _getHeaderJSON: function() {
    var json = this.getHeader('X-JSON');
    if (!json) return null;
    json = decodeURIComponent(escape(json));
    try {
      return json.evalJSON(this.request.options.sanitizeJSON ||
        !this.request.isSameOrigin());
    } catch (e) {
      this.request.dispatchException(e);
    }
  },

  _getResponseJSON: function() {
    var options = this.request.options;
    if (!options.evalJSON || (options.evalJSON != 'force' &&
      !(this.getHeader('Content-type') || '').include('application/json')) ||
        this.responseText.blank())
          return null;
    try {
      return this.responseText.evalJSON(options.sanitizeJSON ||
        !this.request.isSameOrigin());
    } catch (e) {
      this.request.dispatchException(e);
    }
  }
});

Ajax.Updater = Class.create(Ajax.Request, {
  initialize: function($super, container, url, options) {
    this.container = {
      success: (container.success || container),
      failure: (container.failure || (container.success ? null : container))
    };

    options = Object.clone(options);
    var onComplete = options.onComplete;
    options.onComplete = (function(response, json) {
      this.updateContent(response.responseText);
      if (Object.isFunction(onComplete)) onComplete(response, json);
    }).bind(this);

    $super(url, options);
  },

  updateContent: function(responseText) {
    var receiver = this.container[this.success() ? 'success' : 'failure'],
        options = this.options;

    if (!options.evalScripts) responseText = responseText.stripScripts();

    if (receiver = $(receiver)) {
      if (options.insertion) {
        if (Object.isString(options.insertion)) {
          var insertion = { }; insertion[options.insertion] = responseText;
          receiver.insert(insertion);
        }
        else options.insertion(receiver, responseText);
      }
      else receiver.update(responseText);
    }
  }
});

Ajax.PeriodicalUpdater = Class.create(Ajax.Base, {
  initialize: function($super, container, url, options) {
    $super(options);
    this.onComplete = this.options.onComplete;

    this.frequency = (this.options.frequency || 2);
    this.decay = (this.options.decay || 1);

    this.updater = { };
    this.container = container;
    this.url = url;

    this.start();
  },

  start: function() {
    this.options.onComplete = this.updateComplete.bind(this);
    this.onTimerEvent();
  },

  stop: function() {
    this.updater.options.onComplete = undefined;
    clearTimeout(this.timer);
    (this.onComplete || Prototype.emptyFunction).apply(this, arguments);
  },

  updateComplete: function(response) {
    if (this.options.decay) {
      this.decay = (response.responseText == this.lastText ?
        this.decay * this.options.decay : 1);

      this.lastText = response.responseText;
    }
    this.timer = this.onTimerEvent.bind(this).delay(this.decay * this.frequency);
  },

  onTimerEvent: function() {
    this.updater = new Ajax.Updater(this.container, this.url, this.options);
  }
});


function $(element) {
  if (arguments.length > 1) {
    for (var i = 0, elements = [], length = arguments.length; i < length; i++)
      elements.push($(arguments[i]));
    return elements;
  }
  if (Object.isString(element))
    element = document.getElementById(element);
  return Element.extend(element);
}

if (Prototype.BrowserFeatures.XPath) {
  document._getElementsByXPath = function(expression, parentElement) {
    var results = [];
    var query = document.evaluate(expression, $(parentElement) || document,
      null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
    for (var i = 0, length = query.snapshotLength; i < length; i++)
      results.push(Element.extend(query.snapshotItem(i)));
    return results;
  };
}

/*--------------------------------------------------------------------------*/

if (!Node) var Node = { };

if (!Node.ELEMENT_NODE) {
  Object.extend(Node, {
    ELEMENT_NODE: 1,
    ATTRIBUTE_NODE: 2,
    TEXT_NODE: 3,
    CDATA_SECTION_NODE: 4,
    ENTITY_REFERENCE_NODE: 5,
    ENTITY_NODE: 6,
    PROCESSING_INSTRUCTION_NODE: 7,
    COMMENT_NODE: 8,
    DOCUMENT_NODE: 9,
    DOCUMENT_TYPE_NODE: 10,
    DOCUMENT_FRAGMENT_NODE: 11,
    NOTATION_NODE: 12
  });
}



(function(global) {
  function shouldUseCache(tagName, attributes) {
    if (tagName === 'select') return false;
    if ('type' in attributes) return false;
    return true;
  }

  var HAS_EXTENDED_CREATE_ELEMENT_SYNTAX = (function(){
    try {
      var el = document.createElement('<input name="x">');
      return el.tagName.toLowerCase() === 'input' && el.name === 'x';
    }
    catch(err) {
      return false;
    }
  })();

  var element = global.Element;

  global.Element = function(tagName, attributes) {
    attributes = attributes || { };
    tagName = tagName.toLowerCase();
    var cache = Element.cache;

    if (HAS_EXTENDED_CREATE_ELEMENT_SYNTAX && attributes.name) {
      tagName = '<' + tagName + ' name="' + attributes.name + '">';
      delete attributes.name;
      return Element.writeAttribute(document.createElement(tagName), attributes);
    }

    if (!cache[tagName]) cache[tagName] = Element.extend(document.createElement(tagName));

    var node = shouldUseCache(tagName, attributes) ?
     cache[tagName].cloneNode(false) : document.createElement(tagName);

    return Element.writeAttribute(node, attributes);
  };

  Object.extend(global.Element, element || { });
  if (element) global.Element.prototype = element.prototype;

})(this);

Element.idCounter = 1;
Element.cache = { };

Element._purgeElement = function(element) {
  var uid = element._prototypeUID;
  if (uid) {
    Element.stopObserving(element);
    element._prototypeUID = void 0;
    delete Element.Storage[uid];
  }
}

Element.Methods = {
  visible: function(element) {
    return $(element).style.display != 'none';
  },

  toggle: function(element) {
    element = $(element);
    Element[Element.visible(element) ? 'hide' : 'show'](element);
    return element;
  },

  hide: function(element) {
    element = $(element);
    element.style.display = 'none';
    return element;
  },

  show: function(element) {
    element = $(element);
    element.style.display = '';
    return element;
  },

  remove: function(element) {
    element = $(element);
    element.parentNode.removeChild(element);
    return element;
  },

  update: (function(){

    var SELECT_ELEMENT_INNERHTML_BUGGY = (function(){
      var el = document.createElement("select"),
          isBuggy = true;
      el.innerHTML = "<option value=\"test\">test</option>";
      if (el.options && el.options[0]) {
        isBuggy = el.options[0].nodeName.toUpperCase() !== "OPTION";
      }
      el = null;
      return isBuggy;
    })();

    var TABLE_ELEMENT_INNERHTML_BUGGY = (function(){
      try {
        var el = document.createElement("table");
        if (el && el.tBodies) {
          el.innerHTML = "<tbody><tr><td>test</td></tr></tbody>";
          var isBuggy = typeof el.tBodies[0] == "undefined";
          el = null;
          return isBuggy;
        }
      } catch (e) {
        return true;
      }
    })();

    var LINK_ELEMENT_INNERHTML_BUGGY = (function() {
      try {
        var el = document.createElement('div');
        el.innerHTML = "<link>";
        var isBuggy = (el.childNodes.length === 0);
        el = null;
        return isBuggy;
      } catch(e) {
        return true;
      }
    })();

    var ANY_INNERHTML_BUGGY = SELECT_ELEMENT_INNERHTML_BUGGY ||
     TABLE_ELEMENT_INNERHTML_BUGGY || LINK_ELEMENT_INNERHTML_BUGGY;

    var SCRIPT_ELEMENT_REJECTS_TEXTNODE_APPENDING = (function () {
      var s = document.createElement("script"),
          isBuggy = false;
      try {
        s.appendChild(document.createTextNode(""));
        isBuggy = !s.firstChild ||
          s.firstChild && s.firstChild.nodeType !== 3;
      } catch (e) {
        isBuggy = true;
      }
      s = null;
      return isBuggy;
    })();


    function update(element, content) {
      element = $(element);
      var purgeElement = Element._purgeElement;

      var descendants = element.getElementsByTagName('*'),
       i = descendants.length;
      while (i--) purgeElement(descendants[i]);

      if (content && content.toElement)
        content = content.toElement();

      if (Object.isElement(content))
        return element.update().insert(content);

      content = Object.toHTML(content);

      var tagName = element.tagName.toUpperCase();

      if (tagName === 'SCRIPT' && SCRIPT_ELEMENT_REJECTS_TEXTNODE_APPENDING) {
        element.text = content;
        return element;
      }

      if (ANY_INNERHTML_BUGGY) {
        if (tagName in Element._insertionTranslations.tags) {
          while (element.firstChild) {
            element.removeChild(element.firstChild);
          }
          Element._getContentFromAnonymousElement(tagName, content.stripScripts())
            .each(function(node) {
              element.appendChild(node)
            });
        } else if (LINK_ELEMENT_INNERHTML_BUGGY && Object.isString(content) && content.indexOf('<link') > -1) {
          while (element.firstChild) {
            element.removeChild(element.firstChild);
          }
          var nodes = Element._getContentFromAnonymousElement(tagName, content.stripScripts(), true);
          nodes.each(function(node) { element.appendChild(node) });
        }
        else {
          element.innerHTML = content.stripScripts();
        }
      }
      else {
        element.innerHTML = content.stripScripts();
      }

      content.evalScripts.bind(content).defer();
      return element;
    }

    return update;
  })(),

  replace: function(element, content) {
    element = $(element);
    if (content && content.toElement) content = content.toElement();
    else if (!Object.isElement(content)) {
      content = Object.toHTML(content);
      var range = element.ownerDocument.createRange();
      range.selectNode(element);
      content.evalScripts.bind(content).defer();
      content = range.createContextualFragment(content.stripScripts());
    }
    element.parentNode.replaceChild(content, element);
    return element;
  },

  insert: function(element, insertions) {
    element = $(element);

    if (Object.isString(insertions) || Object.isNumber(insertions) ||
        Object.isElement(insertions) || (insertions && (insertions.toElement || insertions.toHTML)))
          insertions = {bottom:insertions};

    var content, insert, tagName, childNodes;

    for (var position in insertions) {
      content  = insertions[position];
      position = position.toLowerCase();
      insert = Element._insertionTranslations[position];

      if (content && content.toElement) content = content.toElement();
      if (Object.isElement(content)) {
        insert(element, content);
        continue;
      }

      content = Object.toHTML(content);

      tagName = ((position == 'before' || position == 'after')
        ? element.parentNode : element).tagName.toUpperCase();

      childNodes = Element._getContentFromAnonymousElement(tagName, content.stripScripts());

      if (position == 'top' || position == 'after') childNodes.reverse();
      childNodes.each(insert.curry(element));

      content.evalScripts.bind(content).defer();
    }

    return element;
  },

  wrap: function(element, wrapper, attributes) {
    element = $(element);
    if (Object.isElement(wrapper))
      $(wrapper).writeAttribute(attributes || { });
    else if (Object.isString(wrapper)) wrapper = new Element(wrapper, attributes);
    else wrapper = new Element('div', wrapper);
    if (element.parentNode)
      element.parentNode.replaceChild(wrapper, element);
    wrapper.appendChild(element);
    return wrapper;
  },

  inspect: function(element) {
    element = $(element);
    var result = '<' + element.tagName.toLowerCase();
    $H({'id': 'id', 'className': 'class'}).each(function(pair) {
      var property = pair.first(),
          attribute = pair.last(),
          value = (element[property] || '').toString();
      if (value) result += ' ' + attribute + '=' + value.inspect(true);
    });
    return result + '>';
  },

  recursivelyCollect: function(element, property, maximumLength) {
    element = $(element);
    maximumLength = maximumLength || -1;
    var elements = [];

    while (element = element[property]) {
      if (element.nodeType == 1)
        elements.push(Element.extend(element));
      if (elements.length == maximumLength)
        break;
    }

    return elements;
  },

  ancestors: function(element) {
    return Element.recursivelyCollect(element, 'parentNode');
  },

  descendants: function(element) {
    return Element.select(element, "*");
  },

  firstDescendant: function(element) {
    element = $(element).firstChild;
    while (element && element.nodeType != 1) element = element.nextSibling;
    return $(element);
  },

  immediateDescendants: function(element) {
    var results = [], child = $(element).firstChild;
    while (child) {
      if (child.nodeType === 1) {
        results.push(Element.extend(child));
      }
      child = child.nextSibling;
    }
    return results;
  },

  previousSiblings: function(element, maximumLength) {
    return Element.recursivelyCollect(element, 'previousSibling');
  },

  nextSiblings: function(element) {
    return Element.recursivelyCollect(element, 'nextSibling');
  },

  siblings: function(element) {
    element = $(element);
    return Element.previousSiblings(element).reverse()
      .concat(Element.nextSiblings(element));
  },

  match: function(element, selector) {
    element = $(element);
    if (Object.isString(selector))
      return Prototype.Selector.match(element, selector);
    return selector.match(element);
  },

  up: function(element, expression, index) {
    element = $(element);
    if (arguments.length == 1) return $(element.parentNode);
    var ancestors = Element.ancestors(element);
    return Object.isNumber(expression) ? ancestors[expression] :
      Prototype.Selector.find(ancestors, expression, index);
  },

  down: function(element, expression, index) {
    element = $(element);
    if (arguments.length == 1) return Element.firstDescendant(element);
    return Object.isNumber(expression) ? Element.descendants(element)[expression] :
      Element.select(element, expression)[index || 0];
  },

  previous: function(element, expression, index) {
    element = $(element);
    if (Object.isNumber(expression)) index = expression, expression = false;
    if (!Object.isNumber(index)) index = 0;

    if (expression) {
      return Prototype.Selector.find(element.previousSiblings(), expression, index);
    } else {
      return element.recursivelyCollect("previousSibling", index + 1)[index];
    }
  },

  next: function(element, expression, index) {
    element = $(element);
    if (Object.isNumber(expression)) index = expression, expression = false;
    if (!Object.isNumber(index)) index = 0;

    if (expression) {
      return Prototype.Selector.find(element.nextSiblings(), expression, index);
    } else {
      var maximumLength = Object.isNumber(index) ? index + 1 : 1;
      return element.recursivelyCollect("nextSibling", index + 1)[index];
    }
  },


  select: function(element) {
    element = $(element);
    var expressions = Array.prototype.slice.call(arguments, 1).join(', ');
    return Prototype.Selector.select(expressions, element);
  },

  adjacent: function(element) {
    element = $(element);
    var expressions = Array.prototype.slice.call(arguments, 1).join(', ');
    return Prototype.Selector.select(expressions, element.parentNode).without(element);
  },

  identify: function(element) {
    element = $(element);
    var id = Element.readAttribute(element, 'id');
    if (id) return id;
    do { id = 'anonymous_element_' + Element.idCounter++ } while ($(id));
    Element.writeAttribute(element, 'id', id);
    return id;
  },

  readAttribute: function(element, name) {
    element = $(element);
    if (Prototype.Browser.IE) {
      var t = Element._attributeTranslations.read;
      if (t.values[name]) return t.values[name](element, name);
      if (t.names[name]) name = t.names[name];
      if (name.include(':')) {
        return (!element.attributes || !element.attributes[name]) ? null :
         element.attributes[name].value;
      }
    }
    return element.getAttribute(name);
  },

  writeAttribute: function(element, name, value) {
    element = $(element);
    var attributes = { }, t = Element._attributeTranslations.write;

    if (typeof name == 'object') attributes = name;
    else attributes[name] = Object.isUndefined(value) ? true : value;

    for (var attr in attributes) {
      name = t.names[attr] || attr;
      value = attributes[attr];
      if (t.values[attr]) name = t.values[attr](element, value);
      if (value === false || value === null)
        element.removeAttribute(name);
      else if (value === true)
        element.setAttribute(name, name);
      else element.setAttribute(name, value);
    }
    return element;
  },

  getHeight: function(element) {
    return Element.getDimensions(element).height;
  },

  getWidth: function(element) {
    return Element.getDimensions(element).width;
  },

  classNames: function(element) {
    return new Element.ClassNames(element);
  },

  hasClassName: function(element, className) {
    if (!(element = $(element))) return;
    var elementClassName = element.className;
    return (elementClassName.length > 0 && (elementClassName == className ||
      new RegExp("(^|\\s)" + className + "(\\s|$)").test(elementClassName)));
  },

  addClassName: function(element, className) {
    if (!(element = $(element))) return;
    if (!Element.hasClassName(element, className))
      element.className += (element.className ? ' ' : '') + className;
    return element;
  },

  removeClassName: function(element, className) {
    if (!(element = $(element))) return;
    element.className = element.className.replace(
      new RegExp("(^|\\s+)" + className + "(\\s+|$)"), ' ').strip();
    return element;
  },

  toggleClassName: function(element, className) {
    if (!(element = $(element))) return;
    return Element[Element.hasClassName(element, className) ?
      'removeClassName' : 'addClassName'](element, className);
  },

  cleanWhitespace: function(element) {
    element = $(element);
    var node = element.firstChild;
    while (node) {
      var nextNode = node.nextSibling;
      if (node.nodeType == 3 && !/\S/.test(node.nodeValue))
        element.removeChild(node);
      node = nextNode;
    }
    return element;
  },

  empty: function(element) {
    return $(element).innerHTML.blank();
  },

  descendantOf: function(element, ancestor) {
    element = $(element), ancestor = $(ancestor);

    if (element.compareDocumentPosition)
      return (element.compareDocumentPosition(ancestor) & 8) === 8;

    if (ancestor.contains)
      return ancestor.contains(element) && ancestor !== element;

    while (element = element.parentNode)
      if (element == ancestor) return true;

    return false;
  },

  scrollTo: function(element) {
    element = $(element);
    var pos = Element.cumulativeOffset(element);
    window.scrollTo(pos[0], pos[1]);
    return element;
  },

  getStyle: function(element, style) {
    element = $(element);
    style = style == 'float' ? 'cssFloat' : style.camelize();
    var value = element.style[style];
    if (!value || value == 'auto') {
      var css = document.defaultView.getComputedStyle(element, null);
      value = css ? css[style] : null;
    }
    if (style == 'opacity') return value ? parseFloat(value) : 1.0;
    return value == 'auto' ? null : value;
  },

  getOpacity: function(element) {
    return $(element).getStyle('opacity');
  },

  setStyle: function(element, styles) {
    element = $(element);
    var elementStyle = element.style, match;
    if (Object.isString(styles)) {
      element.style.cssText += ';' + styles;
      return styles.include('opacity') ?
        element.setOpacity(styles.match(/opacity:\s*(\d?\.?\d*)/)[1]) : element;
    }
    for (var property in styles)
      if (property == 'opacity') element.setOpacity(styles[property]);
      else
        elementStyle[(property == 'float' || property == 'cssFloat') ?
          (Object.isUndefined(elementStyle.styleFloat) ? 'cssFloat' : 'styleFloat') :
            property] = styles[property];

    return element;
  },

  setOpacity: function(element, value) {
    element = $(element);
    element.style.opacity = (value == 1 || value === '') ? '' :
      (value < 0.00001) ? 0 : value;
    return element;
  },

  makePositioned: function(element) {
    element = $(element);
    var pos = Element.getStyle(element, 'position');
    if (pos == 'static' || !pos) {
      element._madePositioned = true;
      element.style.position = 'relative';
      if (Prototype.Browser.Opera) {
        element.style.top = 0;
        element.style.left = 0;
      }
    }
    return element;
  },

  undoPositioned: function(element) {
    element = $(element);
    if (element._madePositioned) {
      element._madePositioned = undefined;
      element.style.position =
        element.style.top =
        element.style.left =
        element.style.bottom =
        element.style.right = '';
    }
    return element;
  },

  makeClipping: function(element) {
    element = $(element);
    if (element._overflow) return element;
    element._overflow = Element.getStyle(element, 'overflow') || 'auto';
    if (element._overflow !== 'hidden')
      element.style.overflow = 'hidden';
    return element;
  },

  undoClipping: function(element) {
    element = $(element);
    if (!element._overflow) return element;
    element.style.overflow = element._overflow == 'auto' ? '' : element._overflow;
    element._overflow = null;
    return element;
  },

  clonePosition: function(element, source) {
    var options = Object.extend({
      setLeft:    true,
      setTop:     true,
      setWidth:   true,
      setHeight:  true,
      offsetTop:  0,
      offsetLeft: 0
    }, arguments[2] || { });

    source = $(source);
    var p = Element.viewportOffset(source), delta = [0, 0], parent = null;

    element = $(element);

    if (Element.getStyle(element, 'position') == 'absolute') {
      parent = Element.getOffsetParent(element);
      delta = Element.viewportOffset(parent);
    }

    if (parent == document.body) {
      delta[0] -= document.body.offsetLeft;
      delta[1] -= document.body.offsetTop;
    }

    if (options.setLeft)   element.style.left  = (p[0] - delta[0] + options.offsetLeft) + 'px';
    if (options.setTop)    element.style.top   = (p[1] - delta[1] + options.offsetTop) + 'px';
    if (options.setWidth)  element.style.width = source.offsetWidth + 'px';
    if (options.setHeight) element.style.height = source.offsetHeight + 'px';
    return element;
  }
};

Object.extend(Element.Methods, {
  getElementsBySelector: Element.Methods.select,

  childElements: Element.Methods.immediateDescendants
});

Element._attributeTranslations = {
  write: {
    names: {
      className: 'class',
      htmlFor:   'for'
    },
    values: { }
  }
};

if (Prototype.Browser.Opera) {
  Element.Methods.getStyle = Element.Methods.getStyle.wrap(
    function(proceed, element, style) {
      switch (style) {
        case 'height': case 'width':
          if (!Element.visible(element)) return null;

          var dim = parseInt(proceed(element, style), 10);

          if (dim !== element['offset' + style.capitalize()])
            return dim + 'px';

          var properties;
          if (style === 'height') {
            properties = ['border-top-width', 'padding-top',
             'padding-bottom', 'border-bottom-width'];
          }
          else {
            properties = ['border-left-width', 'padding-left',
             'padding-right', 'border-right-width'];
          }
          return properties.inject(dim, function(memo, property) {
            var val = proceed(element, property);
            return val === null ? memo : memo - parseInt(val, 10);
          }) + 'px';
        default: return proceed(element, style);
      }
    }
  );

  Element.Methods.readAttribute = Element.Methods.readAttribute.wrap(
    function(proceed, element, attribute) {
      if (attribute === 'title') return element.title;
      return proceed(element, attribute);
    }
  );
}

else if (Prototype.Browser.IE) {
  Element.Methods.getStyle = function(element, style) {
    element = $(element);
    style = (style == 'float' || style == 'cssFloat') ? 'styleFloat' : style.camelize();
    var value = element.style[style];
    if (!value && element.currentStyle) value = element.currentStyle[style];

    if (style == 'opacity') {
      if (value = (element.getStyle('filter') || '').match(/alpha\(opacity=(.*)\)/))
        if (value[1]) return parseFloat(value[1]) / 100;
      return 1.0;
    }

    if (value == 'auto') {
      if ((style == 'width' || style == 'height') && (element.getStyle('display') != 'none'))
        return element['offset' + style.capitalize()] + 'px';
      return null;
    }
    return value;
  };

  Element.Methods.setOpacity = function(element, value) {
    function stripAlpha(filter){
      return filter.replace(/alpha\([^\)]*\)/gi,'');
    }
    element = $(element);
    var currentStyle = element.currentStyle;
    if ((currentStyle && !currentStyle.hasLayout) ||
      (!currentStyle && element.style.zoom == 'normal'))
        element.style.zoom = 1;

    var filter = element.getStyle('filter'), style = element.style;
    if (value == 1 || value === '') {
      (filter = stripAlpha(filter)) ?
        style.filter = filter : style.removeAttribute('filter');
      return element;
    } else if (value < 0.00001) value = 0;
    style.filter = stripAlpha(filter) +
      'alpha(opacity=' + (value * 100) + ')';
    return element;
  };

  Element._attributeTranslations = (function(){

    var classProp = 'className',
        forProp = 'for',
        el = document.createElement('div');

    el.setAttribute(classProp, 'x');

    if (el.className !== 'x') {
      el.setAttribute('class', 'x');
      if (el.className === 'x') {
        classProp = 'class';
      }
    }
    el = null;

    el = document.createElement('label');
    el.setAttribute(forProp, 'x');
    if (el.htmlFor !== 'x') {
      el.setAttribute('htmlFor', 'x');
      if (el.htmlFor === 'x') {
        forProp = 'htmlFor';
      }
    }
    el = null;

    return {
      read: {
        names: {
          'class':      classProp,
          'className':  classProp,
          'for':        forProp,
          'htmlFor':    forProp
        },
        values: {
          _getAttr: function(element, attribute) {
            return element.getAttribute(attribute);
          },
          _getAttr2: function(element, attribute) {
            return element.getAttribute(attribute, 2);
          },
          _getAttrNode: function(element, attribute) {
            var node = element.getAttributeNode(attribute);
            return node ? node.value : "";
          },
          _getEv: (function(){

            var el = document.createElement('div'), f;
            el.onclick = Prototype.emptyFunction;
            var value = el.getAttribute('onclick');

            if (String(value).indexOf('{') > -1) {
              f = function(element, attribute) {
                attribute = element.getAttribute(attribute);
                if (!attribute) return null;
                attribute = attribute.toString();
                attribute = attribute.split('{')[1];
                attribute = attribute.split('}')[0];
                return attribute.strip();
              };
            }
            else if (value === '') {
              f = function(element, attribute) {
                attribute = element.getAttribute(attribute);
                if (!attribute) return null;
                return attribute.strip();
              };
            }
            el = null;
            return f;
          })(),
          _flag: function(element, attribute) {
            return $(element).hasAttribute(attribute) ? attribute : null;
          },
          style: function(element) {
            return element.style.cssText.toLowerCase();
          },
          title: function(element) {
            return element.title;
          }
        }
      }
    }
  })();

  Element._attributeTranslations.write = {
    names: Object.extend({
      cellpadding: 'cellPadding',
      cellspacing: 'cellSpacing'
    }, Element._attributeTranslations.read.names),
    values: {
      checked: function(element, value) {
        element.checked = !!value;
      },

      style: function(element, value) {
        element.style.cssText = value ? value : '';
      }
    }
  };

  Element._attributeTranslations.has = {};

  $w('colSpan rowSpan vAlign dateTime accessKey tabIndex ' +
      'encType maxLength readOnly longDesc frameBorder').each(function(attr) {
    Element._attributeTranslations.write.names[attr.toLowerCase()] = attr;
    Element._attributeTranslations.has[attr.toLowerCase()] = attr;
  });

  (function(v) {
    Object.extend(v, {
      href:        v._getAttr2,
      src:         v._getAttr2,
      type:        v._getAttr,
      action:      v._getAttrNode,
      disabled:    v._flag,
      checked:     v._flag,
      readonly:    v._flag,
      multiple:    v._flag,
      onload:      v._getEv,
      onunload:    v._getEv,
      onclick:     v._getEv,
      ondblclick:  v._getEv,
      onmousedown: v._getEv,
      onmouseup:   v._getEv,
      onmouseover: v._getEv,
      onmousemove: v._getEv,
      onmouseout:  v._getEv,
      onfocus:     v._getEv,
      onblur:      v._getEv,
      onkeypress:  v._getEv,
      onkeydown:   v._getEv,
      onkeyup:     v._getEv,
      onsubmit:    v._getEv,
      onreset:     v._getEv,
      onselect:    v._getEv,
      onchange:    v._getEv
    });
  })(Element._attributeTranslations.read.values);

  if (Prototype.BrowserFeatures.ElementExtensions) {
    (function() {
      function _descendants(element) {
        var nodes = element.getElementsByTagName('*'), results = [];
        for (var i = 0, node; node = nodes[i]; i++)
          if (node.tagName !== "!") // Filter out comment nodes.
            results.push(node);
        return results;
      }

      Element.Methods.down = function(element, expression, index) {
        element = $(element);
        if (arguments.length == 1) return element.firstDescendant();
        return Object.isNumber(expression) ? _descendants(element)[expression] :
          Element.select(element, expression)[index || 0];
      }
    })();
  }

}

else if (Prototype.Browser.Gecko && /rv:1\.8\.0/.test(navigator.userAgent)) {
  Element.Methods.setOpacity = function(element, value) {
    element = $(element);
    element.style.opacity = (value == 1) ? 0.999999 :
      (value === '') ? '' : (value < 0.00001) ? 0 : value;
    return element;
  };
}

else if (Prototype.Browser.WebKit) {
  Element.Methods.setOpacity = function(element, value) {
    element = $(element);
    element.style.opacity = (value == 1 || value === '') ? '' :
      (value < 0.00001) ? 0 : value;

    if (value == 1)
      if (element.tagName.toUpperCase() == 'IMG' && element.width) {
        element.width++; element.width--;
      } else try {
        var n = document.createTextNode(' ');
        element.appendChild(n);
        element.removeChild(n);
      } catch (e) { }

    return element;
  };
}

if ('outerHTML' in document.documentElement) {
  Element.Methods.replace = function(element, content) {
    element = $(element);

    if (content && content.toElement) content = content.toElement();
    if (Object.isElement(content)) {
      element.parentNode.replaceChild(content, element);
      return element;
    }

    content = Object.toHTML(content);
    var parent = element.parentNode, tagName = parent.tagName.toUpperCase();

    if (Element._insertionTranslations.tags[tagName]) {
      var nextSibling = element.next(),
          fragments = Element._getContentFromAnonymousElement(tagName, content.stripScripts());
      parent.removeChild(element);
      if (nextSibling)
        fragments.each(function(node) { parent.insertBefore(node, nextSibling) });
      else
        fragments.each(function(node) { parent.appendChild(node) });
    }
    else element.outerHTML = content.stripScripts();

    content.evalScripts.bind(content).defer();
    return element;
  };
}

Element._returnOffset = function(l, t) {
  var result = [l, t];
  result.left = l;
  result.top = t;
  return result;
};

Element._getContentFromAnonymousElement = function(tagName, html, force) {
  var div = new Element('div'),
      t = Element._insertionTranslations.tags[tagName];

  var workaround = false;
  if (t) workaround = true;
  else if (force) {
    workaround = true;
    t = ['', '', 0];
  }

  if (workaround) {
    div.innerHTML = '&nbsp;' + t[0] + html + t[1];
    div.removeChild(div.firstChild);
    for (var i = t[2]; i--; ) {
      div = div.firstChild;
    }
  }
  else {
    div.innerHTML = html;
  }
  return $A(div.childNodes);
};

Element._insertionTranslations = {
  before: function(element, node) {
    element.parentNode.insertBefore(node, element);
  },
  top: function(element, node) {
    element.insertBefore(node, element.firstChild);
  },
  bottom: function(element, node) {
    element.appendChild(node);
  },
  after: function(element, node) {
    element.parentNode.insertBefore(node, element.nextSibling);
  },
  tags: {
    TABLE:  ['<table>',                '</table>',                   1],
    TBODY:  ['<table><tbody>',         '</tbody></table>',           2],
    TR:     ['<table><tbody><tr>',     '</tr></tbody></table>',      3],
    TD:     ['<table><tbody><tr><td>', '</td></tr></tbody></table>', 4],
    SELECT: ['<select>',               '</select>',                  1]
  }
};

(function() {
  var tags = Element._insertionTranslations.tags;
  Object.extend(tags, {
    THEAD: tags.TBODY,
    TFOOT: tags.TBODY,
    TH:    tags.TD
  });
})();

Element.Methods.Simulated = {
  hasAttribute: function(element, attribute) {
    attribute = Element._attributeTranslations.has[attribute] || attribute;
    var node = $(element).getAttributeNode(attribute);
    return !!(node && node.specified);
  }
};

Element.Methods.ByTag = { };

Object.extend(Element, Element.Methods);

(function(div) {

  if (!Prototype.BrowserFeatures.ElementExtensions && div['__proto__']) {
    window.HTMLElement = { };
    window.HTMLElement.prototype = div['__proto__'];
    Prototype.BrowserFeatures.ElementExtensions = true;
  }

  div = null;

})(document.createElement('div'));

Element.extend = (function() {

  function checkDeficiency(tagName) {
    if (typeof window.Element != 'undefined') {
      var proto = window.Element.prototype;
      if (proto) {
        var id = '_' + (Math.random()+'').slice(2),
            el = document.createElement(tagName);
        proto[id] = 'x';
        var isBuggy = (el[id] !== 'x');
        delete proto[id];
        el = null;
        return isBuggy;
      }
    }
    return false;
  }

  function extendElementWith(element, methods) {
    for (var property in methods) {
      var value = methods[property];
      if (Object.isFunction(value) && !(property in element))
        element[property] = value.methodize();
    }
  }

  var HTMLOBJECTELEMENT_PROTOTYPE_BUGGY = checkDeficiency('object');

  if (Prototype.BrowserFeatures.SpecificElementExtensions) {
    if (HTMLOBJECTELEMENT_PROTOTYPE_BUGGY) {
      return function(element) {
        if (element && typeof element._extendedByPrototype == 'undefined') {
          var t = element.tagName;
          if (t && (/^(?:object|applet|embed)$/i.test(t))) {
            extendElementWith(element, Element.Methods);
            extendElementWith(element, Element.Methods.Simulated);
            extendElementWith(element, Element.Methods.ByTag[t.toUpperCase()]);
          }
        }
        return element;
      }
    }
    return Prototype.K;
  }

  var Methods = { }, ByTag = Element.Methods.ByTag;

  var extend = Object.extend(function(element) {
    if (!element || typeof element._extendedByPrototype != 'undefined' ||
        element.nodeType != 1 || element == window) return element;

    var methods = Object.clone(Methods),
        tagName = element.tagName.toUpperCase();

    if (ByTag[tagName]) Object.extend(methods, ByTag[tagName]);

    extendElementWith(element, methods);

    element._extendedByPrototype = Prototype.emptyFunction;
    return element;

  }, {
    refresh: function() {
      if (!Prototype.BrowserFeatures.ElementExtensions) {
        Object.extend(Methods, Element.Methods);
        Object.extend(Methods, Element.Methods.Simulated);
      }
    }
  });

  extend.refresh();
  return extend;
})();

if (document.documentElement.hasAttribute) {
  Element.hasAttribute = function(element, attribute) {
    return element.hasAttribute(attribute);
  };
}
else {
  Element.hasAttribute = Element.Methods.Simulated.hasAttribute;
}

Element.addMethods = function(methods) {
  var F = Prototype.BrowserFeatures, T = Element.Methods.ByTag;

  if (!methods) {
    Object.extend(Form, Form.Methods);
    Object.extend(Form.Element, Form.Element.Methods);
    Object.extend(Element.Methods.ByTag, {
      "FORM":     Object.clone(Form.Methods),
      "INPUT":    Object.clone(Form.Element.Methods),
      "SELECT":   Object.clone(Form.Element.Methods),
      "TEXTAREA": Object.clone(Form.Element.Methods),
      "BUTTON":   Object.clone(Form.Element.Methods)
    });
  }

  if (arguments.length == 2) {
    var tagName = methods;
    methods = arguments[1];
  }

  if (!tagName) Object.extend(Element.Methods, methods || { });
  else {
    if (Object.isArray(tagName)) tagName.each(extend);
    else extend(tagName);
  }

  function extend(tagName) {
    tagName = tagName.toUpperCase();
    if (!Element.Methods.ByTag[tagName])
      Element.Methods.ByTag[tagName] = { };
    Object.extend(Element.Methods.ByTag[tagName], methods);
  }

  function copy(methods, destination, onlyIfAbsent) {
    onlyIfAbsent = onlyIfAbsent || false;
    for (var property in methods) {
      var value = methods[property];
      if (!Object.isFunction(value)) continue;
      if (!onlyIfAbsent || !(property in destination))
        destination[property] = value.methodize();
    }
  }

  function findDOMClass(tagName) {
    var klass;
    var trans = {
      "OPTGROUP": "OptGroup", "TEXTAREA": "TextArea", "P": "Paragraph",
      "FIELDSET": "FieldSet", "UL": "UList", "OL": "OList", "DL": "DList",
      "DIR": "Directory", "H1": "Heading", "H2": "Heading", "H3": "Heading",
      "H4": "Heading", "H5": "Heading", "H6": "Heading", "Q": "Quote",
      "INS": "Mod", "DEL": "Mod", "A": "Anchor", "IMG": "Image", "CAPTION":
      "TableCaption", "COL": "TableCol", "COLGROUP": "TableCol", "THEAD":
      "TableSection", "TFOOT": "TableSection", "TBODY": "TableSection", "TR":
      "TableRow", "TH": "TableCell", "TD": "TableCell", "FRAMESET":
      "FrameSet", "IFRAME": "IFrame"
    };
    if (trans[tagName]) klass = 'HTML' + trans[tagName] + 'Element';
    if (window[klass]) return window[klass];
    klass = 'HTML' + tagName + 'Element';
    if (window[klass]) return window[klass];
    klass = 'HTML' + tagName.capitalize() + 'Element';
    if (window[klass]) return window[klass];

    var element = document.createElement(tagName),
        proto = element['__proto__'] || element.constructor.prototype;

    element = null;
    return proto;
  }

  var elementPrototype = window.HTMLElement ? HTMLElement.prototype :
   Element.prototype;

  if (F.ElementExtensions) {
    copy(Element.Methods, elementPrototype);
    copy(Element.Methods.Simulated, elementPrototype, true);
  }

  if (F.SpecificElementExtensions) {
    for (var tag in Element.Methods.ByTag) {
      var klass = findDOMClass(tag);
      if (Object.isUndefined(klass)) continue;
      copy(T[tag], klass.prototype);
    }
  }

  Object.extend(Element, Element.Methods);
  delete Element.ByTag;

  if (Element.extend.refresh) Element.extend.refresh();
  Element.cache = { };
};


document.viewport = {

  getDimensions: function() {
    return { width: this.getWidth(), height: this.getHeight() };
  },

  getScrollOffsets: function() {
    return Element._returnOffset(
      window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft,
      window.pageYOffset || document.documentElement.scrollTop  || document.body.scrollTop);
  }
};

(function(viewport) {
  var B = Prototype.Browser, doc = document, element, property = {};

  function getRootElement() {
    if (B.WebKit && !doc.evaluate)
      return document;

    if (B.Opera && window.parseFloat(window.opera.version()) < 9.5)
      return document.body;

    return document.documentElement;
  }

  function define(D) {
    if (!element) element = getRootElement();

    property[D] = 'client' + D;

    viewport['get' + D] = function() { return element[property[D]] };
    return viewport['get' + D]();
  }

  viewport.getWidth  = define.curry('Width');

  viewport.getHeight = define.curry('Height');
})(document.viewport);


Element.Storage = {
  UID: 1
};

Element.addMethods({
  getStorage: function(element) {
    if (!(element = $(element))) return;

    var uid;
    if (element === window) {
      uid = 0;
    } else {
      if (typeof element._prototypeUID === "undefined")
        element._prototypeUID = Element.Storage.UID++;
      uid = element._prototypeUID;
    }

    if (!Element.Storage[uid])
      Element.Storage[uid] = $H();

    return Element.Storage[uid];
  },

  store: function(element, key, value) {
    if (!(element = $(element))) return;

    if (arguments.length === 2) {
      Element.getStorage(element).update(key);
    } else {
      Element.getStorage(element).set(key, value);
    }

    return element;
  },

  retrieve: function(element, key, defaultValue) {
    if (!(element = $(element))) return;
    var hash = Element.getStorage(element), value = hash.get(key);

    if (Object.isUndefined(value)) {
      hash.set(key, defaultValue);
      value = defaultValue;
    }

    return value;
  },

  clone: function(element, deep) {
    if (!(element = $(element))) return;
    var clone = element.cloneNode(deep);
    clone._prototypeUID = void 0;
    if (deep) {
      var descendants = Element.select(clone, '*'),
          i = descendants.length;
      while (i--) {
        descendants[i]._prototypeUID = void 0;
      }
    }
    return Element.extend(clone);
  },

  purge: function(element) {
    if (!(element = $(element))) return;
    var purgeElement = Element._purgeElement;

    purgeElement(element);

    var descendants = element.getElementsByTagName('*'),
     i = descendants.length;

    while (i--) purgeElement(descendants[i]);

    return null;
  }
});

(function() {

  function toDecimal(pctString) {
    var match = pctString.match(/^(\d+)%?$/i);
    if (!match) return null;
    return (Number(match[1]) / 100);
  }

  function getPixelValue(value, property, context) {
    var element = null;
    if (Object.isElement(value)) {
      element = value;
      value = element.getStyle(property);
    }

    if (value === null) {
      return null;
    }

    if ((/^(?:-)?\d+(\.\d+)?(px)?$/i).test(value)) {
      return window.parseFloat(value);
    }

    var isPercentage = value.include('%'), isViewport = (context === document.viewport);

    if (/\d/.test(value) && element && element.runtimeStyle && !(isPercentage && isViewport)) {
      var style = element.style.left, rStyle = element.runtimeStyle.left;
      element.runtimeStyle.left = element.currentStyle.left;
      element.style.left = value || 0;
      value = element.style.pixelLeft;
      element.style.left = style;
      element.runtimeStyle.left = rStyle;

      return value;
    }

    if (element && isPercentage) {
      context = context || element.parentNode;
      var decimal = toDecimal(value);
      var whole = null;
      var position = element.getStyle('position');

      var isHorizontal = property.include('left') || property.include('right') ||
       property.include('width');

      var isVertical =  property.include('top') || property.include('bottom') ||
        property.include('height');

      if (context === document.viewport) {
        if (isHorizontal) {
          whole = document.viewport.getWidth();
        } else if (isVertical) {
          whole = document.viewport.getHeight();
        }
      } else {
        if (isHorizontal) {
          whole = $(context).measure('width');
        } else if (isVertical) {
          whole = $(context).measure('height');
        }
      }

      return (whole === null) ? 0 : whole * decimal;
    }

    return 0;
  }

  function toCSSPixels(number) {
    if (Object.isString(number) && number.endsWith('px')) {
      return number;
    }
    return number + 'px';
  }

  function isDisplayed(element) {
    var originalElement = element;
    while (element && element.parentNode) {
      var display = element.getStyle('display');
      if (display === 'none') {
        return false;
      }
      element = $(element.parentNode);
    }
    return true;
  }

  var hasLayout = Prototype.K;
  if ('currentStyle' in document.documentElement) {
    hasLayout = function(element) {
      if (!element.currentStyle.hasLayout) {
        element.style.zoom = 1;
      }
      return element;
    };
  }

  function cssNameFor(key) {
    if (key.include('border')) key = key + '-width';
    return key.camelize();
  }

  Element.Layout = Class.create(Hash, {
    initialize: function($super, element, preCompute) {
      $super();
      this.element = $(element);

      Element.Layout.PROPERTIES.each( function(property) {
        this._set(property, null);
      }, this);

      if (preCompute) {
        this._preComputing = true;
        this._begin();
        Element.Layout.PROPERTIES.each( this._compute, this );
        this._end();
        this._preComputing = false;
      }
    },

    _set: function(property, value) {
      return Hash.prototype.set.call(this, property, value);
    },

    set: function(property, value) {
      throw "Properties of Element.Layout are read-only.";
    },

    get: function($super, property) {
      var value = $super(property);
      return value === null ? this._compute(property) : value;
    },

    _begin: function() {
      if (this._prepared) return;

      var element = this.element;
      if (isDisplayed(element)) {
        this._prepared = true;
        return;
      }

      var originalStyles = {
        position:   element.style.position   || '',
        width:      element.style.width      || '',
        visibility: element.style.visibility || '',
        display:    element.style.display    || ''
      };

      element.store('prototype_original_styles', originalStyles);

      var position = element.getStyle('position'),
       width = element.getStyle('width');

      if (width === "0px" || width === null) {
        element.style.display = 'block';
        width = element.getStyle('width');
      }

      var context = (position === 'fixed') ? document.viewport :
       element.parentNode;

      element.setStyle({
        position:   'absolute',
        visibility: 'hidden',
        display:    'block'
      });

      var positionedWidth = element.getStyle('width');

      var newWidth;
      if (width && (positionedWidth === width)) {
        newWidth = getPixelValue(element, 'width', context);
      } else if (position === 'absolute' || position === 'fixed') {
        newWidth = getPixelValue(element, 'width', context);
      } else {
        var parent = element.parentNode, pLayout = $(parent).getLayout();

        newWidth = pLayout.get('width') -
         this.get('margin-left') -
         this.get('border-left') -
         this.get('padding-left') -
         this.get('padding-right') -
         this.get('border-right') -
         this.get('margin-right');
      }

      element.setStyle({ width: newWidth + 'px' });

      this._prepared = true;
    },

    _end: function() {
      var element = this.element;
      var originalStyles = element.retrieve('prototype_original_styles');
      element.store('prototype_original_styles', null);
      element.setStyle(originalStyles);
      this._prepared = false;
    },

    _compute: function(property) {
      var COMPUTATIONS = Element.Layout.COMPUTATIONS;
      if (!(property in COMPUTATIONS)) {
        throw "Property not found.";
      }

      return this._set(property, COMPUTATIONS[property].call(this, this.element));
    },

    toObject: function() {
      var args = $A(arguments);
      var keys = (args.length === 0) ? Element.Layout.PROPERTIES :
       args.join(' ').split(' ');
      var obj = {};
      keys.each( function(key) {
        if (!Element.Layout.PROPERTIES.include(key)) return;
        var value = this.get(key);
        if (value != null) obj[key] = value;
      }, this);
      return obj;
    },

    toHash: function() {
      var obj = this.toObject.apply(this, arguments);
      return new Hash(obj);
    },

    toCSS: function() {
      var args = $A(arguments);
      var keys = (args.length === 0) ? Element.Layout.PROPERTIES :
       args.join(' ').split(' ');
      var css = {};

      keys.each( function(key) {
        if (!Element.Layout.PROPERTIES.include(key)) return;
        if (Element.Layout.COMPOSITE_PROPERTIES.include(key)) return;

        var value = this.get(key);
        if (value != null) css[cssNameFor(key)] = value + 'px';
      }, this);
      return css;
    },

    inspect: function() {
      return "#<Element.Layout>";
    }
  });

  Object.extend(Element.Layout, {
    PROPERTIES: $w('height width top left right bottom border-left border-right border-top border-bottom padding-left padding-right padding-top padding-bottom margin-top margin-bottom margin-left margin-right padding-box-width padding-box-height border-box-width border-box-height margin-box-width margin-box-height'),

    COMPOSITE_PROPERTIES: $w('padding-box-width padding-box-height margin-box-width margin-box-height border-box-width border-box-height'),

    COMPUTATIONS: {
      'height': function(element) {
        if (!this._preComputing) this._begin();

        var bHeight = this.get('border-box-height');
        if (bHeight <= 0) {
          if (!this._preComputing) this._end();
          return 0;
        }

        var bTop = this.get('border-top'),
         bBottom = this.get('border-bottom');

        var pTop = this.get('padding-top'),
         pBottom = this.get('padding-bottom');

        if (!this._preComputing) this._end();

        return bHeight - bTop - bBottom - pTop - pBottom;
      },

      'width': function(element) {
        if (!this._preComputing) this._begin();

        var bWidth = this.get('border-box-width');
        if (bWidth <= 0) {
          if (!this._preComputing) this._end();
          return 0;
        }

        var bLeft = this.get('border-left'),
         bRight = this.get('border-right');

        var pLeft = this.get('padding-left'),
         pRight = this.get('padding-right');

        if (!this._preComputing) this._end();

        return bWidth - bLeft - bRight - pLeft - pRight;
      },

      'padding-box-height': function(element) {
        var height = this.get('height'),
         pTop = this.get('padding-top'),
         pBottom = this.get('padding-bottom');

        return height + pTop + pBottom;
      },

      'padding-box-width': function(element) {
        var width = this.get('width'),
         pLeft = this.get('padding-left'),
         pRight = this.get('padding-right');

        return width + pLeft + pRight;
      },

      'border-box-height': function(element) {
        if (!this._preComputing) this._begin();
        var height = element.offsetHeight;
        if (!this._preComputing) this._end();
        return height;
      },

      'border-box-width': function(element) {
        if (!this._preComputing) this._begin();
        var width = element.offsetWidth;
        if (!this._preComputing) this._end();
        return width;
      },

      'margin-box-height': function(element) {
        var bHeight = this.get('border-box-height'),
         mTop = this.get('margin-top'),
         mBottom = this.get('margin-bottom');

        if (bHeight <= 0) return 0;

        return bHeight + mTop + mBottom;
      },

      'margin-box-width': function(element) {
        var bWidth = this.get('border-box-width'),
         mLeft = this.get('margin-left'),
         mRight = this.get('margin-right');

        if (bWidth <= 0) return 0;

        return bWidth + mLeft + mRight;
      },

      'top': function(element) {
        var offset = element.positionedOffset();
        return offset.top;
      },

      'bottom': function(element) {
        var offset = element.positionedOffset(),
         parent = element.getOffsetParent(),
         pHeight = parent.measure('height');

        var mHeight = this.get('border-box-height');

        return pHeight - mHeight - offset.top;
      },

      'left': function(element) {
        var offset = element.positionedOffset();
        return offset.left;
      },

      'right': function(element) {
        var offset = element.positionedOffset(),
         parent = element.getOffsetParent(),
         pWidth = parent.measure('width');

        var mWidth = this.get('border-box-width');

        return pWidth - mWidth - offset.left;
      },

      'padding-top': function(element) {
        return getPixelValue(element, 'paddingTop');
      },

      'padding-bottom': function(element) {
        return getPixelValue(element, 'paddingBottom');
      },

      'padding-left': function(element) {
        return getPixelValue(element, 'paddingLeft');
      },

      'padding-right': function(element) {
        return getPixelValue(element, 'paddingRight');
      },

      'border-top': function(element) {
        return getPixelValue(element, 'borderTopWidth');
      },

      'border-bottom': function(element) {
        return getPixelValue(element, 'borderBottomWidth');
      },

      'border-left': function(element) {
        return getPixelValue(element, 'borderLeftWidth');
      },

      'border-right': function(element) {
        return getPixelValue(element, 'borderRightWidth');
      },

      'margin-top': function(element) {
        return getPixelValue(element, 'marginTop');
      },

      'margin-bottom': function(element) {
        return getPixelValue(element, 'marginBottom');
      },

      'margin-left': function(element) {
        return getPixelValue(element, 'marginLeft');
      },

      'margin-right': function(element) {
        return getPixelValue(element, 'marginRight');
      }
    }
  });

  if ('getBoundingClientRect' in document.documentElement) {
    Object.extend(Element.Layout.COMPUTATIONS, {
      'right': function(element) {
        var parent = hasLayout(element.getOffsetParent());
        var rect = element.getBoundingClientRect(),
         pRect = parent.getBoundingClientRect();

        return (pRect.right - rect.right).round();
      },

      'bottom': function(element) {
        var parent = hasLayout(element.getOffsetParent());
        var rect = element.getBoundingClientRect(),
         pRect = parent.getBoundingClientRect();

        return (pRect.bottom - rect.bottom).round();
      }
    });
  }

  Element.Offset = Class.create({
    initialize: function(left, top) {
      this.left = left.round();
      this.top  = top.round();

      this[0] = this.left;
      this[1] = this.top;
    },

    relativeTo: function(offset) {
      return new Element.Offset(
        this.left - offset.left,
        this.top  - offset.top
      );
    },

    inspect: function() {
      return "#<Element.Offset left: #{left} top: #{top}>".interpolate(this);
    },

    toString: function() {
      return "[#{left}, #{top}]".interpolate(this);
    },

    toArray: function() {
      return [this.left, this.top];
    }
  });

  function getLayout(element, preCompute) {
    return new Element.Layout(element, preCompute);
  }

  function measure(element, property) {
    return $(element).getLayout().get(property);
  }

  function getDimensions(element) {
    element = $(element);
    var display = Element.getStyle(element, 'display');

    if (display && display !== 'none') {
      return { width: element.offsetWidth, height: element.offsetHeight };
    }

    var style = element.style;
    var originalStyles = {
      visibility: style.visibility,
      position:   style.position,
      display:    style.display
    };

    var newStyles = {
      visibility: 'hidden',
      display:    'block'
    };

    if (originalStyles.position !== 'fixed')
      newStyles.position = 'absolute';

    Element.setStyle(element, newStyles);

    var dimensions = {
      width:  element.offsetWidth,
      height: element.offsetHeight
    };

    Element.setStyle(element, originalStyles);

    return dimensions;
  }

  function getOffsetParent(element) {
    element = $(element);

    if (isDocument(element) || isDetached(element) || isBody(element) || isHtml(element))
      return $(document.body);

    var isInline = (Element.getStyle(element, 'display') === 'inline');
    if (!isInline && element.offsetParent) return $(element.offsetParent);

    while ((element = element.parentNode) && element !== document.body) {
      if (Element.getStyle(element, 'position') !== 'static') {
        return isHtml(element) ? $(document.body) : $(element);
      }
    }

    return $(document.body);
  }


  function cumulativeOffset(element) {
    element = $(element);
    var valueT = 0, valueL = 0;
    if (element.parentNode) {
      do {
        valueT += element.offsetTop  || 0;
        valueL += element.offsetLeft || 0;
        element = element.offsetParent;
      } while (element);
    }
    return new Element.Offset(valueL, valueT);
  }

  function positionedOffset(element) {
    element = $(element);

    var layout = element.getLayout();

    var valueT = 0, valueL = 0;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      element = element.offsetParent;
      if (element) {
        if (isBody(element)) break;
        var p = Element.getStyle(element, 'position');
        if (p !== 'static') break;
      }
    } while (element);

    valueL -= layout.get('margin-top');
    valueT -= layout.get('margin-left');

    return new Element.Offset(valueL, valueT);
  }

  function cumulativeScrollOffset(element) {
    var valueT = 0, valueL = 0;
    do {
      valueT += element.scrollTop  || 0;
      valueL += element.scrollLeft || 0;
      element = element.parentNode;
    } while (element);
    return new Element.Offset(valueL, valueT);
  }

  function viewportOffset(forElement) {
    element = $(element);
    var valueT = 0, valueL = 0, docBody = document.body;

    var element = forElement;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      if (element.offsetParent == docBody &&
        Element.getStyle(element, 'position') == 'absolute') break;
    } while (element = element.offsetParent);

    element = forElement;
    do {
      if (element != docBody) {
        valueT -= element.scrollTop  || 0;
        valueL -= element.scrollLeft || 0;
      }
    } while (element = element.parentNode);
    return new Element.Offset(valueL, valueT);
  }

  function absolutize(element) {
    element = $(element);

    if (Element.getStyle(element, 'position') === 'absolute') {
      return element;
    }

    var offsetParent = getOffsetParent(element);
    var eOffset = element.viewportOffset(),
     pOffset = offsetParent.viewportOffset();

    var offset = eOffset.relativeTo(pOffset);
    var layout = element.getLayout();

    element.store('prototype_absolutize_original_styles', {
      left:   element.getStyle('left'),
      top:    element.getStyle('top'),
      width:  element.getStyle('width'),
      height: element.getStyle('height')
    });

    element.setStyle({
      position: 'absolute',
      top:    offset.top + 'px',
      left:   offset.left + 'px',
      width:  layout.get('width') + 'px',
      height: layout.get('height') + 'px'
    });

    return element;
  }

  function relativize(element) {
    element = $(element);
    if (Element.getStyle(element, 'position') === 'relative') {
      return element;
    }

    var originalStyles =
     element.retrieve('prototype_absolutize_original_styles');

    if (originalStyles) element.setStyle(originalStyles);
    return element;
  }

  if (Prototype.Browser.IE) {
    getOffsetParent = getOffsetParent.wrap(
      function(proceed, element) {
        element = $(element);

        if (isDocument(element) || isDetached(element) || isBody(element) || isHtml(element))
          return $(document.body);

        var position = element.getStyle('position');
        if (position !== 'static') return proceed(element);

        element.setStyle({ position: 'relative' });
        var value = proceed(element);
        element.setStyle({ position: position });
        return value;
      }
    );

    positionedOffset = positionedOffset.wrap(function(proceed, element) {
      element = $(element);
      if (!element.parentNode) return new Element.Offset(0, 0);
      var position = element.getStyle('position');
      if (position !== 'static') return proceed(element);

      var offsetParent = element.getOffsetParent();
      if (offsetParent && offsetParent.getStyle('position') === 'fixed')
        hasLayout(offsetParent);

      element.setStyle({ position: 'relative' });
      var value = proceed(element);
      element.setStyle({ position: position });
      return value;
    });
  } else if (Prototype.Browser.Webkit) {
    cumulativeOffset = function(element) {
      element = $(element);
      var valueT = 0, valueL = 0;
      do {
        valueT += element.offsetTop  || 0;
        valueL += element.offsetLeft || 0;
        if (element.offsetParent == document.body)
          if (Element.getStyle(element, 'position') == 'absolute') break;

        element = element.offsetParent;
      } while (element);

      return new Element.Offset(valueL, valueT);
    };
  }


  Element.addMethods({
    getLayout:              getLayout,
    measure:                measure,
    getDimensions:          getDimensions,
    getOffsetParent:        getOffsetParent,
    cumulativeOffset:       cumulativeOffset,
    positionedOffset:       positionedOffset,
    cumulativeScrollOffset: cumulativeScrollOffset,
    viewportOffset:         viewportOffset,
    absolutize:             absolutize,
    relativize:             relativize
  });

  function isBody(element) {
    return element.nodeName.toUpperCase() === 'BODY';
  }

  function isHtml(element) {
    return element.nodeName.toUpperCase() === 'HTML';
  }

  function isDocument(element) {
    return element.nodeType === Node.DOCUMENT_NODE;
  }

  function isDetached(element) {
    return element !== document.body &&
     !Element.descendantOf(element, document.body);
  }

  if ('getBoundingClientRect' in document.documentElement) {
    Element.addMethods({
      viewportOffset: function(element) {
        element = $(element);
        if (isDetached(element)) return new Element.Offset(0, 0);

        var rect = element.getBoundingClientRect(),
         docEl = document.documentElement;
        return new Element.Offset(rect.left - docEl.clientLeft,
         rect.top - docEl.clientTop);
      }
    });
  }
})();
window.$$ = function() {
  var expression = $A(arguments).join(', ');
  return Prototype.Selector.select(expression, document);
};

Prototype.Selector = (function() {

  function select() {
    throw new Error('Method "Prototype.Selector.select" must be defined.');
  }

  function match() {
    throw new Error('Method "Prototype.Selector.match" must be defined.');
  }

  function find(elements, expression, index) {
    index = index || 0;
    var match = Prototype.Selector.match, length = elements.length, matchIndex = 0, i;

    for (i = 0; i < length; i++) {
      if (match(elements[i], expression) && index == matchIndex++) {
        return Element.extend(elements[i]);
      }
    }
  }

  function extendElements(elements) {
    for (var i = 0, length = elements.length; i < length; i++) {
      Element.extend(elements[i]);
    }
    return elements;
  }


  var K = Prototype.K;

  return {
    select: select,
    match: match,
    find: find,
    extendElements: (Element.extend === K) ? K : extendElements,
    extendElement: Element.extend
  };
})();
Prototype._original_property = window.Sizzle;
/*!
 * Sizzle CSS Selector Engine - v1.0
 *  Copyright 2009, The Dojo Foundation
 *  Released under the MIT, BSD, and GPL Licenses.
 *  More information: http://sizzlejs.com/
 */
(function(){

var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|['"][^'"]*['"]|[^[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
	done = 0,
	toString = Object.prototype.toString,
	hasDuplicate = false,
	baseHasDuplicate = true;

[0, 0].sort(function(){
	baseHasDuplicate = false;
	return 0;
});

var Sizzle = function(selector, context, results, seed) {
	results = results || [];
	var origContext = context = context || document;

	if ( context.nodeType !== 1 && context.nodeType !== 9 ) {
		return [];
	}

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	var parts = [], m, set, checkSet, check, mode, extra, prune = true, contextXML = isXML(context),
		soFar = selector;

	while ( (chunker.exec(""), m = chunker.exec(soFar)) !== null ) {
		soFar = m[3];

		parts.push( m[1] );

		if ( m[2] ) {
			extra = m[3];
			break;
		}
	}

	if ( parts.length > 1 && origPOS.exec( selector ) ) {
		if ( parts.length === 2 && Expr.relative[ parts[0] ] ) {
			set = posProcess( parts[0] + parts[1], context );
		} else {
			set = Expr.relative[ parts[0] ] ?
				[ context ] :
				Sizzle( parts.shift(), context );

			while ( parts.length ) {
				selector = parts.shift();

				if ( Expr.relative[ selector ] )
					selector += parts.shift();

				set = posProcess( selector, set );
			}
		}
	} else {
		if ( !seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&
				Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1]) ) {
			var ret = Sizzle.find( parts.shift(), context, contextXML );
			context = ret.expr ? Sizzle.filter( ret.expr, ret.set )[0] : ret.set[0];
		}

		if ( context ) {
			var ret = seed ?
				{ expr: parts.pop(), set: makeArray(seed) } :
				Sizzle.find( parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML );
			set = ret.expr ? Sizzle.filter( ret.expr, ret.set ) : ret.set;

			if ( parts.length > 0 ) {
				checkSet = makeArray(set);
			} else {
				prune = false;
			}

			while ( parts.length ) {
				var cur = parts.pop(), pop = cur;

				if ( !Expr.relative[ cur ] ) {
					cur = "";
				} else {
					pop = parts.pop();
				}

				if ( pop == null ) {
					pop = context;
				}

				Expr.relative[ cur ]( checkSet, pop, contextXML );
			}
		} else {
			checkSet = parts = [];
		}
	}

	if ( !checkSet ) {
		checkSet = set;
	}

	if ( !checkSet ) {
		throw "Syntax error, unrecognized expression: " + (cur || selector);
	}

	if ( toString.call(checkSet) === "[object Array]" ) {
		if ( !prune ) {
			results.push.apply( results, checkSet );
		} else if ( context && context.nodeType === 1 ) {
			for ( var i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && contains(context, checkSet[i])) ) {
					results.push( set[i] );
				}
			}
		} else {
			for ( var i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && checkSet[i].nodeType === 1 ) {
					results.push( set[i] );
				}
			}
		}
	} else {
		makeArray( checkSet, results );
	}

	if ( extra ) {
		Sizzle( extra, origContext, results, seed );
		Sizzle.uniqueSort( results );
	}

	return results;
};

Sizzle.uniqueSort = function(results){
	if ( sortOrder ) {
		hasDuplicate = baseHasDuplicate;
		results.sort(sortOrder);

		if ( hasDuplicate ) {
			for ( var i = 1; i < results.length; i++ ) {
				if ( results[i] === results[i-1] ) {
					results.splice(i--, 1);
				}
			}
		}
	}

	return results;
};

Sizzle.matches = function(expr, set){
	return Sizzle(expr, null, null, set);
};

Sizzle.find = function(expr, context, isXML){
	var set, match;

	if ( !expr ) {
		return [];
	}

	for ( var i = 0, l = Expr.order.length; i < l; i++ ) {
		var type = Expr.order[i], match;

		if ( (match = Expr.leftMatch[ type ].exec( expr )) ) {
			var left = match[1];
			match.splice(1,1);

			if ( left.substr( left.length - 1 ) !== "\\" ) {
				match[1] = (match[1] || "").replace(/\\/g, "");
				set = Expr.find[ type ]( match, context, isXML );
				if ( set != null ) {
					expr = expr.replace( Expr.match[ type ], "" );
					break;
				}
			}
		}
	}

	if ( !set ) {
		set = context.getElementsByTagName("*");
	}

	return {set: set, expr: expr};
};

Sizzle.filter = function(expr, set, inplace, not){
	var old = expr, result = [], curLoop = set, match, anyFound,
		isXMLFilter = set && set[0] && isXML(set[0]);

	while ( expr && set.length ) {
		for ( var type in Expr.filter ) {
			if ( (match = Expr.match[ type ].exec( expr )) != null ) {
				var filter = Expr.filter[ type ], found, item;
				anyFound = false;

				if ( curLoop == result ) {
					result = [];
				}

				if ( Expr.preFilter[ type ] ) {
					match = Expr.preFilter[ type ]( match, curLoop, inplace, result, not, isXMLFilter );

					if ( !match ) {
						anyFound = found = true;
					} else if ( match === true ) {
						continue;
					}
				}

				if ( match ) {
					for ( var i = 0; (item = curLoop[i]) != null; i++ ) {
						if ( item ) {
							found = filter( item, match, i, curLoop );
							var pass = not ^ !!found;

							if ( inplace && found != null ) {
								if ( pass ) {
									anyFound = true;
								} else {
									curLoop[i] = false;
								}
							} else if ( pass ) {
								result.push( item );
								anyFound = true;
							}
						}
					}
				}

				if ( found !== undefined ) {
					if ( !inplace ) {
						curLoop = result;
					}

					expr = expr.replace( Expr.match[ type ], "" );

					if ( !anyFound ) {
						return [];
					}

					break;
				}
			}
		}

		if ( expr == old ) {
			if ( anyFound == null ) {
				throw "Syntax error, unrecognized expression: " + expr;
			} else {
				break;
			}
		}

		old = expr;
	}

	return curLoop;
};

var Expr = Sizzle.selectors = {
	order: [ "ID", "NAME", "TAG" ],
	match: {
		ID: /#((?:[\w\u00c0-\uFFFF-]|\\.)+)/,
		CLASS: /\.((?:[\w\u00c0-\uFFFF-]|\\.)+)/,
		NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF-]|\\.)+)['"]*\]/,
		ATTR: /\[\s*((?:[\w\u00c0-\uFFFF-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,
		TAG: /^((?:[\w\u00c0-\uFFFF\*-]|\\.)+)/,
		CHILD: /:(only|nth|last|first)-child(?:\((even|odd|[\dn+-]*)\))?/,
		POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^-]|$)/,
		PSEUDO: /:((?:[\w\u00c0-\uFFFF-]|\\.)+)(?:\((['"]*)((?:\([^\)]+\)|[^\2\(\)]*)+)\2\))?/
	},
	leftMatch: {},
	attrMap: {
		"class": "className",
		"for": "htmlFor"
	},
	attrHandle: {
		href: function(elem){
			return elem.getAttribute("href");
		}
	},
	relative: {
		"+": function(checkSet, part, isXML){
			var isPartStr = typeof part === "string",
				isTag = isPartStr && !/\W/.test(part),
				isPartStrNotTag = isPartStr && !isTag;

			if ( isTag && !isXML ) {
				part = part.toUpperCase();
			}

			for ( var i = 0, l = checkSet.length, elem; i < l; i++ ) {
				if ( (elem = checkSet[i]) ) {
					while ( (elem = elem.previousSibling) && elem.nodeType !== 1 ) {}

					checkSet[i] = isPartStrNotTag || elem && elem.nodeName === part ?
						elem || false :
						elem === part;
				}
			}

			if ( isPartStrNotTag ) {
				Sizzle.filter( part, checkSet, true );
			}
		},
		">": function(checkSet, part, isXML){
			var isPartStr = typeof part === "string";

			if ( isPartStr && !/\W/.test(part) ) {
				part = isXML ? part : part.toUpperCase();

				for ( var i = 0, l = checkSet.length; i < l; i++ ) {
					var elem = checkSet[i];
					if ( elem ) {
						var parent = elem.parentNode;
						checkSet[i] = parent.nodeName === part ? parent : false;
					}
				}
			} else {
				for ( var i = 0, l = checkSet.length; i < l; i++ ) {
					var elem = checkSet[i];
					if ( elem ) {
						checkSet[i] = isPartStr ?
							elem.parentNode :
							elem.parentNode === part;
					}
				}

				if ( isPartStr ) {
					Sizzle.filter( part, checkSet, true );
				}
			}
		},
		"": function(checkSet, part, isXML){
			var doneName = done++, checkFn = dirCheck;

			if ( !/\W/.test(part) ) {
				var nodeCheck = part = isXML ? part : part.toUpperCase();
				checkFn = dirNodeCheck;
			}

			checkFn("parentNode", part, doneName, checkSet, nodeCheck, isXML);
		},
		"~": function(checkSet, part, isXML){
			var doneName = done++, checkFn = dirCheck;

			if ( typeof part === "string" && !/\W/.test(part) ) {
				var nodeCheck = part = isXML ? part : part.toUpperCase();
				checkFn = dirNodeCheck;
			}

			checkFn("previousSibling", part, doneName, checkSet, nodeCheck, isXML);
		}
	},
	find: {
		ID: function(match, context, isXML){
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);
				return m ? [m] : [];
			}
		},
		NAME: function(match, context, isXML){
			if ( typeof context.getElementsByName !== "undefined" ) {
				var ret = [], results = context.getElementsByName(match[1]);

				for ( var i = 0, l = results.length; i < l; i++ ) {
					if ( results[i].getAttribute("name") === match[1] ) {
						ret.push( results[i] );
					}
				}

				return ret.length === 0 ? null : ret;
			}
		},
		TAG: function(match, context){
			return context.getElementsByTagName(match[1]);
		}
	},
	preFilter: {
		CLASS: function(match, curLoop, inplace, result, not, isXML){
			match = " " + match[1].replace(/\\/g, "") + " ";

			if ( isXML ) {
				return match;
			}

			for ( var i = 0, elem; (elem = curLoop[i]) != null; i++ ) {
				if ( elem ) {
					if ( not ^ (elem.className && (" " + elem.className + " ").indexOf(match) >= 0) ) {
						if ( !inplace )
							result.push( elem );
					} else if ( inplace ) {
						curLoop[i] = false;
					}
				}
			}

			return false;
		},
		ID: function(match){
			return match[1].replace(/\\/g, "");
		},
		TAG: function(match, curLoop){
			for ( var i = 0; curLoop[i] === false; i++ ){}
			return curLoop[i] && isXML(curLoop[i]) ? match[1] : match[1].toUpperCase();
		},
		CHILD: function(match){
			if ( match[1] == "nth" ) {
				var test = /(-?)(\d*)n((?:\+|-)?\d*)/.exec(
					match[2] == "even" && "2n" || match[2] == "odd" && "2n+1" ||
					!/\D/.test( match[2] ) && "0n+" + match[2] || match[2]);

				match[2] = (test[1] + (test[2] || 1)) - 0;
				match[3] = test[3] - 0;
			}

			match[0] = done++;

			return match;
		},
		ATTR: function(match, curLoop, inplace, result, not, isXML){
			var name = match[1].replace(/\\/g, "");

			if ( !isXML && Expr.attrMap[name] ) {
				match[1] = Expr.attrMap[name];
			}

			if ( match[2] === "~=" ) {
				match[4] = " " + match[4] + " ";
			}

			return match;
		},
		PSEUDO: function(match, curLoop, inplace, result, not){
			if ( match[1] === "not" ) {
				if ( ( chunker.exec(match[3]) || "" ).length > 1 || /^\w/.test(match[3]) ) {
					match[3] = Sizzle(match[3], null, null, curLoop);
				} else {
					var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);
					if ( !inplace ) {
						result.push.apply( result, ret );
					}
					return false;
				}
			} else if ( Expr.match.POS.test( match[0] ) || Expr.match.CHILD.test( match[0] ) ) {
				return true;
			}

			return match;
		},
		POS: function(match){
			match.unshift( true );
			return match;
		}
	},
	filters: {
		enabled: function(elem){
			return elem.disabled === false && elem.type !== "hidden";
		},
		disabled: function(elem){
			return elem.disabled === true;
		},
		checked: function(elem){
			return elem.checked === true;
		},
		selected: function(elem){
			elem.parentNode.selectedIndex;
			return elem.selected === true;
		},
		parent: function(elem){
			return !!elem.firstChild;
		},
		empty: function(elem){
			return !elem.firstChild;
		},
		has: function(elem, i, match){
			return !!Sizzle( match[3], elem ).length;
		},
		header: function(elem){
			return /h\d/i.test( elem.nodeName );
		},
		text: function(elem){
			return "text" === elem.type;
		},
		radio: function(elem){
			return "radio" === elem.type;
		},
		checkbox: function(elem){
			return "checkbox" === elem.type;
		},
		file: function(elem){
			return "file" === elem.type;
		},
		password: function(elem){
			return "password" === elem.type;
		},
		submit: function(elem){
			return "submit" === elem.type;
		},
		image: function(elem){
			return "image" === elem.type;
		},
		reset: function(elem){
			return "reset" === elem.type;
		},
		button: function(elem){
			return "button" === elem.type || elem.nodeName.toUpperCase() === "BUTTON";
		},
		input: function(elem){
			return /input|select|textarea|button/i.test(elem.nodeName);
		}
	},
	setFilters: {
		first: function(elem, i){
			return i === 0;
		},
		last: function(elem, i, match, array){
			return i === array.length - 1;
		},
		even: function(elem, i){
			return i % 2 === 0;
		},
		odd: function(elem, i){
			return i % 2 === 1;
		},
		lt: function(elem, i, match){
			return i < match[3] - 0;
		},
		gt: function(elem, i, match){
			return i > match[3] - 0;
		},
		nth: function(elem, i, match){
			return match[3] - 0 == i;
		},
		eq: function(elem, i, match){
			return match[3] - 0 == i;
		}
	},
	filter: {
		PSEUDO: function(elem, match, i, array){
			var name = match[1], filter = Expr.filters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );
			} else if ( name === "contains" ) {
				return (elem.textContent || elem.innerText || "").indexOf(match[3]) >= 0;
			} else if ( name === "not" ) {
				var not = match[3];

				for ( var i = 0, l = not.length; i < l; i++ ) {
					if ( not[i] === elem ) {
						return false;
					}
				}

				return true;
			}
		},
		CHILD: function(elem, match){
			var type = match[1], node = elem;
			switch (type) {
				case 'only':
				case 'first':
					while ( (node = node.previousSibling) )  {
						if ( node.nodeType === 1 ) return false;
					}
					if ( type == 'first') return true;
					node = elem;
				case 'last':
					while ( (node = node.nextSibling) )  {
						if ( node.nodeType === 1 ) return false;
					}
					return true;
				case 'nth':
					var first = match[2], last = match[3];

					if ( first == 1 && last == 0 ) {
						return true;
					}

					var doneName = match[0],
						parent = elem.parentNode;

					if ( parent && (parent.sizcache !== doneName || !elem.nodeIndex) ) {
						var count = 0;
						for ( node = parent.firstChild; node; node = node.nextSibling ) {
							if ( node.nodeType === 1 ) {
								node.nodeIndex = ++count;
							}
						}
						parent.sizcache = doneName;
					}

					var diff = elem.nodeIndex - last;
					if ( first == 0 ) {
						return diff == 0;
					} else {
						return ( diff % first == 0 && diff / first >= 0 );
					}
			}
		},
		ID: function(elem, match){
			return elem.nodeType === 1 && elem.getAttribute("id") === match;
		},
		TAG: function(elem, match){
			return (match === "*" && elem.nodeType === 1) || elem.nodeName === match;
		},
		CLASS: function(elem, match){
			return (" " + (elem.className || elem.getAttribute("class")) + " ")
				.indexOf( match ) > -1;
		},
		ATTR: function(elem, match){
			var name = match[1],
				result = Expr.attrHandle[ name ] ?
					Expr.attrHandle[ name ]( elem ) :
					elem[ name ] != null ?
						elem[ name ] :
						elem.getAttribute( name ),
				value = result + "",
				type = match[2],
				check = match[4];

			return result == null ?
				type === "!=" :
				type === "=" ?
				value === check :
				type === "*=" ?
				value.indexOf(check) >= 0 :
				type === "~=" ?
				(" " + value + " ").indexOf(check) >= 0 :
				!check ?
				value && result !== false :
				type === "!=" ?
				value != check :
				type === "^=" ?
				value.indexOf(check) === 0 :
				type === "$=" ?
				value.substr(value.length - check.length) === check :
				type === "|=" ?
				value === check || value.substr(0, check.length + 1) === check + "-" :
				false;
		},
		POS: function(elem, match, i, array){
			var name = match[2], filter = Expr.setFilters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );
			}
		}
	}
};

var origPOS = Expr.match.POS;

for ( var type in Expr.match ) {
	Expr.match[ type ] = new RegExp( Expr.match[ type ].source + /(?![^\[]*\])(?![^\(]*\))/.source );
	Expr.leftMatch[ type ] = new RegExp( /(^(?:.|\r|\n)*?)/.source + Expr.match[ type ].source );
}

var makeArray = function(array, results) {
	array = Array.prototype.slice.call( array, 0 );

	if ( results ) {
		results.push.apply( results, array );
		return results;
	}

	return array;
};

try {
	Array.prototype.slice.call( document.documentElement.childNodes, 0 );

} catch(e){
	makeArray = function(array, results) {
		var ret = results || [];

		if ( toString.call(array) === "[object Array]" ) {
			Array.prototype.push.apply( ret, array );
		} else {
			if ( typeof array.length === "number" ) {
				for ( var i = 0, l = array.length; i < l; i++ ) {
					ret.push( array[i] );
				}
			} else {
				for ( var i = 0; array[i]; i++ ) {
					ret.push( array[i] );
				}
			}
		}

		return ret;
	};
}

var sortOrder;

if ( document.documentElement.compareDocumentPosition ) {
	sortOrder = function( a, b ) {
		if ( !a.compareDocumentPosition || !b.compareDocumentPosition ) {
			if ( a == b ) {
				hasDuplicate = true;
			}
			return 0;
		}

		var ret = a.compareDocumentPosition(b) & 4 ? -1 : a === b ? 0 : 1;
		if ( ret === 0 ) {
			hasDuplicate = true;
		}
		return ret;
	};
} else if ( "sourceIndex" in document.documentElement ) {
	sortOrder = function( a, b ) {
		if ( !a.sourceIndex || !b.sourceIndex ) {
			if ( a == b ) {
				hasDuplicate = true;
			}
			return 0;
		}

		var ret = a.sourceIndex - b.sourceIndex;
		if ( ret === 0 ) {
			hasDuplicate = true;
		}
		return ret;
	};
} else if ( document.createRange ) {
	sortOrder = function( a, b ) {
		if ( !a.ownerDocument || !b.ownerDocument ) {
			if ( a == b ) {
				hasDuplicate = true;
			}
			return 0;
		}

		var aRange = a.ownerDocument.createRange(), bRange = b.ownerDocument.createRange();
		aRange.setStart(a, 0);
		aRange.setEnd(a, 0);
		bRange.setStart(b, 0);
		bRange.setEnd(b, 0);
		var ret = aRange.compareBoundaryPoints(Range.START_TO_END, bRange);
		if ( ret === 0 ) {
			hasDuplicate = true;
		}
		return ret;
	};
}

(function(){
	var form = document.createElement("div"),
		id = "script" + (new Date).getTime();
	form.innerHTML = "<a name='" + id + "'/>";

	var root = document.documentElement;
	root.insertBefore( form, root.firstChild );

	if ( !!document.getElementById( id ) ) {
		Expr.find.ID = function(match, context, isXML){
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);
				return m ? m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ? [m] : undefined : [];
			}
		};

		Expr.filter.ID = function(elem, match){
			var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
			return elem.nodeType === 1 && node && node.nodeValue === match;
		};
	}

	root.removeChild( form );
	root = form = null; // release memory in IE
})();

(function(){

	var div = document.createElement("div");
	div.appendChild( document.createComment("") );

	if ( div.getElementsByTagName("*").length > 0 ) {
		Expr.find.TAG = function(match, context){
			var results = context.getElementsByTagName(match[1]);

			if ( match[1] === "*" ) {
				var tmp = [];

				for ( var i = 0; results[i]; i++ ) {
					if ( results[i].nodeType === 1 ) {
						tmp.push( results[i] );
					}
				}

				results = tmp;
			}

			return results;
		};
	}

	div.innerHTML = "<a href='#'></a>";
	if ( div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&
			div.firstChild.getAttribute("href") !== "#" ) {
		Expr.attrHandle.href = function(elem){
			return elem.getAttribute("href", 2);
		};
	}

	div = null; // release memory in IE
})();

if ( document.querySelectorAll ) (function(){
	var oldSizzle = Sizzle, div = document.createElement("div");
	div.innerHTML = "<p class='TEST'></p>";

	if ( div.querySelectorAll && div.querySelectorAll(".TEST").length === 0 ) {
		return;
	}

	Sizzle = function(query, context, extra, seed){
		context = context || document;

		if ( !seed && context.nodeType === 9 && !isXML(context) ) {
			try {
				return makeArray( context.querySelectorAll(query), extra );
			} catch(e){}
		}

		return oldSizzle(query, context, extra, seed);
	};

	for ( var prop in oldSizzle ) {
		Sizzle[ prop ] = oldSizzle[ prop ];
	}

	div = null; // release memory in IE
})();

if ( document.getElementsByClassName && document.documentElement.getElementsByClassName ) (function(){
	var div = document.createElement("div");
	div.innerHTML = "<div class='test e'></div><div class='test'></div>";

	if ( div.getElementsByClassName("e").length === 0 )
		return;

	div.lastChild.className = "e";

	if ( div.getElementsByClassName("e").length === 1 )
		return;

	Expr.order.splice(1, 0, "CLASS");
	Expr.find.CLASS = function(match, context, isXML) {
		if ( typeof context.getElementsByClassName !== "undefined" && !isXML ) {
			return context.getElementsByClassName(match[1]);
		}
	};

	div = null; // release memory in IE
})();

function dirNodeCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	var sibDir = dir == "previousSibling" && !isXML;
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];
		if ( elem ) {
			if ( sibDir && elem.nodeType === 1 ){
				elem.sizcache = doneName;
				elem.sizset = i;
			}
			elem = elem[dir];
			var match = false;

			while ( elem ) {
				if ( elem.sizcache === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 && !isXML ){
					elem.sizcache = doneName;
					elem.sizset = i;
				}

				if ( elem.nodeName === cur ) {
					match = elem;
					break;
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

function dirCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	var sibDir = dir == "previousSibling" && !isXML;
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];
		if ( elem ) {
			if ( sibDir && elem.nodeType === 1 ) {
				elem.sizcache = doneName;
				elem.sizset = i;
			}
			elem = elem[dir];
			var match = false;

			while ( elem ) {
				if ( elem.sizcache === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 ) {
					if ( !isXML ) {
						elem.sizcache = doneName;
						elem.sizset = i;
					}
					if ( typeof cur !== "string" ) {
						if ( elem === cur ) {
							match = true;
							break;
						}

					} else if ( Sizzle.filter( cur, [elem] ).length > 0 ) {
						match = elem;
						break;
					}
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

var contains = document.compareDocumentPosition ?  function(a, b){
	return a.compareDocumentPosition(b) & 16;
} : function(a, b){
	return a !== b && (a.contains ? a.contains(b) : true);
};

var isXML = function(elem){
	return elem.nodeType === 9 && elem.documentElement.nodeName !== "HTML" ||
		!!elem.ownerDocument && elem.ownerDocument.documentElement.nodeName !== "HTML";
};

var posProcess = function(selector, context){
	var tmpSet = [], later = "", match,
		root = context.nodeType ? [context] : context;

	while ( (match = Expr.match.PSEUDO.exec( selector )) ) {
		later += match[0];
		selector = selector.replace( Expr.match.PSEUDO, "" );
	}

	selector = Expr.relative[selector] ? selector + "*" : selector;

	for ( var i = 0, l = root.length; i < l; i++ ) {
		Sizzle( selector, root[i], tmpSet );
	}

	return Sizzle.filter( later, tmpSet );
};


window.Sizzle = Sizzle;

})();

;(function(engine) {
  var extendElements = Prototype.Selector.extendElements;

  function select(selector, scope) {
    return extendElements(engine(selector, scope || document));
  }

  function match(element, selector) {
    return engine.matches(selector, [element]).length == 1;
  }

  Prototype.Selector.engine = engine;
  Prototype.Selector.select = select;
  Prototype.Selector.match = match;
})(Sizzle);

window.Sizzle = Prototype._original_property;
delete Prototype._original_property;

var Form = {
  reset: function(form) {
    form = $(form);
    form.reset();
    return form;
  },

  serializeElements: function(elements, options) {
    if (typeof options != 'object') options = { hash: !!options };
    else if (Object.isUndefined(options.hash)) options.hash = true;
    var key, value, submitted = false, submit = options.submit, accumulator, initial;

    if (options.hash) {
      initial = {};
      accumulator = function(result, key, value) {
        if (key in result) {
          if (!Object.isArray(result[key])) result[key] = [result[key]];
          result[key].push(value);
        } else result[key] = value;
        return result;
      };
    } else {
      initial = '';
      accumulator = function(result, key, value) {
        return result + (result ? '&' : '') + encodeURIComponent(key) + '=' + encodeURIComponent(value);
      }
    }

    return elements.inject(initial, function(result, element) {
      if (!element.disabled && element.name) {
        key = element.name; value = $(element).getValue();
        if (value != null && element.type != 'file' && (element.type != 'submit' || (!submitted &&
            submit !== false && (!submit || key == submit) && (submitted = true)))) {
          result = accumulator(result, key, value);
        }
      }
      return result;
    });
  }
};

Form.Methods = {
  serialize: function(form, options) {
    return Form.serializeElements(Form.getElements(form), options);
  },

  getElements: function(form) {
    var elements = $(form).getElementsByTagName('*'),
        element,
        arr = [ ],
        serializers = Form.Element.Serializers;
    for (var i = 0; element = elements[i]; i++) {
      arr.push(element);
    }
    return arr.inject([], function(elements, child) {
      if (serializers[child.tagName.toLowerCase()])
        elements.push(Element.extend(child));
      return elements;
    })
  },

  getInputs: function(form, typeName, name) {
    form = $(form);
    var inputs = form.getElementsByTagName('input');

    if (!typeName && !name) return $A(inputs).map(Element.extend);

    for (var i = 0, matchingInputs = [], length = inputs.length; i < length; i++) {
      var input = inputs[i];
      if ((typeName && input.type != typeName) || (name && input.name != name))
        continue;
      matchingInputs.push(Element.extend(input));
    }

    return matchingInputs;
  },

  disable: function(form) {
    form = $(form);
    Form.getElements(form).invoke('disable');
    return form;
  },

  enable: function(form) {
    form = $(form);
    Form.getElements(form).invoke('enable');
    return form;
  },

  findFirstElement: function(form) {
    var elements = $(form).getElements().findAll(function(element) {
      return 'hidden' != element.type && !element.disabled;
    });
    var firstByIndex = elements.findAll(function(element) {
      return element.hasAttribute('tabIndex') && element.tabIndex >= 0;
    }).sortBy(function(element) { return element.tabIndex }).first();

    return firstByIndex ? firstByIndex : elements.find(function(element) {
      return /^(?:input|select|textarea)$/i.test(element.tagName);
    });
  },

  focusFirstElement: function(form) {
    form = $(form);
    var element = form.findFirstElement();
    if (element) element.activate();
    return form;
  },

  request: function(form, options) {
    form = $(form), options = Object.clone(options || { });

    var params = options.parameters, action = form.readAttribute('action') || '';
    if (action.blank()) action = window.location.href;
    options.parameters = form.serialize(true);

    if (params) {
      if (Object.isString(params)) params = params.toQueryParams();
      Object.extend(options.parameters, params);
    }

    if (form.hasAttribute('method') && !options.method)
      options.method = form.method;

    return new Ajax.Request(action, options);
  }
};

/*--------------------------------------------------------------------------*/


Form.Element = {
  focus: function(element) {
    $(element).focus();
    return element;
  },

  select: function(element) {
    $(element).select();
    return element;
  }
};

Form.Element.Methods = {

  serialize: function(element) {
    element = $(element);
    if (!element.disabled && element.name) {
      var value = element.getValue();
      if (value != undefined) {
        var pair = { };
        pair[element.name] = value;
        return Object.toQueryString(pair);
      }
    }
    return '';
  },

  getValue: function(element) {
    element = $(element);
    var method = element.tagName.toLowerCase();
    return Form.Element.Serializers[method](element);
  },

  setValue: function(element, value) {
    element = $(element);
    var method = element.tagName.toLowerCase();
    Form.Element.Serializers[method](element, value);
    return element;
  },

  clear: function(element) {
    $(element).value = '';
    return element;
  },

  present: function(element) {
    return $(element).value != '';
  },

  activate: function(element) {
    element = $(element);
    try {
      element.focus();
      if (element.select && (element.tagName.toLowerCase() != 'input' ||
          !(/^(?:button|reset|submit)$/i.test(element.type))))
        element.select();
    } catch (e) { }
    return element;
  },

  disable: function(element) {
    element = $(element);
    element.disabled = true;
    return element;
  },

  enable: function(element) {
    element = $(element);
    element.disabled = false;
    return element;
  }
};

/*--------------------------------------------------------------------------*/

var Field = Form.Element;

var $F = Form.Element.Methods.getValue;

/*--------------------------------------------------------------------------*/

Form.Element.Serializers = (function() {
  function input(element, value) {
    switch (element.type.toLowerCase()) {
      case 'checkbox':
      case 'radio':
        return inputSelector(element, value);
      default:
        return valueSelector(element, value);
    }
  }

  function inputSelector(element, value) {
    if (Object.isUndefined(value))
      return element.checked ? element.value : null;
    else element.checked = !!value;
  }

  function valueSelector(element, value) {
    if (Object.isUndefined(value)) return element.value;
    else element.value = value;
  }

  function select(element, value) {
    if (Object.isUndefined(value))
      return (element.type === 'select-one' ? selectOne : selectMany)(element);

    var opt, currentValue, single = !Object.isArray(value);
    for (var i = 0, length = element.length; i < length; i++) {
      opt = element.options[i];
      currentValue = this.optionValue(opt);
      if (single) {
        if (currentValue == value) {
          opt.selected = true;
          return;
        }
      }
      else opt.selected = value.include(currentValue);
    }
  }

  function selectOne(element) {
    var index = element.selectedIndex;
    return index >= 0 ? optionValue(element.options[index]) : null;
  }

  function selectMany(element) {
    var values, length = element.length;
    if (!length) return null;

    for (var i = 0, values = []; i < length; i++) {
      var opt = element.options[i];
      if (opt.selected) values.push(optionValue(opt));
    }
    return values;
  }

  function optionValue(opt) {
    return Element.hasAttribute(opt, 'value') ? opt.value : opt.text;
  }

  return {
    input:         input,
    inputSelector: inputSelector,
    textarea:      valueSelector,
    select:        select,
    selectOne:     selectOne,
    selectMany:    selectMany,
    optionValue:   optionValue,
    button:        valueSelector
  };
})();

/*--------------------------------------------------------------------------*/


Abstract.TimedObserver = Class.create(PeriodicalExecuter, {
  initialize: function($super, element, frequency, callback) {
    $super(callback, frequency);
    this.element   = $(element);
    this.lastValue = this.getValue();
  },

  execute: function() {
    var value = this.getValue();
    if (Object.isString(this.lastValue) && Object.isString(value) ?
        this.lastValue != value : String(this.lastValue) != String(value)) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  }
});

Form.Element.Observer = Class.create(Abstract.TimedObserver, {
  getValue: function() {
    return Form.Element.getValue(this.element);
  }
});

Form.Observer = Class.create(Abstract.TimedObserver, {
  getValue: function() {
    return Form.serialize(this.element);
  }
});

/*--------------------------------------------------------------------------*/

Abstract.EventObserver = Class.create({
  initialize: function(element, callback) {
    this.element  = $(element);
    this.callback = callback;

    this.lastValue = this.getValue();
    if (this.element.tagName.toLowerCase() == 'form')
      this.registerFormCallbacks();
    else
      this.registerCallback(this.element);
  },

  onElementEvent: function() {
    var value = this.getValue();
    if (this.lastValue != value) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  },

  registerFormCallbacks: function() {
    Form.getElements(this.element).each(this.registerCallback, this);
  },

  registerCallback: function(element) {
    if (element.type) {
      switch (element.type.toLowerCase()) {
        case 'checkbox':
        case 'radio':
          Event.observe(element, 'click', this.onElementEvent.bind(this));
          break;
        default:
          Event.observe(element, 'change', this.onElementEvent.bind(this));
          break;
      }
    }
  }
});

Form.Element.EventObserver = Class.create(Abstract.EventObserver, {
  getValue: function() {
    return Form.Element.getValue(this.element);
  }
});

Form.EventObserver = Class.create(Abstract.EventObserver, {
  getValue: function() {
    return Form.serialize(this.element);
  }
});
(function() {

  var Event = {
    KEY_BACKSPACE: 8,
    KEY_TAB:       9,
    KEY_RETURN:   13,
    KEY_ESC:      27,
    KEY_LEFT:     37,
    KEY_UP:       38,
    KEY_RIGHT:    39,
    KEY_DOWN:     40,
    KEY_DELETE:   46,
    KEY_HOME:     36,
    KEY_END:      35,
    KEY_PAGEUP:   33,
    KEY_PAGEDOWN: 34,
    KEY_INSERT:   45,

    cache: {}
  };

  var docEl = document.documentElement;
  var MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED = 'onmouseenter' in docEl
    && 'onmouseleave' in docEl;



  var isIELegacyEvent = function(event) { return false; };

  if (window.attachEvent) {
    if (window.addEventListener) {
      isIELegacyEvent = function(event) {
        return !(event instanceof window.Event);
      };
    } else {
      isIELegacyEvent = function(event) { return true; };
    }
  }

  var _isButton;

  function _isButtonForDOMEvents(event, code) {
    return event.which ? (event.which === code + 1) : (event.button === code);
  }

  var legacyButtonMap = { 0: 1, 1: 4, 2: 2 };
  function _isButtonForLegacyEvents(event, code) {
    return event.button === legacyButtonMap[code];
  }

  function _isButtonForWebKit(event, code) {
    switch (code) {
      case 0: return event.which == 1 && !event.metaKey;
      case 1: return event.which == 2 || (event.which == 1 && event.metaKey);
      case 2: return event.which == 3;
      default: return false;
    }
  }

  if (window.attachEvent) {
    if (!window.addEventListener) {
      _isButton = _isButtonForLegacyEvents;
    } else {
      _isButton = function(event, code) {
        return isIELegacyEvent(event) ? _isButtonForLegacyEvents(event, code) :
         _isButtonForDOMEvents(event, code);
      }
    }
  } else if (Prototype.Browser.WebKit) {
    _isButton = _isButtonForWebKit;
  } else {
    _isButton = _isButtonForDOMEvents;
  }

  function isLeftClick(event)   { return _isButton(event, 0) }

  function isMiddleClick(event) { return _isButton(event, 1) }

  function isRightClick(event)  { return _isButton(event, 2) }

  function element(event) {
    event = Event.extend(event);

    var node = event.target, type = event.type,
     currentTarget = event.currentTarget;

    if (currentTarget && currentTarget.tagName) {
      if (type === 'load' || type === 'error' ||
        (type === 'click' && currentTarget.tagName.toLowerCase() === 'input'
          && currentTarget.type === 'radio'))
            node = currentTarget;
    }

    if (node.nodeType == Node.TEXT_NODE)
      node = node.parentNode;

    return Element.extend(node);
  }

  function findElement(event, expression) {
    var element = Event.element(event);

    if (!expression) return element;
    while (element) {
      if (Object.isElement(element) && Prototype.Selector.match(element, expression)) {
        return Element.extend(element);
      }
      element = element.parentNode;
    }
  }

  function pointer(event) {
    return { x: pointerX(event), y: pointerY(event) };
  }

  function pointerX(event) {
    var docElement = document.documentElement,
     body = document.body || { scrollLeft: 0 };

    return event.pageX || (event.clientX +
      (docElement.scrollLeft || body.scrollLeft) -
      (docElement.clientLeft || 0));
  }

  function pointerY(event) {
    var docElement = document.documentElement,
     body = document.body || { scrollTop: 0 };

    return  event.pageY || (event.clientY +
       (docElement.scrollTop || body.scrollTop) -
       (docElement.clientTop || 0));
  }


  function stop(event) {
    Event.extend(event);
    event.preventDefault();
    event.stopPropagation();

    event.stopped = true;
  }


  Event.Methods = {
    isLeftClick:   isLeftClick,
    isMiddleClick: isMiddleClick,
    isRightClick:  isRightClick,

    element:     element,
    findElement: findElement,

    pointer:  pointer,
    pointerX: pointerX,
    pointerY: pointerY,

    stop: stop
  };

  var methods = Object.keys(Event.Methods).inject({ }, function(m, name) {
    m[name] = Event.Methods[name].methodize();
    return m;
  });

  if (window.attachEvent) {
    function _relatedTarget(event) {
      var element;
      switch (event.type) {
        case 'mouseover':
        case 'mouseenter':
          element = event.fromElement;
          break;
        case 'mouseout':
        case 'mouseleave':
          element = event.toElement;
          break;
        default:
          return null;
      }
      return Element.extend(element);
    }

    var additionalMethods = {
      stopPropagation: function() { this.cancelBubble = true },
      preventDefault:  function() { this.returnValue = false },
      inspect: function() { return '[object Event]' }
    };

    Event.extend = function(event, element) {
      if (!event) return false;

      if (!isIELegacyEvent(event)) return event;

      if (event._extendedByPrototype) return event;
      event._extendedByPrototype = Prototype.emptyFunction;

      var pointer = Event.pointer(event);

      Object.extend(event, {
        target: event.srcElement || element,
        relatedTarget: _relatedTarget(event),
        pageX:  pointer.x,
        pageY:  pointer.y
      });

      Object.extend(event, methods);
      Object.extend(event, additionalMethods);

      return event;
    };
  } else {
    Event.extend = Prototype.K;
  }

  if (window.addEventListener) {
    Event.prototype = window.Event.prototype || document.createEvent('HTMLEvents').__proto__;
    Object.extend(Event.prototype, methods);
  }

  function _createResponder(element, eventName, handler) {
    var registry = Element.retrieve(element, 'prototype_event_registry');

    if (Object.isUndefined(registry)) {
      CACHE.push(element);
      registry = Element.retrieve(element, 'prototype_event_registry', $H());
    }

    var respondersForEvent = registry.get(eventName);
    if (Object.isUndefined(respondersForEvent)) {
      respondersForEvent = [];
      registry.set(eventName, respondersForEvent);
    }

    if (respondersForEvent.pluck('handler').include(handler)) return false;

    var responder;
    if (eventName.include(":")) {
      responder = function(event) {
        if (Object.isUndefined(event.eventName))
          return false;

        if (event.eventName !== eventName)
          return false;

        Event.extend(event, element);
        handler.call(element, event);
      };
    } else {
      if (!MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED &&
       (eventName === "mouseenter" || eventName === "mouseleave")) {
        if (eventName === "mouseenter" || eventName === "mouseleave") {
          responder = function(event) {
            Event.extend(event, element);

            var parent = event.relatedTarget;
            while (parent && parent !== element) {
              try { parent = parent.parentNode; }
              catch(e) { parent = element; }
            }

            if (parent === element) return;

            handler.call(element, event);
          };
        }
      } else {
        responder = function(event) {
          Event.extend(event, element);
          handler.call(element, event);
        };
      }
    }

    responder.handler = handler;
    respondersForEvent.push(responder);
    return responder;
  }

  function _destroyCache() {
    for (var i = 0, length = CACHE.length; i < length; i++) {
      Event.stopObserving(CACHE[i]);
      CACHE[i] = null;
    }
  }

  var CACHE = [];

  if (Prototype.Browser.IE)
    window.attachEvent('onunload', _destroyCache);

  if (Prototype.Browser.WebKit)
    window.addEventListener('unload', Prototype.emptyFunction, false);


  var _getDOMEventName = Prototype.K,
      translations = { mouseenter: "mouseover", mouseleave: "mouseout" };

  if (!MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED) {
    _getDOMEventName = function(eventName) {
      return (translations[eventName] || eventName);
    };
  }

  function observe(element, eventName, handler) {
    element = $(element);

    var responder = _createResponder(element, eventName, handler);

    if (!responder) return element;

    if (eventName.include(':')) {
      if (element.addEventListener)
        element.addEventListener("dataavailable", responder, false);
      else {
        element.attachEvent("ondataavailable", responder);
        element.attachEvent("onlosecapture", responder);
      }
    } else {
      var actualEventName = _getDOMEventName(eventName);

      if (element.addEventListener)
        element.addEventListener(actualEventName, responder, false);
      else
        element.attachEvent("on" + actualEventName, responder);
    }

    return element;
  }

  function stopObserving(element, eventName, handler) {
    element = $(element);

    var registry = Element.retrieve(element, 'prototype_event_registry');
    if (!registry) return element;

    if (!eventName) {
      registry.each( function(pair) {
        var eventName = pair.key;
        stopObserving(element, eventName);
      });
      return element;
    }

    var responders = registry.get(eventName);
    if (!responders) return element;

    if (!handler) {
      responders.each(function(r) {
        stopObserving(element, eventName, r.handler);
      });
      return element;
    }

    var i = responders.length, responder;
    while (i--) {
      if (responders[i].handler === handler) {
        responder = responders[i];
        break;
      }
    }
    if (!responder) return element;

    if (eventName.include(':')) {
      if (element.removeEventListener)
        element.removeEventListener("dataavailable", responder, false);
      else {
        element.detachEvent("ondataavailable", responder);
        element.detachEvent("onlosecapture", responder);
      }
    } else {
      var actualEventName = _getDOMEventName(eventName);
      if (element.removeEventListener)
        element.removeEventListener(actualEventName, responder, false);
      else
        element.detachEvent('on' + actualEventName, responder);
    }

    registry.set(eventName, responders.without(responder));

    return element;
  }

  function fire(element, eventName, memo, bubble) {
    element = $(element);

    if (Object.isUndefined(bubble))
      bubble = true;

    if (element == document && document.createEvent && !element.dispatchEvent)
      element = document.documentElement;

    var event;
    if (document.createEvent) {
      event = document.createEvent('HTMLEvents');
      event.initEvent('dataavailable', bubble, true);
    } else {
      event = document.createEventObject();
      event.eventType = bubble ? 'ondataavailable' : 'onlosecapture';
    }

    event.eventName = eventName;
    event.memo = memo || { };

    if (document.createEvent)
      element.dispatchEvent(event);
    else
      element.fireEvent(event.eventType, event);

    return Event.extend(event);
  }

  Event.Handler = Class.create({
    initialize: function(element, eventName, selector, callback) {
      this.element   = $(element);
      this.eventName = eventName;
      this.selector  = selector;
      this.callback  = callback;
      this.handler   = this.handleEvent.bind(this);
    },

    start: function() {
      Event.observe(this.element, this.eventName, this.handler);
      return this;
    },

    stop: function() {
      Event.stopObserving(this.element, this.eventName, this.handler);
      return this;
    },

    handleEvent: function(event) {
      var element = Event.findElement(event, this.selector);
      if (element) this.callback.call(this.element, event, element);
    }
  });

  function on(element, eventName, selector, callback) {
    element = $(element);
    if (Object.isFunction(selector) && Object.isUndefined(callback)) {
      callback = selector, selector = null;
    }

    return new Event.Handler(element, eventName, selector, callback).start();
  }

  Object.extend(Event, Event.Methods);

  Object.extend(Event, {
    fire:          fire,
    observe:       observe,
    stopObserving: stopObserving,
    on:            on
  });

  Element.addMethods({
    fire:          fire,

    observe:       observe,

    stopObserving: stopObserving,

    on:            on
  });

  Object.extend(document, {
    fire:          fire.methodize(),

    observe:       observe.methodize(),

    stopObserving: stopObserving.methodize(),

    on:            on.methodize(),

    loaded:        false
  });

  if (window.Event) Object.extend(window.Event, Event);
  else window.Event = Event;
})();

(function() {
  /* Support for the DOMContentLoaded event is based on work by Dan Webb,
     Matthias Miller, Dean Edwards, John Resig, and Diego Perini. */

  var timer;

  function fireContentLoadedEvent() {
    if (document.loaded) return;
    if (timer) window.clearTimeout(timer);
    document.loaded = true;
    document.fire('dom:loaded');
  }

  function checkReadyState() {
    if (document.readyState === 'complete') {
      document.stopObserving('readystatechange', checkReadyState);
      fireContentLoadedEvent();
    }
  }

  function pollDoScroll() {
    try { document.documentElement.doScroll('left'); }
    catch(e) {
      timer = pollDoScroll.defer();
      return;
    }
    fireContentLoadedEvent();
  }

  if (document.addEventListener) {
    document.addEventListener('DOMContentLoaded', fireContentLoadedEvent, false);
  } else {
    document.observe('readystatechange', checkReadyState);
    if (window == top)
      timer = pollDoScroll.defer();
  }

  Event.observe(window, 'load', fireContentLoadedEvent);
})();

Element.addMethods();

/*------------------------------- DEPRECATED -------------------------------*/

Hash.toQueryString = Object.toQueryString;

var Toggle = { display: Element.toggle };

Element.Methods.childOf = Element.Methods.descendantOf;

var Insertion = {
  Before: function(element, content) {
    return Element.insert(element, {before:content});
  },

  Top: function(element, content) {
    return Element.insert(element, {top:content});
  },

  Bottom: function(element, content) {
    return Element.insert(element, {bottom:content});
  },

  After: function(element, content) {
    return Element.insert(element, {after:content});
  }
};

var $continue = new Error('"throw $continue" is deprecated, use "return" instead');

var Position = {
  includeScrollOffsets: false,

  prepare: function() {
    this.deltaX =  window.pageXOffset
                || document.documentElement.scrollLeft
                || document.body.scrollLeft
                || 0;
    this.deltaY =  window.pageYOffset
                || document.documentElement.scrollTop
                || document.body.scrollTop
                || 0;
  },

  within: function(element, x, y) {
    if (this.includeScrollOffsets)
      return this.withinIncludingScrolloffsets(element, x, y);
    this.xcomp = x;
    this.ycomp = y;
    this.offset = Element.cumulativeOffset(element);

    return (y >= this.offset[1] &&
            y <  this.offset[1] + element.offsetHeight &&
            x >= this.offset[0] &&
            x <  this.offset[0] + element.offsetWidth);
  },

  withinIncludingScrolloffsets: function(element, x, y) {
    var offsetcache = Element.cumulativeScrollOffset(element);

    this.xcomp = x + offsetcache[0] - this.deltaX;
    this.ycomp = y + offsetcache[1] - this.deltaY;
    this.offset = Element.cumulativeOffset(element);

    return (this.ycomp >= this.offset[1] &&
            this.ycomp <  this.offset[1] + element.offsetHeight &&
            this.xcomp >= this.offset[0] &&
            this.xcomp <  this.offset[0] + element.offsetWidth);
  },

  overlap: function(mode, element) {
    if (!mode) return 0;
    if (mode == 'vertical')
      return ((this.offset[1] + element.offsetHeight) - this.ycomp) /
        element.offsetHeight;
    if (mode == 'horizontal')
      return ((this.offset[0] + element.offsetWidth) - this.xcomp) /
        element.offsetWidth;
  },


  cumulativeOffset: Element.Methods.cumulativeOffset,

  positionedOffset: Element.Methods.positionedOffset,

  absolutize: function(element) {
    Position.prepare();
    return Element.absolutize(element);
  },

  relativize: function(element) {
    Position.prepare();
    return Element.relativize(element);
  },

  realOffset: Element.Methods.cumulativeScrollOffset,

  offsetParent: Element.Methods.getOffsetParent,

  page: Element.Methods.viewportOffset,

  clone: function(source, target, options) {
    options = options || { };
    return Element.clonePosition(target, source, options);
  }
};

/*--------------------------------------------------------------------------*/

if (!document.getElementsByClassName) document.getElementsByClassName = function(instanceMethods){
  function iter(name) {
    return name.blank() ? null : "[contains(concat(' ', @class, ' '), ' " + name + " ')]";
  }

  instanceMethods.getElementsByClassName = Prototype.BrowserFeatures.XPath ?
  function(element, className) {
    className = className.toString().strip();
    var cond = /\s/.test(className) ? $w(className).map(iter).join('') : iter(className);
    return cond ? document._getElementsByXPath('.//*' + cond, element) : [];
  } : function(element, className) {
    className = className.toString().strip();
    var elements = [], classNames = (/\s/.test(className) ? $w(className) : null);
    if (!classNames && !className) return elements;

    var nodes = $(element).getElementsByTagName('*');
    className = ' ' + className + ' ';

    for (var i = 0, child, cn; child = nodes[i]; i++) {
      if (child.className && (cn = ' ' + child.className + ' ') && (cn.include(className) ||
          (classNames && classNames.all(function(name) {
            return !name.toString().blank() && cn.include(' ' + name + ' ');
          }))))
        elements.push(Element.extend(child));
    }
    return elements;
  };

  return function(className, parentElement) {
    return $(parentElement || document.body).getElementsByClassName(className);
  };
}(Element.Methods);

/*--------------------------------------------------------------------------*/

Element.ClassNames = Class.create();
Element.ClassNames.prototype = {
  initialize: function(element) {
    this.element = $(element);
  },

  _each: function(iterator) {
    this.element.className.split(/\s+/).select(function(name) {
      return name.length > 0;
    })._each(iterator);
  },

  set: function(className) {
    this.element.className = className;
  },

  add: function(classNameToAdd) {
    if (this.include(classNameToAdd)) return;
    this.set($A(this).concat(classNameToAdd).join(' '));
  },

  remove: function(classNameToRemove) {
    if (!this.include(classNameToRemove)) return;
    this.set($A(this).without(classNameToRemove).join(' '));
  },

  toString: function() {
    return $A(this).join(' ');
  }
};

Object.extend(Element.ClassNames.prototype, Enumerable);

/*--------------------------------------------------------------------------*/

(function() {
  window.Selector = Class.create({
    initialize: function(expression) {
      this.expression = expression.strip();
    },

    findElements: function(rootElement) {
      return Prototype.Selector.select(this.expression, rootElement);
    },

    match: function(element) {
      return Prototype.Selector.match(element, this.expression);
    },

    toString: function() {
      return this.expression;
    },

    inspect: function() {
      return "#<Selector: " + this.expression + ">";
    }
  });

  Object.extend(Selector, {
    matchElements: function(elements, expression) {
      var match = Prototype.Selector.match,
          results = [];

      for (var i = 0, length = elements.length; i < length; i++) {
        var element = elements[i];
        if (match(element, expression)) {
          results.push(Element.extend(element));
        }
      }
      return results;
    },

    findElement: function(elements, expression, index) {
      index = index || 0;
      var matchIndex = 0, element;
      for (var i = 0, length = elements.length; i < length; i++) {
        element = elements[i];
        if (Prototype.Selector.match(element, expression) && index === matchIndex++) {
          return Element.extend(element);
        }
      }
    },

    findChildElements: function(element, expressions) {
      var selector = expressions.toArray().join(', ');
      return Prototype.Selector.select(selector, element || document);
    }
  });
})();
Object.extend(document, {
    isDocReady: false,
    isDocLoaded: false,
    ready: function(fn) { Event.observe(document, "doc:ready", fn); },
    load: function(fn) { Event.observe(document, "doc:loaded", fn); }
});
Event.observe(document, "dom:loaded", function() {
    Event.fire(document, "doc:ready");
    document.isDocReady = true;
    if (document.isDocLoaded)
        Event.fire(document, "doc:loaded");
});
Event.observe(window, "load", function() {
    document.isDocLoaded = true;
    if (!document.isDocReady) return;
    Event.fire(document, "doc:loaded");
});
Event.observe(document, "click", function() {
    hideFilter.apply(this, arguments);
});


/* Use the two following functions */
document.ready(function(){
    //ok to run some code
});
document.load(function(){
    //ok for DOM manipulation
    Event.observe(document.body, 'mouseup', function(e) {
        irwButtonPressed = false;
    });
    // Add mouseevts for IE for color filter header
    if (Prototype.Browser.IE){
        if($('filterByColor') != null){
            Event.observe($('filterByColor'), "mouseover", function() {
                toggleFilterColorBg();
            });
            Event.observe($('filterByColor'), "mouseout", function() {
                toggleFilterColorBg();
            });
        }
    }
    // Check if the base target should be set to _self since this is needed by IHP2 in the Kiosk
    if (window.dialogArguments) {
        var mArgs = window.dialogArguments;
        if (mArgs.kiosk) { 
            var vBase = document.createElement('base');
            vBase.setAttribute('target', '_self'); 
            document.getElementsByTagName('head')[0].appendChild(vBase);
        }
    }
    // Check for global slideshow array
    if(typeof(js_fn_SLIDE_SHOW_IDS) != 'undefined') {
        slideshow = new Slideshow();
    };
    
    $$('#main input').each(function(input) {    
        /**
        * Start of PR IKEA00697568 
        **/
        var inputVisible = false;                
            try{
                inputVisible = input.visible();
            }catch(err){
                    if(input.style.display == "block"){
                        inputVisible = true;
                    }
            }
        if (inputVisible && (input.id == 'partNumber' || input.id == 'txtQuantity' || input.id == 'quantity')) {   
            /**
            * End of PR IKEA00697568 
            **/
  
            input.observe('keydown', function(event) { 
                if(event.keyCode == Event.KEY_RETURN) { 
                    if(input.up('#formShoppingListLeftNav')) {
                        // shopping list
                        onAddItemToShoppingList();
                    } else if(input.up('#ArticleAddForm')) {
                        // shopping cart
                        respondToAddToCart();      
                    }
                }
            });
        }
    });
});

function irwInit() {
    if (navigator.platform.toLowerCase().indexOf('mac') != -1) {
        var css = new Element('link', {'href':'/ms/css/macos.css', 'type':'text/css', 'rel':'stylesheet'});
        $$('head')[0].insert(css);
    }
}

var irwButtonPressed = false;

/**
* This function is used by the createButton functions to prevent duplicate IDs on a page
*/
var buttons = new Hash();
function generateButtonID(_id) {
    var newid = _id;
    var counter = 0;
    if (buttons.get(newid) != null) {
        counter = parseInt(buttons.get(newid)) + 1;
        newid = _id + "_" + counter;
    }
    buttons.set(_id, counter);
    return newid;
}    

var buttonTemplate = new Template("<div class=\"buttonContainer\">" + 
    "<a id=\"#{buttonId}\" class=\"#{buttonClass}\" href=\"#\" onclick=\"return false;\">" +
        "<div class=\"buttonLeft#{buttonLeftClass}\">&nbsp;</div>" +
        "<div class=\"buttonCaption#{buttonCaptionClass}\">" + 
            "<input type=\"button\" value=\"#{buttonCaption}\" />" + 
        "</div>" + 
        "<div class=\"buttonRight#{buttonRightClass}\">&nbsp;</div>" + 
    "</a>" + 
"</div>");

var newButtonTemplate = new Template("<div class=\"buttonContainer\">" + 
    "<a id=\"#{buttonId}\" class=\"#{buttonClass}\" href=\"#\" onclick=\"return false;\">" +                 
            "<input type=\"button\" value=\"#{buttonCaption}\" />" + 
    "</a>" + 
"</div>");

var scriptTemplate = new Template("<script type=\"text/javascript\">\n" + 
    "Event.observe($('#{buttonId}'), 'click', function(e) { if (!this.hasClassName('disabledButton')) {#{buttonFunction};}});" + 
    "var input = $('#{buttonId}').down('input');" + 
    "Event.observe(input, 'mousedown' , function(e) { if (!this.hasClassName('pressed')) this.addClassName('pressed'); if (!this.hasClassName('down')) this.addClassName('down'); if (this.hasClassName('downNoMove')) this.removeClassName('downNoMove'); irwButtonPressed = true;    });" +
    "Event.observe(input, 'mouseup' , function(e) { if (this.hasClassName('down')) this.removeClassName('down'); if (this.hasClassName('pressed')) this.removeClassName('pressed'); if (this.hasClassName('downNoMove')) this.removeClassName('downNoMove'); });" +
    "Event.observe(input, 'mouseout' , function(e) {    if (this.hasClassName('down')) this.removeClassName('down'); if (this.hasClassName('downNoMove')) this.removeClassName('downNoMove'); var a = this.up('a'); if (a.hasClassName('hover')) a.removeClassName('hover'); });" +
    "Event.observe(input, 'mouseover' , function(e) { var a = this.up('a'); if (!a.hasClassName('hover')) a.addClassName('hover'); if (this.hasClassName('pressed')) { if (irwButtonPressed) {    this.addClassName('down'); this.addClassName('downNoMove');    } else { this.removeClassName('pressed');    }    }    });" +
"</script>");

/**
* Creates new button with caption, class and listener function
* The listener function only executes if the button is enabled,
* that is the button does not contains the class 'disabledButton'
*
* The last (optional) parameter can be used if the placement of the
* button needs to be specified. This parameter should be a DOM-Element
* in which the button will be placed. If this parameter is not specified
* then the button will be placed at the place of the function call using
* document.write. 
*
* Each button gets a unique id, like irw_button_1, irw_button_2, etc.
* The function returns the generated ID
*/
function createButton(_caption, _id, _class, _func, _placementObj) {
    // Check if the _placementObj optional parameter is set,
    // and if not - set it to the default value of false
    if (typeof(_placementObj) == "undefined") {
        _placementObj = false;
    }
    
    //check if there is only three parameters
    if (typeof(_func) == "undefined") {
        //assume that no id is specified
        _func = _class;
        _class = _id;
        _id = "irw_button";
    }
    var newid = generateButtonID(_id);
    var obj = new Object();
    obj.buttonId = newid;
    obj.buttonClass = _class;
    obj.buttonCaption = _caption;
    obj.buttonSize = _caption.length;
    obj.buttonLeftClass = "";
    obj.buttonCaptionClass = "";
    obj.buttonRightClass = "";    
    var reg = new RegExp("([a-zA-Z]+)Button","g");
    var m = null;
    var c = "";
    while (m = reg.exec(_class)) {
        if (m[1] != "disabled") {
            c += " " + m[1];
        }
    }
    if (c.length > 0) {
        var tmp = c.substring(1).split(' ');
        for (var i=0;i<tmp.length;i++) {
            obj.buttonLeftClass += " " + "buttonLeft" + tmp[i].substring(0,1).toUpperCase() + tmp[i].substring(1);
            obj.buttonCaptionClass += " " + "buttonCaption" + tmp[i].substring(0,1).toUpperCase() + tmp[i].substring(1);
            obj.buttonRightClass += " " + "buttonRight" + tmp[i].substring(0,1).toUpperCase() + tmp[i].substring(1);
        }
    }
    if (_placementObj) {
        _placementObj.update(buttonTemplate.evaluate(obj));
    } else {
        document.write(buttonTemplate.evaluate(obj));
    }
    Event.observe($(newid), 'click', function(e) {
        if (!this.hasClassName('disabledButton')) {
            _func(e); 
        }
    });
    var input = $(newid).down('input');
    Event.observe(input, 'mousedown' , function(e) {
        if (!this.hasClassName('pressed')) this.addClassName('pressed');    
        if (!this.hasClassName('down')) this.addClassName('down');
        if (this.hasClassName('downNoMove')) this.removeClassName('downNoMove');
        irwButtonPressed = true;
    });
    Event.observe(input, 'mouseup' , function(e) {
        if (this.hasClassName('down')) this.removeClassName('down');
        if (this.hasClassName('pressed')) this.removeClassName('pressed');            
        if (this.hasClassName('downNoMove')) this.removeClassName('downNoMove');
    });
    Event.observe(input, 'mouseout' , function(e) {
        if (this.hasClassName('down')) this.removeClassName('down');
        if (this.hasClassName('downNoMove')) this.removeClassName('downNoMove');
        var a = this.up('a');
        if (a.hasClassName('hover')) a.removeClassName('hover');
    });
    Event.observe(input, 'mouseover' , function(e) {
        var a = this.up('a');
        if (!a.hasClassName('hover')) a.addClassName('hover');
        if (this.hasClassName('pressed')) {
            if (irwButtonPressed) {
                this.addClassName('down');
                this.addClassName('downNoMove');                
            } else {
                this.removeClassName('pressed');
            }
        }
    });
}

/**
* This function creates a string with the button and a script tag,
* which creates the observer. It is used by commerce for creating content
* dynamically, for example in the "Add to shopping cart" popup window.
* 
* It works in the same way as the previous function, except that the _func
* parameter is a string representation of a existing javascript function
*/
function createButtonLayout(_caption, _id, _class, _func) {
    //check if there is only three parameters
    if (typeof(_func) == "undefined") {
        //assume that no id is specified
        _func = _class;
        _class = _id;
        _id = "irw_button";
    }
    var newid = generateButtonID(_id);
    var newfunc = _func + (_func.indexOf('(') == -1 ? '(e)' : '');
    var obj = new Object();
    obj.buttonId = newid;
    obj.buttonClass = _class;
    obj.buttonCaption = _caption;
    obj.buttonSize = _caption.length;
    obj.buttonLeftClass = "";
    obj.buttonCaptionClass = "";
    obj.buttonRightClass = "";
    obj.buttonFunction = newfunc;    
    var reg = new RegExp("([a-zA-Z]+)Button","g");
    var m = null;
    var c = "";
    while (m = reg.exec(_class)) {
        if (m[1] != "disabled") {
            c += " " + m[1];
        }
    }
    if (c.length > 0) {
        var tmp = c.substring(1).split(' ');
        for (var i=0;i<tmp.length;i++) {
            obj.buttonLeftClass += " " + "buttonLeft" + tmp[i].substring(0,1).toUpperCase() + tmp[i].substring(1);
            obj.buttonCaptionClass += " " + "buttonCaption" + tmp[i].substring(0,1).toUpperCase() + tmp[i].substring(1);
            obj.buttonRightClass += " " + "buttonRight" + tmp[i].substring(0,1).toUpperCase() + tmp[i].substring(1);
        }
    }
    
    return buttonTemplate.evaluate(obj) + scriptTemplate.evaluate(obj);
}

/**
* This function is used to hide all filter dropdowns (e.g. div layer)
*/
function hideFilter() {
    var iterations = 0;
    var isFilter = function(ele) {
        if (iterations++ >= 5) {
            return false;
        }
        
        if (ele !== null) {
            if (ele.className) {
                if ((ele.className.indexOf("filterDropdowns") >= 0) || (ele.className.indexOf("filterDropdown") >= 0) || (ele.className.indexOf("filter") >= 0))  {
                    return true;
                }
            }
        
            if (ele.tagName) {
                if (ele.tagName.toLowerCase() != "body") {
                    return isFilter(ele.parentNode);
                }
            }
        }
        
        return false;
    };
    if (isFilter(arguments[0].target)) return;

    $$('.filterDropdowns .filterDropdown').each(function(dd){
        dd.hide();
    });
    $$('#filterContainer .filter').each(function(btn){
        btn.removeClassName('filterActive');
    });
}

/**
* This function is used for show/hide of a filter dropdown (e.g. div layer)
* It is used on department/category pages to filter products in the product listing
* @param btn        The element clicked to show/hide dropdown
* @param filter        The dropdown layer to show/hide onclick
*/
function toggleFilter(btn,filter){
    var offL = -5;
    var offT = $('filterContainer').getHeight()-6;
    
    filter.clonePosition(btn,{setHeight:false, setWidth:false, offsetLeft:offL, offsetTop:offT});
    // Min width of dropdown should be same as button
    var btnW = btn.getWidth();
    var filterW = filter.getWidth();
    if(filterW < btnW){filter.setStyle({width:(btnW)+'px'})};
    
    // Hide all first (but myself)
    $$('.filterDropdowns .filterDropdown').each(function(dd){
        if(filter.id != dd.id){dd.hide();}
    });
    $$('#filterContainer .filter').each(function(dd){
        if(btn.id != dd.id){dd.removeClassName('filterActive');}
    });
    
    // Toggle the filter
    filter.toggle();
    btn.toggleClassName('filterActive');
}

/**
* Toggles background image (png) for color filter btn
*/
function toggleFilterColorBg(){
    var el = $$('.filter .color')[0];
    el.toggleClassName('colorHover');
}

/**
* Checks if the buyOnline container fits on the filter row. If not, displays it on the pagination row instead
* It is used on department/category pages 
*/
function printBuyOnline() {
    var fc = $('filterContainer') != null ? $('filterContainer').getWidth() : 0;
    var fbo = $('filterBuyableOnline') != null ? $('filterBuyableOnline').getWidth() : 0;
    var fbt = 0, fbc = 0, sb = 0;
    
    if($('filterByType') != null){ fbt = $('filterByType').getWidth() };
    if($('filterByColor') != null){ fbc = $('filterByColor').getWidth() };
    if($('sortBy') != null){ sb = $('sortBy').getWidth() };

    var btnW = fbt + fbc + sb;
    var contentW = fbo + btnW +5;
    
    if(contentW >= fc){
        if($('paginationBuyableOnline') != null){ $('paginationBuyableOnline').show() };
        if($('filterBuyableOnline') != null){ $('filterBuyableOnline').hide() };               
    }
}

/**
* Shows all the compareRow rows in the product listing on page load. 
* This is because they should not be visible if user has no JS.
*/
function displayOfNoJsContent(){
    var prodContainer = $('productsContainer');
    if(prodContainer == null) return;
    var objects = prodContainer.select('.compareRow');
    objects.each(function(item) {
        item.show();
    });
}


/*  NLP Releated JS  */

function loadNlpProducts(placeHolder, marketCode, products) {
  //  alert(products.length);     
    var langs = marketCode.split("_");
    
    var params = "?type=xml&dataset=normal,prices,allimages,parentCategories";
    var prodTemplate = new Template("<div class=\"product\"><a class=\"image\" href=\"#{url}\"><img src=\"#{image}\" border=\"0\" /><img class=\"newLowerPriceImage\" src=\"/ms/img/nlp/#{market}/nlp_01.png\" border=\"0\" /></a><div class=\"name\">#{name}</div><div class=\"description\">#{description}</div><div class=\"link\"><a href=\"#{url}\">#{link}</a></div></div>");
    var btnTemplate = new Template("<a class=\"leftBtn\"   href=\"javascript:nlpMoveLeft('#{id}',#{count});\"></a><a href=\"javascript:nlpMoveRight('#{id}',#{count});\" class=\"rightBtn\"></a>");
    
    var addNlpProducts = function(xml) {

         
        var p = xml.getElementsByTagName('product');
        var html = btnTemplate.evaluate({'id':placeHolder, 'count':products.length}); 
        html += "<div class=\"nlpClipArea\"><div class=\"products\" style=\"width:" + (142*products.length) + "px;\">";
        for (var i = 0; i < p.length; i++) {
            var obj = {};
            var item = p[i].getElementsByTagName('item')[0];
            obj.url = item.getElementsByTagName('URL')[0].childNodes[0].nodeValue;    
            obj.name = item.getElementsByTagName('name')[0].childNodes[0].nodeValue;
            obj.image = item.getElementsByTagName('images')[0].getElementsByTagName('thumb')[0].childNodes[0].childNodes[0].nodeValue;
            var price = item.getElementsByTagName('prices')[0].getElementsByTagName('normal')[0].getElementsByTagName('priceNormal')[0].childNodes[0].nodeValue;
            obj.description = products[i].description.replace('{0}',price);
            obj.link = products[i].link;
            obj.market = marketCode;
            html += prodTemplate.evaluate(obj);
        }
        html += "</div></div>";
            
        $(placeHolder).update(html);
                
    }    

    var requestUrl = "/" + langs[1].toLowerCase() + "/" + langs[0].toLowerCase() + "/catalog/products/";
    products.each(function(product) {
        requestUrl += product.id + ',';        
    });    
    requestUrl = requestUrl.substr(0,requestUrl.length-1) + params;
    
   // alert(requestUrl);
    
    new Ajax.Request(requestUrl, {
        method: 'get',
        contentType: 'application/xml',
        onSuccess: function(response) {
            addNlpProducts(response.responseXML);        
        }
    });
            
}

function nlpMoveLeft(placeHolder, count) {
    var pDiv = $(placeHolder).select('.products')[0];
    var m = pDiv.style.width.match("([0-9]+)");
    var w = m != null && m.length > 0 ? m[0] : 0;
    var pw = w/count;
    m = pDiv.style.left.match("([0-9]+)");
    var cl = m != null && m.length > 0 ? m[0] : 0;
    var c = cl/pw;
    c = (c+count-1) % count;
    new Effect.Move(pDiv, { x: -c*pw, y: 0, mode: 'absolute', duration:0.0 });
}


function nlpMoveRight(placeHolder, count) {
    var pDiv = $(placeHolder).select('.products')[0];
    var m = pDiv.style.width.match("([0-9]+)");
    var w = m != null && m.length > 0 ? m[0] : 0;
    var pw = w/count;
    m = pDiv.style.left.match("([0-9]+)");
    var cl = m != null && m.length > 0 ? m[0] : 0;
    var c = cl/pw;
    c = (c+1) % count;
    new Effect.Move(pDiv, { x: -c*pw, y: 0, mode: 'absolute', duration:0.0 });    
}



/*  NLP Releated JS ENDS  */


/** 
    Global IOWS functions wrapped in the Iows namespace.
    Functions used to parse the IOWS xml returned and display it in HTML format.
*/

var Iows = {
    /** Base parameters for the call **/
    method: "get",
    type: "xml",
    contentType: 'application/xml',
    dataset: "normal,prices,allimages,parentCategories,attributes",

    /** Returns the value from a specific node
    * @param node       : The element representing the node
    * @param tagName    : The element representing the tagName
    * @return           : The node value if present, otherwise an empty string */
    getNodeVal: function(node,tagName){
        try{
            var val = node.getElementsByTagName(tagName)[0].firstChild.nodeValue;
        }catch(e){
            var val = "";
        }
        return val;
    },

    /** 
    * Extracts the measures from the measure node and uses a template to return the html snippet
    * @param node           : The element representing the measure node
    * @param dimTemplate    : The template to evaluate a dimension
    * @param template       : The template to evaluate and return the measures
    * @param moreText       : A string representing the "more" text
    * @param moreLink       : A string representing the link for the "more" text
    * @return               : The evaluated html snippet from the template */
    getMeasures: function(node,dimTemplate,template,moreText,moreLink){
        var measure = "";
        
        if(node != "null null" && node != "null"){
            var array = node.replace("</v></m></rm> <rm><m><d>", "</v></m><m><d>").replace("<rm><m><d>","").replace("</v></m></rm>","").split("</v></m><m><d>");
            var len = array.length;
            for (var i=0;i<len;i++){
                measure += dimTemplate.evaluate({dimension: array[i].replace("</d><v>",":&nbsp;")});
                if(i==2){break;}
            }
            measure = '<div class=\"dimensions\">' + measure + '</div>';
            
            /*if (len > 3) {
                measure = measure + template.evaluate({text: moreText, link: moreLink});
            }*/
        }
        return measure;
    },

    /** 
    * Checks if the product has any parent in series, systems or collections and returns the proper one
    * @param template   : The template to use to evaluate and return the html 
    * @param node       : The element representing the Item node
    * @return           : The evaluated html snippet from the template */
    getSSC: function(node,template){
        var categoryNames = new Array("collections","systems","series");
        var categories = node.getElementsByTagName("categories")[0];
        var item = node.getElementsByTagName('item')[0];
        var partNo = this.getNodeVal(item,'partNumber');
        if(typeof(categories) != 'undefined' && categories != null){
            for(var i = 0; i < 3;i++){
                var tmp = categories.getElementsByTagName(categoryNames[i]);
                var category = tmp[0].getElementsByTagName("category");
                if(category != null && category.length > 0){
                    var ssc = {"name":this.getNodeVal(category[0],'name'),
                                "link":this.getNodeVal(category[0],'URL'),
                                "partNum":partNo};
                                
                    return template.evaluate(ssc);
                }
            }
        }else{
            return "";
        }
    },

    /**
    * Parses the price information an returns an object with the price information.
    * @param node   : The element representing the node
    * @return       : An object with the following properties set: price, pricePkg family, familyPkg */
    getPrices: function(node){
        var obj = new Object();
        var prices = node.getElementsByTagName("prices")[0];
        var normal = this.getPricePart(prices,"normal");
        obj.price = normal.price;
        obj.pricePkg = normal.pricePkg;
        var family = this.getPricePart(prices,"family-normal");
        obj.family = family.price;
        obj.familyPkg = family.pricePkg;
        var dual = this.getPricePart(prices,"second");
        obj.priceDual = dual.price;
        obj.priceDualPkg = dual.pricePkg;
        
        try{
            obj.prfCharge = prices.getElementsByTagName("normal")[0].getElementsByTagName("priceNormal")[0].getAttribute("prfChargeFormatted");
            obj.noPrfCharge = prices.getElementsByTagName("normal")[0].getElementsByTagName("priceNormal")[0].getAttribute("priceWithNoPrfChargeFormatted");            
            obj.comparisonPrice = prices.getElementsByTagName('normal')[0].getElementsByTagName('priceNormal')[0].getAttribute('comparisonPrice');
            obj.comparisonUnit = prices.getElementsByTagName('normal')[0].getElementsByTagName('priceNormal')[0].getAttribute('unit');
            obj.comparisonFamilyPrice = prices.getElementsByTagName('family-normal')[0].getElementsByTagName('priceNormal')[0].getAttribute('comparisonPrice');
        }
        catch (err){}

        return obj;
    }, 

    /**
    * Retrieves the set price of a price node. 
    * The method returns "priceChanged" if set, otherwise "priceNormal" is returned.
    * @param node       : The element representing the "prices" node
    * @param tagName    : The name of the prices-node to retrieve the price from
    * @return           : An object with the following properties set: price, pricePkg */
    getPricePart: function(node,tagName){
        var obj = new Object();
        var normal = node.getElementsByTagName(tagName)[0];
        var unitPrice = node.getAttribute("unitPricePrimary");
        var suffix = "";
        var perUnit = "";
        
        // If unitprice attribute exists, add suffix to get price from PerUnit node
        if(unitPrice != null && unitPrice == "true"){
            suffix = "PerUnit";
            unitPrice = true;
        }
        
        // Test if price changed exists, else get normal price
        var price = this.getNodeVal(normal,"priceChanged"+suffix);
        if(price.blank()){
            obj.price = this.getNodeVal(normal,"priceNormal"+suffix);
            if(unitPrice){
                obj.pricePkg = this.getNodeVal(normal,"priceNormal");
                obj.price = obj.price + this.getUnitSuffix(normal,"priceNormal"+suffix);
            }
        }else{
            obj.price = price;
            if(unitPrice){
                obj.pricePkg = this.getNodeVal(normal,"priceChanged");
                obj.price = obj.price + this.getUnitSuffix(normal,"priceChanged"+suffix);
            }
        }
        
        return obj;
    },
    
    /**
    * The method returns a unit suffix from the <priceXxxxxPerUnit> node if it exists, otherwise an empty string.
    * @param node       : The element representing the price node
    * @param tagName    : The name of the price-node to retrieve the price from
    * @return           : The unit suffix  */
    getUnitSuffix: function(node,tagName){
        var suffix = "";
        try{
            var priceNode = node.getElementsByTagName(tagName)[0];
            unit = priceNode.getAttribute("unit");
            if(unit != null){
                suffix = " / " + unit;
            };
        }catch(err){};
        
        return suffix;
    }
}


/* To display Item number on the PIP */
var pipArticleNumber = function(){
 var articleNumlength = 8;
 return {
  formatArtNumber : function (partNumber){ 
   if(partNumber.length == articleNumlength){
    partNumber = partNumber.substring(0,3)+"."+partNumber.substring(3,6)+"."+partNumber.substring(6,8);
    return partNumber;
   }else{
    partNumber = partNumber.substring(1,4)+"."+partNumber.substring(4,7)+"."+partNumber.substring(7,9);
    return partNumber;
   }
  }
 };
}();

/**
* Creates new button with caption, class and listener function
* The listener function only executes if the button is enabled,
* that is the button does not contains the class 'disabledButton'
*
* The last (optional) parameter can be used if the placement of the
* button needs to be specified. This parameter should be a DOM-Element
* in which the button will be placed. If this parameter is not specified
* then the button will be placed at the place of the function call using
* document.write. 
*
* Each button gets a unique id, like irw_button_1, irw_button_2, etc.
* The function returns the generated ID
*/
function createNewButton(_caption, _id, _class, _func, _placementObj) {
    // Check if the _placementObj optional parameter is set,
    // and if not - set it to the default value of false
    if (typeof(_placementObj) == "undefined") {
        _placementObj = false;
    }
    
    //check if there is only three parameters
    if (typeof(_func) == "undefined") {
        //assume that no id is specified
        _func = _class;
        _class = _id;
        _id = "irw_button";
    }
    var newid = generateButtonID(_id);
    var obj = new Object();
    obj.buttonId = newid;
    obj.buttonClass = _class;
    obj.buttonCaption = _caption;
    obj.buttonSize = _caption.length;    
    var reg = new RegExp("([a-zA-Z]+)Button","g");
    var m = null;
    var c = "";
    while (m = reg.exec(_class)) {
        if (m[1] != "disabled") {
            c += " " + m[1];
        }
    }  
    if (_placementObj) {
        _placementObj.update(newButtonTemplate.evaluate(obj));
    } else {
        document.write(newButtonTemplate.evaluate(obj));
    }
    Event.observe($(newid), 'click', function(e) {
        if (!this.hasClassName('disabledButton')) {
            _func(e); 
        }
    });
    var input = $(newid).down('input');
    Event.observe(input, 'mousedown' , function(e) {
        if (!this.hasClassName('pressed')) this.addClassName('pressed');    
        if (!this.hasClassName('down')) this.addClassName('down');
        if (this.hasClassName('downNoMove')) this.removeClassName('downNoMove');
        irwButtonPressed = true;
    });
    Event.observe(input, 'mouseup' , function(e) {
        if (this.hasClassName('down')) this.removeClassName('down');
        if (this.hasClassName('pressed')) this.removeClassName('pressed');            
        if (this.hasClassName('downNoMove')) this.removeClassName('downNoMove');
    });
    Event.observe(input, 'mouseout' , function(e) {
        if (this.hasClassName('down')) this.removeClassName('down');
        if (this.hasClassName('downNoMove')) this.removeClassName('downNoMove');
        var a = this.up('a');
        if (a.hasClassName('hover')) a.removeClassName('hover');
    });
    Event.observe(input, 'mouseover' , function(e) {
        var a = this.up('a');
        if (!a.hasClassName('hover')) a.addClassName('hover');
        if (this.hasClassName('pressed')) {
            if (irwButtonPressed) {
                this.addClassName('down');
                this.addClassName('downNoMove');                
            } else {
                this.removeClassName('pressed');
            }
        }
    });
}
// script.aculo.us effects.js v1.8.1, Thu Jan 03 22:07:12 -0500 2008

// Copyright (c) 2005-2007 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us)
// Contributors:
//  Justin Palmer (http://encytemedia.com/)
//  Mark Pilgrim (http://diveintomark.org/)
//  Martin Bialasinki
// 
// script.aculo.us is freely distributable under the terms of an MIT-style license.
// For details, see the script.aculo.us web site: http://script.aculo.us/ 
// script.aculo.us effects.js v1.8.1, Thu Jan 03 22:07:12 -0500 2008

// Copyright (c) 2005-2007 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us)
// Contributors:
//  Justin Palmer (http://encytemedia.com/)
//  Mark Pilgrim (http://diveintomark.org/)
//  Martin Bialasinki
// 
// script.aculo.us is freely distributable under the terms of an MIT-style license.
// For details, see the script.aculo.us web site: http://script.aculo.us/ 

// converts rgb() and #xxx to #xxxxxx format,  
// returns self (or first argument) if not convertable  
String.prototype.parseColor = function() {  
  var color = '#';
  if (this.slice(0,4) == 'rgb(') {  
    var cols = this.slice(4,this.length-1).split(',');  
    var i=0; do { color += parseInt(cols[i]).toColorPart() } while (++i<3);  
  } else {  
    if (this.slice(0,1) == '#') {  
      if (this.length==4) for(var i=1;i<4;i++) color += (this.charAt(i) + this.charAt(i)).toLowerCase();  
      if (this.length==7) color = this.toLowerCase();  
    }  
  }  
  return (color.length==7 ? color : (arguments[0] || this));  
};

/*--------------------------------------------------------------------------*/

Element.collectTextNodes = function(element) {  
  return $A($(element).childNodes).collect( function(node) {
    return (node.nodeType==3 ? node.nodeValue : 
      (node.hasChildNodes() ? Element.collectTextNodes(node) : ''));
  }).flatten().join('');
};

Element.collectTextNodesIgnoreClass = function(element, className) {  
  return $A($(element).childNodes).collect( function(node) {
    return (node.nodeType==3 ? node.nodeValue : 
      ((node.hasChildNodes() && !Element.hasClassName(node,className)) ? 
        Element.collectTextNodesIgnoreClass(node, className) : ''));
  }).flatten().join('');
};

Element.setContentZoom = function(element, percent) {
  element = $(element);  
  element.setStyle({fontSize: (percent/100) + 'em'});   
  if (Prototype.Browser.WebKit) window.scrollBy(0,0);
  return element;
};

Element.getInlineOpacity = function(element){
  return $(element).style.opacity || '';
};

Element.forceRerendering = function(element) {
  try {
    element = $(element);
    var n = document.createTextNode(' ');
    element.appendChild(n);
    element.removeChild(n);
  } catch(e) { }
};

/*--------------------------------------------------------------------------*/

var Effect = {
  _elementDoesNotExistError: {
    name: 'ElementDoesNotExistError',
    message: 'The specified DOM element does not exist, but is required for this effect to operate'
  },
  Transitions: {
    linear: Prototype.K,
    sinoidal: function(pos) {
      return (-Math.cos(pos*Math.PI)/2) + 0.5;
    },
    reverse: function(pos) {
      return 1-pos;
    },
    flicker: function(pos) {
      var pos = ((-Math.cos(pos*Math.PI)/4) + 0.75) + Math.random()/4;
      return pos > 1 ? 1 : pos;
    },
    wobble: function(pos) {
      return (-Math.cos(pos*Math.PI*(9*pos))/2) + 0.5;
    },
    pulse: function(pos, pulses) { 
      pulses = pulses || 5; 
      return (
        ((pos % (1/pulses)) * pulses).round() == 0 ? 
              ((pos * pulses * 2) - (pos * pulses * 2).floor()) : 
          1 - ((pos * pulses * 2) - (pos * pulses * 2).floor())
        );
    },
    spring: function(pos) { 
      return 1 - (Math.cos(pos * 4.5 * Math.PI) * Math.exp(-pos * 6)); 
    },
    none: function(pos) {
      return 0;
    },
    full: function(pos) {
      return 1;
    }
  },
  DefaultOptions: {
    duration:   1.0,   // seconds
    fps:        100,   // 100= assume 66fps max.
    sync:       false, // true for combining
    from:       0.0,
    to:         1.0,
    delay:      0.0,
    queue:      'parallel'
  },
  tagifyText: function(element) {
    var tagifyStyle = 'position:relative';
    if (Prototype.Browser.IE) tagifyStyle += ';zoom:1';
    
    element = $(element);
    $A(element.childNodes).each( function(child) {
      if (child.nodeType==3) {
        child.nodeValue.toArray().each( function(character) {
          element.insertBefore(
            new Element('span', {style: tagifyStyle}).update(
              character == ' ' ? String.fromCharCode(160) : character), 
              child);
        });
        Element.remove(child);
      }
    });
  },
  multiple: function(element, effect) {
    var elements;
    if (((typeof element == 'object') || 
        Object.isFunction(element)) && 
       (element.length))
      elements = element;
    else
      elements = $(element).childNodes;
      
    var options = Object.extend({
      speed: 0.1,
      delay: 0.0
    }, arguments[2] || { });
    var masterDelay = options.delay;

    $A(elements).each( function(element, index) {
      new effect(element, Object.extend(options, { delay: index * options.speed + masterDelay }));
    });
  },
  PAIRS: {
    'slide':  ['SlideDown','SlideUp'],
    'blind':  ['BlindDown','BlindUp'],
    'appear': ['Appear','Fade']
  },
  toggle: function(element, effect) {
    element = $(element);
    effect = (effect || 'appear').toLowerCase();
    var options = Object.extend({
      queue: { position:'end', scope:(element.id || 'global'), limit: 1 }
    }, arguments[2] || { });
    Effect[element.visible() ? 
      Effect.PAIRS[effect][1] : Effect.PAIRS[effect][0]](element, options);
  }
};

Effect.DefaultOptions.transition = Effect.Transitions.sinoidal;

/* ------------- core effects ------------- */

Effect.ScopedQueue = Class.create(Enumerable, {
  initialize: function() {
    this.effects  = [];
    this.interval = null;    
  },
  _each: function(iterator) {
    this.effects._each(iterator);
  },
  add: function(effect) {
    var timestamp = new Date().getTime();
    
    var position = Object.isString(effect.options.queue) ? 
      effect.options.queue : effect.options.queue.position;
    
    switch(position) {
      case 'front':
        // move unstarted effects after this effect  
        this.effects.findAll(function(e){ return e.state=='idle' }).each( function(e) {
            e.startOn  += effect.finishOn;
            e.finishOn += effect.finishOn;
          });
        break;
      case 'with-last':
        timestamp = this.effects.pluck('startOn').max() || timestamp;
        break;
      case 'end':
        // start effect after last queued effect has finished
        timestamp = this.effects.pluck('finishOn').max() || timestamp;
        break;
    }
    
    effect.startOn  += timestamp;
    effect.finishOn += timestamp;

    if (!effect.options.queue.limit || (this.effects.length < effect.options.queue.limit))
      this.effects.push(effect);
    
    if (!this.interval)
      this.interval = setInterval(this.loop.bind(this), 15);
  },
  remove: function(effect) {
    this.effects = this.effects.reject(function(e) { return e==effect });
    if (this.effects.length == 0) {
      clearInterval(this.interval);
      this.interval = null;
    }
  },
  loop: function() {
    var timePos = new Date().getTime();
    for(var i=0, len=this.effects.length;i<len;i++) 
      this.effects[i] && this.effects[i].loop(timePos);
  }
});

Effect.Queues = {
  instances: $H(),
  get: function(queueName) {
    if (!Object.isString(queueName)) return queueName;
    
    return this.instances.get(queueName) ||
      this.instances.set(queueName, new Effect.ScopedQueue());
  }
};
Effect.Queue = Effect.Queues.get('global');

Effect.Base = Class.create({
  position: null,
  start: function(options) {
    function codeForEvent(options,eventName){
      return (
        (options[eventName+'Internal'] ? 'this.options.'+eventName+'Internal(this);' : '') +
        (options[eventName] ? 'this.options.'+eventName+'(this);' : '')
      );
    }
    if (options && options.transition === false) options.transition = Effect.Transitions.linear;
    this.options      = Object.extend(Object.extend({ },Effect.DefaultOptions), options || { });
    this.currentFrame = 0;
    this.state        = 'idle';
    this.startOn      = this.options.delay*1000;
    this.finishOn     = this.startOn+(this.options.duration*1000);
    this.fromToDelta  = this.options.to-this.options.from;
    this.totalTime    = this.finishOn-this.startOn;
    this.totalFrames  = this.options.fps*this.options.duration;
    
    eval('this.render = function(pos){ '+
      'if (this.state=="idle"){this.state="running";'+
      codeForEvent(this.options,'beforeSetup')+
      (this.setup ? 'this.setup();':'')+ 
      codeForEvent(this.options,'afterSetup')+
      '};if (this.state=="running"){'+
      'pos=this.options.transition(pos)*'+this.fromToDelta+'+'+this.options.from+';'+
      'this.position=pos;'+
      codeForEvent(this.options,'beforeUpdate')+
      (this.update ? 'this.update(pos);':'')+
      codeForEvent(this.options,'afterUpdate')+
      '}}');
    
    this.event('beforeStart');
    if (!this.options.sync)
      Effect.Queues.get(Object.isString(this.options.queue) ? 
        'global' : this.options.queue.scope).add(this);
  },
  loop: function(timePos) {
    if (timePos >= this.startOn) {
      if (timePos >= this.finishOn) {
        this.render(1.0);
        this.cancel();
        this.event('beforeFinish');
        if (this.finish) this.finish(); 
        this.event('afterFinish');
        return;  
      }
      var pos   = (timePos - this.startOn) / this.totalTime,
          frame = (pos * this.totalFrames).round();
      if (frame > this.currentFrame) {
        this.render(pos);
        this.currentFrame = frame;
      }
    }
  },
  cancel: function() {
    if (!this.options.sync)
      Effect.Queues.get(Object.isString(this.options.queue) ? 
        'global' : this.options.queue.scope).remove(this);
    this.state = 'finished';
  },
  event: function(eventName) {
    if (this.options[eventName + 'Internal']) this.options[eventName + 'Internal'](this);
    if (this.options[eventName]) this.options[eventName](this);
  },
  inspect: function() {
    var data = $H();
    for(property in this)
      if (!Object.isFunction(this[property])) data.set(property, this[property]);
    return '#<Effect:' + data.inspect() + ',options:' + $H(this.options).inspect() + '>';
  }
});

Effect.Parallel = Class.create(Effect.Base, {
  initialize: function(effects) {
    this.effects = effects || [];
    this.start(arguments[1]);
  },
  update: function(position) {
    this.effects.invoke('render', position);
  },
  finish: function(position) {
    this.effects.each( function(effect) {
      effect.render(1.0);
      effect.cancel();
      effect.event('beforeFinish');
      if (effect.finish) effect.finish(position);
      effect.event('afterFinish');
    });
  }
});

Effect.Tween = Class.create(Effect.Base, {
  initialize: function(object, from, to) {
    object = Object.isString(object) ? $(object) : object;
    var args = $A(arguments), method = args.last(), 
      options = args.length == 5 ? args[3] : null;
    this.method = Object.isFunction(method) ? method.bind(object) :
      Object.isFunction(object[method]) ? object[method].bind(object) : 
      function(value) { object[method] = value };
    this.start(Object.extend({ from: from, to: to }, options || { }));
  },
  update: function(position) {
    this.method(position);
  }
});

Effect.Event = Class.create(Effect.Base, {
  initialize: function() {
    this.start(Object.extend({ duration: 0 }, arguments[0] || { }));
  },
  update: Prototype.emptyFunction
});

Effect.Opacity = Class.create(Effect.Base, {
  initialize: function(element) {
    this.element = $(element);
    if (!this.element) throw(Effect._elementDoesNotExistError);
    // make this work on IE on elements without 'layout'
    if (Prototype.Browser.IE && (!this.element.currentStyle.hasLayout))
      this.element.setStyle({zoom: 1});
    var options = Object.extend({
      from: this.element.getOpacity() || 0.0,
      to:   1.0
    }, arguments[1] || { });
    this.start(options);
  },
  update: function(position) {
    this.element.setOpacity(position);
  }
});

Effect.Move = Class.create(Effect.Base, {
  initialize: function(element) {
    this.element = $(element);
    if (!this.element) throw(Effect._elementDoesNotExistError);
    var options = Object.extend({
      x:    0,
      y:    0,
      mode: 'relative'
    }, arguments[1] || { });
    this.start(options);
  },
  setup: function() {
    this.element.makePositioned();
    this.originalLeft = parseFloat(this.element.getStyle('left') || '0');
    this.originalTop  = parseFloat(this.element.getStyle('top')  || '0');
    if (this.options.mode == 'absolute') {
      this.options.x = this.options.x - this.originalLeft;
      this.options.y = this.options.y - this.originalTop;
    }
  },
  update: function(position) {
    this.element.setStyle({
      left: (this.options.x  * position + this.originalLeft).round() + 'px',
      top:  (this.options.y  * position + this.originalTop).round()  + 'px'
    });
  }
});

// for backwards compatibility
Effect.MoveBy = function(element, toTop, toLeft) {
  return new Effect.Move(element, 
    Object.extend({ x: toLeft, y: toTop }, arguments[3] || { }));
};

Effect.Scale = Class.create(Effect.Base, {
  initialize: function(element, percent) {
    this.element = $(element);
    if (!this.element) throw(Effect._elementDoesNotExistError);
    var options = Object.extend({
      scaleX: true,
      scaleY: true,
      scaleContent: true,
      scaleFromCenter: false,
      scaleMode: 'box',        // 'box' or 'contents' or { } with provided values
      scaleFrom: 100.0,
      scaleTo:   percent
    }, arguments[2] || { });
    this.start(options);
  },
  setup: function() {
    this.restoreAfterFinish = this.options.restoreAfterFinish || false;
    this.elementPositioning = this.element.getStyle('position');
    
    this.originalStyle = { };
    ['top','left','width','height','fontSize'].each( function(k) {
      this.originalStyle[k] = this.element.style[k];
    }.bind(this));
      
    this.originalTop  = this.element.offsetTop;
    this.originalLeft = this.element.offsetLeft;
    
    var fontSize = this.element.getStyle('font-size') || '100%';
    ['em','px','%','pt'].each( function(fontSizeType) {
      if (fontSize.indexOf(fontSizeType)>0) {
        this.fontSize     = parseFloat(fontSize);
        this.fontSizeType = fontSizeType;
      }
    }.bind(this));
    
    this.factor = (this.options.scaleTo - this.options.scaleFrom)/100;
    
    this.dims = null;
    if (this.options.scaleMode=='box')
      this.dims = [this.element.offsetHeight, this.element.offsetWidth];
    if (/^content/.test(this.options.scaleMode))
      this.dims = [this.element.scrollHeight, this.element.scrollWidth];
    if (!this.dims)
      this.dims = [this.options.scaleMode.originalHeight,
                   this.options.scaleMode.originalWidth];
  },
  update: function(position) {
    var currentScale = (this.options.scaleFrom/100.0) + (this.factor * position);
    if (this.options.scaleContent && this.fontSize)
      this.element.setStyle({fontSize: this.fontSize * currentScale + this.fontSizeType });
    this.setDimensions(this.dims[0] * currentScale, this.dims[1] * currentScale);
  },
  finish: function(position) {
    if (this.restoreAfterFinish) this.element.setStyle(this.originalStyle);
  },
  setDimensions: function(height, width) {
    var d = { };
    if (this.options.scaleX) d.width = width.round() + 'px';
    if (this.options.scaleY) d.height = height.round() + 'px';
    if (this.options.scaleFromCenter) {
      var topd  = (height - this.dims[0])/2;
      var leftd = (width  - this.dims[1])/2;
      if (this.elementPositioning == 'absolute') {
        if (this.options.scaleY) d.top = this.originalTop-topd + 'px';
        if (this.options.scaleX) d.left = this.originalLeft-leftd + 'px';
      } else {
        if (this.options.scaleY) d.top = -topd + 'px';
        if (this.options.scaleX) d.left = -leftd + 'px';
      }
    }
    this.element.setStyle(d);
  }
});

Effect.Highlight = Class.create(Effect.Base, {
  initialize: function(element) {
    this.element = $(element);
    if (!this.element) throw(Effect._elementDoesNotExistError);
    var options = Object.extend({ startcolor: '#ffff99' }, arguments[1] || { });
    this.start(options);
  },
  setup: function() {
    // Prevent executing on elements not in the layout flow
    if (this.element.getStyle('display')=='none') { this.cancel(); return; }
    // Disable background image during the effect
    this.oldStyle = { };
    if (!this.options.keepBackgroundImage) {
      this.oldStyle.backgroundImage = this.element.getStyle('background-image');
      this.element.setStyle({backgroundImage: 'none'});
    }
    if (!this.options.endcolor)
      this.options.endcolor = this.element.getStyle('background-color').parseColor('#ffffff');
    if (!this.options.restorecolor)
      this.options.restorecolor = this.element.getStyle('background-color');
    // init color calculations
    this._base  = $R(0,2).map(function(i){ return parseInt(this.options.startcolor.slice(i*2+1,i*2+3),16) }.bind(this));
    this._delta = $R(0,2).map(function(i){ return parseInt(this.options.endcolor.slice(i*2+1,i*2+3),16)-this._base[i] }.bind(this));
  },
  update: function(position) {
    this.element.setStyle({backgroundColor: $R(0,2).inject('#',function(m,v,i){
      return m+((this._base[i]+(this._delta[i]*position)).round().toColorPart()); }.bind(this)) });
  },
  finish: function() {
    this.element.setStyle(Object.extend(this.oldStyle, {
      backgroundColor: this.options.restorecolor
    }));
  }
});

Effect.ScrollTo = function(element) {
  var options = arguments[1] || { },
    scrollOffsets = document.viewport.getScrollOffsets(),
    elementOffsets = $(element).cumulativeOffset(),
    max = (window.height || document.body.scrollHeight) - document.viewport.getHeight();  

  if (options.offset) elementOffsets[1] += options.offset;

  return new Effect.Tween(null,
    scrollOffsets.top,
    elementOffsets[1] > max ? max : elementOffsets[1],
    options,
    function(p){ scrollTo(scrollOffsets.left, p.round()) }
  );
};

/* ------------- combination effects ------------- */

Effect.Fade = function(element) {
  element = $(element);
  var oldOpacity = element.getInlineOpacity();
  var options = Object.extend({
    from: element.getOpacity() || 1.0,
    to:   0.0,
    afterFinishInternal: function(effect) { 
      if (effect.options.to!=0) return;
      effect.element.hide().setStyle({opacity: oldOpacity}); 
    }
  }, arguments[1] || { });
  return new Effect.Opacity(element,options);
};

Effect.Appear = function(element) {
  element = $(element);
  var options = Object.extend({
  from: (element.getStyle('display') == 'none' ? 0.0 : element.getOpacity() || 0.0),
  to:   1.0,
  // force Safari to render floated elements properly
  afterFinishInternal: function(effect) {
    effect.element.forceRerendering();
  },
  beforeSetup: function(effect) {
    effect.element.setOpacity(effect.options.from).show(); 
  }}, arguments[1] || { });
  return new Effect.Opacity(element,options);
};

Effect.Puff = function(element) {
  element = $(element);
  var oldStyle = { 
    opacity: element.getInlineOpacity(), 
    position: element.getStyle('position'),
    top:  element.style.top,
    left: element.style.left,
    width: element.style.width,
    height: element.style.height
  };
  return new Effect.Parallel(
   [ new Effect.Scale(element, 200, 
      { sync: true, scaleFromCenter: true, scaleContent: true, restoreAfterFinish: true }), 
     new Effect.Opacity(element, { sync: true, to: 0.0 } ) ], 
     Object.extend({ duration: 1.0, 
      beforeSetupInternal: function(effect) {
        Position.absolutize(effect.effects[0].element)
      },
      afterFinishInternal: function(effect) {
         effect.effects[0].element.hide().setStyle(oldStyle); }
     }, arguments[1] || { })
   );
};

Effect.BlindUp = function(element) {
  element = $(element);
  element.makeClipping();
  return new Effect.Scale(element, 0,
    Object.extend({ scaleContent: false, 
      scaleX: false, 
      restoreAfterFinish: true,
      afterFinishInternal: function(effect) {
        effect.element.hide().undoClipping();
      } 
    }, arguments[1] || { })
  );
};

Effect.BlindDown = function(element) {
  element = $(element);
  var elementDimensions = element.getDimensions();
  return new Effect.Scale(element, 100, Object.extend({ 
    scaleContent: false, 
    scaleX: false,
    scaleFrom: 0,
    scaleMode: {originalHeight: elementDimensions.height, originalWidth: elementDimensions.width},
    restoreAfterFinish: true,
    afterSetup: function(effect) {
      effect.element.makeClipping().setStyle({height: '0px'}).show(); 
    },  
    afterFinishInternal: function(effect) {
      effect.element.undoClipping();
    }
  }, arguments[1] || { }));
};

Effect.SwitchOff = function(element) {
  element = $(element);
  var oldOpacity = element.getInlineOpacity();
  return new Effect.Appear(element, Object.extend({
    duration: 0.4,
    from: 0,
    transition: Effect.Transitions.flicker,
    afterFinishInternal: function(effect) {
      new Effect.Scale(effect.element, 1, { 
        duration: 0.3, scaleFromCenter: true,
        scaleX: false, scaleContent: false, restoreAfterFinish: true,
        beforeSetup: function(effect) { 
          effect.element.makePositioned().makeClipping();
        },
        afterFinishInternal: function(effect) {
          effect.element.hide().undoClipping().undoPositioned().setStyle({opacity: oldOpacity});
        }
      })
    }
  }, arguments[1] || { }));
};

Effect.DropOut = function(element) {
  element = $(element);
  var oldStyle = {
    top: element.getStyle('top'),
    left: element.getStyle('left'),
    opacity: element.getInlineOpacity() };
  return new Effect.Parallel(
    [ new Effect.Move(element, {x: 0, y: 100, sync: true }), 
      new Effect.Opacity(element, { sync: true, to: 0.0 }) ],
    Object.extend(
      { duration: 0.5,
        beforeSetup: function(effect) {
          effect.effects[0].element.makePositioned(); 
        },
        afterFinishInternal: function(effect) {
          effect.effects[0].element.hide().undoPositioned().setStyle(oldStyle);
        } 
      }, arguments[1] || { }));
};

Effect.Shake = function(element) {
  element = $(element);
  var options = Object.extend({
    distance: 20,
    duration: 0.5
  }, arguments[1] || {});
  var distance = parseFloat(options.distance);
  var split = parseFloat(options.duration) / 10.0;
  var oldStyle = {
    top: element.getStyle('top'),
    left: element.getStyle('left') };
    return new Effect.Move(element,
      { x:  distance, y: 0, duration: split, afterFinishInternal: function(effect) {
    new Effect.Move(effect.element,
      { x: -distance*2, y: 0, duration: split*2,  afterFinishInternal: function(effect) {
    new Effect.Move(effect.element,
      { x:  distance*2, y: 0, duration: split*2,  afterFinishInternal: function(effect) {
    new Effect.Move(effect.element,
      { x: -distance*2, y: 0, duration: split*2,  afterFinishInternal: function(effect) {
    new Effect.Move(effect.element,
      { x:  distance*2, y: 0, duration: split*2,  afterFinishInternal: function(effect) {
    new Effect.Move(effect.element,
      { x: -distance, y: 0, duration: split, afterFinishInternal: function(effect) {
        effect.element.undoPositioned().setStyle(oldStyle);
  }}) }}) }}) }}) }}) }});
};

Effect.SlideDown = function(element) {
  element = $(element).cleanWhitespace();
  // SlideDown need to have the content of the element wrapped in a container element with fixed height!
  var oldInnerBottom = element.down().getStyle('bottom');
  var elementDimensions = element.getDimensions();
  return new Effect.Scale(element, 100, Object.extend({ 
    scaleContent: false, 
    scaleX: false, 
    scaleFrom: window.opera ? 0 : 1,
    scaleMode: {originalHeight: elementDimensions.height, originalWidth: elementDimensions.width},
    restoreAfterFinish: true,
    afterSetup: function(effect) {
      effect.element.makePositioned();
      effect.element.down().makePositioned();
      if (window.opera) effect.element.setStyle({top: ''});
      effect.element.makeClipping().setStyle({height: '0px'}).show(); 
    },
    afterUpdateInternal: function(effect) {
      effect.element.down().setStyle({bottom:
        (effect.dims[0] - effect.element.clientHeight) + 'px' }); 
    },
    afterFinishInternal: function(effect) {
      effect.element.undoClipping().undoPositioned();
      effect.element.down().undoPositioned().setStyle({bottom: oldInnerBottom}); }
    }, arguments[1] || { })
  );
};

Effect.SlideUp = function(element) {
  element = $(element).cleanWhitespace();
  var oldInnerBottom = element.down().getStyle('bottom');
  var elementDimensions = element.getDimensions();
  return new Effect.Scale(element, window.opera ? 0 : 1,
   Object.extend({ scaleContent: false, 
    scaleX: false, 
    scaleMode: 'box',
    scaleFrom: 100,
    scaleMode: {originalHeight: elementDimensions.height, originalWidth: elementDimensions.width},
    restoreAfterFinish: true,
    afterSetup: function(effect) {
      effect.element.makePositioned();
      effect.element.down().makePositioned();
      if (window.opera) effect.element.setStyle({top: ''});
      effect.element.makeClipping().show();
    },  
    afterUpdateInternal: function(effect) {
      effect.element.down().setStyle({bottom:
        (effect.dims[0] - effect.element.clientHeight) + 'px' });
    },
    afterFinishInternal: function(effect) {
      effect.element.hide().undoClipping().undoPositioned();
      effect.element.down().undoPositioned().setStyle({bottom: oldInnerBottom});
    }
   }, arguments[1] || { })
  );
};

// Bug in opera makes the TD containing this element expand for a instance after finish 
Effect.Squish = function(element) {
  return new Effect.Scale(element, window.opera ? 1 : 0, { 
    restoreAfterFinish: true,
    beforeSetup: function(effect) {
      effect.element.makeClipping(); 
    },  
    afterFinishInternal: function(effect) {
      effect.element.hide().undoClipping(); 
    }
  });
};

Effect.Grow = function(element) {
  element = $(element);
  var options = Object.extend({
    direction: 'center',
    moveTransition: Effect.Transitions.sinoidal,
    scaleTransition: Effect.Transitions.sinoidal,
    opacityTransition: Effect.Transitions.full
  }, arguments[1] || { });
  var oldStyle = {
    top: element.style.top,
    left: element.style.left,
    height: element.style.height,
    width: element.style.width,
    opacity: element.getInlineOpacity() };

  var dims = element.getDimensions();    
  var initialMoveX, initialMoveY;
  var moveX, moveY;
  
  switch (options.direction) {
    case 'top-left':
      initialMoveX = initialMoveY = moveX = moveY = 0; 
      break;
    case 'top-right':
      initialMoveX = dims.width;
      initialMoveY = moveY = 0;
      moveX = -dims.width;
      break;
    case 'bottom-left':
      initialMoveX = moveX = 0;
      initialMoveY = dims.height;
      moveY = -dims.height;
      break;
    case 'bottom-right':
      initialMoveX = dims.width;
      initialMoveY = dims.height;
      moveX = -dims.width;
      moveY = -dims.height;
      break;
    case 'center':
      initialMoveX = dims.width / 2;
      initialMoveY = dims.height / 2;
      moveX = -dims.width / 2;
      moveY = -dims.height / 2;
      break;
  }
  
  return new Effect.Move(element, {
    x: initialMoveX,
    y: initialMoveY,
    duration: 0.01, 
    beforeSetup: function(effect) {
      effect.element.hide().makeClipping().makePositioned();
    },
    afterFinishInternal: function(effect) {
      new Effect.Parallel(
        [ new Effect.Opacity(effect.element, { sync: true, to: 1.0, from: 0.0, transition: options.opacityTransition }),
          new Effect.Move(effect.element, { x: moveX, y: moveY, sync: true, transition: options.moveTransition }),
          new Effect.Scale(effect.element, 100, {
            scaleMode: { originalHeight: dims.height, originalWidth: dims.width }, 
            sync: true, scaleFrom: window.opera ? 1 : 0, transition: options.scaleTransition, restoreAfterFinish: true})
        ], Object.extend({
             beforeSetup: function(effect) {
               effect.effects[0].element.setStyle({height: '0px'}).show(); 
             },
             afterFinishInternal: function(effect) {
               effect.effects[0].element.undoClipping().undoPositioned().setStyle(oldStyle); 
             }
           }, options)
      )
    }
  });
};

Effect.Shrink = function(element) {
  element = $(element);
  var options = Object.extend({
    direction: 'center',
    moveTransition: Effect.Transitions.sinoidal,
    scaleTransition: Effect.Transitions.sinoidal,
    opacityTransition: Effect.Transitions.none
  }, arguments[1] || { });
  var oldStyle = {
    top: element.style.top,
    left: element.style.left,
    height: element.style.height,
    width: element.style.width,
    opacity: element.getInlineOpacity() };

  var dims = element.getDimensions();
  var moveX, moveY;
  
  switch (options.direction) {
    case 'top-left':
      moveX = moveY = 0;
      break;
    case 'top-right':
      moveX = dims.width;
      moveY = 0;
      break;
    case 'bottom-left':
      moveX = 0;
      moveY = dims.height;
      break;
    case 'bottom-right':
      moveX = dims.width;
      moveY = dims.height;
      break;
    case 'center':  
      moveX = dims.width / 2;
      moveY = dims.height / 2;
      break;
  }
  
  return new Effect.Parallel(
    [ new Effect.Opacity(element, { sync: true, to: 0.0, from: 1.0, transition: options.opacityTransition }),
      new Effect.Scale(element, window.opera ? 1 : 0, { sync: true, transition: options.scaleTransition, restoreAfterFinish: true}),
      new Effect.Move(element, { x: moveX, y: moveY, sync: true, transition: options.moveTransition })
    ], Object.extend({            
         beforeStartInternal: function(effect) {
           effect.effects[0].element.makePositioned().makeClipping(); 
         },
         afterFinishInternal: function(effect) {
           effect.effects[0].element.hide().undoClipping().undoPositioned().setStyle(oldStyle); }
       }, options)
  );
};

Effect.Pulsate = function(element) {
  element = $(element);
  var options    = arguments[1] || { };
  var oldOpacity = element.getInlineOpacity();
  var transition = options.transition || Effect.Transitions.sinoidal;
  var reverser   = function(pos){ return transition(1-Effect.Transitions.pulse(pos, options.pulses)) };
  reverser.bind(transition);
  return new Effect.Opacity(element, 
    Object.extend(Object.extend({  duration: 2.0, from: 0,
      afterFinishInternal: function(effect) { effect.element.setStyle({opacity: oldOpacity}); }
    }, options), {transition: reverser}));
};

Effect.Fold = function(element) {
  element = $(element);
  var oldStyle = {
    top: element.style.top,
    left: element.style.left,
    width: element.style.width,
    height: element.style.height };
  element.makeClipping();
  return new Effect.Scale(element, 5, Object.extend({   
    scaleContent: false,
    scaleX: false,
    afterFinishInternal: function(effect) {
    new Effect.Scale(element, 1, { 
      scaleContent: false, 
      scaleY: false,
      afterFinishInternal: function(effect) {
        effect.element.hide().undoClipping().setStyle(oldStyle);
      } });
  }}, arguments[1] || { }));
};

Effect.Morph = Class.create(Effect.Base, {
  initialize: function(element) {
    this.element = $(element);
    if (!this.element) throw(Effect._elementDoesNotExistError);
    var options = Object.extend({
      style: { }
    }, arguments[1] || { });
    
    if (!Object.isString(options.style)) this.style = $H(options.style);
    else {
      if (options.style.include(':'))
        this.style = options.style.parseStyle();
      else {
        this.element.addClassName(options.style);
        this.style = $H(this.element.getStyles());
        this.element.removeClassName(options.style);
        var css = this.element.getStyles();
        this.style = this.style.reject(function(style) {
          return style.value == css[style.key];
        });
        options.afterFinishInternal = function(effect) {
          effect.element.addClassName(effect.options.style);
          effect.transforms.each(function(transform) {
            effect.element.style[transform.style] = '';
          });
        }
      }
    }
    this.start(options);
  },
  
  setup: function(){
    function parseColor(color){
      if (!color || ['rgba(0, 0, 0, 0)','transparent'].include(color)) color = '#ffffff';
      color = color.parseColor();
      return $R(0,2).map(function(i){
        return parseInt( color.slice(i*2+1,i*2+3), 16 ) 
      });
    }
    this.transforms = this.style.map(function(pair){
      var property = pair[0], value = pair[1], unit = null;

      if (value.parseColor('#zzzzzz') != '#zzzzzz') {
        value = value.parseColor();
        unit  = 'color';
      } else if (property == 'opacity') {
        value = parseFloat(value);
        if (Prototype.Browser.IE && (!this.element.currentStyle.hasLayout))
          this.element.setStyle({zoom: 1});
      } else if (Element.CSS_LENGTH.test(value)) {
          var components = value.match(/^([\+\-]?[0-9\.]+)(.*)$/);
          value = parseFloat(components[1]);
          unit = (components.length == 3) ? components[2] : null;
      }

      var originalValue = this.element.getStyle(property);
      return { 
        style: property.camelize(), 
        originalValue: unit=='color' ? parseColor(originalValue) : parseFloat(originalValue || 0), 
        targetValue: unit=='color' ? parseColor(value) : value,
        unit: unit
      };
    }.bind(this)).reject(function(transform){
      return (
        (transform.originalValue == transform.targetValue) ||
        (
          transform.unit != 'color' &&
          (isNaN(transform.originalValue) || isNaN(transform.targetValue))
        )
      )
    });
  },
  update: function(position) {
    var style = { }, transform, i = this.transforms.length;
    while(i--)
      style[(transform = this.transforms[i]).style] = 
        transform.unit=='color' ? '#'+
          (Math.round(transform.originalValue[0]+
            (transform.targetValue[0]-transform.originalValue[0])*position)).toColorPart() +
          (Math.round(transform.originalValue[1]+
            (transform.targetValue[1]-transform.originalValue[1])*position)).toColorPart() +
          (Math.round(transform.originalValue[2]+
            (transform.targetValue[2]-transform.originalValue[2])*position)).toColorPart() :
        (transform.originalValue +
          (transform.targetValue - transform.originalValue) * position).toFixed(3) + 
            (transform.unit === null ? '' : transform.unit);
    this.element.setStyle(style, true);
  }
});

Effect.Transform = Class.create({
  initialize: function(tracks){
    this.tracks  = [];
    this.options = arguments[1] || { };
    this.addTracks(tracks);
  },
  addTracks: function(tracks){
    tracks.each(function(track){
      track = $H(track);
      var data = track.values().first();
      this.tracks.push($H({
        ids:     track.keys().first(),
        effect:  Effect.Morph,
        options: { style: data }
      }));
    }.bind(this));
    return this;
  },
  play: function(){
    return new Effect.Parallel(
      this.tracks.map(function(track){
        var ids = track.get('ids'), effect = track.get('effect'), options = track.get('options');
        var elements = [$(ids) || $$(ids)].flatten();
        return elements.map(function(e){ return new effect(e, Object.extend({ sync:true }, options)) });
      }).flatten(),
      this.options
    );
  }
});

Element.CSS_PROPERTIES = $w(
  'backgroundColor backgroundPosition borderBottomColor borderBottomStyle ' + 
  'borderBottomWidth borderLeftColor borderLeftStyle borderLeftWidth ' +
  'borderRightColor borderRightStyle borderRightWidth borderSpacing ' +
  'borderTopColor borderTopStyle borderTopWidth bottom clip color ' +
  'fontSize fontWeight height left letterSpacing lineHeight ' +
  'marginBottom marginLeft marginRight marginTop markerOffset maxHeight '+
  'maxWidth minHeight minWidth opacity outlineColor outlineOffset ' +
  'outlineWidth paddingBottom paddingLeft paddingRight paddingTop ' +
  'right textIndent top width wordSpacing zIndex');
  
Element.CSS_LENGTH = /^(([\+\-]?[0-9\.]+)(em|ex|px|in|cm|mm|pt|pc|\%))|0$/;

String.__parseStyleElement = document.createElement('div');
String.prototype.parseStyle = function(){
  var style, styleRules = $H();
  if (Prototype.Browser.WebKit)
    style = new Element('div',{style:this}).style;
  else {
    String.__parseStyleElement.innerHTML = '<div style="' + this + '"></div>';
    style = String.__parseStyleElement.childNodes[0].style;
  }
  
  Element.CSS_PROPERTIES.each(function(property){
    if (style[property]) styleRules.set(property, style[property]); 
  });
  
  if (Prototype.Browser.IE && this.include('opacity'))
    styleRules.set('opacity', this.match(/opacity:\s*((?:0|1)?(?:\.\d*)?)/)[1]);

  return styleRules;
};

if (document.defaultView && document.defaultView.getComputedStyle) {
  Element.getStyles = function(element) {
    var css = document.defaultView.getComputedStyle($(element), null);
    return Element.CSS_PROPERTIES.inject({ }, function(styles, property) {
      styles[property] = css[property];
      return styles;
    });
  };
} else {
  Element.getStyles = function(element) {
    element = $(element);
    var css = element.currentStyle, styles;
    styles = Element.CSS_PROPERTIES.inject({ }, function(results, property) {
      results[property] = css[property];
      return results;
    });
    if (!styles.opacity) styles.opacity = element.getOpacity();
    return styles;
  };
};

Effect.Methods = {
  morph: function(element, style) {
    element = $(element);
    new Effect.Morph(element, Object.extend({ style: style }, arguments[2] || { }));
    return element;
  },
  visualEffect: function(element, effect, options) {
    element = $(element)
    var s = effect.dasherize().camelize(), klass = s.charAt(0).toUpperCase() + s.substring(1);
    new Effect[klass](element, options);
    return element;
  },
  highlight: function(element, options) {
    element = $(element);
    new Effect.Highlight(element, options);
    return element;
  }
};

$w('fade appear grow shrink fold blindUp blindDown slideUp slideDown '+
  'pulsate shake puff squish switchOff dropOut').each(
  function(effect) { 
    Effect.Methods[effect] = function(element, options){
      element = $(element);
      Effect[effect.charAt(0).toUpperCase() + effect.substring(1)](element, options);
      return element;
    }
  }
);

$w('getInlineOpacity forceRerendering setContentZoom collectTextNodes collectTextNodesIgnoreClass getStyles').each( 
  function(f) { Effect.Methods[f] = Element[f]; }
);

Element.addMethods(Effect.Methods);
// script.aculo.us controls.js v1.8.1, Thu Jan 03 22:07:12 -0500 2008

// Copyright (c) 2005-2007 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us)
//           (c) 2005-2007 Ivan Krstic (http://blogs.law.harvard.edu/ivan)
//           (c) 2005-2007 Jon Tirsen (http://www.tirsen.com)
// Contributors:
//  Richard Livsey
//  Rahul Bhargava
//  Rob Wills
// 
// script.aculo.us is freely distributable under the terms of an MIT-style license.
// For details, see the script.aculo.us web site: http://script.aculo.us/

// Autocompleter.Base handles all the autocompletion functionality 
// that's independent of the data source for autocompletion. This
// includes drawing the autocompletion menu, observing keyboard
// and mouse events, and similar.
//
// Specific autocompleters need to provide, at the very least, 
// a getUpdatedChoices function that will be invoked every time
// the text inside the monitored textbox changes. This method 
// should get the text for which to provide autocompletion by
// invoking this.getToken(), NOT by directly accessing
// this.element.value. This is to allow incremental tokenized
// autocompletion. Specific auto-completion logic (AJAX, etc)
// belongs in getUpdatedChoices.
//
// Tokenized incremental autocompletion is enabled automatically
// when an autocompleter is instantiated with the 'tokens' option
// in the options parameter, e.g.:
// new Ajax.Autocompleter('id','upd', '/url/', { tokens: ',' });
// will incrementally autocomplete with a comma as the token.
// Additionally, ',' in the above example can be replaced with
// a token array, e.g. { tokens: [',', '\n'] } which
// enables autocompletion on multiple tokens. This is most 
// useful when one of the tokens is \n (a newline), as it 
// allows smart autocompletion after linebreaks.

if(typeof Effect == 'undefined')
  throw("controls.js requires including script.aculo.us' effects.js library");

var Autocompleter = { }
Autocompleter.Base = Class.create({
  baseInitialize: function(element, update, options) {
    element          = $(element)
    this.element     = element; 
    this.update      = $(update);  
    this.hasFocus    = false; 
    this.changed     = false; 
    this.active      = false; 
    this.index       = 0;     
    this.entryCount  = 0;
    this.oldElementValue = this.element.value;

    if(this.setOptions)
      this.setOptions(options);
    else
      this.options = options || { };

    this.options.paramName    = this.options.paramName || this.element.name;
    this.options.tokens       = this.options.tokens || [];
    this.options.frequency    = this.options.frequency || 0.4;
    this.options.minChars     = this.options.minChars || 1;
    this.options.onShow       = this.options.onShow || 
      function(element, update){ 
        if(!update.style.position || update.style.position=='absolute') {
          update.style.position = 'absolute';
          Position.clone(element, update, {
            setHeight: false, 
            offsetTop: element.offsetHeight
          });
        }
        Effect.Appear(update,{duration:0.15});
      };
    this.options.onHide = this.options.onHide || 
      function(element, update){ new Effect.Fade(update,{duration:0.15}) };

    if(typeof(this.options.tokens) == 'string') 
      this.options.tokens = new Array(this.options.tokens);
    // Force carriage returns as token delimiters anyway
    if (!this.options.tokens.include('\n'))
      this.options.tokens.push('\n');

    this.observer = null;
    
    this.element.setAttribute('autocomplete','off');

    Element.hide(this.update);

    Event.observe(this.element, 'blur', this.onBlur.bindAsEventListener(this));
    Event.observe(this.element, 'keydown', this.onKeyPress.bindAsEventListener(this));
  },

  show: function() {
    if(Element.getStyle(this.update, 'display')=='none') this.options.onShow(this.element, this.update);
    if(!this.iefix && 
      (Prototype.Browser.IE) &&
      (Element.getStyle(this.update, 'position')=='absolute')) {
      new Insertion.After(this.update, 
       '<iframe id="' + this.update.id + '_iefix" '+
       'style="display:none;position:absolute;filter:progid:DXImageTransform.Microsoft.Alpha(opacity=0);" ' +
       'src="javascript:false;" frameborder="0" scrolling="no"></iframe>');
      this.iefix = $(this.update.id+'_iefix');
    }
    if(this.iefix) setTimeout(this.fixIEOverlapping.bind(this), 50);
  },
  
  fixIEOverlapping: function() {
    Position.clone(this.update, this.iefix, {setTop:(!this.update.style.height)});
    this.iefix.style.zIndex = 1;
    this.update.style.zIndex = 2;
    Element.show(this.iefix);
  },

  hide: function() {
    this.stopIndicator();
    if(Element.getStyle(this.update, 'display')!='none') this.options.onHide(this.element, this.update);
    if(this.iefix) Element.hide(this.iefix);
  },

  startIndicator: function() {
    if(this.options.indicator) Element.show(this.options.indicator);
  },

  stopIndicator: function() {
    if(this.options.indicator) Element.hide(this.options.indicator);
  },

  onKeyPress: function(event) {
    if(this.active)
      switch(event.keyCode) {
       case Event.KEY_TAB:
       case Event.KEY_RETURN:
         this.selectEntry();
         Event.stop(event);
       case Event.KEY_ESC:
         this.hide();
         this.active = false;
         Event.stop(event);
         return;
       case Event.KEY_LEFT:
       case Event.KEY_RIGHT:
         return;
       case Event.KEY_UP:
         this.markPrevious();
         this.render();
         Event.stop(event);
         return;
       case Event.KEY_DOWN:
         this.markNext();
         this.render();
         Event.stop(event);
         return;
      }
     else 
       if(event.keyCode==Event.KEY_TAB || event.keyCode==Event.KEY_RETURN || 
         (Prototype.Browser.WebKit > 0 && event.keyCode == 0)) return;

    this.changed = true;
    this.hasFocus = true;

    if(this.observer) clearTimeout(this.observer);
      this.observer = 
        setTimeout(this.onObserverEvent.bind(this), this.options.frequency*1000);
  },

  activate: function() {
    this.changed = false;
    this.hasFocus = true;
    this.getUpdatedChoices();
  },

  onHover: function(event) {
    var element = Event.findElement(event, 'LI');
    if(this.index != element.autocompleteIndex) 
    {
        this.index = element.autocompleteIndex;
        this.render();
    }
    Event.stop(event);
  },
  
  onClick: function(event) {
    var element = Event.findElement(event, 'LI');
    this.index = element.autocompleteIndex;
    this.selectEntry();
    this.hide();
  },
  
  onBlur: function(event) {
    // needed to make click events working
    setTimeout(this.hide.bind(this), 250);
    this.hasFocus = false;
    this.active = false;     
  }, 
  
  render: function() {
    if(this.entryCount > 0) {
      for (var i = 0; i < this.entryCount; i++)
        this.index==i ? 
          Element.addClassName(this.getEntry(i),"selected") : 
          Element.removeClassName(this.getEntry(i),"selected");
      if(this.hasFocus) { 
        this.show();
        this.active = true;
      }
    } else {
      this.active = false;
      this.hide();
    }
  },
  
  markPrevious: function() {
    if(this.index > 0) this.index--
      else this.index = this.entryCount-1;
    this.getEntry(this.index).scrollIntoView(true);
  },
  
  markNext: function() {
    if(this.index < this.entryCount-1) this.index++
      else this.index = 0;
    this.getEntry(this.index).scrollIntoView(false);
  },
  
  getEntry: function(index) {
    return this.update.firstChild.childNodes[index];
  },
  
  getCurrentEntry: function() {
    return this.getEntry(this.index);
  },
  
  selectEntry: function() {
    this.active = false;
    this.updateElement(this.getCurrentEntry());
  },

  updateElement: function(selectedElement) {
    if (this.options.updateElement) {
      this.options.updateElement(selectedElement);
      return;
    }
    var value = '';
    if (this.options.select) {
      var nodes = $(selectedElement).select('.' + this.options.select) || [];
      if(nodes.length>0) value = Element.collectTextNodes(nodes[0], this.options.select);
    } else
      value = Element.collectTextNodesIgnoreClass(selectedElement, 'informal');
    
    var bounds = this.getTokenBounds();
    if (bounds[0] != -1) {
      var newValue = this.element.value.substr(0, bounds[0]);
      var whitespace = this.element.value.substr(bounds[0]).match(/^\s+/);
      if (whitespace)
        newValue += whitespace[0];
      this.element.value = newValue + value + this.element.value.substr(bounds[1]);
    } else {
      this.element.value = value;
    }
    this.oldElementValue = this.element.value;
    this.element.focus();
    
    if (this.options.afterUpdateElement)
      this.options.afterUpdateElement(this.element, selectedElement);
  },

  updateChoices: function(choices) {
    if(!this.changed && this.hasFocus) {
      this.update.innerHTML = choices;
      Element.cleanWhitespace(this.update);
      Element.cleanWhitespace(this.update.down());

      if(this.update.firstChild && this.update.down().childNodes) {
        this.entryCount = 
          this.update.down().childNodes.length;
        for (var i = 0; i < this.entryCount; i++) {
          var entry = this.getEntry(i);
          entry.autocompleteIndex = i;
          this.addObservers(entry);
        }
      } else { 
        this.entryCount = 0;
      }

      this.stopIndicator();
      this.index = 0;
      
      if(this.entryCount==1 && this.options.autoSelect) {
        this.selectEntry();
        this.hide();
      } else {
        this.render();
      }
    }
  },

  addObservers: function(element) {
    Event.observe(element, "mouseover", this.onHover.bindAsEventListener(this));
    Event.observe(element, "click", this.onClick.bindAsEventListener(this));
  },

  onObserverEvent: function() {
    this.changed = false;   
    this.tokenBounds = null;
    if(this.getToken().length>=this.options.minChars) {
      this.getUpdatedChoices();
    } else {
      this.active = false;
      this.hide();
    }
    this.oldElementValue = this.element.value;
  },

  getToken: function() {
    var bounds = this.getTokenBounds();
    return this.element.value.substring(bounds[0], bounds[1]).strip();
  },

  getTokenBounds: function() {
    if (null != this.tokenBounds) return this.tokenBounds;
    var value = this.element.value;
    if (value.strip().empty()) return [-1, 0];
    var diff = arguments.callee.getFirstDifferencePos(value, this.oldElementValue);
    var offset = (diff == this.oldElementValue.length ? 1 : 0);
    var prevTokenPos = -1, nextTokenPos = value.length;
    var tp;
    for (var index = 0, l = this.options.tokens.length; index < l; ++index) {
      tp = value.lastIndexOf(this.options.tokens[index], diff + offset - 1);
      if (tp > prevTokenPos) prevTokenPos = tp;
      tp = value.indexOf(this.options.tokens[index], diff + offset);
      if (-1 != tp && tp < nextTokenPos) nextTokenPos = tp;
    }
    return (this.tokenBounds = [prevTokenPos + 1, nextTokenPos]);
  }
});

Autocompleter.Base.prototype.getTokenBounds.getFirstDifferencePos = function(newS, oldS) {
  var boundary = Math.min(newS.length, oldS.length);
  for (var index = 0; index < boundary; ++index)
    if (newS[index] != oldS[index])
      return index;
  return boundary;
};

Ajax.Autocompleter = Class.create(Autocompleter.Base, {
  initialize: function(element, update, url, options) {
    this.baseInitialize(element, update, options);
    this.options.asynchronous  = true;
    this.options.onComplete    = this.onComplete.bind(this);
    this.options.defaultParams = this.options.parameters || null;
    this.url                   = url;
  },

  getUpdatedChoices: function() {
    this.startIndicator();
    
    var entry = encodeURIComponent(this.options.paramName) + '=' + 
      encodeURIComponent(this.getToken());

    this.options.parameters = this.options.callback ?
      this.options.callback(this.element, entry) : entry;

    if(this.options.defaultParams) 
      this.options.parameters += '&' + this.options.defaultParams;
    
    new Ajax.Request(this.url, this.options);
  },

  onComplete: function(request) {
    this.updateChoices(request.responseText);
  }
});

// The local array autocompleter. Used when you'd prefer to
// inject an array of autocompletion options into the page, rather
// than sending out Ajax queries, which can be quite slow sometimes.
//
// The constructor takes four parameters. The first two are, as usual,
// the id of the monitored textbox, and id of the autocompletion menu.
// The third is the array you want to autocomplete from, and the fourth
// is the options block.
//
// Extra local autocompletion options:
// - choices - How many autocompletion choices to offer
//
// - partialSearch - If false, the autocompleter will match entered
//                    text only at the beginning of strings in the 
//                    autocomplete array. Defaults to true, which will
//                    match text at the beginning of any *word* in the
//                    strings in the autocomplete array. If you want to
//                    search anywhere in the string, additionally set
//                    the option fullSearch to true (default: off).
//
// - fullSsearch - Search anywhere in autocomplete array strings.
//
// - partialChars - How many characters to enter before triggering
//                   a partial match (unlike minChars, which defines
//                   how many characters are required to do any match
//                   at all). Defaults to 2.
//
// - ignoreCase - Whether to ignore case when autocompleting.
//                 Defaults to true.
//
// It's possible to pass in a custom function as the 'selector' 
// option, if you prefer to write your own autocompletion logic.
// In that case, the other options above will not apply unless
// you support them.

Autocompleter.Local = Class.create(Autocompleter.Base, {
  initialize: function(element, update, array, options) {
    this.baseInitialize(element, update, options);
    this.options.array = array;
  },

  getUpdatedChoices: function() {
    this.updateChoices(this.options.selector(this));
  },

  setOptions: function(options) {
    this.options = Object.extend({
      choices: 10,
      partialSearch: true,
      partialChars: 2,
      ignoreCase: true,
      fullSearch: false,
      selector: function(instance) {
        var ret       = []; // Beginning matches
        var partial   = []; // Inside matches
        var entry     = instance.getToken();
        var count     = 0;

        for (var i = 0; i < instance.options.array.length &&  
          ret.length < instance.options.choices ; i++) { 

          var elem = instance.options.array[i];
          var foundPos = instance.options.ignoreCase ? 
            elem.toLowerCase().indexOf(entry.toLowerCase()) : 
            elem.indexOf(entry);

          while (foundPos != -1) {
            if (foundPos == 0 && elem.length != entry.length) { 
              ret.push("<li><strong>" + elem.substr(0, entry.length) + "</strong>" + 
                elem.substr(entry.length) + "</li>");
              break;
            } else if (entry.length >= instance.options.partialChars && 
              instance.options.partialSearch && foundPos != -1) {
              if (instance.options.fullSearch || /\s/.test(elem.substr(foundPos-1,1))) {
                partial.push("<li>" + elem.substr(0, foundPos) + "<strong>" +
                  elem.substr(foundPos, entry.length) + "</strong>" + elem.substr(
                  foundPos + entry.length) + "</li>");
                break;
              }
            }

            foundPos = instance.options.ignoreCase ? 
              elem.toLowerCase().indexOf(entry.toLowerCase(), foundPos + 1) : 
              elem.indexOf(entry, foundPos + 1);

          }
        }
        if (partial.length)
          ret = ret.concat(partial.slice(0, instance.options.choices - ret.length))
        return "<ul>" + ret.join('') + "</ul>";
      }
    }, options || { });
  }
});

// AJAX in-place editor and collection editor
// Full rewrite by Christophe Porteneuve <tdd@tddsworld.com> (April 2007).

// Use this if you notice weird scrolling problems on some browsers,
// the DOM might be a bit confused when this gets called so do this
// waits 1 ms (with setTimeout) until it does the activation
Field.scrollFreeActivate = function(field) {
  setTimeout(function() {
    Field.activate(field);
  }, 1);
}

Ajax.InPlaceEditor = Class.create({
  initialize: function(element, url, options) {
    this.url = url;
    this.element = element = $(element);
    this.prepareOptions();
    this._controls = { };
    arguments.callee.dealWithDeprecatedOptions(options); // DEPRECATION LAYER!!!
    Object.extend(this.options, options || { });
    if (!this.options.formId && this.element.id) {
      this.options.formId = this.element.id + '-inplaceeditor';
      if ($(this.options.formId))
        this.options.formId = '';
    }
    if (this.options.externalControl)
      this.options.externalControl = $(this.options.externalControl);
    if (!this.options.externalControl)
      this.options.externalControlOnly = false;
    this._originalBackground = this.element.getStyle('background-color') || 'transparent';
    this.element.title = this.options.clickToEditText;
    this._boundCancelHandler = this.handleFormCancellation.bind(this);
    this._boundComplete = (this.options.onComplete || Prototype.emptyFunction).bind(this);
    this._boundFailureHandler = this.handleAJAXFailure.bind(this);
    this._boundSubmitHandler = this.handleFormSubmission.bind(this);
    this._boundWrapperHandler = this.wrapUp.bind(this);
    this.registerListeners();
  },
  checkForEscapeOrReturn: function(e) {
    if (!this._editing || e.ctrlKey || e.altKey || e.shiftKey) return;
    if (Event.KEY_ESC == e.keyCode)
      this.handleFormCancellation(e);
    else if (Event.KEY_RETURN == e.keyCode)
      this.handleFormSubmission(e);
  },
  createControl: function(mode, handler, extraClasses) {
    var control = this.options[mode + 'Control'];
    var text = this.options[mode + 'Text'];
    if ('button' == control) {
      var btn = document.createElement('input');
      btn.type = 'submit';
      btn.value = text;
      btn.className = 'editor_' + mode + '_button';
      if ('cancel' == mode)
        btn.onclick = this._boundCancelHandler;
      this._form.appendChild(btn);
      this._controls[mode] = btn;
    } else if ('link' == control) {
      var link = document.createElement('a');
      link.href = '#';
      link.appendChild(document.createTextNode(text));
      link.onclick = 'cancel' == mode ? this._boundCancelHandler : this._boundSubmitHandler;
      link.className = 'editor_' + mode + '_link';
      if (extraClasses)
        link.className += ' ' + extraClasses;
      this._form.appendChild(link);
      this._controls[mode] = link;
    }
  },
  createEditField: function() {
    var text = (this.options.loadTextURL ? this.options.loadingText : this.getText());
    var fld;
    if (1 >= this.options.rows && !/\r|\n/.test(this.getText())) {
      fld = document.createElement('input');
      fld.type = 'text';
      var size = this.options.size || this.options.cols || 0;
      if (0 < size) fld.size = size;
    } else {
      fld = document.createElement('textarea');
      fld.rows = (1 >= this.options.rows ? this.options.autoRows : this.options.rows);
      fld.cols = this.options.cols || 40;
    }
    fld.name = this.options.paramName;
    fld.value = text; // No HTML breaks conversion anymore
    fld.className = 'editor_field';
    if (this.options.submitOnBlur)
      fld.onblur = this._boundSubmitHandler;
    this._controls.editor = fld;
    if (this.options.loadTextURL)
      this.loadExternalText();
    this._form.appendChild(this._controls.editor);
  },
  createForm: function() {
    var ipe = this;
    function addText(mode, condition) {
      var text = ipe.options['text' + mode + 'Controls'];
      if (!text || condition === false) return;
      ipe._form.appendChild(document.createTextNode(text));
    };
    this._form = $(document.createElement('form'));
    this._form.id = this.options.formId;
    this._form.addClassName(this.options.formClassName);
    this._form.onsubmit = this._boundSubmitHandler;
    this.createEditField();
    if ('textarea' == this._controls.editor.tagName.toLowerCase())
      this._form.appendChild(document.createElement('br'));
    if (this.options.onFormCustomization)
      this.options.onFormCustomization(this, this._form);
    addText('Before', this.options.okControl || this.options.cancelControl);
    this.createControl('ok', this._boundSubmitHandler);
    addText('Between', this.options.okControl && this.options.cancelControl);
    this.createControl('cancel', this._boundCancelHandler, 'editor_cancel');
    addText('After', this.options.okControl || this.options.cancelControl);
  },
  destroy: function() {
    if (this._oldInnerHTML)
      this.element.innerHTML = this._oldInnerHTML;
    this.leaveEditMode();
    this.unregisterListeners();
  },
  enterEditMode: function(e) {
    if (this._saving || this._editing) return;
    this._editing = true;
    this.triggerCallback('onEnterEditMode');
    if (this.options.externalControl)
      this.options.externalControl.hide();
    this.element.hide();
    this.createForm();
    this.element.parentNode.insertBefore(this._form, this.element);
    if (!this.options.loadTextURL)
      this.postProcessEditField();
    if (e) Event.stop(e);
  },
  enterHover: function(e) {
    if (this.options.hoverClassName)
      this.element.addClassName(this.options.hoverClassName);
    if (this._saving) return;
    this.triggerCallback('onEnterHover');
  },
  getText: function() {
    return this.element.innerHTML;
  },
  handleAJAXFailure: function(transport) {
    this.triggerCallback('onFailure', transport);
    if (this._oldInnerHTML) {
      this.element.innerHTML = this._oldInnerHTML;
      this._oldInnerHTML = null;
    }
  },
  handleFormCancellation: function(e) {
    this.wrapUp();
    if (e) Event.stop(e);
  },
  handleFormSubmission: function(e) {
    var form = this._form;
    var value = $F(this._controls.editor);
    this.prepareSubmission();
    var params = this.options.callback(form, value) || '';
    if (Object.isString(params))
      params = params.toQueryParams();
    params.editorId = this.element.id;
    if (this.options.htmlResponse) {
      var options = Object.extend({ evalScripts: true }, this.options.ajaxOptions);
      Object.extend(options, {
        parameters: params,
        onComplete: this._boundWrapperHandler,
        onFailure: this._boundFailureHandler
      });
      new Ajax.Updater({ success: this.element }, this.url, options);
    } else {
      var options = Object.extend({ method: 'get' }, this.options.ajaxOptions);
      Object.extend(options, {
        parameters: params,
        onComplete: this._boundWrapperHandler,
        onFailure: this._boundFailureHandler
      });
      new Ajax.Request(this.url, options);
    }
    if (e) Event.stop(e);
  },
  leaveEditMode: function() {
    this.element.removeClassName(this.options.savingClassName);
    this.removeForm();
    this.leaveHover();
    this.element.style.backgroundColor = this._originalBackground;
    this.element.show();
    if (this.options.externalControl)
      this.options.externalControl.show();
    this._saving = false;
    this._editing = false;
    this._oldInnerHTML = null;
    this.triggerCallback('onLeaveEditMode');
  },
  leaveHover: function(e) {
    if (this.options.hoverClassName)
      this.element.removeClassName(this.options.hoverClassName);
    if (this._saving) return;
    this.triggerCallback('onLeaveHover');
  },
  loadExternalText: function() {
    this._form.addClassName(this.options.loadingClassName);
    this._controls.editor.disabled = true;
    var options = Object.extend({ method: 'get' }, this.options.ajaxOptions);
    Object.extend(options, {
      parameters: 'editorId=' + encodeURIComponent(this.element.id),
      onComplete: Prototype.emptyFunction,
      onSuccess: function(transport) {
        this._form.removeClassName(this.options.loadingClassName);
        var text = transport.responseText;
        if (this.options.stripLoadedTextTags)
          text = text.stripTags();
        this._controls.editor.value = text;
        this._controls.editor.disabled = false;
        this.postProcessEditField();
      }.bind(this),
      onFailure: this._boundFailureHandler
    });
    new Ajax.Request(this.options.loadTextURL, options);
  },
  postProcessEditField: function() {
    var fpc = this.options.fieldPostCreation;
    if (fpc)
      $(this._controls.editor)['focus' == fpc ? 'focus' : 'activate']();
  },
  prepareOptions: function() {
    this.options = Object.clone(Ajax.InPlaceEditor.DefaultOptions);
    Object.extend(this.options, Ajax.InPlaceEditor.DefaultCallbacks);
    [this._extraDefaultOptions].flatten().compact().each(function(defs) {
      Object.extend(this.options, defs);
    }.bind(this));
  },
  prepareSubmission: function() {
    this._saving = true;
    this.removeForm();
    this.leaveHover();
    this.showSaving();
  },
  registerListeners: function() {
    this._listeners = { };
    var listener;
    $H(Ajax.InPlaceEditor.Listeners).each(function(pair) {
      listener = this[pair.value].bind(this);
      this._listeners[pair.key] = listener;
      if (!this.options.externalControlOnly)
        this.element.observe(pair.key, listener);
      if (this.options.externalControl)
        this.options.externalControl.observe(pair.key, listener);
    }.bind(this));
  },
  removeForm: function() {
    if (!this._form) return;
    this._form.remove();
    this._form = null;
    this._controls = { };
  },
  showSaving: function() {
    this._oldInnerHTML = this.element.innerHTML;
    this.element.innerHTML = this.options.savingText;
    this.element.addClassName(this.options.savingClassName);
    this.element.style.backgroundColor = this._originalBackground;
    this.element.show();
  },
  triggerCallback: function(cbName, arg) {
    if ('function' == typeof this.options[cbName]) {
      this.options[cbName](this, arg);
    }
  },
  unregisterListeners: function() {
    $H(this._listeners).each(function(pair) {
      if (!this.options.externalControlOnly)
        this.element.stopObserving(pair.key, pair.value);
      if (this.options.externalControl)
        this.options.externalControl.stopObserving(pair.key, pair.value);
    }.bind(this));
  },
  wrapUp: function(transport) {
    this.leaveEditMode();
    // Can't use triggerCallback due to backward compatibility: requires
    // binding + direct element
    this._boundComplete(transport, this.element);
  }
});

Object.extend(Ajax.InPlaceEditor.prototype, {
  dispose: Ajax.InPlaceEditor.prototype.destroy
});

Ajax.InPlaceCollectionEditor = Class.create(Ajax.InPlaceEditor, {
  initialize: function($super, element, url, options) {
    this._extraDefaultOptions = Ajax.InPlaceCollectionEditor.DefaultOptions;
    $super(element, url, options);
  },

  createEditField: function() {
    var list = document.createElement('select');
    list.name = this.options.paramName;
    list.size = 1;
    this._controls.editor = list;
    this._collection = this.options.collection || [];
    if (this.options.loadCollectionURL)
      this.loadCollection();
    else
      this.checkForExternalText();
    this._form.appendChild(this._controls.editor);
  },

  loadCollection: function() {
    this._form.addClassName(this.options.loadingClassName);
    this.showLoadingText(this.options.loadingCollectionText);
    var options = Object.extend({ method: 'get' }, this.options.ajaxOptions);
    Object.extend(options, {
      parameters: 'editorId=' + encodeURIComponent(this.element.id),
      onComplete: Prototype.emptyFunction,
      onSuccess: function(transport) {
        var js = transport.responseText.strip();
        if (!/^\[.*\]$/.test(js)) // TODO: improve sanity check
          throw 'Server returned an invalid collection representation.';
        this._collection = eval(js);
        this.checkForExternalText();
      }.bind(this),
      onFailure: this.onFailure
    });
    new Ajax.Request(this.options.loadCollectionURL, options);
  },

  showLoadingText: function(text) {
    this._controls.editor.disabled = true;
    var tempOption = this._controls.editor.firstChild;
    if (!tempOption) {
      tempOption = document.createElement('option');
      tempOption.value = '';
      this._controls.editor.appendChild(tempOption);
      tempOption.selected = true;
    }
    tempOption.update((text || '').stripScripts().stripTags());
  },

  checkForExternalText: function() {
    this._text = this.getText();
    if (this.options.loadTextURL)
      this.loadExternalText();
    else
      this.buildOptionList();
  },

  loadExternalText: function() {
    this.showLoadingText(this.options.loadingText);
    var options = Object.extend({ method: 'get' }, this.options.ajaxOptions);
    Object.extend(options, {
      parameters: 'editorId=' + encodeURIComponent(this.element.id),
      onComplete: Prototype.emptyFunction,
      onSuccess: function(transport) {
        this._text = transport.responseText.strip();
        this.buildOptionList();
      }.bind(this),
      onFailure: this.onFailure
    });
    new Ajax.Request(this.options.loadTextURL, options);
  },

  buildOptionList: function() {
    this._form.removeClassName(this.options.loadingClassName);
    this._collection = this._collection.map(function(entry) {
      return 2 === entry.length ? entry : [entry, entry].flatten();
    });
    var marker = ('value' in this.options) ? this.options.value : this._text;
    var textFound = this._collection.any(function(entry) {
      return entry[0] == marker;
    }.bind(this));
    this._controls.editor.update('');
    var option;
    this._collection.each(function(entry, index) {
      option = document.createElement('option');
      option.value = entry[0];
      option.selected = textFound ? entry[0] == marker : 0 == index;
      option.appendChild(document.createTextNode(entry[1]));
      this._controls.editor.appendChild(option);
    }.bind(this));
    this._controls.editor.disabled = false;
    Field.scrollFreeActivate(this._controls.editor);
  }
});

//**** DEPRECATION LAYER FOR InPlace[Collection]Editor! ****
//**** This only  exists for a while,  in order to  let ****
//**** users adapt to  the new API.  Read up on the new ****
//**** API and convert your code to it ASAP!            ****

Ajax.InPlaceEditor.prototype.initialize.dealWithDeprecatedOptions = function(options) {
  if (!options) return;
  function fallback(name, expr) {
    if (name in options || expr === undefined) return;
    options[name] = expr;
  };
  fallback('cancelControl', (options.cancelLink ? 'link' : (options.cancelButton ? 'button' :
    options.cancelLink == options.cancelButton == false ? false : undefined)));
  fallback('okControl', (options.okLink ? 'link' : (options.okButton ? 'button' :
    options.okLink == options.okButton == false ? false : undefined)));
  fallback('highlightColor', options.highlightcolor);
  fallback('highlightEndColor', options.highlightendcolor);
};

Object.extend(Ajax.InPlaceEditor, {
  DefaultOptions: {
    ajaxOptions: { },
    autoRows: 3,                                // Use when multi-line w/ rows == 1
    cancelControl: 'link',                      // 'link'|'button'|false
    cancelText: 'cancel',
    clickToEditText: 'Click to edit',
    externalControl: null,                      // id|elt
    externalControlOnly: false,
    fieldPostCreation: 'activate',              // 'activate'|'focus'|false
    formClassName: 'inplaceeditor-form',
    formId: null,                               // id|elt
    highlightColor: '#ffff99',
    highlightEndColor: '#ffffff',
    hoverClassName: '',
    htmlResponse: true,
    loadingClassName: 'inplaceeditor-loading',
    loadingText: 'Loading...',
    okControl: 'button',                        // 'link'|'button'|false
    okText: 'ok',
    paramName: 'value',
    rows: 1,                                    // If 1 and multi-line, uses autoRows
    savingClassName: 'inplaceeditor-saving',
    savingText: 'Saving...',
    size: 0,
    stripLoadedTextTags: false,
    submitOnBlur: false,
    textAfterControls: '',
    textBeforeControls: '',
    textBetweenControls: ''
  },
  DefaultCallbacks: {
    callback: function(form) {
      return Form.serialize(form);
    },
    onComplete: function(transport, element) {
      // For backward compatibility, this one is bound to the IPE, and passes
      // the element directly.  It was too often customized, so we don't break it.
      new Effect.Highlight(element, {
        startcolor: this.options.highlightColor, keepBackgroundImage: true });
    },
    onEnterEditMode: null,
    onEnterHover: function(ipe) {
      ipe.element.style.backgroundColor = ipe.options.highlightColor;
      if (ipe._effect)
        ipe._effect.cancel();
    },
    onFailure: function(transport, ipe) {
      alert('Error communication with the server: ' + transport.responseText.stripTags());
    },
    onFormCustomization: null, // Takes the IPE and its generated form, after editor, before controls.
    onLeaveEditMode: null,
    onLeaveHover: function(ipe) {
      ipe._effect = new Effect.Highlight(ipe.element, {
        startcolor: ipe.options.highlightColor, endcolor: ipe.options.highlightEndColor,
        restorecolor: ipe._originalBackground, keepBackgroundImage: true
      });
    }
  },
  Listeners: {
    click: 'enterEditMode',
    keydown: 'checkForEscapeOrReturn',
    mouseover: 'enterHover',
    mouseout: 'leaveHover'
  }
});

Ajax.InPlaceCollectionEditor.DefaultOptions = {
  loadingCollectionText: 'Loading options...'
};

// Delayed observer, like Form.Element.Observer, 
// but waits for delay after last key input
// Ideal for live-search fields

Form.Element.DelayedObserver = Class.create({
  initialize: function(element, delay, callback) {
    this.delay     = delay || 0.5;
    this.element   = $(element);
    this.callback  = callback;
    this.timer     = null;
    this.lastValue = $F(this.element); 
    Event.observe(this.element,'keyup',this.delayedListener.bindAsEventListener(this));
  },
  delayedListener: function(event) {
    if(this.lastValue == $F(this.element)) return;
    if(this.timer) clearTimeout(this.timer);
    this.timer = setTimeout(this.onTimerEvent.bind(this), this.delay * 1000);
    this.lastValue = $F(this.element);
  },
  onTimerEvent: function() {
    this.timer = null;
    this.callback(this.element, $F(this.element));
  }
});
// script.aculo.us dragdrop.js v1.8.1, Thu Jan 03 22:07:12 -0500 2008

// Copyright (c) 2005-2007 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us)
//           (c) 2005-2007 Sammi Williams (http://www.oriontransfer.co.nz, sammi@oriontransfer.co.nz)
// 
// script.aculo.us is freely distributable under the terms of an MIT-style license.
// For details, see the script.aculo.us web site: http://script.aculo.us/

if(Object.isUndefined(Effect))
  throw("dragdrop.js requires including script.aculo.us' effects.js library");

var Droppables = {
  drops: [],

  remove: function(element) {
    this.drops = this.drops.reject(function(d) { return d.element==$(element) });
  },

  add: function(element) {
    element = $(element);
    var options = Object.extend({
      greedy:     true,
      hoverclass: null,
      tree:       false
    }, arguments[1] || { });

    // cache containers
    if(options.containment) {
      options._containers = [];
      var containment = options.containment;
      if(Object.isArray(containment)) {
        containment.each( function(c) { options._containers.push($(c)) });
      } else {
        options._containers.push($(containment));
      }
    }
    
    if(options.accept) options.accept = [options.accept].flatten();

    Element.makePositioned(element); // fix IE
    options.element = element;

    this.drops.push(options);
  },
  
  findDeepestChild: function(drops) {
    deepest = drops[0];
      
    for (i = 1; i < drops.length; ++i)
      if (Element.isParent(drops[i].element, deepest.element))
        deepest = drops[i];
    
    return deepest;
  },

  isContained: function(element, drop) {
    var containmentNode;
    if(drop.tree) {
      containmentNode = element.treeNode; 
    } else {
      containmentNode = element.parentNode;
    }
    return drop._containers.detect(function(c) { return containmentNode == c });
  },
  
  isAffected: function(point, element, drop) {
    return (
      (drop.element!=element) &&
      ((!drop._containers) ||
        this.isContained(element, drop)) &&
      ((!drop.accept) ||
        (Element.classNames(element).detect( 
          function(v) { return drop.accept.include(v) } ) )) &&
      Position.within(drop.element, point[0], point[1]) );
  },

  deactivate: function(drop) {
    if(drop.hoverclass)
      Element.removeClassName(drop.element, drop.hoverclass);
    this.last_active = null;
  },

  activate: function(drop) {
    if(drop.hoverclass)
      Element.addClassName(drop.element, drop.hoverclass);
    this.last_active = drop;
  },

  show: function(point, element) {
    if(!this.drops.length) return;
    var drop, affected = [];
    
    this.drops.each( function(drop) {
      if(Droppables.isAffected(point, element, drop))
        affected.push(drop);
    });
        
    if(affected.length>0)
      drop = Droppables.findDeepestChild(affected);

    if(this.last_active && this.last_active != drop) this.deactivate(this.last_active);
    if (drop) {
      Position.within(drop.element, point[0], point[1]);
      if(drop.onHover)
        drop.onHover(element, drop.element, Position.overlap(drop.overlap, drop.element));
      
      if (drop != this.last_active) Droppables.activate(drop);
    }
  },

  fire: function(event, element) {
    if(!this.last_active) return;
    Position.prepare();

    if (this.isAffected([Event.pointerX(event), Event.pointerY(event)], element, this.last_active))
      if (this.last_active.onDrop) {
        this.last_active.onDrop(element, this.last_active.element, event); 
        return true; 
      }
  },

  reset: function() {
    if(this.last_active)
      this.deactivate(this.last_active);
  }
}

var Draggables = {
  drags: [],
  observers: [],
  
  register: function(draggable) {
    if(this.drags.length == 0) {
      this.eventMouseUp   = this.endDrag.bindAsEventListener(this);
      this.eventMouseMove = this.updateDrag.bindAsEventListener(this);
      this.eventKeypress  = this.keyPress.bindAsEventListener(this);
      
      Event.observe(document, "mouseup", this.eventMouseUp);
      Event.observe(document, "mousemove", this.eventMouseMove);
      Event.observe(document, "keypress", this.eventKeypress);
    }
    this.drags.push(draggable);
  },
  
  unregister: function(draggable) {
    this.drags = this.drags.reject(function(d) { return d==draggable });
    if(this.drags.length == 0) {
      Event.stopObserving(document, "mouseup", this.eventMouseUp);
      Event.stopObserving(document, "mousemove", this.eventMouseMove);
      Event.stopObserving(document, "keypress", this.eventKeypress);
    }
  },
  
  activate: function(draggable) {
    if(draggable.options.delay) { 
      this._timeout = setTimeout(function() { 
        Draggables._timeout = null; 
        window.focus(); 
        Draggables.activeDraggable = draggable; 
      }.bind(this), draggable.options.delay); 
    } else {
      window.focus(); // allows keypress events if window isn't currently focused, fails for Safari
      this.activeDraggable = draggable;
    }
  },
  
  deactivate: function() {
    this.activeDraggable = null;
  },
  
  updateDrag: function(event) {
    if(!this.activeDraggable) return;
    var pointer = [Event.pointerX(event), Event.pointerY(event)];
    // Mozilla-based browsers fire successive mousemove events with
    // the same coordinates, prevent needless redrawing (moz bug?)
    if(this._lastPointer && (this._lastPointer.inspect() == pointer.inspect())) return;
    this._lastPointer = pointer;
    
    this.activeDraggable.updateDrag(event, pointer);
  },
  
  endDrag: function(event) {
    if(this._timeout) { 
      clearTimeout(this._timeout); 
      this._timeout = null; 
    }
    if(!this.activeDraggable) return;
    this._lastPointer = null;
    this.activeDraggable.endDrag(event);
    this.activeDraggable = null;
  },
  
  keyPress: function(event) {
    if(this.activeDraggable)
      this.activeDraggable.keyPress(event);
  },
  
  addObserver: function(observer) {
    this.observers.push(observer);
    this._cacheObserverCallbacks();
  },
  
  removeObserver: function(element) {  // element instead of observer fixes mem leaks
    this.observers = this.observers.reject( function(o) { return o.element==element });
    this._cacheObserverCallbacks();
  },
  
  notify: function(eventName, draggable, event) {  // 'onStart', 'onEnd', 'onDrag'
    if(this[eventName+'Count'] > 0)
      this.observers.each( function(o) {
        if(o[eventName]) o[eventName](eventName, draggable, event);
      });
    if(draggable.options[eventName]) draggable.options[eventName](draggable, event);
  },
  
  _cacheObserverCallbacks: function() {
    ['onStart','onEnd','onDrag'].each( function(eventName) {
      Draggables[eventName+'Count'] = Draggables.observers.select(
        function(o) { return o[eventName]; }
      ).length;
    });
  }
}

/*--------------------------------------------------------------------------*/

var Draggable = Class.create({
  initialize: function(element) {
    var defaults = {
      handle: false,
      reverteffect: function(element, top_offset, left_offset) {
        var dur = Math.sqrt(Math.abs(top_offset^2)+Math.abs(left_offset^2))*0.02;
        new Effect.Move(element, { x: -left_offset, y: -top_offset, duration: dur,
          queue: {scope:'_draggable', position:'end'}
        });
      },
      endeffect: function(element) {
        var toOpacity = Object.isNumber(element._opacity) ? element._opacity : 1.0;
        new Effect.Opacity(element, {duration:0.2, from:0.7, to:toOpacity, 
          queue: {scope:'_draggable', position:'end'},
          afterFinish: function(){ 
            Draggable._dragging[element] = false 
          }
        }); 
      },
      zindex: 1000,
      revert: false,
      quiet: false,
      scroll: false,
      scrollSensitivity: 20,
      scrollSpeed: 15,
      snap: false,  // false, or xy or [x,y] or function(x,y){ return [x,y] }
      delay: 0
    };
    
    if(!arguments[1] || Object.isUndefined(arguments[1].endeffect))
      Object.extend(defaults, {
        starteffect: function(element) {
          element._opacity = Element.getOpacity(element);
          Draggable._dragging[element] = true;
          new Effect.Opacity(element, {duration:0.2, from:element._opacity, to:0.7}); 
        }
      });
    
    var options = Object.extend(defaults, arguments[1] || { });

    this.element = $(element);
    
    if(options.handle && Object.isString(options.handle))
      this.handle = this.element.down('.'+options.handle, 0);
    
    if(!this.handle) this.handle = $(options.handle);
    if(!this.handle) this.handle = this.element;
    
    if(options.scroll && !options.scroll.scrollTo && !options.scroll.outerHTML) {
      options.scroll = $(options.scroll);
      this._isScrollChild = Element.childOf(this.element, options.scroll);
    }

    Element.makePositioned(this.element); // fix IE    

    this.options  = options;
    this.dragging = false;   

    this.eventMouseDown = this.initDrag.bindAsEventListener(this);
    Event.observe(this.handle, "mousedown", this.eventMouseDown);
    
    Draggables.register(this);
  },
  
  destroy: function() {
    Event.stopObserving(this.handle, "mousedown", this.eventMouseDown);
    Draggables.unregister(this);
  },
  
  currentDelta: function() {
    return([
      parseInt(Element.getStyle(this.element,'left') || '0'),
      parseInt(Element.getStyle(this.element,'top') || '0')]);
  },
  
  initDrag: function(event) {
    if(!Object.isUndefined(Draggable._dragging[this.element]) &&
      Draggable._dragging[this.element]) return;
    if(Event.isLeftClick(event)) {    
      // abort on form elements, fixes a Firefox issue
      var src = Event.element(event);
      if((tag_name = src.tagName.toUpperCase()) && (
        tag_name=='INPUT' ||
        tag_name=='SELECT' ||
        tag_name=='OPTION' ||
        tag_name=='BUTTON' ||
        tag_name=='TEXTAREA')) return;
        
      var pointer = [Event.pointerX(event), Event.pointerY(event)];
      var pos     = Position.cumulativeOffset(this.element);
      this.offset = [0,1].map( function(i) { return (pointer[i] - pos[i]) });
      
      Draggables.activate(this);
      Event.stop(event);
    }
  },
  
  startDrag: function(event) {
    this.dragging = true;
    if(!this.delta)
      this.delta = this.currentDelta();
    
    if(this.options.zindex) {
      this.originalZ = parseInt(Element.getStyle(this.element,'z-index') || 0);
      this.element.style.zIndex = this.options.zindex;
    }
    
    if(this.options.ghosting) {
      this._clone = this.element.cloneNode(true);
      this.element._originallyAbsolute = (this.element.getStyle('position') == 'absolute');
      if (!this.element._originallyAbsolute)
        Position.absolutize(this.element);
      this.element.parentNode.insertBefore(this._clone, this.element);
    }
    
    if(this.options.scroll) {
      if (this.options.scroll == window) {
        var where = this._getWindowScroll(this.options.scroll);
        this.originalScrollLeft = where.left;
        this.originalScrollTop = where.top;
      } else {
        this.originalScrollLeft = this.options.scroll.scrollLeft;
        this.originalScrollTop = this.options.scroll.scrollTop;
      }
    }
    
    Draggables.notify('onStart', this, event);
        
    if(this.options.starteffect) this.options.starteffect(this.element);
  },
  
  updateDrag: function(event, pointer) {
    if(!this.dragging) this.startDrag(event);
    
    if(!this.options.quiet){
      Position.prepare();
      Droppables.show(pointer, this.element);
    }
    
    Draggables.notify('onDrag', this, event);
    
    this.draw(pointer);
    if(this.options.change) this.options.change(this);
    
    if(this.options.scroll) {
      this.stopScrolling();
      
      var p;
      if (this.options.scroll == window) {
        with(this._getWindowScroll(this.options.scroll)) { p = [ left, top, left+width, top+height ]; }
      } else {
        p = Position.page(this.options.scroll);
        p[0] += this.options.scroll.scrollLeft + Position.deltaX;
        p[1] += this.options.scroll.scrollTop + Position.deltaY;
        p.push(p[0]+this.options.scroll.offsetWidth);
        p.push(p[1]+this.options.scroll.offsetHeight);
      }
      var speed = [0,0];
      if(pointer[0] < (p[0]+this.options.scrollSensitivity)) speed[0] = pointer[0]-(p[0]+this.options.scrollSensitivity);
      if(pointer[1] < (p[1]+this.options.scrollSensitivity)) speed[1] = pointer[1]-(p[1]+this.options.scrollSensitivity);
      if(pointer[0] > (p[2]-this.options.scrollSensitivity)) speed[0] = pointer[0]-(p[2]-this.options.scrollSensitivity);
      if(pointer[1] > (p[3]-this.options.scrollSensitivity)) speed[1] = pointer[1]-(p[3]-this.options.scrollSensitivity);
      this.startScrolling(speed);
    }
    
    // fix AppleWebKit rendering
    if(Prototype.Browser.WebKit) window.scrollBy(0,0);
    
    Event.stop(event);
  },
  
  finishDrag: function(event, success) {
    this.dragging = false;
    
    if(this.options.quiet){
      Position.prepare();
      var pointer = [Event.pointerX(event), Event.pointerY(event)];
      Droppables.show(pointer, this.element);
    }

    if(this.options.ghosting) {
      if (!this.element._originallyAbsolute)
        Position.relativize(this.element);
      delete this.element._originallyAbsolute;
      Element.remove(this._clone);
      this._clone = null;
    }

    var dropped = false; 
    if(success) { 
      dropped = Droppables.fire(event, this.element); 
      if (!dropped) dropped = false; 
    }
    if(dropped && this.options.onDropped) this.options.onDropped(this.element);
    Draggables.notify('onEnd', this, event);

    var revert = this.options.revert;
    if(revert && Object.isFunction(revert)) revert = revert(this.element);
    
    var d = this.currentDelta();
    if(revert && this.options.reverteffect) {
      if (dropped == 0 || revert != 'failure')
        this.options.reverteffect(this.element,
          d[1]-this.delta[1], d[0]-this.delta[0]);
    } else {
      this.delta = d;
    }

    if(this.options.zindex)
      this.element.style.zIndex = this.originalZ;

    if(this.options.endeffect) 
      this.options.endeffect(this.element);
      
    Draggables.deactivate(this);
    Droppables.reset();
  },
  
  keyPress: function(event) {
    if(event.keyCode!=Event.KEY_ESC) return;
    this.finishDrag(event, false);
    Event.stop(event);
  },
  
  endDrag: function(event) {
    if(!this.dragging) return;
    this.stopScrolling();
    this.finishDrag(event, true);
    Event.stop(event);
  },
  
  draw: function(point) {
    var pos = Position.cumulativeOffset(this.element);
    if(this.options.ghosting) {
      var r   = Position.realOffset(this.element);
      pos[0] += r[0] - Position.deltaX; pos[1] += r[1] - Position.deltaY;
    }
    
    var d = this.currentDelta();
    pos[0] -= d[0]; pos[1] -= d[1];
    
    if(this.options.scroll && (this.options.scroll != window && this._isScrollChild)) {
      pos[0] -= this.options.scroll.scrollLeft-this.originalScrollLeft;
      pos[1] -= this.options.scroll.scrollTop-this.originalScrollTop;
    }
    
    var p = [0,1].map(function(i){ 
      return (point[i]-pos[i]-this.offset[i]) 
    }.bind(this));
    
    if(this.options.snap) {
      if(Object.isFunction(this.options.snap)) {
        p = this.options.snap(p[0],p[1],this);
      } else {
      if(Object.isArray(this.options.snap)) {
        p = p.map( function(v, i) {
          return (v/this.options.snap[i]).round()*this.options.snap[i] }.bind(this))
      } else {
        p = p.map( function(v) {
          return (v/this.options.snap).round()*this.options.snap }.bind(this))
      }
    }}
    
    var style = this.element.style;
    if((!this.options.constraint) || (this.options.constraint=='horizontal'))
      style.left = p[0] + "px";
    if((!this.options.constraint) || (this.options.constraint=='vertical'))
      style.top  = p[1] + "px";
    
    if(style.visibility=="hidden") style.visibility = ""; // fix gecko rendering
  },
  
  stopScrolling: function() {
    if(this.scrollInterval) {
      clearInterval(this.scrollInterval);
      this.scrollInterval = null;
      Draggables._lastScrollPointer = null;
    }
  },
  
  startScrolling: function(speed) {
    if(!(speed[0] || speed[1])) return;
    this.scrollSpeed = [speed[0]*this.options.scrollSpeed,speed[1]*this.options.scrollSpeed];
    this.lastScrolled = new Date();
    this.scrollInterval = setInterval(this.scroll.bind(this), 10);
  },
  
  scroll: function() {
    var current = new Date();
    var delta = current - this.lastScrolled;
    this.lastScrolled = current;
    if(this.options.scroll == window) {
      with (this._getWindowScroll(this.options.scroll)) {
        if (this.scrollSpeed[0] || this.scrollSpeed[1]) {
          var d = delta / 1000;
          this.options.scroll.scrollTo( left + d*this.scrollSpeed[0], top + d*this.scrollSpeed[1] );
        }
      }
    } else {
      this.options.scroll.scrollLeft += this.scrollSpeed[0] * delta / 1000;
      this.options.scroll.scrollTop  += this.scrollSpeed[1] * delta / 1000;
    }
    
    Position.prepare();
    Droppables.show(Draggables._lastPointer, this.element);
    Draggables.notify('onDrag', this);
    if (this._isScrollChild) {
      Draggables._lastScrollPointer = Draggables._lastScrollPointer || $A(Draggables._lastPointer);
      Draggables._lastScrollPointer[0] += this.scrollSpeed[0] * delta / 1000;
      Draggables._lastScrollPointer[1] += this.scrollSpeed[1] * delta / 1000;
      if (Draggables._lastScrollPointer[0] < 0)
        Draggables._lastScrollPointer[0] = 0;
      if (Draggables._lastScrollPointer[1] < 0)
        Draggables._lastScrollPointer[1] = 0;
      this.draw(Draggables._lastScrollPointer);
    }
    
    if(this.options.change) this.options.change(this);
  },
  
  _getWindowScroll: function(w) {
    var T, L, W, H;
    with (w.document) {
      if (w.document.documentElement && documentElement.scrollTop) {
        T = documentElement.scrollTop;
        L = documentElement.scrollLeft;
      } else if (w.document.body) {
        T = body.scrollTop;
        L = body.scrollLeft;
      }
      if (w.innerWidth) {
        W = w.innerWidth;
        H = w.innerHeight;
      } else if (w.document.documentElement && documentElement.clientWidth) {
        W = documentElement.clientWidth;
        H = documentElement.clientHeight;
      } else {
        W = body.offsetWidth;
        H = body.offsetHeight
      }
    }
    return { top: T, left: L, width: W, height: H };
  }
});

Draggable._dragging = { };

/*--------------------------------------------------------------------------*/

var SortableObserver = Class.create({
  initialize: function(element, observer) {
    this.element   = $(element);
    this.observer  = observer;
    this.lastValue = Sortable.serialize(this.element);
  },
  
  onStart: function() {
    this.lastValue = Sortable.serialize(this.element);
  },
  
  onEnd: function() {
    Sortable.unmark();
    if(this.lastValue != Sortable.serialize(this.element))
      this.observer(this.element)
  }
});

var Sortable = {
  SERIALIZE_RULE: /^[^_\-](?:[A-Za-z0-9\-\_]*)[_](.*)$/,
  
  sortables: { },
  
  _findRootElement: function(element) {
    while (element.tagName.toUpperCase() != "BODY") {  
      if(element.id && Sortable.sortables[element.id]) return element;
      element = element.parentNode;
    }
  },

  options: function(element) {
    element = Sortable._findRootElement($(element));
    if(!element) return;
    return Sortable.sortables[element.id];
  },
  
  destroy: function(element){
    var s = Sortable.options(element);
    
    if(s) {
      Draggables.removeObserver(s.element);
      s.droppables.each(function(d){ Droppables.remove(d) });
      s.draggables.invoke('destroy');
      
      delete Sortable.sortables[s.element.id];
    }
  },

  create: function(element) {
    element = $(element);
    var options = Object.extend({ 
      element:     element,
      tag:         'li',       // assumes li children, override with tag: 'tagname'
      dropOnEmpty: false,
      tree:        false,
      treeTag:     'ul',
      overlap:     'vertical', // one of 'vertical', 'horizontal'
      constraint:  'vertical', // one of 'vertical', 'horizontal', false
      containment: element,    // also takes array of elements (or id's); or false
      handle:      false,      // or a CSS class
      only:        false,
      delay:       0,
      hoverclass:  null,
      ghosting:    false,
      quiet:       false, 
      scroll:      false,
      scrollSensitivity: 20,
      scrollSpeed: 15,
      format:      this.SERIALIZE_RULE,
      
      // these take arrays of elements or ids and can be 
      // used for better initialization performance
      elements:    false,
      handles:     false,
      
      onChange:    Prototype.emptyFunction,
      onUpdate:    Prototype.emptyFunction
    }, arguments[1] || { });

    // clear any old sortable with same element
    this.destroy(element);

    // build options for the draggables
    var options_for_draggable = {
      revert:      true,
      quiet:       options.quiet,
      scroll:      options.scroll,
      scrollSpeed: options.scrollSpeed,
      scrollSensitivity: options.scrollSensitivity,
      delay:       options.delay,
      ghosting:    options.ghosting,
      constraint:  options.constraint,
      handle:      options.handle };

    if(options.starteffect)
      options_for_draggable.starteffect = options.starteffect;

    if(options.reverteffect)
      options_for_draggable.reverteffect = options.reverteffect;
    else
      if(options.ghosting) options_for_draggable.reverteffect = function(element) {
        element.style.top  = 0;
        element.style.left = 0;
      };

    if(options.endeffect)
      options_for_draggable.endeffect = options.endeffect;

    if(options.zindex)
      options_for_draggable.zindex = options.zindex;

    // build options for the droppables  
    var options_for_droppable = {
      overlap:     options.overlap,
      containment: options.containment,
      tree:        options.tree,
      hoverclass:  options.hoverclass,
      onHover:     Sortable.onHover
    }
    
    var options_for_tree = {
      onHover:      Sortable.onEmptyHover,
      overlap:      options.overlap,
      containment:  options.containment,
      hoverclass:   options.hoverclass
    }

    // fix for gecko engine
    Element.cleanWhitespace(element); 

    options.draggables = [];
    options.droppables = [];

    // drop on empty handling
    if(options.dropOnEmpty || options.tree) {
      Droppables.add(element, options_for_tree);
      options.droppables.push(element);
    }

    (options.elements || this.findElements(element, options) || []).each( function(e,i) {
      var handle = options.handles ? $(options.handles[i]) :
        (options.handle ? $(e).select('.' + options.handle)[0] : e); 
      options.draggables.push(
        new Draggable(e, Object.extend(options_for_draggable, { handle: handle })));
      Droppables.add(e, options_for_droppable);
      if(options.tree) e.treeNode = element;
      options.droppables.push(e);      
    });
    
    if(options.tree) {
      (Sortable.findTreeElements(element, options) || []).each( function(e) {
        Droppables.add(e, options_for_tree);
        e.treeNode = element;
        options.droppables.push(e);
      });
    }

    // keep reference
    this.sortables[element.id] = options;

    // for onupdate
    Draggables.addObserver(new SortableObserver(element, options.onUpdate));

  },

  // return all suitable-for-sortable elements in a guaranteed order
  findElements: function(element, options) {
    return Element.findChildren(
      element, options.only, options.tree ? true : false, options.tag);
  },
  
  findTreeElements: function(element, options) {
    return Element.findChildren(
      element, options.only, options.tree ? true : false, options.treeTag);
  },

  onHover: function(element, dropon, overlap) {
    if(Element.isParent(dropon, element)) return;

    if(overlap > .33 && overlap < .66 && Sortable.options(dropon).tree) {
      return;
    } else if(overlap>0.5) {
      Sortable.mark(dropon, 'before');
      if(dropon.previousSibling != element) {
        var oldParentNode = element.parentNode;
        element.style.visibility = "hidden"; // fix gecko rendering
        dropon.parentNode.insertBefore(element, dropon);
        if(dropon.parentNode!=oldParentNode) 
          Sortable.options(oldParentNode).onChange(element);
        Sortable.options(dropon.parentNode).onChange(element);
      }
    } else {
      Sortable.mark(dropon, 'after');
      var nextElement = dropon.nextSibling || null;
      if(nextElement != element) {
        var oldParentNode = element.parentNode;
        element.style.visibility = "hidden"; // fix gecko rendering
        dropon.parentNode.insertBefore(element, nextElement);
        if(dropon.parentNode!=oldParentNode) 
          Sortable.options(oldParentNode).onChange(element);
        Sortable.options(dropon.parentNode).onChange(element);
      }
    }
  },
  
  onEmptyHover: function(element, dropon, overlap) {
    var oldParentNode = element.parentNode;
    var droponOptions = Sortable.options(dropon);
        
    if(!Element.isParent(dropon, element)) {
      var index;
      
      var children = Sortable.findElements(dropon, {tag: droponOptions.tag, only: droponOptions.only});
      var child = null;
            
      if(children) {
        var offset = Element.offsetSize(dropon, droponOptions.overlap) * (1.0 - overlap);
        
        for (index = 0; index < children.length; index += 1) {
          if (offset - Element.offsetSize (children[index], droponOptions.overlap) >= 0) {
            offset -= Element.offsetSize (children[index], droponOptions.overlap);
          } else if (offset - (Element.offsetSize (children[index], droponOptions.overlap) / 2) >= 0) {
            child = index + 1 < children.length ? children[index + 1] : null;
            break;
          } else {
            child = children[index];
            break;
          }
        }
      }
      
      dropon.insertBefore(element, child);
      
      Sortable.options(oldParentNode).onChange(element);
      droponOptions.onChange(element);
    }
  },

  unmark: function() {
    if(Sortable._marker) Sortable._marker.hide();
  },

  mark: function(dropon, position) {
    // mark on ghosting only
    var sortable = Sortable.options(dropon.parentNode);
    if(sortable && !sortable.ghosting) return; 

    if(!Sortable._marker) {
      Sortable._marker = 
        ($('dropmarker') || Element.extend(document.createElement('DIV'))).
          hide().addClassName('dropmarker').setStyle({position:'absolute'});
      document.getElementsByTagName("body").item(0).appendChild(Sortable._marker);
    }    
    var offsets = Position.cumulativeOffset(dropon);
    Sortable._marker.setStyle({left: offsets[0]+'px', top: offsets[1] + 'px'});
    
    if(position=='after')
      if(sortable.overlap == 'horizontal') 
        Sortable._marker.setStyle({left: (offsets[0]+dropon.clientWidth) + 'px'});
      else
        Sortable._marker.setStyle({top: (offsets[1]+dropon.clientHeight) + 'px'});
    
    Sortable._marker.show();
  },
  
  _tree: function(element, options, parent) {
    var children = Sortable.findElements(element, options) || [];
  
    for (var i = 0; i < children.length; ++i) {
      var match = children[i].id.match(options.format);

      if (!match) continue;
      
      var child = {
        id: encodeURIComponent(match ? match[1] : null),
        element: element,
        parent: parent,
        children: [],
        position: parent.children.length,
        container: $(children[i]).down(options.treeTag)
      }
      
      /* Get the element containing the children and recurse over it */
      if (child.container)
        this._tree(child.container, options, child)
      
      parent.children.push (child);
    }

    return parent; 
  },

  tree: function(element) {
    element = $(element);
    var sortableOptions = this.options(element);
    var options = Object.extend({
      tag: sortableOptions.tag,
      treeTag: sortableOptions.treeTag,
      only: sortableOptions.only,
      name: element.id,
      format: sortableOptions.format
    }, arguments[1] || { });
    
    var root = {
      id: null,
      parent: null,
      children: [],
      container: element,
      position: 0
    }
    
    return Sortable._tree(element, options, root);
  },

  /* Construct a [i] index for a particular node */
  _constructIndex: function(node) {
    var index = '';
    do {
      if (node.id) index = '[' + node.position + ']' + index;
    } while ((node = node.parent) != null);
    return index;
  },

  sequence: function(element) {
    element = $(element);
    var options = Object.extend(this.options(element), arguments[1] || { });
    
    return $(this.findElements(element, options) || []).map( function(item) {
      return item.id.match(options.format) ? item.id.match(options.format)[1] : '';
    });
  },

  setSequence: function(element, new_sequence) {
    element = $(element);
    var options = Object.extend(this.options(element), arguments[2] || { });
    
    var nodeMap = { };
    this.findElements(element, options).each( function(n) {
        if (n.id.match(options.format))
            nodeMap[n.id.match(options.format)[1]] = [n, n.parentNode];
        n.parentNode.removeChild(n);
    });
   
    new_sequence.each(function(ident) {
      var n = nodeMap[ident];
      if (n) {
        n[1].appendChild(n[0]);
        delete nodeMap[ident];
      }
    });
  },
  
  serialize: function(element) {
    element = $(element);
    var options = Object.extend(Sortable.options(element), arguments[1] || { });
    var name = encodeURIComponent(
      (arguments[1] && arguments[1].name) ? arguments[1].name : element.id);
    
    if (options.tree) {
      return Sortable.tree(element, arguments[1]).children.map( function (item) {
        return [name + Sortable._constructIndex(item) + "[id]=" + 
                encodeURIComponent(item.id)].concat(item.children.map(arguments.callee));
      }).flatten().join('&');
    } else {
      return Sortable.sequence(element, arguments[1]).map( function(item) {
        return name + "[]=" + encodeURIComponent(item);
      }).join('&');
    }
  }
}

// Returns true if child is contained within element
Element.isParent = function(child, element) {
  if (!child.parentNode || child == element) return false;
  if (child.parentNode == element) return true;
  return Element.isParent(child.parentNode, element);
}

Element.findChildren = function(element, only, recursive, tagName) {   
  if(!element.hasChildNodes()) return null;
  tagName = tagName.toUpperCase();
  if(only) only = [only].flatten();
  var elements = [];
  $A(element.childNodes).each( function(e) {
    if(e.tagName && e.tagName.toUpperCase()==tagName &&
      (!only || (Element.classNames(e).detect(function(v) { return only.include(v) }))))
        elements.push(e);
    if(recursive) {
      var grandchildren = Element.findChildren(e, only, recursive, tagName);
      if(grandchildren) elements.push(grandchildren);
    }
  });

  return (elements.length>0 ? elements.flatten() : []);
}

Element.offsetSize = function (element, type) {
  return element['offset' + ((type=='vertical' || type=='height') ? 'Height' : 'Width')];
}
/**************************************************************************** 
	The following functions are used to get, set and delete cookies
	Note: cookies are found (using getCookie) from subdomains (i.e. 
	*.domain.com) and subpaths (i.e. /path/to/calling/path/*).
	When deleting cookies, the path and domain must be the same as when set.
	
	Created by Klas Skogmar 2004-01-16
*****************************************************************************/

/**
	name - the name of the cookie. Only one cookie with the same name can exist.
	value - the value of the cookie
	path - the path (and subpaths) that the cookie should be valid for
	domain - the domain and subdomains that the cookie should be valid for
	expires - the time when the cookie will expire
*/
function setCookie(name, value, expires, path, domain, secure) {
	if(!expires) { expires = new Date(); expires.setDate(expires.getDate()+365); }
	document.cookie = name + "=" + escape(value) +
      "; expires=" + expires.toGMTString() +
      ((path) ? "; path=" + path : "") +
      ((domain) ? "; domain=" + domain : "") +
      ((secure) ? "; secure" : "");
}
function deleteCookie(name, path, domain) {
  if (getCookie(name)) {
    document.cookie = name + "=" + 
    ((path) ? "; path=" + path : "") +
    ((domain) ? "; domain=" + domain : "") +
    "; expires=Thu, 01-Jan-70 00:00:01 GMT";
  }
}
function getCookie(name) {
	var cookie_start = document.cookie.indexOf(name + "=");
	if(cookie_start == -1) return null;
	var cookie_end = document.cookie.indexOf("; ", cookie_start);
	if(cookie_end == -1) cookie_end = document.cookie.length;
	return unescape(document.cookie.substring(cookie_start + name.length + 1, cookie_end));
}

function getCookiesEnabled(message) {
	var cookieEnabled = (navigator.cookieEnabled)?true:false

	if (typeof navigator.cookieEnabled == "undefined" && !cookieEnabled){ 
	document.cookie = "dummy"
	cookieEnabled = (document.cookie.indexOf("dummy")!= -1)?true:false
	}
	
	if (!cookieEnabled) { 
		alert(message)
		return false
	}
	return true
}

 function decode(utftext) {
    var string = "";
    var i = 0;
    var c = c1 = c2 = 0;

    while ( i < utftext.length ) {

        c = utftext.charCodeAt(i);

        if (c < 128) {
            string += String.fromCharCode(c);
            i++;
        }
        else if((c > 191) && (c < 224)) {
            c2 = utftext.charCodeAt(i+1);
            string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
            i += 2;
        }
        else {
            c2 = utftext.charCodeAt(i+1);
            c3 = utftext.charCodeAt(i+2);
            string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            i += 3;
        }
    }
    return string;
 }
  
  
function getDecodedCookie(cName){
	
	var cString = getCookie(cName);
	
	if ((cString==null)) {
      return null;
	}
	
	return decode(cString);
}  

/**
   This method is used to stores url of the page in a cookie ,
   if backToShopping META tag is present in a page. 
   This url would be used in the shopping cart page to when the user its backToShopping button
*/
function storeUrlForBackShopping(){
	var varBackToShopping;
	var cookieName="lastVisitedUrl";
	var metaTags = document.getElementsByTagName('META');
	for (var metaCount = 0; metaCount < metaTags.length; metaCount++) { 
		var item = metaTags[metaCount];   
		var itemName = item.getAttribute("NAME");
		if (itemName == null) {
			continue;
		}
		if (itemName== "backToShopping" ) {
			varBackToShopping= item.getAttribute("CONTENT");
			break;
		} 
	}
	if(varBackToShopping == "true"){
		var value=location.href;
		document.cookie=cookieName+"="+escape(value)+";path=/";
	}
}

function setSessionCookie(name, value, path, domain, secure) {
	document.cookie = name + "=" + escape(value) +
      ((path) ? "; path=" + path : "") +
      ((domain) ? "; domain=" + domain : "") +
      ((secure) ? "; secure" : "");
}
/**
   This method is used to set session cookie
*/
function setSessionCookie(name, value, path, domain, secure) {
        document.cookie = name + "=" + escape(value) +
      ((path) ? "; path=" + path : "") +
      ((domain) ? "; domain=" + domain : "") +
      ((secure) ? "; secure" : "");
}


/*
CVS Version : $Id: myaccount.js,v 1.13 2003/06/11 15:29:40 aankja Exp $

*/

function showlogoff(storeid,langid,logoffurl,linkname,confirmmsg){
if (storeid!="" && langid!="" && logoffurl!="" && linkname!="" && confirmmsg!="" && document.cookie.length > 0){
search="WCS_SESSION_ID";
offset = document.cookie.indexOf(search)

if (offset != -1) {
offset += search.length
end = document.cookie.indexOf(";", offset)
if (end == -1)
end = document.cookie.length
thevalue=unescape(document.cookie.substring(offset, end));
lastchar=thevalue.substring(thevalue.length-5,thevalue.length);
if (lastchar.indexOf(',,')==-1 && lastchar.indexOf('null')==-1 && thevalue.indexOf(storeid)!=-1 ){
document.writeln("<td>");
document.writeln("<div class=pipe>&nbsp;|&nbsp;</div>");
document.writeln("</td>");
document.writeln("<td>");
document.writeln("<script><a href=\"javascript:if(confirm('"+escape(confirmmsg)+"')){document.location='/webapp/wcs/stores/servlet/Logoff?langId="+langid+"&storeId="+storeid+"&URL="+logoffurl +"'};\" class=logout>"+linkname+"</a></" + "script>");
document.writeln("</td>");
}//write
} //offset
} //cookie
}

/**
    Enhanced version of the showlogoff function that doesn't ouput formatting
    @author KLSK
    @author BM26 (fixed bug between sites)
    @author KNBU (migrated to use WC5.6 cookie. Existing 5.4 is in a separate method OLD54haslogoffURL
    @author MTJO 2006-11-21  - (fixed problem with logout in firefox)
    @autho MAQT 2008-04-08 - Added check for cookie client_showlogoff_link
*/
function haslogoffURL(storeid){
    //document.write('<td>' + unescape(document.cookie) + '</td>');
    if (document.cookie == null) {
        // no cookie at all
        return false;
    }
    //change by maqt 080408
    //this should be the only check except for the first one. But we keep the famloggedin check becouse of the roll-out of 4.4.
    //there is also a internet explorer bug/feature that causes this cookie not to be set when logging in through the ecom flow. There's a redirect which kills the cookie.
    //therefore, we also have the old solution that check for the 12' position in one of the commerce cookies
    if (IRWreadCookie("client_showlogoff_link_" + storeid) && IRWreadCookie("client_showlogoff_link_" + storeid)=="true") {
        return true;
    }

/*

    //should be removed after fix of iebug with killed cookies in ecom redirects  /maqt
    // Split cookie
    var cookieArray = unescape(document.cookie).split(';');
    var wcauthstring = 'WC_USERSESSION_';
    var wcauthinfo = '';
    var wcstorestring = 'WC_ACTIVESTOREDATA';
    var wcstoreinfo = '';
    for (var i=0; i<cookieArray.length; i++) {
      if (cookieArray[i].indexOf(wcauthstring) > -1) {
          // Get authentication info
            wcauthinfo = cookieArray[i].substring(cookieArray[i].indexOf('=') + 1);
        }
        if (cookieArray[i].indexOf(wcstorestring) > -1) {
            // Get store info
            wcstoreinfo = cookieArray[i].substring(cookieArray[i].indexOf('=') + 1);
      }
  }
    if (wcauthinfo == null || wcauthinfo == '') {
        return false;
    }

    var wcauthinfo_array = wcauthinfo.split(",");
    var wcstoreinfo_array = wcstoreinfo.split(",");

  var userId = wcauthinfo_array[0];

  var detailedInfo = wcauthinfo_array[12].substring(wcauthinfo_array[12].indexOf('[') + 1);
  var detailedInfo_array = detailedInfo.split("|");
  
var cookieStoreId = detailedInfo_array[0];


  // If 12th element is 'null' the user is not logged in
  if (wcauthinfo_array[11] == 'null') {
      // Not logged in
      return false;
  }

    // If the user changes store, kill the cookie
    
    if (storeid != cookieStoreId) {
         var sDomain = document.domain;
         
         while (sDomain.indexOf('.') > -1) {
          document.cookie = "WC_USERSESSION_" + userId + "=;domain=" + sDomain + ";path=/;expires=Wednesday, 09-Nov-99 23:12:40 GMT";
          document.cookie = "WC_AUTHENTICATION_" + userId + "=;domain=" + sDomain + ";path=/;expires=Wednesday, 09-Nov-99 23:12:40 GMT";
          sDomain = sDomain.substring(sDomain.indexOf('.') + 1);
        }
        //document.cookie = "WCS_ACTIVESTOREDATA=;path=/;expires=Wednesday, 09-Nov-99 23:12:40 GMT";
        //document.cookie = "WCS_UNIQUE_ID=;path=/;expires=Wednesday, 09-Nov-99 23:12:40 GMT";
        //document.cookie = "WCS_SSLCHECKCOOKIE=;path=/;expires=Wednesday, 09-Nov-99 23:12:40 GMT";
        //document.cookie = "WCS_PARORG=;path=/;expires=Wednesday, 09-Nov-99 23:12:40 GMT";
        //document.cookie = "WCS_CRNTCNTRCTS=;path=/;expires=Wednesday, 09-Nov-99 23:12:40 GMT";
        //document.cookie = "WCS_ELGBCNTRCTS=;path=/;expires=Wednesday, 09-Nov-99 23:12:40 GMT";
        //document.cookie = "WCS_SESSCNTRCTS=;path=/;expires=Wednesday, 09-Nov-99 23:12:40 GMT";
        //document.cookie = "JSESSIONID=;path=/;expires=Wednesday, 09-Nov-99 23:12:40 GMT";
        return false;
    }
*/
    // User is not logged in
    return false;

}

function setUserName() {
    var UserName=IRWreadCookie("displayname");
    if (UserName) {
        try {
            $('span_userName').update(UserName);
        } catch(e) {
        }
    }
}
function getCurrentURL(){
    var returnurl = document.location.pathname + document.location.search;
    // This is fixed in setupyouarehere.jsp..
    // var returnurl = document.location.pathname;
    return returnurl;
}

function logonLink() {
    var argForm;
    //netscape 6 && ie 5>
    if (document.getElementById){
            argForm = document.getElementById("myAccount");
    }
    else if (document.all){ //Explorer 4
            argForm = document.all['myAccount'];
    }
    else {
            alert (js_fn_NOT_VALID_BROWSER);
            return false;
    }
  argForm.submit();
}


function OLD54haslogoffURL(storeid){
    var wcssessionidcookie = getCookie("WCS_SESSION_ID");
    if (wcssessionidcookie == null) {
        //no cookie at all.
        return false;
    }

    //split variables in cookie.
    var wcssessionidcookie_array = wcssessionidcookie.split(",");

    //last String in array is the userid and if there is a user id, then user is logged in.

    var userId = wcssessionidcookie_array[wcssessionidcookie_array.length - 1];
    var loggedIn = userId != null && userId != "" && userId != "null";

    if (wcssessionidcookie_array[2] == storeid) {

        if (loggedIn) {
            //logged in customer, show logout.
            return true;
        }
        else {
            //not logged in but cookie for right country.
            return false;
        }
    }
    else {
        //User from wrong country, kill cookie.
        document.cookie = "WCS_SESSION_ID=;path=/;expires=Wednesday, 09-Nov-99 23:12:40 GMT";
        document.cookie = "WCS_SSLCHECKCOOKIE=;path=/;expires=Wednesday, 09-Nov-99 23:12:40 GMT";
        document.cookie = "WCS_AUTHENTICATION_ID=;path=/;expires=Wednesday, 09-Nov-99 23:12:40 GMT";
        document.cookie = "WCS_PARORG=;path=/;expires=Wednesday, 09-Nov-99 23:12:40 GMT";
        document.cookie = "WCS_CRNTCNTRCTS=;path=/;expires=Wednesday, 09-Nov-99 23:12:40 GMT";
        document.cookie = "WCS_ELGBCNTRCTS=;path=/;expires=Wednesday, 09-Nov-99 23:12:40 GMT";
        document.cookie = "WCS_SESSCNTRCTS=;path=/;expires=Wednesday, 09-Nov-99 23:12:40 GMT";
        document.cookie = "JSESSIONID=;path=/;expires=Wednesday, 09-Nov-99 23:12:40 GMT";
        return false;
    }
}


//helper for reading cookie values
//added 080408 by MAQT
function IRWreadCookie(name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(';');
    for(var i=0;i < ca.length;i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1,c.length);
        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
    }
    return null;
}

/*
 * START Base64 encode/decode from http://www.webtoolkit.info/javascript-base64.html
 */

var Base64 = {

    // private property
    _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

    // public method for encoding
    encode : function (input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        input = Base64._utf8_encode(input);

        while (i < input.length) {

            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);

            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;

            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }

            output = output +
            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

        }

        return output;
    },

    // public method for decoding
    decode : function (input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;

        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

        while (i < input.length) {

            enc1 = this._keyStr.indexOf(input.charAt(i++));
            enc2 = this._keyStr.indexOf(input.charAt(i++));
            enc3 = this._keyStr.indexOf(input.charAt(i++));
            enc4 = this._keyStr.indexOf(input.charAt(i++));

            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;

            output = output + String.fromCharCode(chr1);

            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }

        }

        output = Base64._utf8_decode(output);

        return output;

    },

    // private method for UTF-8 encoding
    _utf8_encode : function (string) {
        string = string.replace(/\r\n/g,"\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    },

    // private method for UTF-8 decoding
    _utf8_decode : function (utftext) {
        var string = "";
        var i = 0;
        var c = c1 = c2 = 0;

        while ( i < utftext.length ) {

            c = utftext.charCodeAt(i);

            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            }
            else if((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i+1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i += 2;
            }
            else {
                c2 = utftext.charCodeAt(i+1);
                c3 = utftext.charCodeAt(i+2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }

        }

        return string;
    }

}
/*
 * END Base64 encode/decode from http://www.webtoolkit.info/javascript-base64.html
 */

/**
*
*  URL encode / decode
*  http://www.webtoolkit.info/
*
**/

var Url = {

    // public method for url encoding
    encode : function (string)
    {
        string=escape(this._utf8_encode(string));
        string=string.replace(new RegExp('\\+','g'),'%2B');
        return string.replace(new RegExp('%20','g'),'+');
    },

    // public method for url decoding
    decode : function (string)
    {
        string = string.replace(new RegExp('\\+','g'),' ');
        return this._utf8_decode(unescape(string));
    },

    // private method for UTF-8 encoding
    _utf8_encode : function (string) {
        string = string.replace(/\r\n/g,"\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    },

    // private method for UTF-8 decoding
    _utf8_decode : function (utftext) {
        var string = "";
        var i = 0;
        var c = c1 = c2 = 0;

        while ( i < utftext.length ) {

            c = utftext.charCodeAt(i);

            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            }
            else if((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i+1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i += 2;
            }
            else {
                c2 = utftext.charCodeAt(i+1);
                c3 = utftext.charCodeAt(i+2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }

        }

        return string;
    }

}
/**
    Populates the logon/logoff part of the header based on user authentication state
    @author Magnus Hjersing (MHJE)
    @since CR5.1
*/    
function getUserInfo(storeID,requestType) {
    requestType = typeof(requestType) != 'undefined' ? requestType : 'async';
    if (document.cookie == null) {
            // no cookie at all -> user has never logged or doesn't support cookies
            return null;
    }

    var cookieStr = new String(document.cookie);
        
    if (!cookieStr.include("WC_")) {
        // No Commerce cookie present which means there is no session against server
            return null;
    }

    var userInfo = null;
    var displayname = null;

    if (IRWreadCookie("user_info_" + storeID)) {
        // There is a display name set
        displayname = new String(IRWreadCookie("user_info_" + storeID)).strip();
        if (displayname != null && displayname != 'notloggedin' && !displayname.blank()) {
            // The cookie is base64 and URL encoded
            decodedStr = Url.decode(Base64.decode(displayname));
            if(decodedStr != ""){
            // Ok there is a name set let's create a userinfo object to return to the header
            userInfo = new Object();
            var strArray = decodedStr.split(';');
            //for manupulating existing remembered cookie in production
             if (strArray.length < 5){
             var domain = window.location.href.replace(/^http[s]?:\/\/([^\/]+)\/.*$/, "$1"); 
             domain = domain.replace(/^.*(\.[^\.]+\.[^\.]+)$/, "$1");
             path ="/";
             deleteCookie("user_info_" + storeID, path ,domain);
             getUserInfoFromServer(storeID);
            }
            if (strArray.length > 0) {
                userInfo.firstName = unescape(strArray[0]);
            }
            if (strArray.length > 1) {
                userInfo.lastName = unescape(strArray[1]);
            }
            if (strArray.length > 2) {
                userInfo.title = unescape(strArray[2]);
            }
                //for # 215 FW11
            if (strArray.length > 3) {
             userInfo.numberShopCartItems = unescape(strArray[3]);
            }
             if (strArray.length > 4) {
             userInfo.totalPrice = unescape(strArray[4]);
            }
            }
        }
    }
    if (userInfo != null) {
        // There is info for the user to return to the header
        return userInfo;
    }
    
    if (cookieStr.include("WC_") && displayname != 'notloggedin' && requestType == 'async') {
        // No    valid displayname cookie found but there is a session with the server    
        // If displayname is set to notloggedin it just means that we already asked 
        // the server in this session
        getUserInfoFromServer(storeID);
    }

    if (cookieStr.include("WC_AUTHENTICATION") && displayname == 'notloggedin' && requestType == 'async') {
        // The cookie says the user is not logged in but there is WC cookie saying differently
        getUserInfoFromServer(storeID);
    }

    return null;
}

/**
    Retrives the display name for a known user from the server through AJAX call and
    updates the displayname cookie. If the user is not known the cookie will be set to
    "notloggedin" to avoid fetching it on every request.
    @author Magnus Hjersing (MHJE)
    @since CR5.1
*/
function getUserInfoFromServer(storeID) {
    try {
        var requestURL = '/webapp/wcs/stores/servlet/GetUserInfo?storeId='+storeID+'&extendedInfo=true';
        userRequest = new Ajax.Request(requestURL,{ 
            method: 'get', 
            onFailure: function () {
                //do nothing
            },
            onException: function (instance,object) {
                //do nothing
            },
            onInteractive: function () {
                //do nothing
            },
            onSuccess: function(transport){
                //removed as part #215
                updateWelcomeText();
                updateNoOfCartItems(storeID);
            }
        });
    } catch (e) {
        //do nothing
    }
    return;
}

function showError(str) {
    alert('error:\n'+str);
}

/**
    for #215 part FW11
*/
function generateScLinkListener(storeId) {
    var noOfItemsSpan = $('noOfCartItems');
    if(typeof noOfItemsSpan == 'undefined'  || noOfItemsSpan == null){
        return false;
    };

    var scTipDelay;
    var scTipTimeout = 20; // Fix to get correct positioning on first mouseover
    var scTooltip = IkeaPopup();
    var scLinkId = 'link_header_shopping_cart';        
    Event.observe($(scLinkId), 'mouseover', function(event){ 
        clearTimeout(scTipDelay);
        
        // Change timeout to correct value when div created
        scTipDelay = setTimeout( 
            function() {
                var quantity;
                var totalPrice;
                var userInfo = getUserInfo(storeId,'normal');
                if(userInfo != null) {
                    quantity = userInfo.numberShopCartItems.escapeHTML();
                    totalPrice = userInfo.totalPrice.escapeHTML();
                }
                if(quantity != 'undefined' && quantity > 0){
                    scTooltip.createGenericPopupNew(null,null,'cartPopup','cartPopup',event.target,1,26);
                    scTooltip.setGenericContent(generateLayoutForShoppingCartPopup(quantity,totalPrice));
                }
            },
            scTipTimeout
        );
    });
    
    Event.observe($(scLinkId), 'mouseout', function(event){
        clearTimeout(scTipDelay);
        scTooltip.hide();
    }); 
}
    
function generateLayoutForShoppingCartPopup(quantity,totalPrice) {
    var retString = " " +
    "<div class=\"cartPopupContainer\">" +  
        quantity + " " + js_fn_POPUP_CART_PRODUCTS +
        "<div class=\"cartPadding\">" + js_fn_POPUP_CART_TOTAL_PRICE + ": " +
        "<span class=\"totalPrice\">" + totalPrice + "</span>" +
        "</div>" +
    "</div>"
    return retString;
}
    
/** 
    for #215 FW11 to update the number of items in the crat header link
*/
function updateNoOfCartItems(storeId) {
    var noOfItemsSpan = $('noOfCartItems');
    if(typeof noOfItemsSpan != 'undefined'  && noOfItemsSpan != null){
        var userInfo = getUserInfo(storeId,'normal');
        if(userInfo != 'undefined' && userInfo!= null && userInfo.numberShopCartItems != 'undefined' && userInfo.numberShopCartItems != null)  {
            var noOfItems = userInfo.numberShopCartItems.escapeHTML();    
            if(noOfItems != 'undefined' && noOfItems != null && noOfItems != '0' && !noOfItems.blank()) {
                noOfItemsSpan.update("&nbsp;(" + noOfItems + ")");
            } else {
                /**
                * Start of PR IKEA00697568
                **/
                try{                
                    noOfItemsSpan.update("");           
                    }catch(err){
                        noOfItemsSpan.innerHTML = "";
                        } 
                    }
                } else {
                try{                
                    noOfItemsSpan.update("");           
                    }catch(err){
                        noOfItemsSpan.innerHTML = "";
                        } 
                /**
                * End of PR IKEA00697568
                **/
        };
    };
}/*************************************
Generic JavaScript functions for opening popup windows
Created by Lars Henrik Rotnes
Last modified: 2002-10-01
*************************************/

/*
CVS Version : $Id: jsPop.js,v 1.6 2003/02/26 17:37:41 lhr Exp $

*/


/**
*Function to open a pop up window
*
* calls openPopUpWindow and discards the returned value. This is so the function openPopup can
* be used in the href attribute as href="javascript:openPopUp(...)".
* Note that this use is deprecated, but widespread all over the application. See
* the popupLink function below for a better alternative...!
* 
* argUrl   string 	= the location of the file to open in the popup window
* argWidth string 	= the width of the window
* argHeight string = the height of the window
* argTitle string 	= the title of the window
* argScroll int  	= specify if we need scrollbars, 1 = yes, 0 = no 
*/
var is = new Object()
is.ie = (document.all) ? 1:0
is.ns4 = (document.layers) ? 1:0
is.w3c = (document.getElementById && !is.ie) ? 1:0
is.win = (navigator.userAgent.toLowerCase().indexOf("win") > 0) ? 1:0
is.mac = (navigator.userAgent.toLowerCase().indexOf("mac") > 0) ? 1:0

function openPopUp(argUrl, argWidth, argHeight, argTitle, argScroll ) {
    openPopUpWindow(argUrl, argWidth, argHeight, argTitle, argScroll );
}

//function for for stat generation with exception handling
function IRWdcsMultiTrack() {
    try {
        if (window.gDomain===undefined) {
            WTdom_Load=false;
        } else {
            WTdom_Load=true;
        }
        if (window.WTmain_Load === true && window.WTdom_Load === true) {
            dcsMultiTrack.apply(this,arguments);
        }
    } catch (e) {}	
}

//Function added to launch the Artificial Assistant (en_BG, en_US, de_DE)
if(self.name ==''|| self.name==undefined){
self.name='IKEA';
}

//That's the target wished name of the IKEA window to make possible that the
//Assistant opens the links in the proper window. If the window actually has
//another name, please, tell us and we will change the target in the
//Assistant's links!!!!

function popUpAnna(URL, popW, popH){
    var w = 480, h = 340;
    //Track the opening of Anna
    irwStatAskAnnaOpen();
    //Should new Anna be used?
    if (com.ikea.irw.askAnna.Settings.active === true) {
        if (com.ikea.irw.askAnna.anna !== undefined) {
            com.ikea.irw.askAnna.anna.open();
        } else {
            DI.LoadAnna();
            DI.StartAnna("anna" + com.ikea.irw.askAnna.Settings.reference, com.ikea.irw.askAnna.Settings.default_locale, function() {});
        }
    }
    else {
        if (document.all || document.layers) {
            w = self.screen.availWidth;
            h = self.screen.availHeight;
        }
        var topPos = (h - popH) - (4 * h / 100), leftPos = (w - popW) - (1 * w / 100);
        day = new Date();
        id = day.getTime();
        eval("page" + id + " =window.open(URL,'popup','resizable=no, toolbar=no, location=no, status=no, scrollbars=no, menubar=no, titlebar=no, width=' + popW + ',height=' + popH + ',left=' + leftPos + ',top=' + topPos + ',screenX=' + leftPos + ',screenY=' + topPos);");
    }
}

//**********************************************

/**
*Function to open a pop up window
*
*argUrl   string 	= the location of the file to open in the popup window
*argWidth string 	= the width of the window
*argHeight string = the height of the window
*argTitle string 	= the internal name for the window. This should be a one-word alphabetic name and is used only internally.
*                     IE does not accept regular NLS texts, so use a symbolic name for this parameter!
*argScroll int  	= specify if we need scrollbars, 1 = yes, 0 = no 
*/
var is = new Object()
is.ie = (document.all) ? 1:0
is.ns4 = (document.layers) ? 1:0
is.w3c = (document.getElementById && !is.ie) ? 1:0
is.win = (navigator.userAgent.toLowerCase().indexOf("win") > 0) ? 1:0
is.mac = (navigator.userAgent.toLowerCase().indexOf("mac") > 0) ? 1:0

function openPopUpWindow(argUrl, argWidth, argHeight, argTitle, argScroll ) {
  //for win ie, add extra width to accomodate scrollbar on pop07
 // if(is.ie && !is.mac  && argScroll=="1" && ( argTitle == "pop07" || argTitle == "pop08") ){
  //  argWidth = parseInt(argWidth) + 26;
  //}
    
    if(argScroll=="1" && !is.mac){
        argWidth = parseInt(argWidth) + 26;
    }
    
    if(argScroll=="1" && is.mac){
        argWidth = parseInt(argWidth) + 10;
    }
    
        
    var x = (screen.availWidth - argWidth ) / 2;
    var y = (screen.availHeight - argHeight ) / 2;
  
    var sFeatures = "width=" + argWidth + "," + 
                  "height=" + argHeight + "," + 
                                    "toolbar=no," + 
                  "status=no," + 
                                    "scrollbars=" + argScroll + "," + 
                                    "resizable=yes," + 
                  
                  "left=" + x + ", top="+ y;
    
    var windowOpened = false;
    
    if (window.open) {
        //alert('"'+argTitle+'"');
        newWindow = window.open(argUrl, argTitle, sFeatures, false);
    
        windowOpened = newWindow?true:false;
    
        if (windowOpened && newWindow.focus) {
    
            newWindow.focus();
        }
        
    }
    
    // return false if a window was opened. This was the function can
    // be used in the onclick action handler of an HTML link
    return !windowOpened;
}



/**
* Function to open the target of a link in a new window. Usage example:
* 	<a href="http://..." target="_blank" onclick="return popupLink(this,'Window Title')">Window Title</a>
* This will use Javascript to open a new window. If the window cannot be opened
* (if Javascript is disabled, or the user has a popup blocker installed), the
* link is opened using the standard feature of the web browser. Aka "graceful degradation"...
*
* Parameters:
* 	link	The DOM object reference of the A element that is used to open the link with
*	name	The internal name for the window. This should be a one-word alphabetic name and is used only internally.
*           IE does not accept regular NLS texts, so use a symbolic name for this parameter!
*/
function popupLink(link,name) {

    return openPopUpWindow(link.href, 500, 600, name, 'yes');
}
var delayToHideLayer;
var relatedProductForPip = false;
var baseAddUrl = "/webapp/wcs/stores/servlet/IrwWSInterestItemAdd?";     // The first part of the WS call to add a product to the shopping list
var baseGetAllListsUrl = "/webapp/wcs/stores/servlet/IrwWSGetAllInterestLists?";    // The WS call to get all saved lists. 
var baseCreateListUrl = "/webapp/wcs/stores/servlet/IrwWSCreateInterestList?";      // The WS call to create a new list. 
var baseDeleteListUrl = "/webapp/wcs/stores/servlet/IrwDeleteShoppingList?";        // The WS call to delete an existing list. 
var baseRenameListUrl = "/webapp/wcs/stores/servlet/IrwWSRenameInterestList?";      // The WS call to rename an existing list. 
var baseDisplayUrl = "/webapp/wcs/stores/servlet/InterestItemDisplay?";             // The default display url for a shopping list
var baseAddToCartUrl = "/webapp/wcs/stores/servlet/IrwWSOrderItemAdd";              // The default display url for a shopping list
var baseMoveOrderItemToShoppingList = "/webapp/wcs/stores/servlet/IrwWSOrderItemMoveToShoppingList?";              // The default display url for a shopping list
var addUrlSuffix = "&quantity=1";                                                   // Product quantity defaults to 1

var addToShopListPopup = IkeaPopup();

/**
 * Entry point method for Shopping list popups.
 * NOTE! some params (starting with js_fn_*) are global js params added to the calling jsp-page and coming from ShoppingListText_xx_XX.properties 
 * 
 * @param action            A string to determine what is to be done and what layout to create in the popup
 * @param targetElement        A DOM object that fires the popup, e.g. the button clicked. Needed to position the popup.
 * @param storeId           The store id
 * @param langId            The language id
 * @return                    Nothing
 */
function activateShopListPopup(action,targetElement,storeId,langId,itemRelation,actionBuyable) {

    var newLayout = "";
    switch (action)
    {
    case "save":
        addToShopListPopup.createGenericPopup(260,"","slPopup","slPopup",targetElement,77,35);
        newLayout = generateLayoutForShopListPopup(js_fn_POPUP_LOGIN_HEADER,null,js_fn_POPUP_LOGIN_TEXT,null,js_fn_POPUP_CANCEL_BTN,"");
        addToShopListPopup.setGenericContent(newLayout);
        break;
    case "create":
        addToShopListPopup.createGenericPopup(260,"","slPopup","slPopup",targetElement,20,-120);
        if(isLoggedIn(storeId,false)){
            var noOfLists = $('shoppingList').select('.leftNavigation .navItem').size();
            if(noOfLists == js_fn_MAX_NO_OF_LISTS){
                newLayout = generateLayoutForShopListPopup(js_fn_POPUP_CREATE_HEADER,null,js_fn_POPUP_ERROR_MAX_NO_OF_LISTS,null,js_fn_POPUP_CANCEL_BTN,"error");
                addToShopListPopup.setGenericContent(newLayout);
            }else{
                newLayout = generateLayoutForShopListPopup(js_fn_POPUP_CREATE_HEADER,null,null,js_fn_POPUP_CREATE_BTN,js_fn_POPUP_CANCEL_BTN,"callCreateShoppingList('"+storeId+"','"+langId+"')");
                addToShopListPopup.setGenericContent(newLayout);
                enableListName();
            }
        }else{
            newLayout = generateLayoutForShopListPopup(js_fn_POPUP_LOGIN_HEADER,null,js_fn_POPUP_LOGIN_TEXT,null,js_fn_POPUP_CANCEL_BTN,"");
            addToShopListPopup.setGenericContent(newLayout);
        }
        break;
    case "rename":
        var curListObj = {name: js_fn_CURRENT_LISTNAME};
        addToShopListPopup.createGenericPopup(260,"","slPopup","slPopup",targetElement,-220,30);
        newLayout = generateLayoutForShopListPopup(js_fn_POPUP_RENAME_HEADER,curListObj,js_fn_POPUP_LOGIN_TEXT,js_fn_POPUP_RENAME_BTN,js_fn_POPUP_CANCEL_BTN,"callRenameShoppingList('"+storeId+"','"+langId+"','"+js_fn_CURRENT_LISTID+"')");
        addToShopListPopup.setGenericContent(newLayout);
        enableListName();
        break;
    case "delete":
        var curListObj = {name: js_fn_CURRENT_LISTNAME};
        addToShopListPopup.createGenericPopup(260,"","slPopup","slPopup",targetElement,-220,30);
        newLayout = generateLayoutForShopListPopup(js_fn_POPUP_DELETE_HEADER,curListObj,js_fn_POPUP_DELETE_TEXT,js_fn_POPUP_DELETE_BTN,js_fn_POPUP_CANCEL_BTN,"callDeleteShoppingList('"+storeId+"','"+langId+"','"+js_fn_CURRENT_LISTID+"')");
        addToShopListPopup.setGenericContent(newLayout);
        break;
    case "print":
        var storeform = $("formShoppingList");
		var locale = storeform.locale.value;
		var localStoreCookie = "selected_store_num_" + locale;
		var buCodeSelected = getCookie(localStoreCookie);
        if(buCodeSelected != null && buCodeSelected != -1){
            addToShopListPopup.createGenericPopup(260,"","slPopup","slPopup",targetElement,25,-17);
            newLayout = generatePrintLayoutForShopListPopup(storeId,langId,js_fn_POPUP_PRINT_HEADER,js_fn_POPUP_PRINT_BTN,js_fn_POPUP_CANCEL_BTN,"irwStatShoppingList('printShoppingList'); getObject('formPrintShoppingList').submit();closePopup()", buCodeSelected);
            addToShopListPopup.setGenericContent(newLayout);
            preSelectLocalStorePrint(irwstats_locale);  //Get locale from global stats variable
            preSelectPrintSorting($('formPrintShoppingList'));
            break;
        } else {
            addToShopListPopup.createGenericPopup(260,"","slPopup","slPopup",targetElement,25,-17);
            newLayout = generateLayoutForShopListPopup(js_fn_POPUP_PRINT_HEADER,null,IRW_SHOPPING_LIST_PRINT_SELECT_STORE_ERROR,null,js_fn_POPUP_CANCEL_BTN,"");
            addToShopListPopup.setGenericContent(newLayout);
       break;
        }
    case "add":               
		//Fix for IE6
		if(Browser.Version() == 6){
			disable('subdiv');    
		}
    
        var prodId = targetElement.attributes.id.value;
		var quant = 1;
        prodId = prodId.replace("popupShoppingList","");
        prodId = prodId.replace("slideshowSaveToList","");
		var addCartContainer = $('addCartContainer');        
         if(addCartContainer != undefined){
            if(addCartContainer.quantity != undefined){
                quant=addCartContainer.quantity.value;
                quant = quant.strip();
                if(checkNum(quant, 0, 1, 0, 0, 99) == false)
                    quant=1;
                    
                    addUrlSuffix = "&quantity="+quant;
            }
            
        }
		if ( $('prodInfoLanding') === null) {
        	addToShopListPopup.createGenericPopup(260,"","slPopup","slPopup",targetElement,-40,-165);
		}
        //Check for logged in user
        var loginStatus=0;
        if(isLoggedIn(storeId)){
            getSavedLists(storeId,langId,prodId,targetElement,itemRelation); // Get all lists
        }
        else
        {
            //Here loginStatus=1 refers not logged in user
            loginStatus = 1;
            respondToSaveToShopList(storeId,langId,prodId,loginStatus,"",targetElement,itemRelation);
        }
    break;
	
	case "addAll":
		var prodId = targetElement.attributes.id.value;                    
		 //Check for logged in user
        var loginStatus=0;		
        if (isLoggedIn(storeId)) {	            
            getSavedLists(storeId, langId, prodId, targetElement, itemRelation); // Get all lists
        } else {
            //Here loginStatus=1 refers not logged in user
            loginStatus = 1;
            respondToSaveToShopList(storeId,langId,prodId,loginStatus,"",targetElement,itemRelation);
        }	
	break;

    case "email":
    	var buCodeSelected =  $F('localStoreSelector');
        if(buCodeSelected != null && buCodeSelected != -1){
            addToShopListPopup.createGenericPopup(402,"","slPopup","slPopup",targetElement,-24,-17);
            //alert("js_fn_CURRENT_STORE  "+js_fn_CURRENT_STORE);
            newLayout = generateEmailLayoutForShopListPopup("/webapp/wcs/stores/servlet/IrwEmailShoppingList?storeId="+storeId+"&langId="+langId+"&listId="+js_fn_CURRENT_LISTID+"&storeNumber="+buCodeSelected);
            addToShopListPopup.setGenericContent(newLayout);
            break;
        } else {
            addToShopListPopup.createGenericPopup(260,"","slPopup","slPopup",targetElement,-24,-17);
            newLayout = generateLayoutForShopListPopup(js_fn_POPUP_EMAIL_HEADER,null,IRW_SHOPPING_LIST_EMAIL_SELECT_STORE_ERROR,null,js_fn_POPUP_CANCEL_BTN,"");
            addToShopListPopup.setGenericContent(newLayout);
            break;
        }
    
    case "addToCart":   // Add to shopping cart (NOT shopping list)
        var prodId = targetElement.attributes.id.value;
        var quant = 1;
    var addCartContainer = $('addCartContainer');
    //Fix for IE6
    if(Browser.Version() == 6){
        disable('subdiv');
    }
        
    
    if(addCartContainer != undefined){
        if(addCartContainer.quantity != undefined){
            quant = addCartContainer.quantity.value;
            quant = quant.strip();
            if(checkNum(quant, 0, 1, 0, 0, 99) == false)
                quant=1;
        }
    }
        prodId = prodId.replace("popupAddToCart","");
        prodId = prodId.replace("slideshowAddToCart","");
        //Get hidden input field value if product is GPR
        var partNumberInForm = $("thePartnumberInForm");
        
        // Cookie is missing for certain criteria. Below section will regenerate cookie, if it doesn't exist
        var cookieExist = getCookie('JSESSIONID');
        if(null==cookieExist ){
        isLoggedIn(storeId);
        }
                
        try {
            // Changed by FW11 - part2 - IrwWSOrderItemAdd has been changed to accept partNumber
			var addToCartId =  targetElement.attributes.id.value;
            irwStatShoppingList("buyOnline", prodId,itemRelation,addToCartId,actionBuyable);
        } catch(e) {}
		
		if ( $('prodInfoLanding') === null) {
			addToShopListPopup.createGenericPopup(200,"","slPopup","slPopup",targetElement,0,-100);
		}
        addItemToCart(prodId, name,storeId,langId,quant,targetElement);
break;
    case "move":
        
        var rowId = targetElement.attributes.id.value;
        rowId = rowId.replace("popupShoppingList","");

        addToShopListPopup.createGenericPopup(260,"","slPopup","slPopup",targetElement,-40,-160);
        if(isLoggedIn(storeId)){
            getSavedListsToMove(storeId,langId,rowId); // Get all lists
        }else{
        
           respondOrderItemToShopList(storeId,langId,rowId,1);
        }
        break;
    
     case "selectStore":// Selects the local store
            addToShopListPopup.createGenericPopup( 149, "", "thumpPopup", "slPopup", targetElement, -45, 17);
             newLayout = generateSelectStoreLayout();
            addToShopListPopup.setGenericContent(newLayout);        
            var popupDimensions = $('thumpPopup').getDimensions();
            var elementDimensions = $(targetElement).getDimensions();        
            $('thumpPopup').style.left = $(targetElement).cumulativeOffset().left - (popupDimensions.width/2) + (elementDimensions.width/2) +"px";
            $('thumpPopup').style.top = $(targetElement).cumulativeOffset().top + elementDimensions.height +"px";

         break;
         
       case "tipToSelectStore":// Selects the local store
           addToShopListPopup.createGenericPopup( 149, "", "thumpPopup", "slPopup", targetElement, 126, -27);     
         newLayout = generateTipToSelectStoreLayout();
         addToShopListPopup.setGenericContent(newLayout);
         break;

    default:
        alert('something went wrong...');
    }
}


/**
 * Function generateLayoutForShopListPopup is a general function that generates a string with complete 
 * HTML layout to be inserted into an IkeaPopup.
 * @param header            The header text
 * @param listObj             The current list object if present with attributes id and name. Should be set to null if not used.
 * @param body              The body text
 * @param btn                 The text for the "submit" button of the popup that fires the event
 * @param link              The text for the cancel link to just close the popup
 * @param action              The name of the event to add to the "btn" when clicked (Ex: respondToDelete)
 * @return                    The HTML string to be inserted in the popup
*/
function generateLayoutForShopListPopup(header,listObj,body,btn,link,action)
{
    var retString = "";
    var noLogin="";
    switch (action) 
    {
        case "addFromPip" : 
        if(listObj.id==".")
        {
            noLogin += "<div class=\"shoppingSignupBg\">" + js_fn_POPUP_LOGIN_TEXT + "</div>";
        } 
         retString = ""+
    "<div class=\"contentDialogue\">"+
    createHeaderLayout(header,listObj,action)+
    "<form name=\"formShoppingListPopup\" method=\"\" action=\"\" id=\"formShoppingListPopup\" onsubmit=\""+action+";return false;\">"+
 createBodyLayout(body,listObj,action)+
 createFooterLayout(btn,link,action)+
 noLogin +
    "</form>"+
    "</div>";

        break;
        default : 
        retString = ""+
    "<div class=\"content\">"+
    createHeaderLayout(header,listObj,action)+
    "<form name=\"formShoppingListPopup\" method=\"\" action=\"\" id=\"formShoppingListPopup\" onsubmit=\""+action+";return false;\">"+
    createBodyLayout(body,listObj,action);    
    if ($('choiceContainer') !== null) {     
       retString += createFooterForChoice(btn,link,action);       
    } else {
        retString += createFooterLayout(btn,link,action);
    }
      retString +="</form>"+
    "</div>";

    }  
    return retString;
} 

/**
 * Function generatePrintLayoutForShopListPopup is a specific function that generates a string with complete 
 * HTML layout with printout information to be inserted into an IkeaPopup.
 * NOTE! some params (starting with js_fn_*) are global js params added to the calling jsp-page and coming from ShoppingListText_xx_XX.properties 
 * @param storeId            The current store id
 * @param langId               The current language id
 * @param header            The header text
 * @param btn                 The text for the "submit" button of the popup that fires the event
 * @param link              The text for the cancel link to just close the popup
 * @param action              The name of the event to add to the "btn" when clicked (Ex: respondToDelete)
 * @param stores              An object with the local stores. Contains attributes: value, name
 * @return                    The HTML string to be inserted in the popup
*/
function generatePrintLayoutForShopListPopup(storeId,langId,header,btn,link,action,localStoreNumber) {
    
    var retString = ""+
    "<div class=\"content\">"+
    createHeaderLayout(header)+
    "<form name=\"formPrintShoppingList\" method=\"get\" action=\"/webapp/wcs/stores/servlet/IrwPrintShoppingList\" id=\"formPrintShoppingList\" target=\"_new\">"+
    "<input type=\"hidden\" name=\"slId\" value="+js_fn_CURRENT_LISTID+">"+
    "<input type=\"hidden\" name=\"storeId\" value=\""+storeId+"\"/>"+
    "<input type=\"hidden\" name=\"langId\" value=\""+langId+"\"/>"+
    "<input type=\"hidden\" name=\"localStoreNum\" value=\""+localStoreNumber+"\"/>"+
    "<div class=\"headlineSort text\">"+js_fn_POPUP_PRINT_SORT_BY+"</div>"+
    "<div class=\"listRow\"><input type=\"radio\" id=\"time\" name=\"chkSort\" value=\"time\"/><label for=\"time\">"+js_fn_POPUP_PRINT_TIME_ADDED+"</label></div>"+
    "<div class=\"listRow\"><input type=\"radio\" id=\"weight\" name=\"chkSort\" value=\"weight\"/><label for=\"weight\">"+js_fn_POPUP_PRINT_WEIGHT+"</label></div>"+
    "<div class=\"listRow\"><input type=\"radio\" id=\"location\" name=\"chkSort\" value=\"location\"/><label for=\"location\">"+js_fn_POPUP_PRINT_LOCATION+"</label></div>"+
    "<div class=\"chkBoxRow\"><input type=\"checkbox\" id=\"chkPrintOffers\" name=\"chkPrintOffers\"/><label for=\"chkPrintOffers\">"+js_fn_POPUP_PRINT_STORE_OFFERS+"</label></div>"+
    createFooterLayout(btn,link,action)+
    "</form>"+
    "</div>";
    
    return retString;
}


/**
 * generateSavedListsLayoutForShopListPopup generates inner html layout for the user to select which list to save the product in
 * To be inserted into an IkeaPopup.
 */
function generateSavedListsLayoutForShopListPopup(savedLists,active,header,btn,link,action)
{
    var listString = "";
    var style = "";
    var checked = "";
    var listCount = savedLists.length;
    if(listCount>4){style = "scroll";}
    for(var i=0;i<listCount;i++) {
        if(active == null && i==0){checked = ' checked="checked"';} // if no active list returned from ws set first one
        if(savedLists[i].id==active){checked = ' checked="checked"';}
        listString += "<div class=\"listRow\"><input type=\"radio\" id=\"chkList"+i+"\" name=\"chkList\" value=\""+savedLists[i].id+"\" onclick=\"disableListName()\""+checked+"><label for=\"chkList"+i+"\">"+savedLists[i].name+"</label></div>";
        checked = "";
    }
    
    var retString = ""+
    "<div class=\"content\">"+
    createHeaderLayout(header,null,action)+
    "<form name=\"formShoppingListPopup\" method=\"post\" action=\"\" id=\"formShoppingListPopup\" onsubmit=\""+action+";return false;\">"+
    "<div id=\"listContainer\" class=\""+style+"\">"+listString+"</div>"+
    "<div class=\"listRow\"><input type=\"radio\" id=\"chkListName\" name=\"chkList\" value=\"0\" onclick=\"enableListName()\"/>&nbsp;<input type=\"text\" id=\"listName\" name=\"listName\" maxlength=\"254\" value=\""+js_fn_DEFAULT_LISTNAME+"\" disabled=\"true\"/></div>";    
    if ($('choiceContainer') !== null) { 
        retString   += createFooterForChoice(btn,link,action);
    } else {
        retString   += createFooterLayout(btn,link,action);
    }
    retString   += "</form>"+
    "</div>";
    return retString;
}

/**
 * Function populates an IkeaPopup with an iframe and resizes it based on the loaded document.
*/
function generateEmailLayoutForShopListPopup(page)
{
    var loader = addToShopListPopup.generateLoadingLayout();
    var retString = ""+
    "<div id=\"emailIframeLoader\" style=\"display:;\">" + loader + "</div>"+
    "<div id=\"emailIframeContainer\" style=\"visibility:hidden;\">"+
    "<a href=\"#\" onclick=\"closePopup();return false;\" id=\"emailCloseBtn\" rel=\"nofollow\"></a>"+
    "<iframe src=\""+page+"\" id=\"emailIframe\" height=\"0\" width=\"0\" scrolling=\"no\" frameborder=\"0\" onload=\"resizeMe($('emailIframe')); \"></iframe>"+
    "</div>"
    
    return retString;
}

/**
 * Function populates an IkeaPopup with local sores dropdown
*/
function generateSelectStoreLayout() {    
    var localstoreDiv = $('localStoreSelector');
    var storesCount = localstoreDiv.length;
    var optionString = "";
    for(var i=0;i<storesCount;i++) {
       optionString += "<option id=\"localStore_"+localstoreDiv.options[i].value+"\" value=\""+localstoreDiv.options[i].value+"\">"+localstoreDiv.options[i].text+"</option>";
    };
    var okButton = createButtonLayout(OK,"jsButton_shopListPopup","button","stockDisplayforLocalStore()") + "&nbsp;";

  
    var retString = ""+
       "<div id=\"selectContainer\">"+
      "<div id=\"selectPopupHeadline\">" + IN_STOCK +"</div>"+
      "<div id=\"selectPopupSelect\">"+
      "<select class =\"storeselectpopup\" id=\"selectLocalStore\" name=\"selectLocalStore\" >"+ optionString+   
      "</select>" +"</div>"+
      "<div>"+
      "<div style=\"float: left;\">"+okButton +"</div>"+
      "<div class=\"spaceLeft\" style=\"text-align: right;\">"+
      "<a onclick=\"closePopup();return false;\"href=\"#\" class=\"linkText\">"+CLOSE+
      "</a></div>"+"</div>"+"</div>"   
        return retString;


}

/**
 * Function displays a pop up to encourage to select store.
*/

function generateTipToSelectStoreLayout(){
var retString = ""+
     "<div id=\"popupContainer\">"+
     "<div id=\"arrImg\">"+ "</div>"+
      "<div id=\"tipheadline\">"+TIP+"</div>"+
       "<div id=\"tipbody\">"+SELECT_TEXT+
       "</div>"+
       "<span class=\"spaceLeft\">"+
     "<a onclick=\"closeTipPopup();return false;\"href=\"#\" class=\"linkText\">"+CLOSE+
     "</a></span></div>"+"</div>"
        
        return retString;
}


/**
 * Helper functions to generate layout in popup */
function createHeaderLayout(header, listObj, action) {
    var list = "";
    
    if((listObj != null) && (typeof listObj != 'undefined') && (listObj != "")){
        // If prod added from PIP, display no name in header (action set in onAddToShoppingListComplete()) 
        if(action != "addFromPip"){
            list = "&nbsp;" + listObj.name;
        }
    }

    
    var retString;
    if ( $('prodInfoLanding') === null) {
        retString = "<div class=\"headline\" id=\"slPopupH1\">"+header+list+"</div>";
    } else {
        if (action.indexOf("error") != -1) {
            retString = "<div class=\"notification\" id=\"slPopupH1\" style=\"color:#FF5050; width:100%; text-align:center\">"+header+list+"</div>";
        } else {
            retString = "<div class=\"headline\" id=\"slPopupH1\">"+header+list+"</div>";
        }
    }
    return retString;
}

function createBodyLayout(body, listObj, action) {
    var retString = "<div class=\"shoppinglistStyle\">"+body+"</div>";
    
    if(action.indexOf("callCreate") != -1){
        retString = "<input type=\"text\" id=\"listName\" name=\"listName\" value=\"\"/>";
    }else if(action.indexOf("callRename") != -1){
        retString = "<input type=\"text\" id=\"listName\" name=\"listName\" value=\""+listObj.name+"\"/>";
    }else if(action.indexOf("respondToSaveToShopList") != -1){
        retString = "<div id=\"listContainer\">"+
        "<div class=\"listRow\"><input type=\"radio\" id=\"chkList1\" name=\"chkList\" value=\".\" checked=\"checked\"><label for=\"chkList1\">"+listObj.defaultName+"</label></div>"+
        "</div>"+
        "<div>"+body+"</div>";
    }
    else if(action.indexOf("respondOrderItemToShopList") != -1){
            retString = "<div id=\"listContainer\">"+
            "<div class=\"listRow\"><input type=\"radio\" id=\"chkList1\" name=\"chkList\" value=\".\" checked=\"checked\"><label for=\"chkList1\">"+listObj.defaultName+"</label></div>"+
            "</div>"+
            "<div>"+body+"</div>";
    }
    else if(action.indexOf("error") != -1){
        
        if ( $('prodInfoLanding') === null) {
            retString = "<div style=\"color:#FF5050\">"+body+"</div>";
        } else {
            retString = "<div class=\"bodyCopy\">"+body+"</div>";
        }
    }
    
    return retString;
}
/**
*    Common function for create footer for poupUp Layer 
*    Link close - relatedProducts.enableMouseEventOnProduct() has been added to the link according to the status of the variable relatedProductForPip
**/

function createFooterLayout(btn, link, action) {
    var btnLayout = "";
    // If btn added create the button
    if(btn != null){
        btnLayout = createButtonLayout(""+btn+"","jsButton_shopListPopup","button",""+action+"") + "&nbsp;";
    }
    if(relatedProductForPip == true)  {
        var retString = btnLayout+
        "<div id=\"shoppingListClose\" class=\"shoppingListClose\"><a onclick=\"closePopup();addProductEvts(); relatedProducts.enableMouseEventOnProduct();return false;\" href=\"#\" class=\"shoppingListLink\" rel=\"nofollow\">"+link+"</a></div>";     return retString;
    }else{
        
        if ( $('prodInfoLanding') === null) {
            var retString = btnLayout+
            "<div id=\"shoppingListClose\" class=\"shoppingListClose\"><a onclick=\"closePopup();addProductEvts();return false;\" href=\"#\" class=\"shoppingListLink\" rel=\"nofollow\">"+link+"</a></div>";     return retString;
        } else {
             var retString = btnLayout +
             "<div id=\"shoppingListClose\" class=\"shoppingListClose\"><a onclick=\"com.ikea.irw.shoppinglist.SaveToList.removeErrorMessage();return false;\" href=\"#\" class=\"listLink\" rel=\"nofollow\">"+link+"</a></div>";    
       	      return retString; 
        }
    }
}
function createFooterForChoice(btn, link, action) {
    var btnLayout = "";
     if(btn != null){
        btnLayout = createButtonLayout("" + btn + "", "jsButton_shopListPopup", "button", "" + action + "") + "&nbsp;";
    }
    var retString =  btnLayout + "<div id=\"shoppingListClose\" class=\"shoppingListClose\"><a onclick=\"removeChoiceShoppingListPopup('close','false'); return false;\" href=\"#\" class=\"shoppingListLink\" rel=\"nofollow\">" + link + "</a></div>";     
    return retString; 
}
/** Helper functions to generate layout in popup */


/**
 * Function adds an item to the Shopping Cart
 */
function addItemToCart(prodId,name,storeId,langId,quant, targetElement) {
    if ( $('prodInfoLanding') === null) {
        loadingPopup();
    }
    // Changed by FW11 - part2 - IrwWSOrderItemAdd has been changed to accept partNumber
    new Ajax.Request(baseAddToCartUrl, {
        method:'post',
        parameters: {partNumber: prodId, quantity: quant, storeId:storeId, langId:langId, type: 'json'}, 
        onSuccess: function(transport){
            var json = transport.responseText.evalJSON();
            var code = json.code;
            
            if (code == 0) {
                updateNoOfCartItems(storeId);
                if ( $('prodInfoLanding') === null) {
                    var body = js_fn_POPUP_DONE_TEXT + " <a href=\""+js_fn_POPUP_VIEWCART_URL+"\" class=\"link\" rel=\"nofollow\">" + js_fn_SHOPPING_CART + "</a>";
                    var newLayout = generateLayoutForShopListPopup(js_fn_POPUP_DONE_HEADER,null,body,null,js_fn_POPUP_CLOSE_BTN,"");
                } else {
                    var body = "<div class=\"listLink\">" + js_fn_SHOPPING_CART + "</div>"; 
                    var link = "<div class=\"contentDialogue\"> <a href=\""+js_fn_POPUP_VIEWCART_URL+"\" style=\"text-decoration:none\" >" 
                    var newLayout = generateLayoutShopListProdInfoLanding(js_fn_POPUP_DONE_HEADER,body,link,null, null,null);
                }
            } else {
                var body = js_fn_ARTICLE + " " + js_fn_COULDNOTBEADDEDTOSC;
                var newLayout = generateLayoutForShopListPopup(js_fn_POPUP_ERROR_HEADER,null,body,null,js_fn_POPUP_CANCEL_BTN,"");
            }
			
			
			if ( $('prodInfoLanding') === null) {
				addToShopListPopup.setGenericContent(newLayout);			
				dynamicPositioning(targetElement, 'slPopup', 10,0);
			}else{
				com.ikea.irw.shoppinglist.SaveToList.setContent(newLayout,'remove');
			}
            
        }
    }); 
} 
/* New function has added to chnage the position of the popup */
function setDynamicPosition(_ownerObj,popupId){
    var dimensions = $(popupId).getDimensions();
    var arr = $(_ownerObj).positionedOffset(); 
    var popHeight = dimensions.height;
    $(popupId).style.top = arr[1] - popHeight + 'px';
}

function getSavedLists(storeId,langId,prodId,targetElement,itemRelation) {
    // Show the user that we are waiting for data
    if ( $('prodInfoLanding') === null && $('choiceContainer') === null) {        
        loadingPopup();
    }
    var completeURL = baseGetAllListsUrl + "storeId=" + storeId + "&langId=" + langId;
    
    // Call the completed IOWS URL
    new Ajax.Request(completeURL, {
        method: 'get',
        contentType: 'application/xml',
        onSuccess: function(response) {
            onSavedListsRecieved(response.responseXML,storeId,langId,prodId,targetElement,itemRelation);
        }
    });        
}


function onSavedListsRecieved(doc,storeId,langId,prodId,targetElement,itemRelation) {
    // Parse the returned data
    loginStatus=0; 
    try{
        var activeList = doc.getElementsByTagName("activeList")[0].firstChild.nodeValue;
        if(activeList == ""){activeList = null};
    }catch(e){
        var activeList = null;
    }
    var items = doc.getElementsByTagName("shoppingList");
    var noOfLists = items.length;
    var shoppingLists = new Array();
    if(noOfLists == 0) //for No list
    {
        loginStatus = 3; //for not logged in user
        respondToSaveToShopList(storeId,langId,prodId,loginStatus,activeList,targetElement,itemRelation);
    }
    else if (noOfLists == 1) // for  only one list
    {
        var listItem = parseXmlItemToListInfo(items[0]); // getting single list details 
        loginStatus = 2; //for not logged in user
        respondToSaveToShopList(storeId,langId,prodId,loginStatus,listItem,targetElement,itemRelation);
    }
    else  
    { //For more than one list
        for(var i=0;i<noOfLists;i++) 
        {
            var listItem = parseXmlItemToListInfo(items[i]);
            shoppingLists[i] = listItem;
            
        }
        var newLayout;
		if (typeof (itemRelation) !== "undefined") {
			newLayout = generateSavedListsLayoutForShopListPopup(shoppingLists, activeList, js_fn_POPUP_SELECT_HEADER, js_fn_POPUP_SAVE_BTN, js_fn_POPUP_CANCEL_BTN, "respondToSaveToShopList ('" + storeId + "', '" + langId + "', '" + prodId + "', '" + loginStatus + "', '" + activeList + "', '" + targetElement + "', '" + itemRelation + "')");
		} else {
			newLayout = generateSavedListsLayoutForShopListPopup(shoppingLists, activeList, js_fn_POPUP_SELECT_HEADER, js_fn_POPUP_SAVE_BTN, js_fn_POPUP_CANCEL_BTN, "respondToSaveToShopList ('" + storeId + "', '" + langId + "', '" + prodId + "', '" + loginStatus + "', '" + activeList + "', '" + targetElement + "')");
		}

		//addToShopListPopup.setGenericContent(newLayout);
		if ($('prodInfoLanding') === null) { 
            if ($('choiceContainer') !== null) {                
                $('slPopup').down('.shadow-four').update(newLayout);
                removeChoiceShoppingListPopup('body', 'false');                 
            } else {
                addToShopListPopup.setGenericContent(newLayout);
                dynamicPositioning(targetElement,'slPopup', 10,0);
            }           
		} else {
			com.ikea.irw.shoppinglist.SaveToList.setContent(newLayout);
		}
        
    } 
        

}


/*
 * respondToSaveToShopList saves the product to the selected list
 */
 /*
  * Added 2 parameters (loginStatus and activeList) to the function respondToSaveToShopList for removal of first popup when adding products to the Shopping List. 
  * loginStatus for checking user logged in or not and activeList to get list id and name. 
  */
function respondToSaveToShopList(storeId,langId,prodId,loginStatus,activeList,targetElement,itemRelation)
{
    // Find selected list item

    if(loginStatus==2) //only one list logged in user
    {
        var listObj = {id:activeList.id, name:activeList.name}; // for renamed single shopping list 
        callAddItemToShoppingList(prodId,storeId,langId,listObj,itemRelation,targetElement);
    }
    else if(loginStatus==1) //Not logged in user
    {
                
        var listObj={id:".", name:js_fn_DEFAULT_LISTNAME}; 
        callAddItemToShoppingList(prodId,storeId,langId,listObj,itemRelation,targetElement);
            
    }
    else if(loginStatus == 3)//logged in user with no list
    {
        var listObj={id:"0", name:js_fn_DEFAULT_LISTNAME}; 
        callAddItemToShoppingList(prodId,storeId,langId,listObj,itemRelation,targetElement);
    }
    else //logged in user with multiple lists
    {
        var chkBtns = $('formShoppingListPopup').getInputs('radio');
        var listId = chkBtns.find(function(radio) { return radio.checked; }).value;
        if(listId == 0)
        {    // If item added to a new list
            listName = $F('listName');
                // Add default name if not entered
            if(listName.strip()=="")
            {
                listName = js_fn_DEFAULT_LISTNAME; // listName should come from commerce and properties key
            }
        }
        else
        {  // Get the listname from the label
            var chkActive = chkBtns.find(function(radio) { return radio.checked; }).id;
            listName = $(chkActive).next().innerHTML;
            
        }
        
        var listObj = {id:listId, name:listName};
        callAddItemToShoppingList(prodId,storeId,langId,listObj,itemRelation,targetElement);
    }
}


/**
 * Makes an asynchronous call to the webservice for adding a product to the shopping list.
 * The data call is made asynchronously, when the result is returned
 * the method onAddToShoppingListComplete is called. 

 * @param productNumber        The product number that data is required for. (Example "40103685" = Goliat). 
 * @param storeId            The store id
 * @param langId            The language id
 * @param listObj            A list object with needed attributes to save. Contains attributes: id, name
 * @return                    Always false, in order to stop link execution
 */
function callAddItemToShoppingList(productNumber,storeId,langId,listObj,itemRelation,targetElement) {
    // Show the user that we are waiting for data
    if ( $('prodInfoLanding') === null && $('choiceContainer') === null) {
        loadingPopup();
    }
    
    if(listObj.id==0){  //Product added to a new list
		if ( $('choiceContainer') !== null) {			  
			var completeURL = baseAddUrl + productNumber + "&langId=" + langId + "&storeId=" + storeId + "&slName=" + encodeURI(listObj.name);;
		} else {
			var completeURL = baseCreateListUrl + "partNumber=" + productNumber + "&langId=" + langId + "&storeId=" + storeId + "&slName=" + encodeURI(listObj.name);
		}
    } else {    //Product added to existing list
		if ( $('choiceContainer') !== null) {		  
			var completeURL = baseAddUrl + productNumber + "&langId=" + langId + "&storeId=" + storeId + "&listId=" + listObj.id;
		} else {
			var completeURL = baseAddUrl + "partNumber=" + productNumber + "&langId=" + langId + "&storeId=" + storeId + "&listId=" + listObj.id + addUrlSuffix;
		}
    }

    new Ajax.Request(completeURL, {
        method: 'get',
        contentType: 'application/xml',
        onSuccess: function(response) {
            /**
            * Start
            * added arg productNumber for IKEA00694793
            **/
            onAddToShoppingListComplete(response.responseXML,langId,storeId,listObj,productNumber,itemRelation,targetElement);
            /**
            * End IKEA00694793
            **/
        }
    });
    
    return false;
}


/**
 * Handles the data returned from the callAddItemToShoppingList asynchronous call.
 * The data is parsed to an operation code that should normally be 0.
 * Depending on success, the user is either shown a message that things went well, or an error message.
 * @param doc                The returned WS XML data
 * @return                    Nothing
 */
function onAddToShoppingListComplete(doc,langId,storeId,listObj,productNumber,itemRelation,targetElement) {
	var responseTag = doc.getElementsByTagName("actionResponse")[0];
	var codeTag = responseTag.getElementsByTagName("code")[0];
	var operationCode = parseInt(codeTag.firstChild.nodeValue);
	var operationSuccess = (operationCode == 0);
    var productLen = doc.getElementsByTagName("actionResponse").length ;	
    var newLayout = "";
	var type = "addToShoppingList";    
    if(operationSuccess) {
		if ( $('choiceContainer') === null) {
			try    {
				var addToListId =  targetElement.attributes.id.value;
				irwStatShoppingList("addFromPIPorSC",productNumber,itemRelation,addToListId);
			} catch (e) {
			}
		}
		
        //Product was added to a new list so get the listObj from returned xml
        if(listObj.id==0){  
            var list = doc.getElementsByTagName("shoppingList")[0];			
            listObj = parseXmlItemToListInfo(list);			
        }
       var strBody = "<div>" + js_fn_POPUP_DONE_TEXT + " <a href=\""+baseDisplayUrl+"storeId="+storeId+"&langId="+langId+"&listId="+listObj.id+"\" class=\"link\" rel=\"nofollow\">"+listObj.name+"</a></div>";
       
		if ( $('prodInfoLanding') === null) {
            newLayout = generateLayoutForShopListPopup(js_fn_POPUP_DONE_HEADER,listObj,strBody,null,js_fn_POPUP_CLOSE_BTN,"addFromPip");
            if ( $('choiceContainer') !== null) {
                newLayout = generateLayoutShopListChoice(listObj, productLen, storeId, langId);
                $('slPopup').down('.shadow-four').update(newLayout);
                removeChoiceShoppingListPopup('body', 'true');                
            } else {
                addToShopListPopup.setGenericContent(newLayout);
			    dynamicPositioning(targetElement,'slPopup', 10,0);
            }
		} else {       
            var body = "<div class=\"listLink\">" + js_fn_CHOICE_VIEW_LIST + "</div>"; 
            var link = "<div class=\"contentDialogue\"> <a href=\""+baseDisplayUrl+"storeId="+storeId+"&langId="+langId+"&listId="+listObj.id+"\" style=\"text-decoration:none\" >"
            newLayout = generateLayoutShopListProdInfoLanding(js_fn_POPUP_DONE_TEXT,body,link,storeId, langId,listObj);
			com.ikea.irw.shoppinglist.SaveToList.setContent(newLayout, 'remove', type);
		}
    } else {
        if(listObj.id==0 && operationCode == 6){ // If try to add to new list and max no of lists reached
            newLayout = generateLayoutForShopListPopup(js_fn_POPUP_ERROR_HEADER,null,js_fn_POPUP_ERROR_MAX_NO_OF_LISTS,null,js_fn_POPUP_CLOSE_BTN,"error");
        }else if(operationCode == 9){// Maximum number of shopping list item reached(maximum quantity for a product is 99).
            newLayout = generateLayoutForShopListPopup(js_fn_POPUP_ERROR_HEADER,null,js_fn_ERROR_SHOPPING_LIST_MAX_ITEM_QUANTITY_LIMIT_EXCEEDED,null,js_fn_POPUP_CLOSE_BTN,"error");
        }else if(operationCode == 10){// Maximum number of products in the list has been exceeded(maximum products in a list is 101).
            newLayout = generateLayoutForShopListPopup(js_fn_POPUP_ERROR_HEADER,null,js_fn_ERROR_SHOPPING_LIST_MAX_LIMIT_EXCEEDED,null,js_fn_POPUP_CLOSE_BTN,"error");
        }else{
            newLayout = generateLayoutForShopListPopup(js_fn_POPUP_ERROR_HEADER,null,js_fn_POPUP_ERROR_TEXT,null,js_fn_POPUP_CLOSE_BTN,"");
        }		
       if ( $('prodInfoLanding') === null) {
          if ( $('choiceContainer') !== null) {             
                $('slPopup').down('.shadow-four').update(newLayout);
                removeChoiceShoppingListPopup('body', 'false');                
            } else {
                addToShopListPopup.setGenericContent(newLayout);
                dynamicPositioning(targetElement,'slPopup', 10, 0);
                }
		} else {	
            var container = '<div class=\"errorContainer\">' + newLayout + '</div>';
			com.ikea.irw.shoppinglist.SaveToList.setContent(container);
		}
	}
	
}

function generateLayoutShopListProdInfoLanding(header,body,link,storeId, langId,listObj){
    var retString,btn = null,noLogin ="";
    if(listObj!== null && listObj.id===".")
    {
        noLogin += "<div class=\"shoppingSignupBg\">" + js_fn_POPUP_LOGIN_TEXT + "</div>";
    } 
    
    retString = ""+link+
    //"<div class=\"contentDialogue\"> <a href=\""+baseDisplayUrl+"storeId="+storeId+"&langId="+langId+"&listId="+listObj.id+"\" style=\"text-decoration:none\" >"+
    createHeaderLayout(header,listObj,"")+
    createBodyLayout(body,listObj,"")+"</a>"+
    createFooterLayout(btn,js_fn_POPUP_CLOSE_BTN,"")+
    noLogin +    
    "</div>";
    return retString;
}
function generateLayoutShopListChoice(listObj, productLen, storeId, langId) {
    var doneText = "";
    if (productLen > 1) {
       doneText = productLen +' '+ js_fn_CHOICE_MORE_PRODUCT_LIST;
    } else {
       doneText = '1 '+ js_fn_POPUP_DONE_TEXT;
    }
    var  retString = "" +
    "<div class=\"content\"><div class=\"saveToListContainer\">" +    
         "<a href=" + baseDisplayUrl + "storeId=" + storeId + "&langId=" + langId + "&listId=" + listObj.id + ">" +           
             "<div class=\"choiceNotification\">" +  doneText + " " + listObj.name + "</div>" +
             "<div class=\"choiceLink\">" + js_fn_CHOICE_VIEW_LIST + "</div>" +
         "</a>";
         if (listObj.id == ".") {
            retString +=  "<div id =\"choicePageList\" class=\"shoppingSignupBg\">" + js_fn_POPUP_LOGIN_TEXT + "</div>";
         } 
    retString += "</div></div>";
    return retString;
}

function removeChoiceShoppingListPopup(action, autoclose ) {
        if ($('slPopup') !== null ) {
            Event.observe(document, "click", function () {
                hideChoiceShoppingListPopup.apply(this, arguments);
                clearChoiceTimer();
            });
            if (action == 'close') {
                $('slPopup').fade();
            }
        }   
        if (autoclose === 'true') {
            delayToHideLayer = setTimeout( 
                function() {
                   if($('slPopup') !== null){
                       $('slPopup').fade();              
                   }
                },4000
            );
        }
}

function clearChoiceTimer () {
     clearTimeout(delayToHideLayer);
}

function hideChoiceShoppingListPopup() {
   var isChoice = function (ele) {
       if (ele !== null) {
           if (ele.className) {
              if ((ele.className.indexOf("choicePage") >= 0) || (ele.className.indexOf("buttonContainer") >= 0) || (ele.className.indexOf("choicePageList") >= 0) || (ele.className.indexOf("saveToListContainer") >= 0)) {
                  return true;
              }
           }            
           if (ele.tagName) {
              if (ele.tagName.toLowerCase() !== "body") {
                  return isChoice(ele.parentNode);
              }
           }
        }            
        return false;
    };
    if (isChoice(arguments[0].target)) {
       return;        
    }
    $('slPopup').fade();
}


function callCreateShoppingList(storeId,langId){
    // Get list name from the form
    var listName = $F('listName');

    if (validateListName(listName)){
        $('errMsg').hide();
    
        // Show the user that we are waiting for data
        loadingPopup();
        var completeURL = baseCreateListUrl + "langId=" + langId + "&storeId=" + storeId + "&slName=" + encodeURI(listName);

        new Ajax.Request(completeURL, {
            method: 'get',
            contentType: 'application/xml',
            onSuccess: function(response) {
                onCreateShoppingListComplete(response.responseXML,storeId,langId);
            }
        });
    }else{
        $('errMsg').show();
        $('errMsg.error').update(js_fn_ERROR_CREATE_LIST);
    };
    
    return false;
}


function onCreateShoppingListComplete(doc,storeId,langId) {
    var codeTag = doc.getElementsByTagName("code")[0];
    var operationCode = parseInt(codeTag.firstChild.nodeValue);
    var operationSuccess = (parseInt(codeTag.firstChild.nodeValue) == 0);
    
    if(operationSuccess) {
        try    {
            irwStatShoppingList("createNewList");
        } catch (e) {
        }
        // Redirect to display page with current list...
        location.href = baseDisplayUrl+ "langId=" + langId + "&storeId=" + storeId;
    } else {
        closePopup();
        $('errMsg').show();
        $('errMsg.error').update('Error: ' + operationCode);
    }
}

function callDeleteShoppingList(storeId,langId,listId){
    loadingPopup();
    location.href = baseDeleteListUrl + "langId=" + langId + "&storeId=" + storeId + "&slId=" + listId;
}

function onDeleteShoppingListComplete(doc,storeId,langId) {
    var codeTag = doc.getElementsByTagName("code")[0];
    var operationCode = parseInt(codeTag.firstChild.nodeValue);
    var operationSuccess = (parseInt(codeTag.firstChild.nodeValue) == 0);
    
    if(operationSuccess) {
        // Redirect to display page with current list...
        location.href = baseDisplayUrl+ "langId=" + langId + "&storeId=" + storeId;
    } else {
        closePopup();
        $('errMsg').show();
        $('errMsg.error').update('Error: ' + operationCode);
    }
}

function callRenameShoppingList(storeId,langId,listId){
    // Get list name from the form
    var listName = $F('listName');

    if (validateListName(listName)){
        $('errMsg').hide();
    
        // Show the user that we are waiting for data
        loadingPopup();
        var completeURL = baseRenameListUrl + "langId=" + langId + "&storeId=" + storeId + "&slId=" + listId + "&slName=" + encodeURI(listName);

        new Ajax.Request(completeURL, {
            method: 'get',
            contentType: 'application/xml',
            onSuccess: function(response) {
                onRenameShoppingListComplete(response.responseXML,listId,listName);
            }
        });
    }else{
        $('errMsg').show();
        $('errMsg.error').update(js_fn_ERROR_RENAME_LIST);
    };
    
    return false;
}

function onRenameShoppingListComplete(doc,listId,listName) {
    var codeTag = doc.getElementsByTagName("code")[0];
    var operationCode = parseInt(codeTag.firstChild.nodeValue);
    var operationSuccess = (parseInt(codeTag.firstChild.nodeValue) == 0);
    
    if(operationSuccess) {
        closePopup();
        // Update menu item in left nav
        var menuItem = "listId" + listId;
        $(menuItem).update(listName);
        $('errMsg').show();
        $('errMsg.error').update();
        $('errMsg.confirm').update(js_fn_LIST_RENAMED);
        js_fn_CURRENT_LISTNAME = listName; //Added for PR # IKEA00674147

    } else {
        closePopup();
        $('errMsg').show();
        $('errMsg.error').update('Error: ' + operationCode);
    }
}
/** 
* Start of PR  IKEA00699110
**/
function isLoggedIn(storeId, acceptPartial) {
    var status, completeURL, acceptPartialBoolean, responseXML, loggedIn;
    completeURL = "/webapp/wcs/stores/servlet/GetUserInfo?storeId=" + storeId;
    //Check if there is a parameter stating to accept partial logins. If not, set to true to accept it.
    acceptPartialBoolean = typeof(acceptPartial) !== 'undefined' ? acceptPartial : true;
    new Ajax.Request(completeURL, {
        method: 'post',
        contentType: 'application/xml',
        asynchronous: false,    // Needed to return status when response done!
        onSuccess: function (response) {
            responseXML = response.responseXML;
            loggedIn = responseXML.getElementsByTagName('loggedIn')[0].firstChild.data;
            if (!acceptPartialBoolean && loggedIn === 'Y') {
                status = true;
            } else if (acceptPartialBoolean && (loggedIn === 'Y' || loggedIn === 'P')) {
                status = true;
            } else {
                status = false;
            }
        }
    });
    return status;
}
/** 
* End of PR  IKEA00699110
**/

function parseXmlItemToListInfo(item) {
    var listId = item.getAttribute("id");
    var listName = item.getAttribute("name");
    var returnObject = {id:listId, name:listName};
    return returnObject;
}

/**
 * Closes the popup
 * @return    false to stop link exection
 */
function closePopup() {
    //Fix for IE6
    if(Browser.Version() == 6){
        enable();    
    }
    addToShopListPopup.hide();
    return false;
}
/**
 * Closes the Tip popup
 * @return false to stop link exection
 */
function closeTipPopup() {
    addToShopListPopup.hide();
    document.cookie = 'hasSeen=true;path=/;';
    return false;
}


/**
 * Makes the popup show the layout that informs the user that a remote call is loading.
 * Requires that a method called generateLoadingLayout that returns valid HTML layout is defined.
 * @return                    false to stop link exection
 */
function loadingPopup() {
    addToShopListPopup.loadingPopup();
    return false;
}

function showSaving() {
    addToShopListPopup.loadingSaving();
    return false;
  }
/**
 * Functions for enable/disable the input "listName" where the user enters a name for a new list to create.
 * The input should only be enabled when the selectbox in front is selected. And when enabled the text in it should be selected.
 */
function enableListName() {
    $('listName').disabled = false;
    $('listName').select();
}

function disableListName() {
    $('listName').disabled = true;
}

/**
 * Function for enable/disable the "Sort by" radiobuttons and "Include local store offes" checkbox in the print popup.
 * Triggered onchange of select option and also on popup load.
 */
function toggleSelStore(formObj,selObj){
    var selVal = $F(selObj);
    var chkBtns = formObj.getInputs('radio');
    var chkBox = formObj.getInputs('checkbox');
    if(selVal=="0"){
        chkBtns.each(function(obj){
            obj.disabled = true;
        })
        chkBox.each(function(obj){
            obj.disabled = true;
        })
    }else{
        chkBtns.each(function(obj){
            obj.disabled = false;
        })
        chkBox.each(function(obj){
            obj.disabled = false;
        })
    }
}

/**
 * Helper function for generateEmailLayoutForShopListPopup() to resize the iframe after load since it does not support dynamic height
*/
function resizeMe(obj){
    var h = 0;
    
    var h = Try.these(             
        function() {return obj.contentDocument.body.getHeight();},       //FF & Safari
        function() {return obj.contentWindow.document.body.getHeight();},   //IE
        function() {return 710;}
    );
    
    obj.height = h;
    $('emailIframeLoader').hide(); 
    $('emailIframeContainer').style.visibility = 'visible';
}

/**
 * Input validation on shopping list name
*/
function validateListName(name) {
    // Add default name if not entered
    if(name.strip()==""){
        name = js_fn_DEFAULT_LISTNAME;  // Get name from global js variable
    }
    if (name == null || name.length <= 0 || name.length > 254) {
        return false;
    }    
    var vBlackList = ["/",";","<","=",">","?","[","]","{","}","%"]; 
    for (var i = 0; i < vBlackList.length; i++) {
        if (name.indexOf(vBlackList[i]) > -1) {
            return false;
        }
    };
    return true;
}

function getSavedListsToMove(storeId,langId,rowId) {
    // Show the user that we are waiting for data
    
    loadingPopup();
    var completeURL = baseGetAllListsUrl + "storeId=" + storeId + "&langId=" + langId;
    
    // Call the completed IOWS URL
    new Ajax.Request(completeURL, {
        method: 'get',
        contentType: 'application/xml',
        onSuccess: function(response) {
            onSavedListsRecievedToMove(response.responseXML,storeId,langId,rowId);
        }
    });        
}


function onSavedListsRecievedToMove(doc,storeId,langId,rowId) {
    // Parse the returned data
   var activeList ;
    try{
         activeList = doc.getElementsByTagName("activeList")[0].firstChild.nodeValue;
        if(activeList == ""){activeList = null};
    }catch(e){
        activeList = null;
    }
    var items = doc.getElementsByTagName("shoppingList");
    var noOfLists = items.length;
    var shoppingLists = new Array();
    var loginstatus=0;
    var listItem="";
    if(noOfLists > 1) {
        for(var i=0;i<noOfLists;i++) {
            listItem = parseXmlItemToListInfo(items[i]);
            shoppingLists[i] = listItem; 
            
        }
        var newLayout = generateSavedListsLayoutForShopListPopup(shoppingLists,activeList,js_fn_POPUP_SELECT_HEADER,js_fn_POPUP_SAVE_BTN,js_fn_POPUP_CANCEL_BTN,"respondOrderItemToShopList('"+storeId+"','"+langId+"','"+rowId+"')");
        addToShopListPopup.setGenericContent(newLayout);
        
    }else{
    // condition for logged in user without a shoppinglist and with a shoppinglist
    var defaultList;
        if(activeList!=null && activeList!=-1){
                listItem = parseXmlItemToListInfo(items[0]);
                defaultList = {id:listItem.id,name:listItem.name};
            } else {
                defaultList = {id:'.',name:js_fn_DEFAULT_LISTNAME};
            }
        shoppingLists[0] = defaultList; 
       addOrderItemToShoppingList(rowId,storeId,langId,defaultList);
    }
}




/*
 * respondToOrderItemToShopList saves the product to the selected list
 */
function respondOrderItemToShopList(storeId,langId,rowId,loginstatus)
{
    if(loginstatus==1){ // for not logged in user
        //selecting the default list 
        var listObj={id:".", name:js_fn_DEFAULT_LISTNAME}; 
        addOrderItemToShoppingList(rowId,storeId,langId,listObj);
    } else {
        var quantity = '1';
        var chkBtns = $('formShoppingListPopup').getInputs('radio');
        var listId = chkBtns.find(function(radio) { return radio.checked; }).value;
        if(listId == 0){    // If item added to a new list
     
        listName = $F('listName');
        // Add default name if not entered
        if(listName.strip()==""){
            listName = js_fn_DEFAULT_LISTNAME;  // listName should come from commerce and properties key
        }
    }else{  // Get the listname from the label
    
        var chkActive = chkBtns.find(function(radio) { return radio.checked; }).id;
        listName = $(chkActive).next().innerHTML;
    
    }
    //Get hidden input field value if product is GPR
    var partNumberInForm = $("thePartnumberInForm");
    if (""+partNumberInForm != "null") {
        prodId = partNumberInForm.value;
    } 

    var listObj = {id:listId, name:listName};   
    addOrderItemToShoppingList(rowId,storeId,langId,listObj);
    } 
    
}


/**
 * Makes an asynchronous call to the webservice for adding a product to the shopping list.
 * The data call is made asynchronously, when the result is returned
 * the method onAddToShoppingListComplete is called. 

 * @param productNumber        The product number that data is required for. (Example "40103685" = Goliat). 
 * @param storeId            The store id
 * @param langId            The language id
 * @param listObj            A list object with needed attributes to save. Contains attributes: id, name
 * @return                    Always false, in order to stop link execution
 */
function addOrderItemToShoppingList(rowId,storeId,langId,listObj) {
    // Show the user that we are waiting for data

    showSaving();
  
    // As per IKEA00689033 we are using the item quantity stored in the order as input to IrwWSOrderItemMoveToShoppingListCmd instead of qty input by user.
    var completeURL = baseMoveOrderItemToShoppingList + "partNumber=" + $F('prodId_'+rowId) + "&quantity=" +$F('order_qty_'+rowId) +"&returnShoppingCart=true&recalcPrelDelivery=true" +"&listId="+listObj.id+"&slName=" + encodeURI(listObj.name);
     
    new Ajax.Request(completeURL, 
        {
        method: 'post',
         type: 'json',
        
        onSuccess: function(transport) {
        onMoveToShoppingListComplete(transport.responseText.evalJSON(),langId,storeId,listObj,rowId);
    
        },
        onFailure: function(){ 
            var response = transport.responseText || "no response text"; 
            var errMsgDiv = getObject('errMsg');
            errMsgDiv.style.display='block';
            errMsgDiv.style.visibility='visible';
           $('errMsg').value="Something went wrong...";
           $('errMsg').visible();
            }
    });
    
    
    
    return false;
}



/**
 * Handles the data returned from the callAddItemToShoppingList asynchronous call.
 * The data is parsed to an operation code that should normally be 0.
 * Depending on success, the user is either shown a message that things went well, or an error message.
 * @param doc                The returned WS XML data
 * @return                    Nothing
 */
function onMoveToShoppingListComplete(doc,langId,storeId,listObj,rowId) {
        
    var operationCode = parseInt(doc[0][0].code);
    
        var operationSuccess = (operationCode == 0);
        
        if(operationSuccess) {
        clearCartErrors();
        updateNoOfCartItems(storeId);
    
        changeShoppingCartView(rowId,doc);
        var partNumber = document.getElementById("prodId_"+rowId).value;
        try    {
            irwStatShoppingList("addFromPIPorSC",partNumber);
        } catch (e) {
        }
        
    
        //Product was added to a new list so get the listObj from returned json
        if(listObj.id==0){  
           listObj.name = doc[0][0].listName;
           listObj.id = doc[0][0].listId;
            
        }
        var strBody = "<p>" + js_fn_POPUP_DONE_TEXT + " <a href=\""+baseDisplayUrl+"storeId="+storeId+"&langId="+langId+"&listId="+listObj.id+"\" class=\"link\" rel=\"nofollow\">"+listObj.name+"</a></p>";
        var newLayout = generateLayoutForShopListPopup(js_fn_POPUP_DONE_HEADER,listObj,strBody,null,js_fn_POPUP_CLOSE_BTN,"addFromPip");
        addToShopListPopup.setGenericContent(newLayout);
    } else {
    
        if(listObj.id==0 && operationCode == 6){ // If try to add to new list and max no of lists reached
            var newLayout = generateLayoutForShopListPopup(js_fn_POPUP_ERROR_HEADER,null,js_fn_POPUP_ERROR_MAX_NO_OF_LISTS,null,js_fn_POPUP_CLOSE_BTN,"error");
        }else if(operationCode == 9){// Maximum number of shopping list item reached(maximum quantity for a product is 99).
            var newLayout = generateLayoutForShopListPopup(js_fn_POPUP_ERROR_HEADER,null,js_fn_ERROR_SHOPPING_LIST_MAX_ITEM_QUANTITY_LIMIT_EXCEEDED,null,js_fn_POPUP_CLOSE_BTN,"error");
        }else{
            var newLayout = generateLayoutForShopListPopup(js_fn_POPUP_ERROR_HEADER,null,js_fn_POPUP_ERROR_TEXT,null,js_fn_POPUP_CLOSE_BTN,"");
        }
        addToShopListPopup.setGenericContent(newLayout);
    }
}

function changeShoppingCartView(rowId,json) {
    
	// Update add-on-sales relations
    if ($('productEntries')) {
        var entry = $('productEntries').down(".addOnProduct");
        if (entry) {
            var controller = entry.view.controller;
            controller.removeSrcProduct($F('prodId_'+rowId));
        }
    }
    
	var totalRow = $F('totalRow') ;
     
    if (json[1][0].isEmpty == 'true') {
    	showEmptyShoppingCart(rowId);
    } else {
    	totalPriceDiv = getObject('txtTotal');
                             
        if(totalRow == rowId) {
        	$('tr_'+rowId).hide();                 
        }
                
        if(rowId < totalRow) {
        	var finalRowId = parseInt(rowId)+1;
            document.getElementById('tr_'+rowId).style.visibility = "hidden";
            $('tr_'+rowId).hide();
        
            var className =  $('tr_'+rowId).className ;
            for (var i = finalRowId; i <=totalRow  ; i++) {
            	if(document.getElementById('tr_'+rowId).style.visibility != '') {
                	$('tr_'+i).className = className;
                    if(className=='whiteRow') {
                    	className = "grayRow";
                    } else {
                        className = "whiteRow";
                    }
                }
            }
        }
            
        totalPriceDiv.innerHTML = json[1][0].totalPrice;
        
        if(json[1][0].preShippingCost.length>0 && json[1][0].isEmpty == 'false' ) {    
                          
            deliveryDateDiv = getObject('deliveryDate');
            deliveryMethodDiv = getObject('deliveryMethod');
            deliveryCalcResultDiv = getObject('deliveryCalcResult');
            
            deliveryDateDiv.innerHTML = json[1][0].preDelTimeSlotStart;
            deliveryMethodDiv.innerHTML = json[1][0].preDelMethod;
            deliveryCalcResultDiv.innerHTML = json[1][0].preShippingCost;
            
        }
    }
}


function showEmptyShoppingCart(rowId)
{

    $('emptyCartMsg').show(); 
    $('tr_'+rowId).hide();
    $('cartFooter').hide();
   document.getElementById("beginCheckout").style.visibility = "hidden";
    

}

 // Start CR-IKEA00634068 
/**
 * For dynamic positioning
*/
function dynamicPositioning(_ownerObj,popupId,topPos,leftPos){
    var pos = _ownerObj.cumulativeOffset();    
    var ownerDimension = $(_ownerObj).getDimensions();    
    var dimensions = $(popupId).getDimensions();    
    var popLeft = ownerDimension.width + leftPos;
    $(popupId).style.top = pos.top - dimensions.height + 'px';
}
 // End CR-IKEA00634068 
 
  var Browser = {
   Version: function() {
     var version = 999;
     if (navigator.appVersion.indexOf("MSIE") != -1)       
       version = parseFloat(navigator.appVersion.split("MSIE")[1]);
     return version;
   }
}

function disable(divId){
    if($(divId) != null) {
        var contentDiv = document.getElementById(divId);
        var containedDivElements = contentDiv.getElementsByTagName("select");    
        for(var i=0;i<containedDivElements.length;i++){
            containedDivElements[i].style.visibility = "hidden";
        }
    }
}

function enable(divId){
    if($(divId) != null) {
        var contentDiv = document.getElementById(divId);
        var containedDivElements = contentDiv.getElementsByTagName("select");
        for(var i=0;i<containedDivElements.length;i++){
            containedDivElements[i].style.visibility = "visible";        
        }
    }
}
/**
 * Handles the data returned from the IrwWSInterestItemAdd asynchronous call.
 * The data is parsed to an operation code that should normally be 0.
 * Depending on success, the user is either shown a message that things went well, or an error message.
 * @param doc                The returned WS XML data
 * @param doc                Language Id
 * @param doc                Store Id
 * @param doc                List object
 * @param doc                The target element
 * @return                   Nothing
 */
function onAddAllToShoppingListComplete(doc, langId, storeId, listObj, targetElement) {
	var responseTag = doc.getElementsByTagName("actionResponse")[0];
	var codeTag = responseTag.getElementsByTagName("code")[0];
	var operationCode = parseInt(codeTag.firstChild.nodeValue);
	var newLayout = "";
	var operationSuccess = (operationCode === 0);
    if (operationSuccess) {
        var strBody = "<div>" + " <a href=\"" + baseDisplayUrl + "storeId=" + storeId + "&langId=" + langId + "&listId=" + listObj.id + "\" class=\"link\" rel=\"nofollow\">" + js_fn_POPUP_LIST_TEXT + "</a></div>";
		if (isLoggedIn(storeId)) {
            newLayout = generateLayoutForShopListPopup(js_fn_POPUP_LIST_HEADER, listObj, strBody, null, js_fn_POPUP_CLOSE_BTN, "");
        } else {
			newLayout = generateLayoutForShopListPopup(js_fn_POPUP_LIST_HEADER, listObj, strBody, null, js_fn_POPUP_CLOSE_BTN, "addFromPip");
		}
        addToShopListPopup.setGenericContent(newLayout);
    } else {
        if (listObj.id === 0 && operationCode === 6) { // If try to add to new list and max no of lists reached
            newLayout = generateLayoutForShopListPopup(js_fn_POPUP_ERROR_HEADER, null, js_fn_POPUP_ERROR_MAX_NO_OF_LISTS, null, js_fn_POPUP_CLOSE_BTN, "error");
        } else if (operationCode === 9) {// Maximum number of shopping list item reached(maximum quantity for a product is 99).
            newLayout = generateLayoutForShopListPopup(js_fn_POPUP_ERROR_HEADER, null, js_fn_ERROR_SHOPPING_LIST_MAX_ITEM_QUANTITY_LIMIT_EXCEEDED, null, js_fn_POPUP_CLOSE_BTN, "error");
        } else if (operationCode === 10) {// Maximum number of products in the list has been exceeded(maximum products in a list is 101).
            newLayout = generateLayoutForShopListPopup(js_fn_POPUP_ERROR_HEADER, null, js_fn_ERROR_SHOPPING_LIST_MAX_LIMIT_EXCEEDED, null, js_fn_POPUP_CLOSE_BTN, "error");
        } else {
            newLayout = generateLayoutForShopListPopup(js_fn_POPUP_ERROR_HEADER, null, js_fn_POPUP_ERROR_TEXT, null, js_fn_POPUP_CLOSE_BTN, "");
        }
        addToShopListPopup.setGenericContent(newLayout);
	}
	dynamicPositioning(targetElement, 'slPopup', 10, 0);
}
















/*** 
*************************************
JavaScript functions for: nav02
Created by Lars Henrik Rotnes
Last modified: 2002-10-07
*************************************
**/

/*
CVS Version : $Id: nav02.js,v 1.13 2003/06/03 13:09:54 bohuslav Exp $

*/

//browsercheck jonk 20030428
var w3c = (document.getElementById)? true:false; //ie 5 and up + mozilla + netscape 6 and up
var ie = (document.all)? true:false;
var ns = (document.layers)? true:false;

if(document.images) {
	var arrow_over = new Image();
	arrow_over.src = "/ms/img/navigation/goBtn_over.gif";
	var arrow = new Image();
	arrow.src = "/ms/img/navigation/goBtn.gif";
}

/**
*initialize the document, display default values in the option box
*the text and values that the option box is poulated with is collected
*from two arrays, aText and aValue which is defined in a separate file, navOptions.js
**/
function init(initVal){
	var selectID = "select1";  //the id of the select field that should be populated
	var catID = "catid";
	//check if the browser can run this script
	if (!optionTestIt(selectID) ){
		alert(js_fn_NOT_VALID_BROWSER); 
		return false;
	} 
	
	//netscape 6 && ie 5>
	if (document.getElementById){
		tmp = document.getElementById(selectID);
		tmp2 = document.getElementById(catID);
	}else if (document.all){ //Explorer 4
	  tmp = document.all[selectID];
	  tmp2 = document.all[catID];
	}else{ 
		alert(js_fn_NOT_VALID_BROWSER); 
		return false; 	
	}
	tmp2.value = pifCatalogId;
	tmp.options[0] = new Option(initVal,'#');
 	for(var i = 0; i < aText.length; i++ ){
 		tmp.options[i+1] = new Option(aText[i],aValue[i]);
 	}
 	tmp.selectedIndex = 0;
}

/**
*initialize the document, display default values in the option box
*the text and values that the option box is poulated with is collected
*from two arrays, aText and aValue which is defined in a separate file, navOptions.js
**/
function initNews(initVal, newVal){
	var selectID = "select1";  //the id of the select field that should be populated
	var catID = "catid";
	//check if the browser can run this script
	if (!optionTestIt(selectID) ){
		alert(js_fn_NOT_VALID_BROWSER); 
		return false;
	} 
	
	//netscape 6 && ie 5>
	if (document.getElementById){
		tmp = document.getElementById(selectID);
		tmp2 = document.getElementById(catID);
	}else if (document.all){ //Explorer 4
	  tmp = document.all[selectID];
	  tmp2 = document.all[catID];
	}else{ 
		alert(js_fn_NOT_VALID_BROWSER); 
		return false; 	
	}
	tmp2.value = pifCatalogId;
	tmp.options[0] = new Option(initVal,'#');
	tmp.options[1] = new Option(newVal,'NEW');
 	for(var i = 0; i < aText.length; i++ ){
 		tmp.options[i+2] = new Option(aText[i],aValue[i]);
 	}
 	tmp.selectedIndex = 0;
}
/**
*Open a new page
*
*argFieldId string  = id of the field that triggered the function
**/
function openNewPage(argFieldId){
	//netscape 6 && ie 5>
	if (document.getElementById){
		tmp = document.getElementById(argFieldId);
	}else if (document.all){ //Explorer 4
	  tmp = document.all[argFieldId];
	}else{ 
		alert(js_fn_NOT_VALID_BROWSER); 
		return false; 	
	}
	
	//if the first element in the dropdown is selected do nothing
	if( tmp.selectedIndex < 1 )
		return false;
	
	document.location.href = aValue[tmp.selectedIndex];
}


/**
*function to find out if the browser supports dynamic content handling with 
*option boxes.
*
*argFieldId string  = the id of the select field, used to test if the browser
*											handle dynamic populating of this field
**/
function optionTestIt(argFieldId)
{
	optionTest = true;

	//netscape 6 && ie 5>
	if (document.getElementById){
		tmp = document.getElementById(argFieldId);
	}else if (document.all){ //Explorer 4
	  tmp = document.all[argFieldId];
	}else{ 
 		optionTest = false;
 	}
 	
	lgth = tmp.options.length - 1;
	tmp.options[lgth] = null;
	if (tmp.options[lgth]) 
			optionTest = false;
	
	return optionTest;
}

/** Invoked when the mouse moves over of given image **/
function out(imgName) {
	if(document.images)
	eval('document.' + imgName + '.src = ' + imgName.substr(0, imgName.length-1) + '.src')
}

/** Invoked when the mouse moves over fo given image. **/
function over(imgName) {
	if(document.images)
	eval('document.' + imgName + '.src = ' + imgName.substr(0, imgName.length-1) + '_over.src')
}

function go(){
if (document.selecter.prod.options[document.selecter.prod.selectedIndex].value != "none") {
location = document.selecter.prod.options[document.selecter.prod.selectedIndex].value
		}
	}

//function for submitting dropdowns - jonk 20030402
//with button
/*
function browseIt(formName,selectName,formAction) {
	var w3c = (document.getElementById)? true:false;
	if (formAction == null){
		formAction = "/webapp/wcs/stores/servlet/CategoryDisplay";
	}
	if (w3c) {
		if (document.getElementById(selectName).value == "#") {
			document.getElementById(formName).action = "#";
		} else {
			document.getElementById(formName).action = formAction;
			document.getElementById(formName).submit();
		}
	} else {
		if (document.all[selectName].value == "#") {
			document.all[formName].action = "#";
		} else {
			document.all[formName].action = formAction;
			document.all[formName].submit();
		}
	}
}
*/
//function for submitting dropdowns - jonk 20030429
//without button
//added lines for cross-market store reference - bohuslav 20030603
function browseIt(formId,selectId) {
	if (w3c) {
		if (document.getElementById(selectId).value != "#") { //if the user uses the "back"-button the last selected value is still selected, this makes sure that the "browse here.." (#) doesn't get submitted.
			//document.getElementById(formId).action = document.getElementById(selectId).value; //set the form-action to the value of the selected option
			if (document.getElementById(selectId).value.indexOf(";;") != -1) {
				// parse harcoded link to store in another market
				var hc_link = document.getElementById(selectId).value;
				var keyVals = hc_link.split(";;");
				document.getElementById(formId).storeId.value = keyVals[0];
				document.getElementById(formId).langId.value = keyVals[1];
				document.getElementById(selectId).options[document.getElementById(selectId).options.length] = new Option ("Cross Link", keyVals[2], true, true);
			}
			else if (document.getElementById(selectId).value.indexOf("NEW") != -1) {
				document.getElementById(formId).action = '/webapp/wcs/stores/servlet/IkeamsNews';
			}	
			document.getElementById(formId).submit(); //submit the form
		}
	} else {
		if (document.all[selectId].value != "#") { //if the user uses the "back"-button the last selected value is still selected, this makes sure that the "browse here.." (#) doesn't get submitted.
			//document.all[formId].action = document.all[selectId].value; //set the form-action to the value of the selected option
			document.all[formId].submit(); //submit the form
		}
	}
}

//self-submitting select jonk 2005-10-07
function selectBrowse(frameName,formName,selectName) {
	var temp = "document." + formName + "." + selectName + ".options[document." + formName + "." + selectName + ".options.selectedIndex].value";
	if (eval (temp) != "do_nothing") {
		if (frameName=="") {
			location.href = eval (temp);
		} else if (frameName=="new") {
			window.open(eval (temp))
		} else {
			temp = frameName + ".location.href = " + temp;
			eval (temp);
		}
	}
}

//RangeIV change language
function changeLangId(langId) {
	var x = location.href.indexOf('langId');
	var y = location.href.indexOf('&', x);
	var newHref = location.href.substring(0, x);
	newHref = newHref.concat('langId=', langId);
	if (x < y ) {
		newHref = newHref.concat(location.href.substring(y));
	}
	location.href = newHref;
}

//RangeIV select store (ad version)
function selectStore(storeId, langId, storeNumber) {
	location.href = '/webapp/wcs/stores/servlet/IkeaNearYouView?storeId=' + storeId + '&langId=' + langId + '&StoreNumber=' + storeNumber;
}

//RangeIV select store (family version)
function selectStoreF(locale, storeNumber) {
    setCookie('selected_store_' + locale, storeNumber, null, '/' );

    if (arguments[2]) {
       location.href = location.href + '&localStore=' + arguments[2];
    } else {
        location.reload(true);
    }
}var w3c = false;
var ie = false;
var timerID = null; 
var timerOn = false; 

if (document.getElementById) {
	var w3c = true;
}
if (document.all) {
	var ie = true;
}

//show a hidden layer
function displayLayer(strName,displayType){
    try {
		resetTimer();
		document.getElementById(strName).style.display = displayType;
	} catch (e) {}
}

//hide a shown layer
function noneLayer(strName){
	try {
		document.getElementById(strName).style.display = 'none';
	} catch(e) {}
}

function resetTimer() {
    if (timerOn) {  
        clearTimeout(timerID);  
        timerID = null;  
        timerOn = false;  
    } 
}

function showDropMenu(strName,displayType) {
    displayLayer(strName,displayType);
}

function hideDropMenu(strName) {
    if (timerOn == false) {  
        timerID = setTimeout('noneLayer("'+strName+'")',1000);
        timerOn = true;  
    } 
}

//swap image
function swapImage(imgName,imgSrc) {
	document.getElementById(imgName).src=imgSrc;
	//document.images[imgName].src=imgSrc;
}

//change the value of the search form
function logInFormValue(which,theValue) {
	if (document.getElementById(which).value == theValue) {
		document.getElementById(which).value='';
	} else if (document.getElementById(which).value == '') {
		document.getElementById(which).value=theValue;
	}
}

//change the state of the arrows in the menu
function rollArrow(chosen, objectID) {
	if(chosen == "active") {
		document.getElementById(objectID).className="arrowActive";
	}
	else {
		document.getElementById(objectID).className="arrow";
	}
}

//set style to an element
function setStyle(objId, style, styleValue) {
	document.getElementById(objId).style[style] = styleValue;
}

//change the class of an element
function changeClass(objectID, toClass) {
	document.getElementById(objectID).className=toClass;
}

//submit form
function submitIt(theFormName,parameter1,value1) { 
	document.getElementById(parameter1).value = value1; 
	temp = "document." + theFormName + ".submit()" 
	eval (temp); 
} 

// Functions for the search form in the header
function search(frmName){
    frm = document.getElementById(frmName);
    if(frm.onsubmit()){
        frm.submit();
    }
}

function checkSearch(searchForm){
    irwstatSetTrailingTag("IRWStats.searchType", "yes");
    while(searchForm.query.value.charAt(searchForm.query.value.length-1)==' ') searchForm.query.value=searchForm.query.value.substring(0,searchForm.query.value.length-1);
    if (searchForm.query.value != "") {
        return true;
    } else {
        return false;
    }
}

// 070205 Functions created for Range IV by Jake
// A function to find all specified objects on a page and then show/hide them by definining the 'visibility' parameter to 'show' or 'hide'
// Function needed for IE 6 and below to hide select objects when dropdown layers are to be displayed (otherwise the select obj is showing through the layer)

// Object detection of IE7
var ie7 = (document.documentElement && typeof document.documentElement.style.maxHeight!="undefined")? true:false;

function tagVisibility(tag, visibility) {
	try {
	    if(ie && !ie7){ // Only fire if IE and not (e.g. less than)  IE7
	        var numOfForms = document.forms.length;
	        
	        for(var f=0; f<numOfForms; f++){
	            theForm = document.forms[f];

	            for(var i=0; i<theForm.length; i++){
	                var theElement = theForm.elements[i];
	                if(theElement.tagName == tag){
	                    if(visibility == 'hide'){
	                        hideElement(theElement);
	                    }else if(visibility == 'show'){
	                        showElement(theElement);
	                    }
	                }
	                
	                
	            }
	        }
	    }
	} catch (e) {}
}

function showElement(obj){
	obj.style.visibility = "visible";
}

function hideElement(obj){
	obj.style.visibility = "hidden";
}

function enableDepartmentLink() {
    var url, departmentArray, department, node;
    url = document.location.href;

    try {
        departmentArray = url.split("/departments/");
        department = departmentArray[1].split("/")[0];
        node = $$('td>a[href*=' + department + ']');
        node.first().addClassName('active');
    } catch (e) {}
}

/*  
 * DRUO 090312 - Search3
 */
 
 /*
 Removed IKEA00648492
 
function searchFieldValueUpdate(theFieldName)
{
	var this_url_path = window.location.pathname;
	var this_path_array = this_url_path.split("/");
	if(this_path_array[this_path_array.length-2] == "search")
	{
		if(document.getElementById(theFieldName).value == null || document.getElementById(theFieldName).value == '')
		{
			if (IRWreadCookie("RECENT_SEARCH_0"))
			{
				recentSearch = new String(IRWreadCookie("RECENT_SEARCH_0")).strip();
				if (recentSearch != null)
				{
					decodedStr = Url.decode(recentSearch);
				}
				document.getElementById(theFieldName).value=decodedStr;
			}
			else
			{
				document.getElementById(theFieldName).value='';
			}
		}
	}
}
*/
function postData(form,layout) {
	try {
	switch (layout) {
		case ( "optinnewsletter"):
			subscribeNewsletter(form);
		break
		default:
			alert('no handler found');
			//return true if no handler is found - then the form will be submited as normal
			return  true;
		break
	}
	//if a handler is found, return false - then the form wont be submited
	return false;
	} catch (e) {
		dev_e=e;
		return false;
		//return true if something goes wrong - then the form will be submited as normal
		return  true;
	}
}
function showError(string) {
	alert(string);
	//$('newsletterFormErrorContainer').show();
}
function subscribeNewsletter(form) {
	if (!form.action.endsWith('xml')) {
		form.action=form.action+'&returnType=xml';
		errorHeadline = $('newsletterFormErrorContainer').innerHTML;
		//set up loader
		$('progressbar').hide();
		$('progressbar').update("<img src=\"/ms/img/form/ajaxloader.gif\">");
	} else {
		$(form).getElements().each(function(item) {
			if(item.name=='zipCode' || item.name=='storeNumber' || item.name=='email1') {
				item.setStyle({
					backgroundColor: '#FFF'
				});
			}
		});
		$('newsletterFormErrorContainer').hide();
	}
	//hide all form fields and show a loader
	$(form).immediateDescendants().each(function(item) {
		item.setStyle({
			visibility: 'hidden'
		});
	});
	//disable the form until we have an answer
	$('progressbar').show();
	$('progressbar').setStyle({
			visibility: 'visible',
			margin: '-8px'
	});	
	$(form).request({ 
		method: 'get', 
		onFailure: function () {
			//failed fetching product information page... not correct status code
			showError('newsletter subscription service unavailable');
		},
		onException: function (instance,object) {
			//failed fetching product information page... misc error
			showError('misc error while loading');
			dev_instance=instance;
			dev_object=object;
		},
		onInteractive: function () {
			//show progress here
		},
		onSuccess: function(transport){ 
			$('progressbar').hide();	
			var requestXML = transport.responseXML;
				var validation  = requestXML.getElementsByTagName('validation')[0];
				var validationStatus = validation.attributes[1].nodeValue;
				if (validationStatus != 'true') {
					//handle errors
					var errorFields = validation.getElementsByTagName('field');
					var errorList='<ul>';
					for (i=0;i<errorFields.length;i++) {
						var item = errorFields[i];
						var itemName=item.getElementsByTagName('name')[0].firstChild.data;
						var itemMessage=item.getElementsByTagName('message')[0].firstChild.data;
						errorList=errorList+'<li>- '+itemMessage+'</li>';
						$(form).getElements().each(function(item) {
							if (item.name == itemName) {
								item.setStyle({
									backgroundColor: '#FF9797'
								});
							}
						});
					}
					errorList=errorList+'</ul>';
					//the answer returned erros, enable the form again
					$(form).immediateDescendants().each(function(item) {
						item.setStyle({
							visibility: 'visible'
						});
					});					
					$('newsletterFormErrorContainer').update(errorHeadline+errorList);
					$('newsletterFormErrorContainer').show();
					$('newsletterFormErrorContainer').siblings()[1].hide();
				} else {
					//post ok
					$('newsletterFormContainer').hide();
					$('newsletterFormConfirmationContainer').show();
					$('newsletterFormErrorContainer').hide();
				}
			return;
		}
	});
}
function subscribeNewsletter_error() {

}
function retest() {
	$('newsletterFormConfirmationContainer').hide();
	$('newsletterFormContainer').show();
	$('newsletterFormErrorContainer').hide();
	$('progressbar').update('');
	return false;
}
var cookieName = "irw_compare";
var cookieValueSeparator = "**";
var cbCount = 0;
var cbDisabled = true;
var cbArray = new Array();
var cbRecArray = new Array();
var buttonArray = new Array();

/* This function is needed in order for firefox to force a reload of the page when presseing backbutton */
window.onunload = function() {
cbCount=0; 
updateComparison();
};

/**
* Adds a product to the compare cookie
*/
function addProductToCompare(productNumber){
	var currentValue = getCookie(cookieName);
	var newVal = null;
	if(currentValue == null || currentValue == ""){
		newVal = productNumber;
	} else if (currentValue.indexOf(productNumber) == -1) {
		newVal = currentValue + cookieValueSeparator + productNumber;
	} else {
		return;
	}

	cbCount = cbCount + 1;
	document.cookie=cookieName+"="+escape(newVal)+";path=/";
}

/**
*Removes a product form the comparison
*cookie
*/
function removeProductToCompare(productNumber){
	var values = getCookie(cookieName);
	if(values == null || values == "" || values.indexOf(productNumber) == -1){
		return;
	}
	var newVal = values.replace(cookieValueSeparator + productNumber,'');
	//If the product is the first in the list
	newVal = newVal.replace(productNumber + cookieValueSeparator,'');
	//if the product is the only product	
	newVal = newVal.replace(productNumber,'');

	cbCount = cbCount - 1;
	document.cookie=cookieName+"="+escape(newVal)+";path=/";
}

function setComparisonCheckboxStatus(){
		
	try {
		if (navigator.appName.toLowerCase().indexOf("microsoft") != -1) {
			setTimeout("initCompareCheckboxStatus()", 0);
		} else {
			initCompareCheckboxStatus();
		}
	} catch (error) {
		initCompareCheckboxStatus();
	}
	
}

function initCompareCheckboxStatus() {
	//Unset all checkboxes in the products container and set an observer on each of them
	var prodContainer = $('productsContainer');
	if(prodContainer == null) return;
	var objects = prodContainer.select('div.cartContainer');
	objects.each(function(item) {
		//Get the checkbox
		var cb = item.down('input');
		cbArray.push(cb);
		//Show the compare checkbox and text
		cb.up(0).style.display = 'block';
		//Uncheck the checkbox
		cb.checked = false;
		cb.disabled = true;
		//Add click observer to the checkbox
		Event.observe(cb,'click',function(e) {
			updateCheckbox(e.target,false);
		});		
	});
	
	//check for product recommendation container
	var recCont = $('main').down('.rightContent').down('.prodRecsContainer');
	if (recCont != null) {
		//product recommendation container exists
		var i=0;
		var obj = null;
		while ((obj = recCont.down('input', i)) != null) {
			cbRecArray.push(obj);
			obj.up(0).style.display = 'block';
			obj.checked = false;
			obj.disabled = true;	
			Event.observe(obj, 'click', function(e) {
				updateCheckbox(e.target,true);
			});
			i = i + 1;
		}
	}	
		
	//Go through the coockie array and check the right checkboxes
	var values = getCookie(cookieName);
	if(values != null && values != ""){
		var products = values.split(cookieValueSeparator);
		var len = products.length;
		for(var i = 0; i < len;i++) {
			var cb = $('compare_'+products[i]);
			if (cb != null) {
				cb.checked = true;
				cb.disabled = false;
                // Also check the checkboxes used for display
                var cbDisplay = $('display_compare_'+products[i]);
				cbDisplay.checked = true;
				cbDisplay.disabled = false;
                cbDisplay.up(0).style.display = 'block';
			}
			var cbRec = $('prodrec_compare_'+products[i]);
			if (cbRec != null) {
				cbRec.checked = true;
				cbRec.disabled = false;
			}
			cbCount = cbCount + 1;
		}
	}
	//Store the 'Show comparison' buttons in an array
    try{
        buttonArray.push($('main').down('.rightContent').down('.paginationContainer',0).down('.buttons').down('a'));
        buttonArray.push($('main').down('.rightContent').down('.paginationContainer',1).down('.buttons').down('a'));
	}catch (e) {    //For search page
        buttonArray.push($('main').down('.rightContent').down('.paginationContainer',0).down('.paginationRight').down('a'));
        buttonArray.push($('main').down('.rightContent').down('.paginationContainer',1).down('.paginationRight').down('a'));
    }
	//If any cookies were found, try to enable the compare button
	updateComparison();
}

function updateCheckbox(cb,isProdRec) {
	var productNumber 
	if (cb.id === undefined) {
		productNumber = cb;
	} else {
		productNumber = cb.id.substring(cb.id.lastIndexOf('_')+1);
	}	
	if (cb.checked) {
		addProductToCompare(productNumber);
	} else {
		removeProductToCompare(productNumber);
	}
	var item = null;
	if (isProdRec) {
		item = $('compare_' + productNumber);
	}	else {
		item = $('prodrec_compare_' + productNumber);
	}
	if (item != null) {
		item.checked = cb.checked;
	}
	updateComparison();
}

function updateComparison() {
	try {
		buttonArray.each(function(item) {
			//Get the link in the pagination container.
			var b = (cbCount >= 2);
			//if the b (show) = false and the link is enabled, disable it.
			if (!b && !item.hasClassName('disabledButton')) {
				item.addClassName('disabledButton');
			} 
			//if the b (show) = true and the link is disbaled, enable it.
			else if (b && item.hasClassName('disabledButton')) {
				item.removeClassName('disabledButton');
			}
		});
		//allow maximum of 4 checkboxes
		if (cbCount >= 4 && !cbDisabled) {
			cbArray.each(function(item) {
				if (!item.checked) {
					item.disabled = true;
				}
				cbDisabled = true;
			});			
			cbRecArray.each(function(item) {
				if (!item.checked) {
					item.disabled = true;
				}
				cbDisabled = true;
			});			
		} else if (cbCount < 4 && cbDisabled) {
			cbArray.each(function(item) {
				item.disabled = false;
			});			
			cbRecArray.each(function(item) {
				item.disabled = false;
			});			
			cbDisabled = false;
		}		
	} catch (err) {}
}

/**
 * SWFObject v1.5: Flash Player detection and embed - http://blog.deconcept.com/swfobject/
 *
 * SWFObject is (c) 2007 Geoff Stearns and is released under the MIT License:
 * http://www.opensource.org/licenses/mit-license.php
 *
 */
/**
 * SWFObject v1.5: Flash Player detection and embed - http://blog.deconcept.com/swfobject/
 *
 * SWFObject is (c) 2007 Geoff Stearns and is released under the MIT License:
 * http://www.opensource.org/licenses/mit-license.php
 *
 */
if(typeof deconcept=="undefined"){var deconcept=new Object();}if(typeof deconcept.util=="undefined"){deconcept.util=new Object();}if(typeof deconcept.SWFObjectUtil=="undefined"){deconcept.SWFObjectUtil=new Object();}deconcept.SWFObject=function(_1,id,w,h,_5,c,_7,_8,_9,_a){if(!document.getElementById){return;}this.DETECT_KEY=_a?_a:"detectflash";this.skipDetect=deconcept.util.getRequestParameter(this.DETECT_KEY);this.params=new Object();this.variables=new Object();this.attributes=new Array();if(_1){this.setAttribute("swf",_1);}if(id){this.setAttribute("id",id);}if(w){this.setAttribute("width",w);}if(h){this.setAttribute("height",h);}if(_5){this.setAttribute("version",new deconcept.PlayerVersion(_5.toString().split(".")));}this.installedVer=deconcept.SWFObjectUtil.getPlayerVersion();if(!window.opera&&document.all&&this.installedVer.major>7){deconcept.SWFObject.doPrepUnload=true;}if(c){this.addParam("bgcolor",c);}var q=_7?_7:"high";this.addParam("quality",q);this.setAttribute("useExpressInstall",false);this.setAttribute("doExpressInstall",false);var _c=(_8)?_8:window.location;this.setAttribute("xiRedirectUrl",_c);this.setAttribute("redirectUrl","");if(_9){this.setAttribute("redirectUrl",_9);}};deconcept.SWFObject.prototype={useExpressInstall:function(_d){this.xiSWFPath=!_d?"expressinstall.swf":_d;this.setAttribute("useExpressInstall",true);},setAttribute:function(_e,_f){this.attributes[_e]=_f;},getAttribute:function(_10){return this.attributes[_10];},addParam:function(_11,_12){this.params[_11]=_12;},getParams:function(){return this.params;},addVariable:function(_13,_14){this.variables[_13]=_14;},getVariable:function(_15){return this.variables[_15];},getVariables:function(){return this.variables;},getVariablePairs:function(){var _16=new Array();var key;var _18=this.getVariables();for(key in _18){_16[_16.length]=key+"="+_18[key];}return _16;},getSWFHTML:function(){var _19="";if(navigator.plugins&&navigator.mimeTypes&&navigator.mimeTypes.length){if(this.getAttribute("doExpressInstall")){this.addVariable("MMplayerType","PlugIn");this.setAttribute("swf",this.xiSWFPath);}_19="<embed type=\"application/x-shockwave-flash\" src=\""+this.getAttribute("swf")+"\" width=\""+this.getAttribute("width")+"\" height=\""+this.getAttribute("height")+"\" style=\""+this.getAttribute("style")+"\"";_19+=" id=\""+this.getAttribute("id")+"\" name=\""+this.getAttribute("id")+"\" ";var _1a=this.getParams();for(var key in _1a){_19+=[key]+"=\""+_1a[key]+"\" ";}var _1c=this.getVariablePairs().join("&");if(_1c.length>0){_19+="flashvars=\""+_1c+"\"";}_19+="/>";}else{if(this.getAttribute("doExpressInstall")){this.addVariable("MMplayerType","ActiveX");this.setAttribute("swf",this.xiSWFPath);}_19="<object id=\""+this.getAttribute("id")+"\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" width=\""+this.getAttribute("width")+"\" height=\""+this.getAttribute("height")+"\" style=\""+this.getAttribute("style")+"\">";_19+="<param name=\"movie\" value=\""+this.getAttribute("swf")+"\" />";var _1d=this.getParams();for(var key in _1d){_19+="<param name=\""+key+"\" value=\""+_1d[key]+"\" />";}var _1f=this.getVariablePairs().join("&");if(_1f.length>0){_19+="<param name=\"flashvars\" value=\""+_1f+"\" />";}_19+="</object>";}return _19;},write:function(_20){if(this.getAttribute("useExpressInstall")){var _21=new deconcept.PlayerVersion([6,0,65]);if(this.installedVer.versionIsValid(_21)&&!this.installedVer.versionIsValid(this.getAttribute("version"))){this.setAttribute("doExpressInstall",true);this.addVariable("MMredirectURL",escape(this.getAttribute("xiRedirectUrl")));document.title=document.title.slice(0,47)+" - Flash Player Installation";this.addVariable("MMdoctitle",document.title);}}if(this.skipDetect||this.getAttribute("doExpressInstall")||this.installedVer.versionIsValid(this.getAttribute("version"))){var n=(typeof _20=="string")?document.getElementById(_20):_20;n.innerHTML=this.getSWFHTML();return true;}else{if(this.getAttribute("redirectUrl")!=""){document.location.replace(this.getAttribute("redirectUrl"));}}return false;}};deconcept.SWFObjectUtil.getPlayerVersion=function(){var _23=new deconcept.PlayerVersion([0,0,0]);if(navigator.plugins&&navigator.mimeTypes.length){var x=navigator.plugins["Shockwave Flash"];if(x&&x.description){_23=new deconcept.PlayerVersion(x.description.replace(/([a-zA-Z]|\s)+/,"").replace(/(\s+r|\s+b[0-9]+)/,".").split("."));}}else{if(navigator.userAgent&&navigator.userAgent.indexOf("Windows CE")>=0){var axo=1;var _26=3;while(axo){try{_26++;axo=new ActiveXObject("ShockwaveFlash.ShockwaveFlash."+_26);_23=new deconcept.PlayerVersion([_26,0,0]);}catch(e){axo=null;}}}else{try{var axo=new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");}catch(e){try{var axo=new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");_23=new deconcept.PlayerVersion([6,0,21]);axo.AllowScriptAccess="always";}catch(e){if(_23.major==6){return _23;}}try{axo=new ActiveXObject("ShockwaveFlash.ShockwaveFlash");}catch(e){}}if(axo!=null){_23=new deconcept.PlayerVersion(axo.GetVariable("$version").split(" ")[1].split(","));}}}return _23;};deconcept.PlayerVersion=function(_29){this.major=_29[0]!=null?parseInt(_29[0]):0;this.minor=_29[1]!=null?parseInt(_29[1]):0;this.rev=_29[2]!=null?parseInt(_29[2]):0;};deconcept.PlayerVersion.prototype.versionIsValid=function(fv){if(this.major<fv.major){return false;}if(this.major>fv.major){return true;}if(this.minor<fv.minor){return false;}if(this.minor>fv.minor){return true;}if(this.rev<fv.rev){return false;}return true;};deconcept.util={getRequestParameter:function(_2b){var q=document.location.search||document.location.hash;if(_2b==null){return q;}if(q){var _2d=q.substring(1).split("&");for(var i=0;i<_2d.length;i++){if(_2d[i].substring(0,_2d[i].indexOf("="))==_2b){return _2d[i].substring((_2d[i].indexOf("=")+1));}}}return "";}};deconcept.SWFObjectUtil.cleanupSWFs=function(){var _2f=document.getElementsByTagName("OBJECT");for(var i=_2f.length-1;i>=0;i--){_2f[i].style.display="none";for(var x in _2f[i]){if(typeof _2f[i][x]=="function"){_2f[i][x]=function(){};}}}};if(deconcept.SWFObject.doPrepUnload){if(!deconcept.unloadSet){deconcept.SWFObjectUtil.prepUnload=function(){__flash_unloadHandler=function(){};__flash_savedUnloadHandler=function(){};window.attachEvent("onunload",deconcept.SWFObjectUtil.cleanupSWFs);};window.attachEvent("onbeforeunload",deconcept.SWFObjectUtil.prepUnload);deconcept.unloadSet=true;}}if(!document.getElementById&&document.all){document.getElementById=function(id){return document.all[id];};}var getQueryParamValue=deconcept.util.getRequestParameter;var FlashObject=deconcept.SWFObject;var SWFObject=deconcept.SWFObject;/**
 *
 * Extra functions designed to work together with SWFObject v1.4.4 and Webtrends
 *
 */
  
 //This function checks for extra flash variables in url.
 function writeFlash(swfObject,noFlashText) {
	if ($('flashcontent').down('.flashHtml') !== undefined ){
		com.ikea.irw.flash.Constants.htmlEnabled = true;
	}
	try {
		FlashVarArray=getFlashVars(swfObject.getAttribute('id'));
		for (var i=0;i<FlashVarArray.length;i++) {
			thisFlashVar=FlashVarArray[i].split("=");
			swfObject.addVariable(thisFlashVar[0], thisFlashVar[1]);
		}
	} catch (e) {
	}
	try {
        var installedVersion = deconcept.SWFObjectUtil.getPlayerVersion();  // Get installed version
        var swfObjectVersion = swfObject.getAttribute('version');   // Get version from flash obj
 
    // ----------------------------------------------------
    // 080624 PAMN - Temporary workaround
    // ----------------------------------------------------
    // See: http://www.adobe.com/support/documentation/en/flashplayer/9/releasenotes.html
    // MPA2 roomsettings requires fullscreen with wmode which 
    // requires a Flashplayer of version 9.0.115 and above when 
    // using wmode. We need to force a check on the revision as well as the
    // major version.

    if( swfObjectVersion.major == 1000 )
    {
        if(installedVersion.major < 9 || (installedVersion.major == 9 && installedVersion.minor == 0 && installedVersion.rev < 115))//Greater than version 9
        {
            //Keep failing
        }
        else
        {
            swfObjectVersion.major = installedVersion.major;
        }
    }
    // End workaround

        var flashBar = $('flashBar');   // The div containing the flash error msg
        //alert('installed= ' + installedVersion.major + ' obj= ' + swfObjectVersion.major);
        if(installedVersion.major >= swfObjectVersion.major){
            swfObject.write("flashcontent");
        }else{
			
			//Condition has been added to show the noflash text for room set in PIP
			if(noFlashText == "noFlashText"){
				var noSwfTxt = $('noFlashText').innerHTML;
				$('flashcontent').innerHTML = noSwfTxt;
			}else{
				flashBar.show();    // Show the flashbar
				$('flashcontent').hide();   // Hide (collapse) the flash area
			}
        }
        //then rename the flash container to be able to take care of the next one (if more than one exists on the page)  (IE bug)
        var flashElement = $('flashcontent');
        flashElement.id='flashcontent_used';
    
                //Check if this is the first element in the rightContent div
                //or the element after the <a name="mainContent"></a> element in the main block
        var prev = flashElement.previous();
        var flashParent = null;
        if (prev == null) {
            //element is the first
            flashParent = flashElement.up(0);
            /** 
            * Start of PR IKEA00694494
            **/
            if(null != flashParent.id && flashParent.id == 'myFlashId') {
                flashParent = flashParent.up(0);
            }
            /** 
            * End of PR IKEA00694494
            **/
        } else {
            //check if element prevoius is the <a name="mainContent"> element
            if (prev.tagName.toLowerCase() == 'a' && prev.readAttribute('name') == 'mainContent') {
                flashParent = prev.up(0);
            }
        }
        if (flashParent != null && (flashParent.hasClassName('rightContent') || flashParent.id == 'main')) {
            flashElement.addClassName('firstFlashContent');
        }
                    
        
    } catch (e) {
        // Fallback to old solution since new one does not work...due to missing code/files...
        try {
            swfObject.write("flashcontent");
            //rename the container  (iebug)
            document.getElementById('flashcontent').id='flashcontent_used';
        } catch (err) {
        }
    }
 }
 
 //Function that returns an array with Flash variables
 // The flash_id is used to identify the flash_vars. We need to add a '_' to the id since that is used in the querystring.
 // The id + '_' is then removed before pushed to the flashVar-array.
function getFlashVars(flash_id ) {
    flash_id = flash_id + '_';
    currentFlashVar = 'flash_' + flash_id ;

    thisArray=new Array();
    try {
        href=document.location.href;
        startPath='none';
        urlArray=new Array();
        urlArray=href.split('?');
        if (urlArray.length==2) {
            querystringArray=new Array();
            querystringArray=urlArray[1].split('&');
            for (var i=0;i<querystringArray.length;i++) {
                thisQueryVar=querystringArray[i].split("=");
                
                // If the id contains a space ' ' we have to replace '%20' from the url to ' '
                cleanedQuerystring = querystringArray[i].replace("%20"," ");
                //document.write(cleanedQuerystring);
                if (cleanedQuerystring.substring(0,(6 + flash_id.length))==currentFlashVar) {
                    thisArray.push(cleanedQuerystring.substring(0,6) + cleanedQuerystring.substring((6 + flash_id.length),cleanedQuerystring.length));
                }
            }
        }
    } catch (e) {
    }
    return thisArray;
}

function swf_isDefined(variable) {
    return eval('(typeof('+variable+') != "undefined");');
}

//function for for stat generation with exception handling
function IRWdcsMultiTrack() {
    try {
        var trackRia = [];
        
        trackRia.push("IRWStats.version");
        trackRia.push("1.0");
    
        for (var IRWdcsCount = 0; IRWdcsCount < arguments.length; IRWdcsCount++) {
            if (arguments[IRWdcsCount].indexOf('DCS.dcsuri') == 0) {
                trackRia.push("IRWStats.riaRequestName");
                trackRia.push(arguments[IRWdcsCount+1].replace(/\'/g, ""));
                IRWdcsCount++;
            } else if (arguments[IRWdcsCount].indexOf('WT.ti') == 0) {
                trackRia.push("IRWStats.pageName");
                trackRia.push(arguments[IRWdcsCount+1].replace(/\'/g, ""));
                IRWdcsCount++;
            } else if (arguments[IRWdcsCount].indexOf('WT.cg_n') == 0) {
                trackRia.push("IRWStats.category");
                trackRia.push(arguments[IRWdcsCount+1].replace(/\'/g, ""));
                IRWdcsCount++;
            } else if (arguments[IRWdcsCount].indexOf('WT.cg_s') == 0) {
                trackRia.push("IRWStats.subCategory");
                trackRia.push(arguments[IRWdcsCount+1].replace(/\'/g, ""));
                IRWdcsCount++;
            }
        }
        
        var riaArgs = "";
        for (var args = 0; args < trackRia.length; args++) {
            riaArgs += "'"+trackRia[args]+"',";
        }
        riaArgs = riaArgs.substr(0, (riaArgs.length-1));
        eval("irwStatTrackRia("+riaArgs+");");
    } catch (e) {}    
}

//Function to handle flash calls from older versions
function IRWflashTrack() {
    try {
        var trackRia = [];
        
        trackRia.push("IRWStats.version");
        trackRia.push("1.0");
    
        for (var IRWdcsCount = 0; IRWdcsCount < arguments.length; IRWdcsCount++) {
            if (arguments[IRWdcsCount].indexOf('DCS.dcsuri') == 0) {
                var dcsData = arguments[IRWdcsCount+1].replace(/\'/g, "");

                var dcsArray = dcsData.split("/");

                trackRia.push("IRWStats.riaAsset");
                trackRia.push(dcsArray[0]);

                trackRia.push("IRWStats.riaAssetType");
                trackRia.push("other");

                trackRia.push("IRWStats.riaAction");
                trackRia.push(dcsArray[2]);

                trackRia.push("IRWStats.riaActionType");
                trackRia.push("unknown");

                IRWdcsCount++;

                break;
            }
        }
        
        var riaArgs = "";
        for (var args = 0; args < trackRia.length; args++) {
            riaArgs += "'"+trackRia[args]+"',";
        }
        riaArgs = riaArgs.substr(0, (riaArgs.length-1));
        eval("irwStatTrackRia("+riaArgs+");");
    } catch (e) {}    
}/*
Author:     JBNN
Date:       08-02-15
Use:        These functions and variables are used for the new sliding dropdown menu for All Departments in top menu.
                They are dependant on prototype.js and scriptacoulus.js which should be initialized before this file.
                
Update:     09-01-21
                - Code improvements
                - New function(s) added for simplified left hand navigation
*/

var menuStatus = 'up';  // Parameter to determine whether menu is up or down and is changed when it is completely up/down
var menuPos = 'goUp';           // Parameter to force menu to stay in position on mouseout/mouseover
var toggleId;
var selectedPath = new Array(); 
var activeLinkClass = 'active'; 

/**
*Checks the current link and if it is a guides-link
*/
function checkIfGuidesLink(){
    checkCheckedLink(self.document.location);
}

/*
* If the link is a navigations link from leftNavLinks ad
* it will be selected and the current selection will be
* deselected from the product navigation
*/
function checkCheckedLink(link){
    var hash = link.hash;//self.document.location.hash;
    if(hash == null || '' == hash){
        return;
    }
    var ids = hash.split('-');
    if(ids.length < 2){
        return;
    }
    //Select and expand guides link
    var linkId = 'lnk1.leftnav-'+ids[1]+'-'+ids[2];
    setActiveLink(linkId,true);
    var item = $('lnkSubItemsNavEspot1'+ids[1]);
    toggleBtn(item,$('navToggleNavEspot1'+ids[1]));
    item.show();
    /*Checks if there is a current selected link in the product presentation
    * and de activates it*/
    var len = selectedPath.length;
    for(var i = 0; i < len;i++){
        var obj = selectedPath[i];
        if(!Object.isUndefined(obj.item) && obj.item != null){
            hideMenu($(obj.item),$(obj.btn));
        }else if(!Object.isUndefined(obj.active) && obj.active != null){
            setActiveLink(obj.active,false);        
        }
    }
}

/**
* 
* Activates or de-activates a link in the left navigation
* @param linkId The id of the link that should be (de|)activated 
* @param activate Set to true to activate link, false to deactivate
*/
function setActiveLink(linkId,activate){
    var selectLink = $(linkId);
    var spans = selectLink.getElementsBySelector("span");
    if(spans.length > 0){
        var span = spans[0];
        if(activate){
            span.addClassName(activeLinkClass);
        }else{
            span.removeClassName(activeLinkClass);
        }
            
    }    
}

/**
*
*Adds a container to the selected path
*/
function addContainerToSelectedPath(item,btn){
    selectedPath.push({"item":item,"btn":btn});
}

/**
*KHTJ
* Adds an active link to the selected path
*/
function addLinkToSelectedPath(linkId){
    selectedPath.push({"active":linkId});
}

/**
 * Function(s) for new simplified left hand navigation. Used on category/department pages
 */

function toggleMenuItem(item,btnToggle){
    new Effect.toggle(item, 'slide', {
        delay: 0.3,
        duration:0.6,
        afterFinish: toggleBtn(item, btnToggle)
    });
}

function toggleBtn(menu,btn) {
    if(menu.visible()){
        btn.update("+");
        btn.removeClassName('navToggleOpen');
        btn.next(0).removeClassName('open');
    }else{
        btn.update("&#x2212;");
        btn.addClassName('navToggleOpen');
        btn.next(0).addClassName('open');
    }
}

function hideMenu(item,btn){
    btn.update("+");
    btn.removeClassName('navToggleOpen');
    btn.next(0).removeClassName('open');
    item.hide();
}

/**
* Functions for All departments dropdown
*/

function callbackDownEnd(obj){
    menuStatus = 'down';
}

function callbackUpEnd(obj){
    menuStatus = 'up';
}

function menuSlideDown(){
    if (!$('moreRoomsMenu') || !$('moreRoomsMenu').getStyle('display')) {
       return;
    }
    if(($('moreRoomsMenu').getStyle('display') == 'none') && (menuStatus == 'up')){
        // change status to prevent new call until the slide is done
        //trace('sliding down');
        new Effect.SlideDown('moreRoomsMenu', {
            queue: {position: 'end', scope: 'slideDown', limit: 1}, 
            duration: 0.4,
            afterFinish: callbackDownEnd
        });
    }
}

function menuSlideUp(){
    if (!$('moreRoomsMenu') || !$('moreRoomsMenu').getStyle('display')) {
       return;
    }
    if(($('moreRoomsMenu').getStyle('display') == 'block') && (menuStatus == 'down')){
        // change status to prevent new call until the slide is done
        //trace('sliding up');
        new Effect.SlideUp('moreRoomsMenu', {
            queue: {position: 'end', scope: 'slideUp', limit: 1}, 
            duration: 0.4,
            afterFinish: callbackUpEnd
        });
    }
}

function menuSlideStart(){
    if(menuPos == 'goUp'){
        // If still 0 then no mouseover on menu, so close it
        menuSlideUp();
    }else{
        menuSlideDown();
    }
    return menuPos;
}

function menuToggle(direction){
    clearTimeout(toggleId);
    if(direction == 'down'){
        menuPos = 'goDown';
    }else{
        menuPos = 'goUp';
    }
    toggleId = setTimeout('menuSlideStart()',250);
}

/* Add observers to necessary tags (for drop down menu) */
Event.observe(window, 'load', function() {
    if ($('moreRoomsMenu')) {
        // Add event listener to the div "moreRoomsMenu". This is used to check if user goes from menu button and then over the menu...or just leaves the menu button.
        /** 
        * Start of PR IKEA00697568
        **/
        try{
            $('moreRoomsMenu').observe('mouseover', function(event){
                element = Event.element(event);
                myAncestors = element.ancestors();
                // Traverses the parents of current tag
                myAncestors.each(function(tag){
                    if(tag.id == 'moreRoomsMenu'){
                        menuPos = 'stayDown';
                    }
                });
            });
        }catch(err){
            $('moreRoomsMenu').onmouseover = function(event){
                element = Event.element(event);
                myAncestors = element.ancestors();
                // Traverses the parents of current tag
                myAncestors.each(function(tag){
                    if(tag.id == 'moreRoomsMenu'){
                        menuPos = 'stayDown';
                    }
                });
            };             
        }
        // Add event listener to the div "moreRoomsMenu". This is used to check if user goes from menu button and then over the menu...or just leaves the menu button.
        try{
            $('moreRoomsMenu').observe('mouseout', function(e){
                var element = Event.element(e);
                var inside = false;
                // Get the element we mouse out to
                var goToElement = (e.relatedTarget) ? e.relatedTarget : e.toElement;
                myAncestors = goToElement.ancestors();
                // Traverses the parents of the related target (the element that the mouse goes to) and try to find the "moreRoomsMenu"
                myAncestors.each(function(tag){
                    if(tag.id == 'moreRoomsMenu'){
                        inside = true;
                    }
                });
                // If inside is false, then we have left the menu...so slide it up
                if(inside == false){
                    menuSlideUp();
                }
            });
        }catch(err){
            $('moreRoomsMenu').onmouseout = function(e){
                var element = Event.element(e);
                var inside = false;
                // Get the element we mouse out to
                var goToElement = (e.relatedTarget) ? e.relatedTarget : e.toElement;
                myAncestors = goToElement.ancestors();
                // Traverses the parents of the related target (the element that the mouse goes to) and try to find the "moreRoomsMenu"
                myAncestors.each(function(tag){
                    if(tag.id == 'moreRoomsMenu'){
                        inside = true;
                    }
                });
                // If inside is false, then we have left the menu...so slide it up
                if(inside == false){
                    menuSlideUp();
                }
            };
        }
        /** 
        * End of PR IKEA00697568
        **/
    }

    if ($('moreRooms')) {
        // Add events to all menu buttons preceeding the moreRooms button, to slide the menu up on mouseover
        /** 
        * Start of PR IKEA00697568
        **/
        var myBtns = null;
        try{
            myBtns = $('moreRooms').previousSiblings();
        }catch(err){                                       
            var childElementsGrp = $('moreRooms').parentElement.childNodes;
            for(var i = 0 ; i < childElementsGrp.length ; i++){
                if($('moreRooms').id != childElementsGrp[i].id){                               
                    if(myBtns != null ){
                        myBtns += childElementsGrp[i];
                    }else{
                        myBtns = childElementsGrp[i];
                    }                                              
                }else{
                    break;
                }              
            }
        }
        try{
            myBtns.each(function(tag){
                tag.observe('mouseover', function(event){
                    menuSlideUp();
                });
            });
        }catch(err){
            for(var j = 0 ; j < myBtns.length ; j++){
                if(myBtns[i] != null){
                    myBtns[i].onmouseover = function(event){
                        menuSlideUp();
                    };
                }
            }
        }
        
            /** 
            * End of PR IKEA00697568
            **/
    }

    //this should be used as a temporary solution until the left navigation as been implemented in comerce 
    setupSearchMenu();
});

function setupSearchMenu() {
    var searchgroups = $$('.search-groups');
    if (searchgroups.length > 0) {
        try {
            $('minPrice').writeAttribute('style','');
            $('maxPrice').writeAttribute('style','');            
        } catch (err) { }
        var gindex = 1;
        searchgroups[gindex].select('div.header').each(function(obj) {
            if (gindex == 1) gindex = 2;
            var s = obj.readAttribute('onclick');
            var i = s.substring(s.indexOf('(')+2,s.indexOf(')')-1);
            var div = new Element('div', {'class':'contentWrapper'});
            var contentDiv = $('content-' + i);
            contentDiv.childElements().each(function(child) {
                div.insert(child);
            });
            contentDiv.insert(div);
            if (contentDiv.hasClassName('not-displayed')) {
                contentDiv.className = '';
                contentDiv.hide();
            } else {
                obj.addClassName('headerActive');
            }
            obj.writeAttribute('onclick', '');
            if (div.childElements().length == 0) {
                obj.addClassName('headerInactive');
            } else {
                Event.observe(obj, 'click', function(e) {
                    this.toggleClassName('headerActive');
                    toggleMenuItemSearch(this.next(0));
                });
                Event.observe(obj, 'mouseover', function(e) {
                    if (!this.hasClassName('headerHover')) this.addClassName('headerHover');
                });
                Event.observe(obj, 'mouseout', function(e) {
                    if (this.hasClassName('headerHover')) this.removeClassName('headerHover');
                });
            }
        });
        /*  IKEA00648492  removed
        var rel = searchgroups[gindex].down('h2');
        rel.addClassName('headerActive');
        rel.writeAttribute('onclick', '');
        Event.observe(rel, 'click', function(e) {
            this.toggleClassName('headerActive');
            toggleMenuItemSearch(this.next(0));
        });
        var div = new Element('div', {'class':'contentWrapper'});
        var contentDiv = $('content-5');
        contentDiv.childElements().each(function(child) {
            div.insert(child);
        });
        contentDiv.insert(div);
        
        */
    }
}
    
function toggleMenuItemSearch(item) {
    new Effect.toggle(item, 'slide', {
        delay: 0.3,
        duration:0.6
    });
}
function openPrfPopup(id) {
	var offsetLeft = -15;
	var offsetTop = 17;

	var x = document.getElementById(
		id);
	var v = document.getElementById(
		"prfinfo");
	
	if(!v || !x){
		return;
	}
	v.style.display = "block";
	
	var xpos = getPosX(x);
	var ypos = getPosY(x);
	
	v.style.position = "absolute";
	v.style.top = (ypos - v.offsetHeight + offsetTop) + "px";
	v.style.left = (xpos + offsetLeft) + "px";
}

function closePrfPopup() {
	var v = document.getElementById(
		"prfinfo");
	v.style.display = "none";
}

function getPosX(obj) {
	var curleft = 0;
	if(obj.offsetParent) {
		while(1) {
			curleft += obj.offsetLeft;
			if(!obj.offsetParent)
				break;
			obj = obj.offsetParent;
		}
	} else if(obj.x) {
		curleft += obj.x;
	}
	return curleft;
}

function getPosY(obj) {
	var curtop = 0;
	if(obj.offsetParent) {
		while(1) {
			curtop += obj.offsetTop;
			if(!obj.offsetParent)
				break;
			obj = obj.offsetParent;
		}
	} else if(obj.y) {
		curtop += obj.y;
	}
	return curtop;
}
/**
* Slideshow
*
* This library is used to create a lightbox Slideshow in a web application. This library
* requires the Prototype 1.6 library and Script.aculo.us core, effects, and dragdrop
* libraries.
*    
*    Event.observe(window, 'load', function () {
*        slideshow = new Slideshow();
*    });
*    JSLint Predefined:  PresentationLayer
*/
var californiaTemplate;
var Slideshow = Class.create({
    open : function (prodId) {
        this._centerWindow(this.container);
        this._fade('open', this.container);
        if(typeof(prodId) != 'undefined'){  // If clicked on a product in listing
           	this.showProduct(prodId);
        }else{  // Clicked on slideshow button
            this.showProduct(this.firstProduct);
        }
        
        // Send data to web analytics
        irwStatPageFunctionality("function>litebox", "slideshow");
		//Send data to web analytics if the product is a topten product
		if ($('topTenProductId') !== null) {
			irwStatTopTenProductViewed();
		}
    },
    
	arrayUpdate : function (prodId) {
		var index = PresentationLayer.initialProdId.split('_')[2];   
        this.products.splice((index - 1), 1, prodId);
		this.firstProduct = this.products[0];
	},
	
	close : function () {
		this._fade('close', this.container);
		if($("tabConatiner")!== null){
			if(Browser.Version() == 6){
				enable('rightNavContainer');
			}
		}
	},
    
    _fade : function fadeBg(userAction,whichDiv){
        if(userAction=='close'){
            new Effect.Opacity('slideshowBg',
                {duration:.5,
                from:0.5,
                to:0,
                afterFinish:this._makeInvisible,
                afterUpdate:this._hideLayer(whichDiv)});
		}else{
			new Effect.Opacity('slideshowBg',
				{duration:.5,
				from:0,
				to:0.5,
				beforeUpdate:this._makeVisible,
				afterFinish:this._showLayer(whichDiv)});
		}
	},
	
	_makeVisible : function makeVisible(){
		$("slideshowBg").style.visibility="visible";
	},

    _makeInvisible : function makeInvisible(){
        $("slideshowBg").style.visibility="hidden";
    },

    _showLayer : function showLayer(userAction){
        new Effect.Appear($(userAction),
                   {duration:.7,
                    from:0,
                    to:1});
    },
    
    _hideLayer : function hideLayer(userAction){
        new Effect.Fade($(userAction),
                   {duration:.7,
                    from:1,
                    to:0});
    },

    _loader : function loader() {
        var loader = this.loaderTemplate.evaluate({loadingText:'Loading...'});
        return loader;
    },
    
    _centerWindow : function centerWindow(element) {
        if($(element) != null) {
            if(typeof window.innerHeight != 'undefined') {
                $(element).style.top = Math.round(document.viewport.getScrollOffsets().top + ((document.viewport.getHeight() - $(element).getHeight()))/2)+'px';
                $(element).style.left = Math.round(document.viewport.getScrollOffsets().left + ((document.viewport.getWidth() - $(element).getWidth()))/2)+'px';
            } else {  // IE
                $(element).style.top = Math.round(document.viewport.getScrollOffsets().top + ((document.viewport.getHeight() - $(element).getHeight()))/2)+'px';
                $(element).style.left = Math.round(document.viewport.getScrollOffsets().left + ((document.viewport.getWidth() - $(element).getWidth()))/2)+'px';
            }
        }
    },

    _handleError : function handleError(request,errObj) {
        // alert("Error: "+errObj.number
            // +"\nType: "+errObj.name
            // +"\nDescription: "+errObj.description
            // +"\nSource Object Id: "+errObj.srcElement.instanceId
        // );
    },

    _getProductInfo : function getProductInfo(prodId,show){
        var locale = $('lnkIKEALogoHeader').readAttribute('href');
        var url = locale + "catalog/products/" + prodId;
		url = url+"?type="+IowsCommon.type+"&dataset="+IowsCommon.dataset;
		var ajaxParams = {"url" : url, "contentType" : 'application/xml', "asyncFlag" : true, "singletonFlag" : false};
		var inputParams = {"handlerId" : "slideshow", "showFlag" : show};
		new AjaxRequestObject(ajaxParams, inputParams);
	},

    _addProduct : function addProduct(doc,show) {
        var product = doc.getElementsByTagName('product')[0];
        var numberOfItems = IowsCommon.getNodeVal(product,'numberOfItems');
        // If error returned
        if(typeof(product) == 'undefined' || product == null){
            var error = doc.getElementsByTagName('error')[0];
            var partNo = error.getAttribute('referencedId');
            var code = error.getAttribute('code');
            var msg = IowsCommon.getNodeVal(error,'message');
            
            var prodObj = new Object();
            prodObj.partNo = partNo;
            prodObj.prodName = 'Not available!';
            prodObj.keyMoreInfo = 'Sorry, product not available at the moment. ' + msg + '.';
            prodObj.imgL = 'http://www.ikea.com/ms/sv_SE/img/error/error279x279.jpg';
        }else{
            var item = product.getElementsByTagName('item')[0];
            var partNo = IowsCommon.getNodeVal(item,'partNumber');
            var prodName = IowsCommon.getNodeVal(item,'name'); 
            var pipLink = IowsCommon.getNodeVal(item,'URL');
            var isNew = IowsCommon.getNodeVal(item,'new');
            var buyable = IowsCommon.getNodeVal(item,'buyable');
            var prodDesc = IowsCommon.getNodeVal(item,'facts');
            var measure = IowsCommon.getNodeVal(item,'measure');
            var bti = IowsCommon.getNodeVal(item,'bti');
            var images = item.getElementsByTagName('images')[0];
            var large = images.getElementsByTagName('large')[0];
            var imgL = IowsCommon.getNodeVal(large,'image');
            var small = images.getElementsByTagName('small')[0];
            var imgS = IowsCommon.getNodeVal(small,'image');
            // get the descriptive attributes
            var descriptiveAttributes = getDescriptiveAttributes(item);
            // get the warning attribute from the descriptive attributes array
            var warningDescAttr = getDescAttributeByType(descAttrWarning,descriptiveAttributes);
            var isCalTitle20 = false;
            if(doc.getElementsByTagName("californiaTitle20").length>0){
				isCalTitle20 = true;
			}     
	      //To retrieve NLP attributes
			var isUnitPrimary =doc.getElementsByTagName("prices")[0].getAttribute("unitPricePrimary"); 
            var unitMeasureEnglish = doc.getElementsByTagName("prices")[0].getAttribute("unitMeasureEnglish");
			var previousPrice =null;
			if(	isUnitPrimary!=null && isUnitPrimary=='true'){
				previousPrice=IowsCommon.getNodeVal(item,'pricePreviousPerUnit');						
			}else {
				previousPrice=IowsCommon.getNodeVal(item,'pricePrevious');		
			}	
			var isNlp = doc.getElementsByTagName("priceNormal")[0].getAttribute("nlp");
			var unit = doc.getElementsByTagName("priceNormal")[0].getAttribute("perUnit");
            var comparisonPrice = doc.getElementsByTagName("priceNormal")[0].getAttribute("comparisonPrice");
            var comparisonUnit = doc.getElementsByTagName("priceNormal")[0].getAttribute("unit");
			//To retrieve TRO attributes
			var isTro = doc.getElementsByTagName("priceNormal")[0].getAttribute("tro");
			var troStartDate = formatTRODate(doc.getElementsByTagName("priceNormal")[0].getAttribute("startDate"));
			var troEndDate = formatTRODate(doc.getElementsByTagName("priceNormal")[0].getAttribute("endDate"));
            // Object for the template
            var prodObj = new Object();
            prodObj.storeId = this.storeId; 
            prodObj.langId = this.langId;
			if(this.relationArr.length > 0) {
				for(i=0;i<this.products.length;i++) {
					if(partNo==this.products[i]) {
						prodObj.relation = this.relationArr[i];
					}
				}
			}
			
            prodObj.imgL = imgL;
            prodObj.imgS = imgS;
            prodObj.prodName = prodName;
            prodObj.partNo = partNo;
            prodObj.pipLink = pipLink;
            prodObj.prodDesc = prodDesc;
            prodObj.keyBuyOnline = this.keys.get('fw11_buy_online');
            prodObj.keySaveToList = this.keys.get('fw11_save_to_shopping_list');
            prodObj.keyMoreInfo = this.keys.get('fw11_slideShow_more_info');
	      //Assign NLP and TRO to object
		prodObj.previousPrice = previousPrice;
		prodObj.troStartDate = troStartDate;
		prodObj.troEndDate = troEndDate;
		prodObj.unit = unit;
            
            var prices = IowsCommon.getPrices(item);
            prodObj.normalPrice = prices.price;
            prodObj.dualPrice = prices.priceDual;
            if(prices.pricePkg != null){
                prodObj.pkgPrice = this.keys.get('fw11_price_per_package') + ' ' + prices.pricePkg;
            }
			//Implementing presentation rules
			if(!prices.family.blank()) {
				isNlp = false;
				isTro = false;
				bti = false;
			} else if (isTro) {
				isNlp = false;
				bti = false;
			} else if(bti == "true" || isNew == "true") {
				isNlp = false;
			}
			this.perUnitTemplate = new Template("/#{unit}");
			if(prodObj.unit !== null && isUnitPrimary !== 'true')
			{
				prodObj.perUnit = this.perUnitTemplate.evaluate(prodObj);
			}			
            // Family prices
            if(!prices.family.blank()){
                prodObj.keyFamily = this.keys.get('r4_ikea_family');
				prodObj.keyRegular = this.keys.get('r4_regular_price');
                prodObj.familyPrice = prices.family;
                if(prices.pricePkg != null){
                    prodObj.familyPkgPrice = this.keys.get('fw11_price_per_package') + ' ' + prices.familyPkg;
                }
                if(prices.comparisonFamilyPrice != null){
                    prodObj.comparisonFamilyPrice = prices.comparisonFamilyPrice;
                    prodObj.comparisonUnit = comparisonUnit;
                    if(unitMeasureEnglish === this.keys.get("unitMeasureEn")) {
                        this.comparisonFamPriceTemplate = new Template("<div id=\"comparisonFamContainer\"><span>"+this.keys.get("txtUnitPrice")+"</span><span id=\"comparisonFamPrice\"> #{comparisonFamilyPrice}</span><div>");
                    }else {
                        this.comparisonFamPriceTemplate = new Template("<div id=\"comparisonFamContainer\"><span>"+this.keys.get("txtPrice")+"#{comparisonUnit} </span><span id=\"comparisonFamPrice\"> #{comparisonFamilyPrice}</span><div>");
                    }
                    
                    prodObj.displayComparisonFamilyPrice = this.comparisonFamPriceTemplate.evaluate(prodObj);
                }
                prodObj.displayFamilyPrice = this.familyPriceTemplate.evaluate(prodObj);
                prodObj.displayregularText = this.regularTextTemplate.evaluate(prodObj);
             }
            // Weee prices
            if(prices.prfCharge != null && prices.noPrfCharge != null){
                prodObj.prfCharge = prices.prfCharge
                prodObj.noPrfCharge = prices.noPrfCharge;
                prodObj.weee_prf = this.keys.get('weee_prf');
                prodObj.weee_less_prf = this.keys.get('weee_less_prf');
                if(bti == "true"){
                    prodObj.btiClass = "bti";
                }
                prodObj.displayPrfPrice = this.weeePrfTemplate.evaluate(prodObj);
            }
            if(warningDescAttr != null){
                prodObj.warningInfo = this.warningTemplate.evaluate(warningDescAttr);
            }
            if(isCalTitle20){
                prodObj.calTitle20 = this.californiaTemplate.evaluate(isCalTitle20);;
            }
            // New image
            if(isNew == "true"){
                prodObj.newImgAlt = this.keys.get('r4_all_products_new');
                prodObj.newImgSrc = "/ms/" + irwstats_locale + "/img/icons/new_large.gif";
                prodObj.newImg = this.newImgTemplate.evaluate(prodObj);
            }
			//Generating NLP and TRO related html templates
			this.perUnitTemplate = new Template("/#{unit}");
			if(prodObj.unit !== null && isUnitPrimary !== 'true')
			{
				prodObj.perUnit = this.perUnitTemplate.evaluate(prodObj);
			}
			this.priceTemplate = new Template("<div class=\"prodPriceMain\"><span class=\"priceField1\">#{normalPrice}</span><span class=\"unitVal\">#{perUnit}</span></div>");
			prodObj.displayPrice = this.priceTemplate.evaluate(prodObj);
            if(comparisonPrice != null){
                prodObj.comparisonPrice = comparisonPrice;
                prodObj.comparisonUnit = comparisonUnit;
                 if(unitMeasureEnglish === this.keys.get("unitMeasureEn")) {
                        this.comparisonPriceTemplate = new Template("<div id=\"comparisonContainer\"><span>"+this.keys.get("txtUnitPrice")+"</span><span id=\"comparisonPrice\">#{comparisonPrice}</span><div>");
                    }else {
                        this.comparisonPriceTemplate = new Template("<div id=\"comparisonContainer\"><span>"+this.keys.get("txtPrice")+"#{comparisonUnit} </span><span id=\"comparisonPrice\">#{comparisonPrice}</span><div>");
                    }
                prodObj.displayComparisonPrice = this.comparisonPriceTemplate.evaluate(prodObj);
            }
			if(isNlp || isTro){
				if(this.keys.get('isCrossOverAllowed')){
					this.nlpStrikeTemplate = new Template("<span class=\"troPrice_compare priceStrikethrough\">#{previousPrice}#{perUnit}</span>");
					prodObj.nlp = this.nlpStrikeTemplate.evaluate(prodObj);
				}else{
					this.nlpNonStrikeTemplate = new Template("<div class=\"troPrice_compare\"><span>"+this.keys.get("insteadOf")+" </span>#{previousPrice}#{perUnit}</div>");
					prodObj.nlp = this.nlpNonStrikeTemplate.evaluate(prodObj);
				}
				if(isNlp){
					this.nlpImgTemplate = new Template("<img class=\"nlpImgSlideShow\" src=\"#{nlpImgSrc}\" border=\"0\"/>");
					prodObj.nlpImgSrc = "/ms/img/nlp/" + irwstats_locale + "/nlp_04.png";
					prodObj.nlpImg = this.nlpImgTemplate.evaluate(prodObj);
				}
				else
				{
					this.nlpTemplate = new Template("<div class=\"prodPriceMain\"><span class=\"priceField1 priceFieldClr\">#{normalPrice}</span><span class=\"unitVal\">#{perUnit}</span></div>");
					this.troTemplate = new Template("<div class=\"slideShowDisclaimer\">#{troStartDate} - #{troEndDate} <span>"+this.keys.get("disclaimer")+"</span></div>");
					prodObj.tro = this.troTemplate.evaluate(prodObj);
					prodObj.displayPrice = this.nlpTemplate.evaluate(prodObj);
				}
			}
            // Buy online button
            if(buyable == "true"){
                prodObj.buyOnline = this.buyOnlineTemplate.evaluate(prodObj);
            }
            // Measures
            var moreKey = this.keys.get('r4_more_options');
            prodObj.measure = IowsCommon.getMeasures(measure,this.dimensionTemplate,this.moreInfoTemplate,moreKey,pipLink);
            if(numberOfItems > 1){
                prodObj.moreOptions = this.moreInfoTemplate.evaluate({text: moreKey, link: pipLink});
            }

            // Series, Systems or Collection
            prodObj.ssc = IowsCommon.getSSC(product,this.sscTemplate);
            // BTI wrappers
            if(bti == "true"){
                prodObj.btiIncludeBefore = this.btiIncludeBeforeTemplate.evaluate(prodObj);
                prodObj.btiIncludeAfter = this.btiIncludeAfterTemplate.evaluate(prodObj);
            }
        }
        // Update cache object for thumbs
        this._cacheThumb(prodObj);
        
        // Add the product to the product container
        var newProduct = this.slideshowProdTemplate.evaluate(prodObj);
        $('slideshowElements').insert(newProduct);
        
        if(show){
		    irwStatProductViewedFromSlideShow(partNo,'litebox');  
            this.showProduct(partNo,show);
			if(typeof(prodObj.relation) != "undefined") {
				Event.observe( $( 'slideshowSSCTemplate'+partNo), 'click', function( e ) {
					irwstatSetTrailingTag("IRWStats.productFindingMethod",prodObj.relation);
				});
			}
        }
    },
    
    /** Main function to show a product in the slideshow
        First checks if the product is already stored in the product container. If so, show it and also change the active thumb.
        If not, requests it through _getProductInfo() that inserts it to the product container, and then does a callback here to show it.
        It also fires _addProducts() which adds the next set of products, mainly for the navigations thumbs...
    **/
    showProduct : function showProduct(prodId,show) {
        // Start product loader
        $('slideshowProduct').update(this._loader());
        // Find product in cache obj
        var product = this.thumbs.get(prodId);
        
        // If product not in cache, ajax it, else just show it
        if(typeof(product) == 'undefined'){
            this._getProductInfo(prodId,true);
        }else{
            var product = $('slideshowElements').down('#element'+prodId);
            product = product.clone(true);
            // Change the id to handle mouse events
            var moreInfo = product.down('#moreInfo'+prodId);
            moreInfo.writeAttribute('id', 'moreInfo');
            $('slideshowProduct').setOpacity(0);
            $('slideshowProduct').update(product);
            new Effect.Opacity('slideshowProduct',
                {duration:.4,
                from:0,
                to:1});
            
            // Wait for all ajax calls to be done before setting active thumb
            new PeriodicalExecuter(function(pe) {
                if(Ajax.activeRequestCount <= 0) {
                    pe.stop()
                    // Update thumbs container
                    this._updateThumbs(prodId);
                    // Update navigation buttons
                    this._updateNavigation(prodId);
                    // $('slideshowThumbLoader').hide();
                    // $('slideshowThumbs').show();
                }
            }.bind(this),.5);
        }
        
        if(!show){
            // Add products for navigation
            this._addProducts(this.products,prodId);
        }
    },
    
    /** Add a set of products to the product container (if not there)  **/
    _addProducts : function addProducts(products,curProduct) {
        var noToAdd = this.noOfThumbs;   // Constant of number of products to add
        var prodArray = products;
        var curPos = prodArray.indexOf(curProduct.toString());
        
        var startPos = curPos-1;
        if(startPos < 0){startPos = 0};
        var toPos = (startPos + noToAdd);
        if(toPos > prodArray.size()){toPos = prodArray.size()};
        
        for(i=startPos;i<toPos;i++){
            var prodId = prodArray[i];
            
            // Find product in cache obj
            var product = this.thumbs.get(prodId);
            // If product not in cache, ajax it
            if(typeof(product) == 'undefined' && prodId != curProduct){
                this._getProductInfo(prodId);
            }
        }
    },

    /** Creates a thumb object and adds it to the thumbs cache object (a Hashmap)  **/
    _cacheThumb : function cacheThumb(obj) {
        var thumbObj = new Object();
        thumbObj.partNo = obj.partNo;
        thumbObj.imgS = obj.imgS;
        thumbObj.prodName = obj.prodName;
        thumbObj.prodDesc = obj.prodDesc;
        thumbObj.price = obj.normalPrice;
        // Add obj to the thumbs cache object
        this.thumbs.set(obj.partNo, thumbObj);
    },

    /** Updates the slideshowThumbs container with the thumbs to show and sets the current product to active **/
    _updateThumbs : function updateThumbs(prodId) {
        var thumbsToShow = this.noOfThumbs;
        var products = this.products;
        var thumbs = this.thumbs;
        
        var curPos = products.indexOf(prodId);
        var startPos = curPos -1;
        var endPos = startPos + thumbsToShow;
        if(endPos > this.length){endPos = this.length};
        $('slideshowThumbs').update();  // Empty thumbs container
        for (var i = startPos; i < endPos; ++i) {
            if(i == -1){
                var emptyThumb = this.slideshowEmptyThumbTemplate.evaluate();
                $('slideshowThumbs').insert(emptyThumb);
            }else{
                var prod = products[i];
                var thumbObj = this.thumbs.get(prod);
                var newThumb = this.slideshowThumbTemplate.evaluate(thumbObj);
                $('slideshowThumbs').insert(newThumb);
                var thumb = $('slideshowThumbs').down('#thumb'+prodId);
                // Set the active thumb
                if(thumbObj.partNo == prodId){
                    thumb.addClassName('thumbContainerActive');
                }
            }
        }
    },

    _updateNavigation : function updateNavigation(activeId) {
        var prodArray = this.products;
        var activePos = prodArray.indexOf(activeId.toString());
        var prevPos = activePos-1
        var nextPos = activePos+1
        var btnPrev = $('slideshowBtnPrev');
        var btnNext = $('slideshowBtnNext');
        var btnPrevText = this.keys.get('fw11_slideShow_previous');
        var btnNextText = this.keys.get('fw11_slideShow_next');
        
        // Previous
        var previousThumb = prodArray[prevPos];
        if(typeof(previousThumb) != 'undefined'){
            btnPrev.removeClassName('inactive');
            btnPrev.stopObserving();
            btnPrev.observe('click', function(e){
                this.showProduct(previousThumb.toString());
            }.bind(this));
            // Add custom event to be able to fire on key press (arrow left)
            btnPrev.observe('ss:click', function(e){
                this.showProduct(previousThumb.toString());
            }.bind(this));
            btnPrev.title = btnPrevText.replace('{0}',prevPos+1).replace('{1}',this.length);
			Event.observe( $( 'slideshowBtnPrev'), 'click', function( e ) {
				irwStatProductViewedFromSlideShow(previousThumb,'litebox'); 
			});
        }else{
            btnPrev.addClassName('inactive');
            btnPrev.stopObserving();
        }
        
        // Next
        var nextThumb = prodArray[nextPos];
        if(nextThumb != null){
            btnNext.removeClassName('inactive');
            btnNext.stopObserving();
            btnNext.observe('click', function(e){
                this.showProduct(nextThumb.toString());
            }.bind(this));
            // Add custom event to be able to fire on key press (arrow right)
            btnNext.observe('ss:click', function(e){
                this.showProduct(nextThumb.toString());
            }.bind(this));
            btnNext.title = btnNextText.replace('{0}',nextPos+1).replace('{1}',this.length);
			Event.observe( $( 'slideshowBtnNext'), 'click', function( e ) {
				irwStatProductViewedFromSlideShow(nextThumb,'litebox'); 
			});
        }else{
            btnNext.addClassName('inactive');
            btnNext.stopObserving();
        }
        $('moreInfo').show();
    },
    
    initialize : function() {
        // Set parameters
        this.products = js_fn_SLIDE_SHOW_IDS;
        this.length = this.products.length;
        this.container = 'slideshowContainer';
        this.noOfThumbs = 10;
        this.thumbs = new Hash();
		this.relationArr = [];
        try{
            var firtsProdArr = $('productsTable').down('td a').readAttribute('href').split('/');// Find first id in product listing
			var lengthArray = firtsProdArr.length;
			this.firstProduct = firtsProdArr[lengthArray - 2];	
        }catch(err){};
        var storeId = $('myAccount')['storeId'];
        this.storeId = $F(storeId);
        var langId = $('myAccount')['langId'];
        this.langId = $F(langId);
        
        // Translation keys from global js vars
        this.keys = new Hash();
        this.keys.set('r4_more_options', js_fn_MORE_OPTIONS);
        this.keys.set('r4_more_products', js_fn_MORE_PRODUCTS);
        this.keys.set('r4_ikea_family', js_fn_IKEA_FAMILY);
		this.keys.set('r4_regular_price', js_fn_REGULAR_PRICE);
        this.keys.set('r4_all_products_new', js_fn_ALL_PRODUCTS_NEW);
        this.keys.set('fw11_buy_online', js_fn_BUY_ONLINE);
        this.keys.set('fw11_save_to_shopping_list', js_fn_SAVE_TO_SHOPPING_LIST);
        this.keys.set('weee_prf', js_fn_WEE_PRF);
        this.keys.set('weee_less_prf', js_fn_WEE_LESSPRF);
        this.keys.set('fw11_slideShow_more_info', js_fn_SLIDE_SHOW_MORE_INFO);
        this.keys.set('fw11_price_per_package', js_fn_PRICE_PER_PACKAGE);
        this.keys.set('fw11_slideShow_close', js_fn_SLIDE_SHOW_CLOSE);
		this.keys.set('fw11_slideShow_next', js_fn_SLIDE_SHOW_NEXT);
		this.keys.set('fw11_slideShow_previous', js_fn_SLIDE_SHOW_PREV);
		this.keys.set('californiaTitle20LegalText', js_fn_CAL_LEGAL_TEXT);
		this.keys.set('californiaTitle20UrlText', js_fn_CAL_URL_TEXT);
		this.keys.set('californiaTitle20UrlRef', js_fn_CAL_URL_REF);
		this.keys.set('californiaMoreInformation', js_fn_CAL_MORE_INFO);
		//Setting the global js values into map
		this.keys.set('isCrossOverAllowed', js_fn_CROSSOVER_ALLOWED);
		this.keys.set('insteadOf', js_fn_INSTEAD_OF);
		this.keys.set('disclaimer', js_fn_DISCLAIMER);
        this.keys.set('txtPrice', js_fn_TXT_PRICE);
        this.keys.set('unitMeasureEn',js_fn_UNIT_MEASURE_EN);
        this.keys.set('txtUnitPrice',js_fn_TXT_UNITPRICE);
		
        // Add the shell for the slideshow
        var slideshowContainer = '<div id=\"slideshowContainer\" style=\"display:none;\">' +
            '<div id=\"slideshowBorder\">' +
                '<div id=\"slideshowContent\">' +
                    '<div id=\"slideshowProduct\"></div>' +
                    '<div id=\"slideshowNavigation\" onmouseover=\"$(\'moreInfo\').show()\" onmouseout=\"$(\'moreInfo\').hide()\">' +
                        '<a id=\"slideshowBtnPrev\" class=\"slideshowBtn inactive\" onclick=\"return false;\" href=\"#\" title=\"Previous\">&nbsp;</a>' +
                        '<div id=\"slideshowThumbs\"></div>' +
                        '<div id=\"slideshowThumbLoader\" class="thumbLoader" style=\"display:none\"><img src=\"/ms/img/loading.gif\" width=\"27\" height=\"27\"/></div>' +
                        '<a id=\"slideshowBtnNext\" class=\"slideshowBtn\" onclick=\"return false;\" href=\"#\" title=\"Next\">&nbsp;</a>' +
                    '</div>' +
                    '<a id=\"slideshowCloseBtn\" onclick=\"slideshow.close();return false;\" href=\"#\" title=\"'+this.keys.get('fw11_slideShow_close')+'\"></a>' +
                '</div>' +
            '</div>' +
        '</div>';
        document.body.insert(slideshowContainer);

        // Main product template
        this.slideshowProdTemplate = new Template('<div id="element#{partNo}" onmouseover=\"$(\'moreInfo\').show()\" onmouseout=\"$(\'moreInfo\').hide()\"><a href=\"#{pipLink}\" onclick=\"irwstatSetTrailingTag(\'IRWStats.productFindingMethod\',\'#{relation}\');\">' +
            '<img src=\"#{imgL}\" border=\"0\" alt=\"#{prodName} #{prodDesc} #{normalPrice}\" class=\"prodImg\" title=\"#{keyMoreInfo}\"/></a>' +
            '<div id=\"prodInfo#{partNo}\" class=\"prodInfo\">' +
                '#{newImg}' + 
				'#{nlpImg}' +
                '#{btiIncludeBefore}' +
                '<div class=\"prodName\">#{prodName}</div>' +
                '<div class=\"prodDesc\">#{prodDesc} #{nlp}</div>' +
                '<div class=\"priceContainer\">' +
					'#{displayFamilyPrice}' + '#{displayComparisonFamilyPrice}' + '#{displayregularText}' +
                    '#{displayPrice}' + '#{displayComparisonPrice}' +
					'#{tro}' +
                    '<div class=\"prodPriceDual\"><span class=\"priceField1\">#{dualPrice}</span></div>' +
                    '<div><span class=\"priceField1\">#{pkgPrice}</span></div>' +
                    '#{displayPrfPrice}' +
                '</div>'+
                '#{btiIncludeAfter}' +
                '<div id=\"moreInfo#{partNo}\" style=\"display:none\">'+
                    '#{warningInfo}' +
                    '#{calTitle20}'+
                    '#{measure}' +
                    '#{moreOptions}' +
                    '<div class="buttonsContainer">' +
                        '#{buyOnline}' + 
                        '<a href=\"#\" id=\"slideshowSaveToList#{partNo}\" onclick=\"activateShopListPopup(\'add\',$(\'slideshowSaveToList#{partNo}\'),#{storeId},#{langId},\'#{relation}\');return false;\" class=\"listLink\">#{keySaveToList}</a>' +
                    '</div>' +
                    '#{ssc}' +
                '</div>'+
            '</div>'+
        '</div>');
        
        this.slideshowThumbTemplate = new Template('<div id=\"thumb#{partNo}\" class=\"thumbContainer\" onclick=\"slideshow.showProduct(\'#{partNo}\');irwStatProductViewedFromSlideShow(\'#{partNo}\',\'litebox\');\" style=\"display:; background-image:url(#{imgS})\">' +
            '<a class=\"overlay\" title=\"#{prodName} #{prodDesc} #{price}\">&nbsp;</a></div>');
        this.slideshowEmptyThumbTemplate = new Template('<div id=\"thumbEmpty\" class=\"thumbContainer\"></div>');

        this.newImgTemplate = new Template('<div><img border=\"0\" class=\"newImgLarge\" alt=\"#{newImgAlt}\" src=\"#{newImgSrc}"/></div>');
        this.familyPriceTemplate = new Template("<div class=\"familyContainer\"><span class=\"prodFamily\">#{keyFamily}</span><span class=\"prodPriceFamily\">#{familyPrice}<span class=\"prodPriceUnit\">#{perUnit}</span></span></div>");
        this.regularTextTemplate = new Template("<div class=\"regularPriceHead\">#{keyRegular}</div>");
        this.btiIncludeBeforeTemplate = new Template("<div class=\"productBtiBack\"><div class=\"productBtiFront\">");
        this.btiIncludeAfterTemplate = new Template("</div></div>");
        this.weeePrfTemplate = new Template("<div id=\"prf#{partNo}\" class=\"prfcontainer#{btiClass}\">"
                +"<div class=\"lessprice\">#{weee_less_prf} #{noPrfCharge}</div><div class=\"prflist\"><a href=\"javascript:openPrfPopup('prf#{partNo}')\">#{weee_prf}</a><span>&nbsp;#{prfCharge}</span></div>"
                +"</div>");
        this.sscTemplate = new Template('<a href=\"#{link}\" id=\"slideshowSSCTemplate#{partNum}\" class=\"moreLink\">'+this.keys.get('r4_more_products')+'</a>');
        this.dimensionTemplate = new Template('<div class=\"prodDimension\">#{dimension}</div>');
        this.moreInfoTemplate = new Template('<a href=\"#{link}\" title=\"#{text}\"><span class=\"moreOptions\">#{text}</span></a>');
        this.buyOnlineTemplate = new Template('<div class=\"buttonContainer\"><a onclick=\"activateShopListPopup(\'addToCart\',$(\'slideshowAddToCart#{partNo}\'),#{storeId},#{langId},\'#{relation}\');return false;\" href=\"#\" class=\"button\" id=\"slideshowAddToCart#{partNo}\"><div class=\"buttonLeft\">&nbsp;</div><div class=\"buttonCaption\">#{keyBuyOnline}</div><div class=\"buttonRight\">&nbsp;</div></a></div>')
        this.loaderTemplate = new Template('<div class="loader">#{loadingText}<br/><br/><img src=\"/ms/img/loading.gif\" width=\"27\" height=\"27\"/></div>');
        this.warningTemplate = new Template('<div id="warningsection"><img class="warningImg" src="#{attrImage1}" alt="#{attrValue}" border="0" />#{attrValue}</div>');
        this.californiaTemplate = new Template("<div class='lightSource'>"+this.keys.get("californiaTitle20LegalText")+"&nbsp;"+this.keys.get("californiaTitle20UrlText")+"&nbsp;</div>"
            +"<div id='lightSourceMoreInfo'><a href='"+this.keys.get("californiaTitle20UrlRef")+"'>"+this.keys.get('californiaMoreInformation')+"</a></div>");
        // Create the containers
        if($('slideshowBg') == null) {
            var obj = this;
            var overlay = new Element('div', {'id': 'slideshowBg'});
            var h = document.body.getHeight();
            overlay.setStyle({height: (h)+'px'});
            overlay.observe('click',function(e) {
                obj.close();
            });
            document.body.insert(overlay);
        }
        if($('slideshowElements') == null) {
            var slideshowElements = new Element('div', {'id': 'slideshowElements'});
            document.body.insert(slideshowElements);
        }
        
        // Add key events
        document.observe('keyup', function(event){ 
            if(event.keyCode == Event.KEY_ESC){ 
                this.close();
            }
            if(event.keyCode == Event.KEY_LEFT){ 
                $('slideshowBtnPrev').fire('ss:click');
            }
            if(event.keyCode == Event.KEY_RIGHT){ 
                $('slideshowBtnNext').fire('ss:click');
            }
        }.bind(this));
        
        // Add event to center on resize
        Event.observe(document.onresize ? document : window, "resize", function() {
            this._centerWindow(this.container);
        }.bind(this));   

        //new Draggable(this.container);
        this._hideLayer(this.container);
    }
});var cookieName = "irw_compare";
var backupCookieName = "irw_compare_backup";
var cookieValueSeparator = "**";
var prods;
var totalRequest = 0;
var loadedRequest = 0;
var productsURL;
var compareTable;
var productPaddingTemplate;
var familyPriceTemplate;
var weeePrfTemplate;
var weeePrfBtiTemplate;
var cartContainerTemplate;
var cartContainerNonBuyableTemplate;
var sscInclude;	
var cartInclude;
var toggleTemplate;
var fw_10_comparison_see_more;
var fw_10_comparison_see_less;
var fw_10_comparison_size;
var btiIncludeBeforeTemplate;
var btiIncludeAfterTemplate;
var moreOptionsTemplate;
var newImgTemplate;
var warningImgTemplate;
var warningTemplate;
var calTitle20Template;
var nlpImgTemplate;
var troTemplate;
var nlpStrikeTemplate;
var nlpNonStrikeTemplate;
var priceTemplate;
var troPriceTemplate;
var sizeId = 0;
var descAttrWarning = "WARNING";

var btiDisplay = false;
var overflowRows = {"gtk":"","presentation":"","keyFeatures":""};
var showHideCells = {"gtk":"","presentation":"","keyFeatures":""};

var sizeDataArray = new Array();
var sizeTemplate;
var sizeDataTemplate;
var sizeDataDimensionTemplate;
var widthClass;

//Good to know
var GTK_START = "<gtks><gtk><t>";
var GTK_SPLIT = "</t></gtk><gtk><t>";
var GTK_END = "</t></gtk></gtks>";
//KEY FEATURES (CUSTOMER BENEFITS)
var KF_START = "<cbs><cb><t>";
var KF_SPLIT = "</t></cb><cb><t>";
var KF_END = "</t></cb></cbs>";
//Product information
var PI_START = "<cbs><cb><t>";
var PI_SPLIT = "</t></cb><cb><t>";
var PI_END = "</t></cb></cbs>";

/**
* Request the product information
* async from the pip-page. Retrieves one product
* at so the url:s are AKAMAI cachable
* @param url The Url to retrieve
*/
function addContent(productNumber,compareIndex){
	var prodUrl = productsURL+productNumber;
	prodUrl = prodUrl+"?type="+Iows.type+"&dataset="+Iows.dataset;
	var ajaxParams = {"url" : prodUrl, "contentType" : 'application/xml', "asyncFlag" : true, "singletonFlag" : false};
	var inputParams = {"handlerId" : "compare", "compareIndex" : compareIndex};
	new AjaxRequestObject(ajaxParams, inputParams);
}

/**
* Called when an answer is recieved from the request.
* Uses the retrieved DOM Document to collect info
* regarding the product.
* @param  doc A Dom Document returned from the PIP-Page
*/
function addProduct(doc,compareIndex){
	try {
		/* Modified for FW11 feature 101 */
		var item = doc.getElementsByTagName("item")[0];
		if(getElementValue("measure", item)!=null){
		var size=getSize(item);}
		else{
		var size="";
		}
		var gtk = getGoodToKnow(doc);
		var keyFeatures = getKeyFeatures(doc);
		var prodDesc = getProductDescription(doc);	
		var presentation = getProductPresentation(doc,compareIndex);
		var docObj = {"presentation":presentation, 
									"gtk":gtk, 
									"prodDesc":prodDesc,
									"keyFeatures":keyFeatures,
									"size":size
									};
									
		if (docObj.presentation.bti != null && docObj.presentation.bti == "true") {
			btiDisplay = true;
		}
		prods[compareIndex] = docObj;
	} catch(err) {
		//An error occured when reading the product
	}
	loadedRequest++;
	//If all are loaded, render the table
	if(loadedRequest == totalRequest){
		$('loading').remove();
		widthClass = "width" + prods.length + "column";
		addCompareableRows();
		addProductEvts('fromCompare');
	} 
}

function generateSize(value){
	if (value == null || value == "null null" || value == "null"){
        return "";}
	else{
		//split the string into an array
		var splitSize=value.split("</m></rm> <rm><m>")
		var array = splitSize[0].replace("<rm><m>","").split("</m><m>");
		var sizeDataObj = new Object();
		sizeDataObj.dimension = '';
		for (var i=0;i<array.length && i<3;i++){
			var data = array[i].replace("<d>","").replace("</v>","").split("</d><v>");
			var sizeDataDimensionObj = new Object();
			var separator = i == array.length-1 || i == 2 ? '' : ',';
			sizeDataDimensionObj.text = data[0] + ': ' + data[1] + separator
			sizeDataObj.dimension = sizeDataObj.dimension + sizeDataDimensionTemplate.evaluate(sizeDataDimensionObj);
		}
		var array=sizeDataObj.dimension.split(",");
		sizeDataObj.dimension="";
		for(var i=0;i<array.length;i++){
			sizeDataObj.dimension=sizeDataObj.dimension+array[i];
		}
		var moreInfo = '';
		if (array.length > 3){
			moreInfo = 'More info available';
			try{
				moreInfo = $F("fw10_comparison_size_more_info");		
			} 
			catch (err) {}
			sizeDataObj.moreInfo = "<div class=\"moreInfo\"><span>" + moreInfo + "</span></div>"
		}
		//sizeDataArray.push(sizeDataTemplate.evaluate(sizeDataObj));
		var sizeObj = new Object();
		sizeObj.id = sizeId;
		var text = 'Size';
		try{
			text = $F("fw10_comparison_size");
		} 
		catch (err) {}
		sizeObj.text = text;
		sizeObj.dimension=sizeDataTemplate.evaluate(sizeDataObj);	
		sizeId++;
		return sizeTemplate.evaluate(sizeObj);
	}
}

function checkMoreOptions(item, product, numberOfItems) {
	if(product.indexOf(item) == -1 && numberOfItems > 1){
		return true;
	}else{
		return false;
	}
}

/**
* Reads the good to know part of the product
* @param doc The document object representing the product
* @return The good to know strings as an array or an empty array
*/
function getGoodToKnow(doc){
	var gtk = doc.getElementsByTagName("goodToKnow");
	return getAttributeXMLAsList(gtk,GTK_START,GTK_SPLIT,GTK_END);	
}

/**
* Reads the key features part of the product
* @param doc The document object representing the product
* @return The key features strings as an array or an empty array
*/
function getKeyFeatures(doc){
	var kf = doc.getElementsByTagName("custBenefit");
	return getAttributeXMLAsList(kf,KF_START,KF_SPLIT,KF_END);
}

function getSize(item){
	 var size = getElementValue("measure", item);
	 var ret = new Array();
	 if(size =="null null" || size== "null"){
		return ret;
	}
	else{
		 var array = size.replace("</v></m></rm> <rm><m><d>", "</v></m><m><d>").replace("<rm><m><d>","").replace("</v></m></rm>","").split("</v></m><m><d>");
		 var len =array.length;
		 var sizeHtml="";
		 for (var i=0;i<len;i++){
			 sizeHtmlTemp = "<span class=\"prodDimension\">" + array[i].replace("</d><v>",":") + "</span>"
			 sizeHtml = sizeHtml + sizeHtmlTemp;
		 }
		 ret.push(sizeHtml);
		 //ret.push(sizeHtml.strip());
		 return ret;
	 }
 }
	
/**
* Reads the product description part of the product
* @param doc The document object representing the product
* @return The product description as an array or an empty array
*/
function getProductDescription(doc){
	var prodDesc = getElementValue("custMaterials",doc);
	var ret = new Array();
	if(prodDesc == null){
		return ret;
	}
	var prodDescObjs = new Array();
	var cms = prodDesc.split("<cm>");
	var len = cms.length;
	for(var i = 0; i < len;i++){
		var str = cms[i];
		if(str.indexOf("<m>") != -1) {
			prodDescObjs.push(getProdDescObj(str));
		}
	}
	var hashTable = {};
	len = prodDescObjs.length;
	for(var i = 0;i < len;i++){
		var ptDesc = prodDescObjs[i];
		var ptArr = hashTable[ptDesc.pt];
		if(ptArr == undefined){
			ptArr = new Array();
		}
		ptArr.push({"t":ptDesc.t,"m":ptDesc.m});
		hashTable[ptDesc.pt] = ptArr;
	}	
	for (var key in hashTable){
		if (hashTable.hasOwnProperty(key)){
			var breaker = "<br/>";
			if(key == "" || key == "&nbsp;"){
				breaker = "";
			}
			var html = key + breaker;
			var arr = hashTable[key];
			len = arr.length;
			for(var i = 0; i < len;i++){
				var t_m = arr[i];
				html = html + t_m.t+" "+t_m.m+"<br/>";
			}
			ret.push(html.strip());
		}
	}
	return ret;
}

/**
*Create a product description
*/
function getProdDescObj(cmstr){
	var prodDesc = new Object();
	prodDesc.pt = getValueFromXmlString(cmstr,"pt");
	prodDesc.t = getValueFromXmlString(cmstr,"t");
	prodDesc.m = getValueFromXmlString(cmstr,"m");
	return prodDesc;
}

function  getValueFromXmlString(tagData,tagName){
	var startIx = tagData.indexOf("<"+tagName+">");
	if(startIx == -1){
		return "";
	}
	var endIx = tagData.indexOf("</"+tagName+">",startIx);
	if(endIx == -1){
	  return "";
	}
	return tagData.substring(startIx+tagName.length+2,endIx);    
}

/**
*Format date into MON DD, YYYY
*/
function formatTRODate(pDate){	
	if(pDate!=null){
		var dateArray = pDate.split("-"); 
		var vDate = new Date(dateArray[0],dateArray[1]-1,dateArray[2]);  
		if(isMonthFirst=='true'){
		var dateBuffer = localeShortMonths[vDate.getMonth()]+" "+vDate.getDate()+", "+vDate.getFullYear();
		} else {
			var dateBuffer =	vDate.getDate() +" "+localeShortMonths[vDate.getMonth()]+", "+vDate.getFullYear();
			
		}      	
	
		return dateBuffer;   
	}	
}


/**
* Creates an object representation of the data needed
* for the comparison
* @param doc The document representing the product
* @return An object with the following properties:
*		pipLink, thumb, name, desc, price, familyPrice
*		unitPrice, sscInclude, availableOnline
*/
function getProductPresentation(doc,compareIndex){
	var product = doc.getElementsByTagName("product")[0];
	var item = doc.getElementsByTagName("item")[0];
	var prices = getPrices(item);
	var descriptiveAttributes = getDescriptiveAttributes(item);
	var warningDescAttr = getDescAttributeByType(descAttrWarning,descriptiveAttributes);
	var isCalTitle20 = false;
	if(doc.getElementsByTagName("californiaTitle20").length>0){
		isCalTitle20 = true;
	}
	//Format TRO start and end dates
	var troStartDate = formatTRODate(doc.getElementsByTagName("priceNormal")[0].getAttribute("startDate"));
	var troEndDate = formatTRODate(doc.getElementsByTagName("priceNormal")[0].getAttribute("endDate"));
	return {
		"pipLink": getElementValue("URL",item),
		"pipBigImg": getElementPathValue("normal/image",item),
		"thumb":getElementPathValue("thumb/image",item),
		"name":getElementValue("name",item),
		"desc":getElementValue("facts",item),
		"price":prices.price, 
		//NLP values to return object
		"previousPrice":getElementValue("pricePrevious",item),
        "isNLP":doc.getElementsByTagName("priceNormal")[0].getAttribute("nlp"),
		//TRO values to return object
		"isTRO":doc.getElementsByTagName("priceNormal")[0].getAttribute("tro"),
		"troStartDate":troStartDate,
		"troEndDate":troEndDate,
		"unit":doc.getElementsByTagName("priceNormal")[0].getAttribute("perUnit"),
		"familyPrice":prices.familyPrice,
		"unitPrice":prices.unitPrice,
		"sscInclude":getSSCInclude(doc),
		"availableOnline":getElementValue("buyable",item),
		"bti":getElementValue("bti",item),
		"newItem":getElementValue("new",item),
		"familyPriceInclude":"",		
		"btiIncludeBefore":"",
		"btiIncludeAfter":"",
		"size":generateSize(getElementValue("measure", item)),
		"weeePrfInclude":"",
		"prfCharge":prices.prfCharge,
		"priceWithNoPrfCharge":prices.priceWithNoPrfCharge,	
		"buyable":getElementValue("buyable",item),
		"hasMoreOptions":checkMoreOptions(getElementValue("partNumber", item), getElementValue("partNumber", product)),
		"hasMoreOptions":checkMoreOptions(getElementValue("partNumber", item), getElementValue("partNumber", product), getElementValue("numberOfItems", product)),
		"partNumber":getElementValue("partNumber", item),
		"compareIndex":compareIndex,
		"warningAttribute":warningDescAttr,
		"calTitle20":isCalTitle20,
        "comparisonPrice":prices.comparisonPrice,
		"comparisonUnit":prices.comparisonUnit,
		"comparisonFamilyPrice":prices.comparisonFamilyPrice,
        "comparisonFamPrice":"",
        "regularPrice":"",
        "comparisonPriceInclude":"",
        "unitMeasureEnglish":prices.unitMeasureEnglish
		};
}

/**
* returns an array of descriptive attributes
*  
* @param  item A Dom Document returned from the PIP-Page
*/
function getDescriptiveAttributes(item){
	var attrArray;
	var descAtrributes = item.getElementsByTagName("descriptiveAttributes")[0];
	if(descAtrributes != null){
		var attribute = descAtrributes.getElementsByTagName("descriptiveAttribute");
		if(attribute.length > 0){
			attrArray = new Array();
			for(var i=0; i < attribute.length; i++){
				var attr = new Object();
				attr.attrType = attribute[i].getAttribute("type");
				attr.attrValue = getElementValue("value",attribute[i]);
				attr.attrImage1 = getElementValue("image1",attribute[i]);
				attrArray[i] = attr;
			}
		}
	}

	return attrArray;
}

/**
* returns an attribute object based on the attribute
* type passed
*  
* @param  attrType The attribute type used to get the attribute object
* @param  descAttrs Array of descriptive attributes
*/
function getDescAttributeByType(attrType, descAttrs){
	var attr;
	if(descAttrs != null && descAttrs.length > 0){
		for(var i=0; i < descAttrs.length; i++){
			if(descAttrs[i].attrType == attrType){
				attr = descAttrs[i];
			}
		}
	}
	return attr;
}

/**
* Parses the price information an returns an object
* the prices information.
* @param item An element representing the Item node
* @retuns An object with the following properties set:
*		price, familyPrice, unitPrice
*/
function getPrices(item){
		var ret = new Object();
	var prices = item.getElementsByTagName("prices")[0];
	var normalPriceObject = getPricePart("normal",prices);
	ret.price =normalPriceObject.price;
	ret.previousPrice= normalPriceObject.previousPrice;
	ret.unitPrice = normalPriceObject.unitPrice;
	var familyPriceObject =	getPricePart("family-normal",prices);
	ret.familyPrice=familyPriceObject.price;
	try{
		if(showWeeeRelatedData){
			ret.prfCharge = prices.getElementsByTagName("normal")[0].getElementsByTagName("priceNormal")[0].getAttribute("prfChargeFormatted");
			ret.priceWithNoPrfCharge = prices.getElementsByTagName("normal")[0].getElementsByTagName("priceNormal")[0].getAttribute("priceWithNoPrfChargeFormatted");
		}
        ret.comparisonPrice = prices.getElementsByTagName('normal')[0].getElementsByTagName('priceNormal')[0].getAttribute('comparisonPrice');
        ret.comparisonUnit = prices.getElementsByTagName('normal')[0].getElementsByTagName('priceNormal')[0].getAttribute('unit');
        ret.comparisonFamilyPrice = prices.getElementsByTagName('family-normal')[0].getElementsByTagName('priceNormal')[0].getAttribute('comparisonPrice');
        ret.unitMeasureEnglish = prices.getAttribute('unitMeasureEnglish');

	} catch (err){}
	
	return ret;
}

/**
* Retrieves the set price of a price node. 
* The method return "priceChanged" if set otherwise 
*  "priceNormal" is returned.
* @param item The element representing the "prices" node
* @param itemTagName The name of the prices-node descendant
*					to retrieve the price from
*/
function getPricePart(itemTagName,item){
		var unitPrice = item.getAttribute("unitPricePrimary");
	var suffix = "";
	if(unitPrice != null && unitPrice == "true"){
		suffix = "PerUnit";
	}	
	var normal = item.getElementsByTagName(itemTagName)[0];
	var priceObject = new Object();
	priceObject.unitPrice = unitPrice;
	priceObject.price = getElementValue("priceChanged"+suffix,normal);
	if(priceObject.price === null){
		priceObject.price = getElementValue("priceNormal"+suffix,normal);
		if (unitPrice && priceObject.price !== null) {
			priceObject.price = priceObject.price + getUnitSuffix(normal,"priceNormal"+suffix);
		}
	}
	 priceObject.previousPrice =getElementValue("pricePrevious"+suffix,normal);
	 if (unitPrice && priceObject.previousPrice !== null) {
		priceObject.previousPrice = priceObject.previousPrice + getUnitSuffix(normal,"pricePrevious"+suffix);
	}
	
	return priceObject;
}

/**
* The method returns a unit suffix from the <priceXxxxxPerUnit> node if it exists, otherwise an empty string.
* @param node       : The element representing the price node
* @param tagName    : The name of the price-node to retrieve the price from
* @return           : The unit suffix  */
function getUnitSuffix(node,tagName) {
	var suffix = "";
	try{
		var priceNode = node.getElementsByTagName(tagName)[0];
		unit = priceNode.getAttribute("unit");
		if (unit !== null) {
			suffix = " / " + unit;
		};
	}catch(err){};
	
	return suffix;
}

/**
*Retrieves value from the element with the child node
* with the specified name
*/
function getElementValue(tagName,element){
	var item = element.getElementsByTagName(tagName);
	if(item != null && item.length > 0 && item[0].firstChild != null){
		return item[0].firstChild.data;
	}
	else{
		return null;
	}

}

/**
* Retrieves value from element with the specified path
*/
function getElementPathValue(tagNamePath,element){
	var paths = tagNamePath.split('/');
	var len = paths.length;
	var elem = new Array();
	elem.push(element);
	for(var i = 0; i < len;i++){
		if(elem != null && elem.length > 0){
			elem = elem[0].getElementsByTagName(paths[i]);
		}	
	}
	if(elem != null && elem.length > 0){
		return elem[0].firstChild.data;
	}
	else{
		return null;
	}
}

/**
* Checks if the product has any parent in series, systems or collections
* and if so it will return the formated fragment for linking to the ssc.
*/
var categoryNames = new Array("series","systems","collections");
function getSSCInclude(doc){
	var categories = doc.getElementsByTagName("categories")[0];
	for(var i = 0; i < 3;i++){
		var tmp = categories.getElementsByTagName(categoryNames[i]);
		var category = tmp[0].getElementsByTagName("category");
		//sscName, sscLink, r4_more_products
		if(category != null && category.length > 0){
				var ssc = {
									"name":getElementValue("name",category[0]),
									"link":getElementValue("URL",category[0])									
								};
				return sscInclude.evaluate(ssc);
		}
	}
	return "";

}

/**
*Splits the values in elemArray[0].firstChild into strings
*and returns them as an array. If the firstchild does not exist
*an empty list is returned
*/
function getAttributeXMLAsList(elemArray,startTags,splitTags,endTags) {
	var list = new Array();
	if(elemArray != null && elemArray.length > 0 && elemArray[0].firstChild != null){
		var xml = elemArray[0].firstChild.data;
		if (xml != null && !("" == xml)) {
			xml = xml.replace(startTags, "");
			xml = xml.replace(endTags, "");
			var items = xml.split(splitTags);
			var len = items.length;
			for (var i = 0; i < len; i++) {
				list.push(items[i]);
				}
   	}
   }
   return list;
}



/**
* Renders the compare table
*/
function addCompareableRows(){
    addPriceImageRow();
    var keyFeaturesIsLast = ((getMaxLength("keyFeatures") > 0) && ((getMaxLength("gtk")==0) && (getMaxLength("prodDesc")>0)));
    var gtkIsLast = getMaxLength("gtk")>0 && getMaxLength("prodDesc")==0;
    addCompareSectionRows("size",$F("fw10_comparison_size"),false,true);
    addCompareSectionRows("keyFeatures",$F("PD_txt_keyfeatures"),true,keyFeaturesIsLast);
    addCompareSectionRows("gtk",$F("PD_txt_goodToKnow"),true, gtkIsLast);
    addCompareSectionRows("prodDesc",$F("PD_txt_productDescription"),false, true);
}

/**
* Adds the row with the product image and price information.
* The image and price is rendered in a "ready-to-present" way from 
* the pip page.
*/
function addPriceImageRow(){
	var len = prods.length;
	var last = len -1;
	var row = new Element("tr");
	for(var i = 0; i < len;i++){
		var td;
		if(i == last){
			td = new Element("td",{ 'class': 'noBorder ' + 'lastTd ' + widthClass });
		}
		else{
			td = new Element("td",{ 'class': widthClass });
		}
		var prodInfo = prods[i].presentation;
		
		var locale = "en_SE";
		try {
			locale = $F('locale');
		} catch (err) {}
		prodInfo.newImgAlt = "New";
		try {
			prodInfo.newImgAlt = $F('r4_all_products_new');
		} catch (err) {}	
		prodInfo.newImgSrc = "/ms/" + irwstats_locale + "/img/icons/new_small.gif";
		if (prodInfo.newItem != null && prodInfo.newItem == "true") {
			prodInfo.newImg = newImgTemplate.evaluate(prodInfo);
		}
		var isBTI = false;
		var isNLP = false;
		var isTRO = false;
		if(prodInfo.bti == "true" && !prodInfo.isTRO && prodInfo.familyPrice == null){
			isBTI = true;
		}
		if(prodInfo.isTRO && prodInfo.familyPrice == null){
			isTRO = true;
		}
		if(prodInfo.isNLP && prodInfo.bti != "true" && !prodInfo.isTRO && prodInfo.familyPrice == null && prodInfo.newItem != "true"){
			isNLP = true;
		}
		if (isBTI) {
			prodInfo.btiIncludeBefore = btiIncludeBeforeTemplate.evaluate(prodInfo);
			prodInfo.btiIncludeAfter = btiIncludeAfterTemplate.evaluate(prodInfo);			
		}
		if(prodInfo.unit !== null && !prodInfo.unitPrice)
		{
			prodInfo.perUnit = perUnitTemplate.evaluate(prodInfo);
		}
		if(prodInfo.familyPrice != null){
			prodInfo.familyPriceInclude = familyPriceTemplate.evaluate(prodInfo);
            if(prodInfo.comparisonFamilyPrice != null) {
                if(prodInfo.unitMeasureEnglish === js_fn_UNIT_MEASURE_EN) {
                    prodInfo.comparisonFamPrice = comparisonFamPriceStartTemplate.evaluate(prodInfo)+comparisonUnitPriceTemplate.evaluate(prodInfo)
                                                    +comparisonFamPriceEndTemplate.evaluate(prodInfo);
                } else {
                    prodInfo.comparisonFamPrice = comparisonFamPriceStartTemplate.evaluate(prodInfo)+comparisonPricePerTemaplte.evaluate(prodInfo)
                                                    +comparisonFamPriceEndTemplate.evaluate(prodInfo);
                }
            }
            prodInfo.regularPrice = regularPriceTemplate.evaluate(prodInfo);
		}
		//Generate NLP and TRO related HTML templates
		prodInfo.displayPrice = priceTemplate.evaluate(prodInfo);
		if (prodInfo.previousPrice != null && (isNLP || isTRO)) {
			if(js_fn_CROSSOVER_ALLOWED){
				prodInfo.nlp = nlpStrikeTemplate.evaluate(prodInfo);
			}else{
				prodInfo.nlp = nlpNonStrikeTemplate.evaluate(prodInfo);
			}
			if(isNLP){
				prodInfo.nlpImgSrc = "/ms/img/nlp/" + irwstats_locale + "/nlp_02.png";
				prodInfo.nlpImg = nlpImgTemplate.evaluate(prodInfo);
			}
			else{
				prodInfo.tro = troTemplate.evaluate(prodInfo);
				prodInfo.displayPrice = troPriceTemplate.evaluate(prodInfo);
			}
       	}
         if(prodInfo.comparisonPrice != null){
             if(prodInfo.unitMeasureEnglish === js_fn_UNIT_MEASURE_EN) {
                    prodInfo.comparisonPriceInclude = comparisonPriceStartTemplate.evaluate(prodInfo)+comparisonUnitPriceTemplate.evaluate(prodInfo)
                                                    +comparisonPriceEndTemplate.evaluate(prodInfo);
                } else {
                    prodInfo.comparisonPriceInclude = comparisonPriceStartTemplate.evaluate(prodInfo)+comparisonPricePerTemaplte.evaluate(prodInfo)
                                                    +comparisonPriceEndTemplate.evaluate(prodInfo);
                }
                /*
                if(){
                    prodInfo.comparisonPriceInclude = comparisonPriceTemplate.evaluate(prodInfo);
                }
                */
         }
		if(prodInfo.prfCharge != null && prodInfo.priceWithNoPrfCharge != null){
			prodInfo.weee_less_prf = "Less PRF";
			prodInfo.weee_prf = "PRF";
			try{
				prodInfo.weee_less_prf = $F("weee_less_prf");
				prodInfo.weee_prf = $F("weee_prf");
			}
			catch (err) { }
			if(isBTI){
				prodInfo.weeePrfInclude = weeePrfBtiTemplate.evaluate(prodInfo);
			}
			else{
				prodInfo.weeePrfInclude = weeePrfTemplate.evaluate(prodInfo);
			}
		}		
		var hasEcommerce = "true";
		try{
				hasEcommerce = $F('hasEcommerce');
		}
		catch (err) {}
		if (hasEcommerce == "true") {
			if (prodInfo.buyable != null && prodInfo.buyable == "true") {
				prodInfo.cartText = $F('r4_cart_available');
				prodInfo.cartImage = 'cart.gif';
			} 
			else {
				prodInfo.cartText = $F('r4_cart_unavailable');
				prodInfo.cartImage = 'cart_not_available.gif';
			}
			prodInfo.cartInclude = cartInclude.evaluate(prodInfo);
		}
		if (prodInfo.hasMoreOptions) {
			prodInfo.moreOptions = moreOptionsTemplate.evaluate(prodInfo);
		}
		
		var longClass = btiDisplay ? " productContainerLong" : "";
		if(prodInfo.warningAttribute != null){
			prodInfo.warningImage = warningImgTemplate.evaluate(prodInfo.warningAttribute);
		}
		
		if(prodInfo.calTitle20 != null && prodInfo.calTitle20){
			prodInfo.calTitle20Msg = calTitle20Template.evaluate(prodInfo.calTitle20);
		}
		
		var toInsert;
	    if (prodInfo.buyable != null && prodInfo.buyable == "true") {		
			toInsert = "<div id=\"item_" + prodInfo.partNumber + "\" class=\"productContainer" + longClass + "\">"
				+productPaddingTemplate.evaluate(prodInfo)
				+cartContainerTemplate.evaluate(prodInfo)
				+"</div>";
		} 
		else {
			toInsert = "<div id=\"item_" + prodInfo.partNumber + "\" class=\"productContainer" + longClass + "\">"
				+productPaddingTemplate.evaluate(prodInfo)
				+cartContainerNonBuyableTemplate.evaluate(prodInfo)
				+"</div>";
		}
		
		td.innerHTML = toInsert;
		row.insert(td);						
	}
	compareTable.insert(row);	  
}


/**
*	Insert rows for a section in the compare table.
* Ads the heading as the first row and then the data 
* to compare.
* Since the each comparable item should be aligned on the same
* row the method will add as many rows as the product with the most data,
* for elements which does not have as much data as this element empty cells
* will be added. 
* @param Section The name of the section to add
*/
function addCompareSectionRows(section,heading,bullets,lastSection){
    var startBullet = "<span class=\"prodDescr\">";
    var endBullet = "</span>";
    if(bullets){
        startBullet = "<ul><li>";
        endBullet = "</li></ul>";
    }
    if(section == "size"){
        startBullet = "";
        endBullet = "";
    }
    var maxLength = getMaxLength(section);
    var prodsLength = prods.length;
    var overFlow = new Array();
    var hideRows = false;
	//only show border if there are items
	if (maxLength > 0) {
	    var borderRow = new Element("tr");
	    for(var j = 0; j < prodsLength;j++){
	        var cell;
	        cell = new Element("td",{'class': 'noBorder'});
	        var cellContent = new Element("div", {'class':'productBottom'});
	        cell.insert(cellContent);
	        borderRow.insert(cell);
	    }
	    compareTable.insert(borderRow);
	}
    for(var i = 0; i < maxLength;i++){
        var row = new Element("tr");
        if(i >= 5){
            overFlow.push(row);
        }
        //First row contains heading
        var h2 = "";
        if(i == 0){
            h2 = "<h2> "+heading+"</h2>";
        }
        var last = prodsLength -1;
        for(var j = 0; j < prodsLength;j++){
            var prod = prods[j];
            var cell;
            if(last == j) {
                cell = new Element("td",{ 'class': 'features noBorder'});
            }
			else{
                cell = new Element("td",{ 'class': 'features'});
            }
            var arr = prod[section];

            if(arr.length > i){
 								var div = new Element("div", { 'class': widthClass });
 								div.innerHTML = h2 + startBullet+arr[i]+endBullet;
                cell.insert(div);
            }
			else {
                cell.innerHTML = "&nbsp;";
            }

            row.insert(cell);
        }
        if(hideRows){
            row.hide();
        }
        compareTable.insert(row);
        /*If more than 5 rows an we are on the fifth
                * signal to hide the rest of the rows */
        if(i == 4 && maxLength > 5){
            hideRows = true;
        }
    }
    //Add row with hide/show all
    if(maxLength > 5){
        var toggleCells = new Array();
        var showAllRow = new Element("tr");
        for(var j = 0; j < prodsLength;j++){
            var cell;
            if(last == j) {
                cell = new Element("td",{ 'class': 'features noBorder'});
            }
			else{
                cell = new Element("td",{ 'class': 'features'});
            }
            var currLength  = prods[j][section].length;
            if(currLength > 5){
                cell.innerHTML = toggleTemplate.evaluate({"section":section,"linkText":fw_10_comparison_see_more});
                toggleCells.push(cell);
            } 
			else {
                cell.innerHTML = "&nbsp;";
            }
            showAllRow.insert(cell);
        }
        showHideCells[section] = toggleCells;
        compareTable.insert(showAllRow);
    }
    overflowRows[section] = overFlow;
}

function toggleSection(section){
	var arr = overflowRows[section];
	var len = arr.length;
	var toggleLink;
	/*If the item is visible it will toggle
	* to be hidden thus, show more should be  
	* the link text*/
	if(arr[0].visible()){
		toggleLink = toggleTemplate.evaluate({"section":section,"linkText":fw_10_comparison_see_more});
	}
	else{
		toggleLink = toggleTemplate.evaluate({"section":section,"linkText":fw_10_comparison_see_less});
	}
	for(var i = 0; i < len;i++){
		arr[i].toggle();
	}
	var linkSection = showHideCells[section];
	len = linkSection.length;
	for(var i = 0; i < len;i++){
		linkSection[i].innerHTML = toggleLink;
	}
}

/**
* Itterates the products to find the maximum value
* of the specifid tag.
* @param section The name of the section to find max value from
*/
function getMaxLength(section){
	var max = 0;
	var len = prods.length;
	for(var i = 0; i < len;i++){
		var prod = prods[i];
		var length = prod[section].length;
		if(length > max){
				max = length;
			}
	}
	return max;
}

/**
* Retrieves the products to compare from the cookie and creates
* request to retrieve the product data.
*/
function retrieveCompareProducts(storeId,langId){
	initComparePage(storeId,langId);
	var values = getCookie(cookieName);
	document.cookie=cookieName+"=;path=/";
	if (values == null || values == ""){
		// try to read the backup cookie
		values = getCookie(backupCookieName);
		if (values == null) {
			return;
		}
	} 
	else {
		//the cookie existed, copy the content to backup cookie
		document.cookie=backupCookieName+"="+values+";path=/";
	}
	var urls = values.split(cookieValueSeparator);
	var len = urls.length;
	//Max 4 to compare
	if(len > 4){
		len = 4;
	}
	var toSend = new Array();
	for(var i = 0; i < len;i++){
		var content = urls[i];
		if(content != null && content != ""){
			toSend.push(content);
		}
	}
	
    //Send statisics to omniture
	try {
        var stats = toSend.clone(); // Clone the original to keep it as is
		irwStatCompareProducts(stats);
	} 
	catch(e) {}
	totalRequest = toSend.length;
    prods = new Array(totalRequest);
    js_fn_SLIDE_SHOW_IDS.clear();
	for(var i = 0; i < totalRequest;i++){
		addContent(toSend[i],i);
        // Add id:s to slideshow array
        js_fn_SLIDE_SHOW_IDS.push(toSend[i]);
	}
}

function setCompareBaseUrl(baseProductUrl){
	productsURL = baseProductUrl;
}
	
function initComparePage(storeId,langId){
	var loading = new Element('div', {'id' : 'loading', 'class' : 'loading' });
	$('compare').insert(loading);
	loading.update('<img src="/ms/img/loading.gif" />');
	compareTable = $("compareTable");	
	fw_10_comparison_see_more = $F("fw10_comparison_see_more");
	fw_10_comparison_see_less = $F("fw10_comparison_see_less");
	//pipLink, name, desc, thumb, price, familyPriceInclude
	productPaddingTemplate = new Template(
	"#{newImg}"
	+"#{nlpImg}"
	+"<div class=\"popupListener\" id=\"comparePopup#{compareIndex}\"><div class=\"productPadding\">"
		+"<a href=\"#{pipLink}\">"
				+"<img id=\"compareImage#{compareIndex}\" border=\"0\" class=\"prodImg\" alt=\"#{name} #{desc}\" "
					+"src=\"#{thumb}\" />"
				+"#{btiIncludeBefore}"
				+"<span class=\"prodNameCompare\" >#{name}</span> "
				+"<span class=\"prodDescCompare\" >#{desc} #{nlp}</span> "
				+"#{familyPriceInclude}" + "#{comparisonFamPrice}" + "#{regularPrice}"
				+"#{displayPrice}" + "#{comparisonPriceInclude}"//Price del behöver vara separat
				+"#{tro}"
				+"#{btiIncludeAfter}"
		+"</a>"
		+"#{weeePrfInclude}"
	+"</div></div>  ");
	//bti templates
	btiIncludeBeforeTemplate = new Template("<div class=\"productBtiBackComp\"><div class=\"productBtiFrontComp\">");
	btiIncludeAfterTemplate = new Template("</div></div>");
	//new template
	newImgTemplate = new Template("<img class=\"newImgSmall\" src=\"#{newImgSrc}\" alt=\"#{newImgAlt}\" border=\"0\" />");
	perUnitTemplate = new Template("<span class=\"perProduct\" style=\"margin-left:2px\">/ #{unit}</span>");
	//NLP templates
	nlpImgTemplate = new Template("<img src=\"#{nlpImgSrc}\" class=\"nlpImage\" border=\"0\" />");
	nlpStrikeTemplate = new Template("<span class=\"troPrice_compare priceStrikethrough\">#{previousPrice}#{perUnit}</span>");
	nlpNonStrikeTemplate = new Template("<div class=\"troPrice_compare\"><span>"+$F("insteadOf")+" </span>#{previousPrice}#{perUnit}</div>");
	priceTemplate = new Template("<div class=\"prodPriceMain\"><span class=\"prodPriceCompare\">#{price}#{perUnit}</span></div>");
	troPriceTemplate = new Template("<div class=\"prodPriceMain\"><span class=\"prodPriceCompare priceFieldClr\">#{price}#{perUnit}</span></div>");
	//TRO templates
	troTemplate = new Template("<div class=\"troPriceDisclaimer_compare\">#{troStartDate} - #{troEndDate} <span>"+$F("disclaimer")+"</span></div>");
	//ikeaFamily, familyPrice
	familyPriceTemplate = new Template("<div class=\"prodFamily\">"+$F("r4_ikea_family")+"</div> "
			+"<div class=\"prodPriceFamily\">#{familyPrice}#{perUnit}<br/></div>");
    regularPriceTemplate = new Template ("<div class=\"regularPriceHead\"> " + js_fn_REGULAR_PRICE + "</div>");
    comparisonUnitPriceTemplate = new Template(js_fn_TXT_UNITPRICE);
    comparisonPricePerTemaplte = new Template(js_fn_TXT_PRICE+"#{comparisonUnit}");
    comparisonFamPriceStartTemplate = new Template("<div id=\"comparisonFamContainer\"><span>");
    comparisonFamPriceEndTemplate = new Template(" </span><span id=\"comparisonFamPrice\" class=\"priceField2\">#{comparisonFamilyPrice}</span></div>");
	comparisonPriceStartTemplate = new Template("<div id=\"comparisonContainer\"><span>");
    comparisonPriceEndTemplate = new Template("</span><span id=\"comparisonPrice\" class=\"priceField2\">#{comparisonPrice}</span></div>");
    //WEEE prf and price without prf
	weeePrfTemplate = new Template("<div id=\"prf#{partNumber}\" class=\"prfcontainer\">"
			+"<div class=\"lessprice\">#{weee_less_prf} #{priceWithNoPrfCharge}</div>"
			+"<div class=\"prflist\"><a href=\"javascript:openPrfPopup('prf#{partNumber}')\">#{weee_prf}</a><span>&nbsp;#{prfCharge}</span></div>"
			+"</div>");
	weeePrfBtiTemplate = new Template("<div id=\"prf#{partNumber}\" class=\"prfcontainer bti\">"
			+"<div class=\"lessprice\">#{weee_less_prf} #{priceWithNoPrfCharge}</div>"
			+"<div class=\"prflist\"><a href=\"javascript:openPrfPopup('prf#{partNumber}')\">#{weee_prf}</a><span>&nbsp;#{prfCharge}</span></div>"
			+"</div>");
	cartContainerTemplate = new Template("<div id=\"cartContainer#{partNumber}\"   class=\"cartContainer moreInfo\">"
		+"#{warningImage}"
		+"#{calTitle20Msg}"
		+"#{size}"
		+"#{moreOptions}"
	    +" <div class=\"buttonsCompareContainer\">"
		+" <div class=\"buttonsContainer\">"
		+"<div class=\"buttonContainer\"><a onclick=\"activateShopListPopup('addToCart',$('popupAddToCart#{partNumber}'),"+storeId+","+langId+");return false;\" href=\"#\" class=\"button\" id=\"popupAddToCart#{partNumber}\"><div class=\"buttonLeft\">&nbsp;</div><div class=\"buttonCaption\">"+$F("fw10_comparison_add_to_cart")+"</div><div class=\"buttonRight\">&nbsp;</div></a></div>"				    
		+"<a href=\"#\" id=\"popupShoppingList#{partNumber}\" onclick=\"activateShopListPopup('add',$('popupShoppingList#{partNumber}'),"+storeId+","+langId+");return false;\" class=\"listLink\">"+$F("fw10_comparison_add_to_shoppingList")+"</a>"			    
		+"</div>"
		+"</div>"
		+ "#{sscInclude}"
		+"</div>");
	cartContainerNonBuyableTemplate = new Template("<div id=\"cartContainer#{partNumber}\"   class=\"cartContainer moreInfo\">"
	    		+"#{warningImage}"
	    		+"#{calTitle20Msg}"
				+"#{size}"
				+"#{moreOptions}"
	    +" <div class=\"buttonsCompareContainer\">"
		+" <div class=\"buttonsContainer\">"
		+"<a href=\"#\" id=\"popupShoppingList#{partNumber}\" onclick=\"activateShopListPopup('add',$('popupShoppingList#{partNumber}'),"+storeId+","+langId+");return false;\" class=\"listLink\">"+$F("fw10_comparison_add_to_shoppingList")+"</a>"			    
		+ "<div class=\"compare\"><input type=\"hidden\" id=\"compare_#{partNumber}\" value=\"\"/></div>"
		+"</div>"
		+"</div>"
		+ "#{sscInclude}"
		+"</div>");
	sscInclude = new Template("<span class=\"linkContainer\">"
		+"<a class=\"moreLink\" href=\"#{link}\">"+$F("r4_more_products")+"</a>"
		+"</span>  ");	
	cartInclude = new Template("<a href=\"#{pipLink}\" >"  
				+"<img border=\"0\" alt=\"#{cartText}\" class=\"cart\" "
				+"	src=\"/ms/img/product_list/#{cartImage}\" />"
		+"</a> ");
    //section, linkText	
	toggleTemplate = new Template("<a href=\"#\" onclick=\"toggleSection('#{section}');return false;\">#{linkText}</a>");
	//size 
	sizeTemplate = new Template("<div id=\"compare_size_#{id}\">#{dimension}</div>");
	sizeDataDimensionTemplate = new Template("<span class=\"prodDimension\">#{text}</span>");
	sizeDataTemplate = new Template("#{dimension}#{moreInfo}");
	moreOptionsTemplate = new Template("<a title=\""+$F("r4_more_options_for")+"\" "
			+"	href=\"#{pipLink}\">"
			+"	<span class=\"moreOptions\">"+$F("r4_more_options")+"</span>"
		+"</a>");
	warningImgTemplate = new Template('<img class="warningImg" src="#{attrImage1}" alt="#{attrValue}" border="0" />');
	calTitle20Template = new Template("<div class='lightSourceMiniPIP'>"+$F("californiaTitle20LegalText")+$F("californiaTitle20UrlText")
		+"<div><a href='"+$F("californiaTitle20UrlRef")+"'>"+$F('californiaMoreInformation')+"</a></div></div>");
}


var $namespace = function(name, separator, container) {
    var ns = name.split(separator || '.'), o = container || window, i, len;
    for (i = 0, len = ns.length; i < len; i++) {
        o = o[ns[i]] = o[ns[i]] || {};
    }
    return o;
};


/** @namespace  */
$namespace('com.ikea.irw.flash');//com, ikea, irw, flash, Constants
/**
 * 
 * Constants values 
 * 
 * @constructor
 * 
 */
com.ikea.irw.flash.Constants = {
    REQUIRED_FLASH_VERSION: {MAJOR: 10, MINOR: 0, REVISION: 0},
    GET_FLASH_URL: 'http://www.adobe.com/go/getflashplayer',
	htmlEnabled: false	
};//com, ikea, irw, flash, Util
/**
 * 
 * Utility class for handling Flash
 * 
 * @classDescription This class contains utility function for embedding flash
 * @constructor
 * @version 1.0.0
 * 
 */
com.ikea.irw.flash.Util = {
    
	/**
     * See if the Flash version is valid
     * @private
     * @return Boolean, true if the version is high enough. Else false.
     */
    isValid : function () {
        var installedVersion = deconcept.SWFObjectUtil.getPlayerVersion();
        if (installedVersion.major > com.ikea.irw.flash.Constants.REQUIRED_FLASH_VERSION.MAJOR || (installedVersion.major === com.ikea.irw.flash.Constants.REQUIRED_FLASH_VERSION.MAJOR && installedVersion.minor >= com.ikea.irw.flash.Constants.REQUIRED_FLASH_VERSION.MINOR) || (installedVersion.major === com.ikea.irw.flash.Constants.REQUIRED_FLASH_VERSION.MAJOR && installedVersion.minor === com.ikea.irw.flash.Constants.REQUIRED_FLASH_VERSION.MINOR && installedVersion.rev > com.ikea.irw.flash.Constants.REQUIRED_FLASH_VERSION.REVISION)) {
            return true;
        }
        return false;
    },
    
    /**
     * Rewrite URL from non-JavaScript to JavaScript and flash URL with deep link.
     *
     */
    rewrite : function () {
        if (this.isValid()) {
            var pageVisualMatch = document.location.pathname.match(/(.*)\/visual\/(.*)/);
			var pageQueryString = document.location.search;
            if (pageVisualMatch) {
				if(pageQueryString=="") {
					document.location.replace(pageVisualMatch[1] + '/#/' + pageVisualMatch[2]);
				} else {
					document.location.replace(pageVisualMatch[1] + '/' + pageQueryString + '#/' + pageVisualMatch[2]);
				}
            }
        }
    },
    displayDownload : function () {
        var thisElements, container, text, link;
        thisElements = $$(".downloadFlashReplace");
        thisElements.each(function (e) {
            container = document.createElement('div');
            container.className = "container";
            text = document.createElement('p');
            text.className = "text";
            link = document.createElement('a');
            link.href = com.ikea.irw.flash.Constants.GET_FLASH_URL;
            link.rel = "nofollow";
            link.insert(com.ikea.irw.flash.Translations.downloadClickText);
            text.insert(link);
            text.insert(' ' + com.ikea.irw.flash.Translations.downloadText);
            container.insert(text);
            e.insert(container);
            e.className = "downloadFlash";
        });
    }
};

if (/\/visual\//.test(window.location.pathname)) {
    com.ikea.irw.flash.Util.rewrite();
}
Event.observe(document, "dom:loaded", function () {
    com.ikea.irw.flash.Util.displayDownload();
});/*  SiteCatalyst code version : H.22.1.
   Copyright 1996-2011 Adobe, Inc. All Rights Reserved
   More info available at  http://www.omniture.com  */
/************************ ADDITIONAL FEATURES ************************
     Plugins
*/

var s;

/* IKEA Functions */
var irw_fh = function(h) {
    try {
        var r = /^javascript\:[\ ]*window\.open\(\'([^\']+)\'.*$/;
        
        if (r.test(h)) {
            return h.replace(r, "$1");
        } else {
            return h;
        }
    } catch(e) {
        return h;
    }
};
/* END - IKEA Functions */


function s_doPlugins(s) {
    
s.events=s.getCartOpen("s_scOpen");

//Genesis - (Bronto)
if(!s.campaign){
    s.campaign=s.getQueryParam('bro_MID')
}

//General external campaigns (cid)
if(!s.campaign){
    s.campaign=s.getQueryParam('cid')
    s.campaign=s.getValOnce(s.campaign,'ecamp',0)
}

//Genesis (Bronto) recipient ID
if(!s.eVar57){
    s.eVar57=s.getQueryParam('bro_RID')
}

s.eVar14 = s.crossVisitParticipation(s.campaign,'s_cpm','90','5','>','purchase');

if(!s.eVar2){
    s.eVar2=s.getQueryParam('icid')
    s.eVar2=s.getValOnce(s.eVar2,'icamp',0)
}
if (s.eVar2) {
    s.eVar3="internal campaign"
    s.eVar3=s.getValOnce(s.eVar3,'omtrpfm',0)  
}

// dynamic picking of TZone
var d = new Date()
var gmtHours = -d.getTimezoneOffset()/60;
omtrtimezone='0';
if (gmtHours>0) 
{
omtrtimezone='+' +gmtHours;
}
else
{
omtrtimezone='-' +gmtHours;
}

// dynamic picking of TZone ends

/* TimeParting GMT */
s.prop14=s.eVar19=s.getTimeParting('h',omtrtimezone,new Date().getFullYear()); // Set hour 
s.prop15=s.eVar20=s.getTimeParting('d',omtrtimezone,new Date().getFullYear()); // Set day
s.prop16=s.eVar21=s.getTimeParting('w',omtrtimezone,new Date().getFullYear()); // Set Weekend / Weekday


/*Copy Settings*/

if(s.prop8){ 
        s.eVar7=s.prop8
} 



if(s.prop37){ 
        s.eVar15=s.prop37
    s.eVar15=s.getValOnce(s.eVar15,'s_evar15',0)  
} 


if(s.prop10){
        s.eVar10=s.prop10
     
} 


if(s.prop11){ 
        s.eVar11=s.prop11
     
} 

if(s.prop53){ 
      s.eVar53=s.prop53
}

if(s.prop23){ 
        s.eVar12=s.prop23
     
}

if(s.prop13){ 
        s.eVar13=s.prop13
    s.events=s.apl(s.events,'event7',',',1)
    s.eVar13=s.getValOnce(s.eVar13,'s_evar13',0)  
} 


if(s.eVar17){ 
    s.events=s.apl(s.events,'event11',',',1)
      
} 


if(s.prop17){ 
        s.eVar22=s.prop17
     
} 

//Populate Downloads in variables as well
var url=s.downloadLinkHandler('exe,zip,wav,mp3,mov,mpg,avi,wmv,pdf,doc,docx,xls,xlsx,ppt,pptx');
if(url){
    s.linkTrackVars="eVar9,prop9,events";
    s.prop9=url;
    s.eVar9=url;    
    s.linkTrackEvents="event5";
    s.events=s.apl(s.events,'event5',',',1)
}

if(!s.prop28)
{s.prop28="anonymous"};


if(s.prop28){ 
s.eVar24=s.prop28
    s.eVar24=s.getValOnce(s.eVar24,'s_evar24',0)  
}
if(s.prop31){ 
    //setting encrypted family card number to eVar25
        s.eVar25=s.prop31
    s.eVar25=s.getValOnce(s.eVar25,'s_evar25',0)  
}

// set on first page of visit with new max versions
s.detectRIA('s_ria','prop33','','','','');

/*getDaysSinceLastVisit v1.1 */
s.prop35=s.getDaysSinceLastVisit('s_lv');

/*getNewRepeat 1.0*/
s.prop34=s.getNewRepeat();

    
//Set the pageName in prop20 based on the name of the HTML if it's not set in the Flash file
if (!s.prop19 && s.prop19 !== null) {
    s.prop20 = s.pageName;
}


if(!s.prop2)
{s.prop2="n/a"};

/* Channel Manager */                                            
		s.cmpPrefix=""
		s.channelManager('cid','','','','cm_dl','');
		if (s._keywords=="Keyword Unavailable") s._channel="Google Encrypted Search";
		if (s.inList(document.referrer, s.googleProductSearch,",",1,1)) s._channel="Google Product Search";
		if (s.inList(document.referrer, s.googleImageSearch,",",1,1)) s._channel="Google Image Search";
		if (s._channel=="Natural Search") s._channel=s._channel.replace(/Natural Search/,"Organic");
		if (s._channel=="Paid Search") s._channel=s._channel.replace(/Paid Search/,"Paid");
		s._channel=(s._campaignID==""&&s.inList(s._referringDomain, s.socialMediaRef,",",1,1))?"Social Media":s._channel;
		s.cmpPrefix=(s.inList(s._keywords, s.brandedKeywords,",",1,1))?"Branded ":"Non-branded ";
		s.cmpPrefix=(s._channel=="Organic"||s._channel=="Paid")?s.cmpPrefix:"";
		s.eVar43=(s._channel!="")?s.cmpPrefix+s._channel:"";

/* Channel Stacking */
	s.eVar44=s.crossVisitParticipation(s.eVar43,'s_ev44','30','5','>','',1);

/* Plugin Example: getPreviousValue v1.0 */
   	s.prop51=s.getPreviousValue(s.pageName,'gpv_p51',''); 

/* getPercentPageView v1.5 */
	s.prop56=s.getPercentPageViewed();


}

function set_s_var(){

/* NB! The s_account variable will get set in the header that is loading this file.

var s_account="ikeasedev"
*/
s=s_gi(s_account)

/************************** CONFIG SECTION **************************/
/* Country and Language as set by the adapter. */


s.prop8 = s_country;
s.prop17 = s_language;
s.prop41  = s_urls;  //  Added 

/* Define channels, google image/product search and branded keywords */
s.brandedKeywords="ikea,ikas,ikia,ikes,ike,ika"
s.socialMediaRef="facebook.com,twitter.com"
s.googleImageSearch="imgres,imgurl,imgrefurl,images.google"
s.googleProductSearch="productsearch,tbm=shop"

/* You may add or alter any code config here. */
s.cookieDomainPeriods="2"
/* Conversion Config */
s.currencyCode="EUR"
/* Link Tracking Config */
s.trackDownloadLinks=true
s.trackExternalLinks=true
s.trackInlineStats=true
s.linkDownloadFileTypes="exe,zip,wav,mp3,mov,mpg,avi,wmv,pdf,doc,docx,xls,xlsx,ppt,pptx"
s.linkInternalFilters="javascript:,ikea.com,ikeadt.com,193.108.42.79"
s.linkLeaveQueryString=false
s.linkTrackVars="None"
s.linkTrackEvents="None"
/* Plugin Config */
s.usePlugins=true

s.doPlugins=s_doPlugins
/************************** PLUGINS SECTION *************************/
/* You may insert any plugins you wish to use here.                 */
/*
 * Utility: inList v1.1 - find out if a value is in a list
 */
s.inList=new Function("v","l","d","tlc","mt",""
+"var s=this,ar=Array(),i=0,d=(d)?d:',',v=(tlc)?v.toLowerCase():v,l=("
+"tlc)?l.toLowerCase():l,mt=(mt)?mt:0;if(typeof(l)=='string'){if(s.sp"
+"lit)ar=s.split(l,d); else if(l.split)ar=l.split((d)); else return-1;}"
+" else ar=l;while(i<ar.length){if(!mt){if(v==ar[i])return true;} els"
+"e if(mt){if(v.indexOf(ar[i])!=-1)return true;}i++;}return false;");
/*
 * Plugin: getQueryParam 2.4
 */
s.getQueryParam=new Function("p","d","u","h",""
+"var s=this,v='',i,j,t;d=d?d:'';u=u?u:(s.pageURL?s.pageURL:s.wd.loca"
+"tion);if(u=='f')u=s.gtfs().location;while(p){i=p.indexOf(',');i=i<0"
+"?p.length:i;t=s.p_gpv(p.substring(0,i),u+'',h);if(t){t=t.indexOf('#"
+"')>-1?t.substring(0,t.indexOf('#')):t;}if(t)v+=v?d+t:t;p=p.substrin"
+"g(i==p.length?i:i+1)}return v");
s.p_gpv=new Function("k","u","h",""
+"var s=this,v='',q;j=h==1?'#':'?';i=u.indexOf(j);if(k&&i>-1){q=u.sub"
+"string(i+1);v=s.pt(q,'&','p_gvf',k)}return v");
s.p_gvf=new Function("t","k",""
+"if(t){var s=this,i=t.indexOf('='),p=i<0?t:t.substring(0,i),v=i<0?'T"
+"rue':t.substring(i+1);if(p.toLowerCase()==k.toLowerCase())return s."
+"epa(v)}return''");
/*
 * Plugin: getValOnce 0.2 - get a value once per session or number of days
 */
s.getValOnce=new Function("v","c","e",""
+"var s=this,k=s.c_r(c),a=new Date;e=e?e:0;if(v){a.setTime(a.getTime("
+")+e*86400000);s.c_w(c,v,e?a:0);}return v==k?'':v");
/*
 * Utility Function: split v1.5 - split a string (JS 1.0 compatible)
 */
s.split=new Function("l","d",""
+"var i,x=0,a=new Array;while(l){i=l.indexOf(d);i=i>-1?i:l.length;a[x"
+"++]=l.substring(0,i);l=l.substring(i+d.length);}return a");
/*
 * Plugin: downloadLinkHandler 0.5 - identify and report download links
 */
s.downloadLinkHandler=new Function("p",""
+"var s=this,h=s.p_gh(),n='linkDownloadFileTypes',i,t;h=irw_fh(h);if("
+"!h||(s.linkType&&(h||s.linkName)))return '';i=h.indexOf('?');t=s[n]"
+";s[n]=p?p:t;if(s.lt(h)=='d')s.linkType='d';else h='';s[n]=t;return "
+"h;");
/*
 * Time Parting Plugin - the code has been modified to get the users time
 */
s.getTimeParting=new Function("t","z","y",""
+"dc=new Date('1/1/2000');f=15;ne=8;if(dc.getDay()!=6||"
+"dc.getMonth()!=0){return'Data Not Available'}else{;z=parseInt(z);"
+"if(y=='2009'){f=8;ne=1};gmar=new Date('3/1/'+y);dsts=f-gmar.getDay("
+");gnov=new Date('11/1/'+y);dste=ne-gnov.getDay();spr=new Date('3/'"
+"+dsts+'/'+y);fl=new Date('11/'+dste+'/'+y);cd=new Date();"
+";utc=cd.getTime()"
+";tz=new Date(utc + (3600000*z));thisy=tz.getFullYear("
+");var days=['Sunday','Monday','Tuesday','Wednesday','Thursday','Fr"
+"iday','Saturday'];if(thisy!=y){return'Data Not Available'}else{;thi"
+"sh=tz.getHours();thismin=tz.getMinutes();thisd=tz.getDay();var dow="
+"days[thisd];var ap='AM';var dt='Weekday';var mint='00';if(thismin>3"
+"0){mint='30'}if(thish>=12){ap='PM';thish=thish-12};if (thish==0){th"
+"ish=12};if(thisd==6||thisd==0){dt='Weekend'};var timestring=thish+'"
+":'+mint+ap;var daystring=dow;var endstring=dt;if(t=='h'){return tim"
+"estring}if(t=='d'){return daystring};if(t=='w'){return en"
+"dstring}}};"
);

/*
 * Utility Function: p_gh
 */
s.p_gh=new Function(""
+"var s=this;if(!s.eo&&!s.lnk)return '';var o=s.eo?s.eo:s.lnk,y=s.ot("
+"o),n=s.oid(o),x=o.s_oidt;if(s.eo&&o==s.eo){while(o&&!n&&y!='BODY'){"
+"o=o.parentElement?o.parentElement:o.parentNode;if(!o)return '';y=s."
+"ot(o);n=s.oid(o);x=o.s_oidt}}return o.href?o.href:'';");
/*
 * Plugin Utility: apl v1.1
 */
s.apl=new Function("l","v","d","u",""
+"var s=this,m=0;if(!l)l='';if(u){var i,n,a=s.split(l,d);for(i=0;i<a."
+"length;i++){n=a[i];m=m||(u==1?(n==v):(n.toLowerCase()==v.toLowerCas"
+"e()));}}if(!m)l=l?l+d+v:v;return l");

/* crossVisitParticipation*/                                                                              
                                                                                                        
s.crossVisitParticipation = new Function("v","cn","ex","ct","dl","ev",""                          
+"var s=this;var ay=s.split(ev,',');for(var u=0;u<ay.length;u++){if(s"                     
+".events&&s.events.indexOf(ay[u])!=-1){s.c_w(cn,'');return '';}}if(!"                     
+"v||v=='')return '';var arry=new Array();var a=new Array();var c=s.c"                     
+"_r(cn);var g=0;var h=new Array();if(c&&c!='') arry=eval(c);var e=ne"                     
+"w Date();e.setFullYear(e.getFullYear()+5);if(arry.length>0&&arry[ar"                     
+"ry.length-1][0]==v)arry[arry.length-1]=[v, new Date().getTime()];el"                     
+"se arry[arry.length]=[v, new Date().getTime()];var data=s.join(arry"                     
+",{delim:',',front:'[',back:']',wrap:'\\''});var start=arry.length-c"                     
+"t < 0?0:arry.length-ct;s.c_w(cn,data,e);for(var x=start;x<arry.leng"                     
+"th;x++){var diff=Math.round(new Date()-new Date(parseInt(arry[x][1]"                     
+")))/86400000;if(diff<ex){h[g]=arry[x][0];a[g++]=arry[x];}}var r=s.j"                     
+"oin(h,{delim:dl});return r;");
/*
 * s.join: 1.0 - s.join(v,p)
 */

s.join = new Function("v","p",""
+"var s = this;var f,b,d,w;if(p){f=p.front?p.front:'';b=p.back?p.back"
+":'';d=p.delim?p.delim:'';w=p.wrap?p.wrap:'';}var str='';for(var x=0"
+";x<v.length;x++){if(typeof(v[x])=='object' )str+=s.join( v[x],p);el"
+"se str+=w+v[x]+w;if(x<v.length-1)str+=d;}return f+str+b;");
/*
 * Plugin: getCartOpen v 1.1 - returns events string with scOpen added
 * the first time scAdd occurs during a visit.
 */
s.getCartOpen=new Function("c",""
+"var s=this,t=new Date,e=s.events?s.events:'',i=0;t.setTime(t.getTim"
+"e()+1800000);if(s.c_r(c)||e.indexOf('scOpen')>-1){if(!s.c_w(c,1,t))"
+"{s.c_w(c,1,0)}}else{if(e.indexOf('scAdd')>-1){if(s.c_w(c,1,t)){i=1}"
+"else if(s.c_w(c,1,0)){i=1}}}if(i){e=e+',scOpen'}return e");

/*
 * Plugin: getAndPersistValue 0.3 - get a value on every page
 */
s.getAndPersistValue=new Function("v","c","e",""
    +"var s=this,a=new Date;"
    +"e=e?e:0;"
    +"a.setTime(a.getTime()+e*86400000);"
    +"if(v)s.c_w(c,v,e?a:0);"
    +"return s.c_r(c);"
);
/*
 * Plugin: getNewRepeat 1.0 - Return whether user is new or repeat
 */
s.getNewRepeat=new Function(""
+"var s=this,e=new Date(),cval,ct=e.getTime(),y=e.getYear();e.setTime"
+"(ct+30*24*60*60*1000);cval=s.c_r('s_nr');if(cval.length==0){s.c_w("
+"'s_nr',ct,e);return 'New';}if(cval.length!=0&&ct-cval<30*60*1000){s"
+".c_w('s_nr',ct,e);return 'New';}if(cval<1123916400001){e.setTime(cv"
+"al+30*24*60*60*1000);s.c_w('s_nr',ct,e);return 'Repeat';}else retur"
+"n 'Repeat';");
/*
 * Plugin: Days since last Visit 1.1.H - capture time from last visit
 */
s.getDaysSinceLastVisit=new Function("c",""
+"var s=this,e=new Date(),es=new Date(),cval,cval_s,cval_ss,ct=e.getT"
+"ime(),day=24*60*60*1000,f1,f2,f3,f4,f5;e.setTime(ct+3*365*day);es.s"
+"etTime(ct+30*60*1000);f0='Cookies Not Supported';f1='First Visit';f"
+"2='More than 30 days';f3='More than 7 days';f4='Less than 7 days';f"
+"5='Less than 1 day';cval=s.c_r(c);if(cval.length==0){s.c_w(c,ct,e);"
+"s.c_w(c+'_s',f1,es);}else{var d=ct-cval;if(d>30*60*1000){if(d>30*da"
+"y){s.c_w(c,ct,e);s.c_w(c+'_s',f2,es);}else if(d<30*day+1 && d>7*day"
+"){s.c_w(c,ct,e);s.c_w(c+'_s',f3,es);}else if(d<7*day+1 && d>day){s."
+"c_w(c,ct,e);s.c_w(c+'_s',f4,es);}else if(d<day+1){s.c_w(c,ct,e);s.c"
+"_w(c+'_s',f5,es);}}else{s.c_w(c,ct,e);cval_ss=s.c_r(c+'_s');s.c_w(c"
+"+'_s',cval_ss,es);}}cval_s=s.c_r(c+'_s');if(cval_s.length==0) retur"
+"n f0;else if(cval_s!=f1&&cval_s!=f2&&cval_s!=f3&&cval_s!=f4&&cval_s"
+"!=f5) return '';else return cval_s;");
/*
 * Plugin: getPreviousValue v1.0 - return previous value of designated
 *   variable (requires split utility)
 */
s.getPreviousValue=new Function("v","c","el",""
+"var s=this,t=new Date,i,j,r='';t.setTime(t.getTime()+1800000);if(el"
+"){if(s.events){i=s.split(el,',');j=s.split(s.events,',');for(x in i"
+"){for(y in j){if(i[x]==j[y]){if(s.c_r(c)) r=s.c_r(c);v?s.c_w(c,v,t)"
+":s.c_w(c,'no value',t);return r}}}}}else{if(s.c_r(c)) r=s.c_r(c);v?"
+"s.c_w(c,v,t):s.c_w(c,'no value',t);return r}");

/*
 * Plugin: detectRIA v0.1 - detect and set Flash, Silverlight versions
 */
s.detectRIA=new Function("cn", "fp", "sp", "mfv", "msv", "sf", ""
+"cn=cn?cn:'s_ria';msv=msv?msv:2;mfv=mfv?mfv:10;var s=this,sv='',fv=-"
+"1,dwi=0,fr='',sr='',w,mt=s.n.mimeTypes,uk=s.c_r(cn),k=s.c_w('s_cc',"
+"'true',0)?'Y':'N';fk=uk.substring(0,uk.indexOf('|'));sk=uk.substrin"
+"g(uk.indexOf('|')+1,uk.length);if(k=='Y'&&s.p_fo('detectRIA')){if(u"
+"k&&!sf){if(fp){s[fp]=fk;}if(sp){s[sp]=sk;}return false;}if(!fk&&fp)"
+"{if(s.pl&&s.pl.length){if(s.pl['Shockwave Flash 2.0'])fv=2;x=s.pl['"
+"Shockwave Flash'];if(x){fv=0;z=x.description;if(z)fv=z.substring(16"
+",z.indexOf('.'));}}else if(navigator.plugins&&navigator.plugins.len"
+"gth){x=navigator.plugins['Shockwave Flash'];if(x){fv=0;z=x.descript"
+"ion;if(z)fv=z.substring(16,z.indexOf('.'));}}else if(mt&&mt.length)"
+"{x=mt['application/x-shockwave-flash'];if(x&&x.enabledPlugin)fv=0;}"
+"if(fv<=0)dwi=1;w=s.u.indexOf('Win')!=-1?1:0;if(dwi&&s.isie&&w&&exec"
+"Script){result=false;for(var i=mfv;i>=3&&result!=true;i--){execScri"
+"pt('on error resume next: result = IsObject(CreateObject(\"Shockwav"
+"eFlash.ShockwaveFlash.'+i+'\"))','VBScript');fv=i;}}fr=fv==-1?'flas"
+"h not detected':fv==0?'flash enabled (no version)':'flash '+fv;}if("
+"!sk&&sp&&s.apv>=4.1){var tc='try{x=new ActiveXObject(\"AgControl.A'"
+"+'gControl\");for(var i=msv;i>0;i--){for(var j=9;j>=0;j--){if(x.is'"
+"+'VersionSupported(i+\".\"+j)){sv=i+\".\"+j;break;}}if(sv){break;}'"
+"+'}}catch(e){try{x=navigator.plugins[\"Silverlight Plug-In\"];sv=x'"
+"+'.description.substring(0,x.description.indexOf(\".\")+2);}catch('"
+"+'e){}}';eval(tc);sr=sv==''?'silverlight not detected':'silverlight"
+" '+sv;}if((fr&&fp)||(sr&&sp)){s.c_w(cn,fr+'|'+sr,0);if(fr)s[fp]=fr;"
+"if(sr)s[sp]=sr;}}");

/*
 * Plugin: getPercentPageViewed v1.5
 */
s.handlePPVevents=new Function("",""
+"var s=s_c_il["+s._in+"];if(!s.getPPVid)return;var dh=Math.max(Math."
+"max(s.d.body.scrollHeight,s.d.documentElement.scrollHeight),Math.ma"
+"x(s.d.body.offsetHeight,s.d.documentElement.offsetHeight),Math.max("
+"s.d.body.clientHeight,s.d.documentElement.clientHeight)),vph=s.wd.i"
+"nnerHeight||(s.d.documentElement.clientHeight||s.d.body.clientHeigh"
+"t),st=s.wd.pageYOffset||(s.wd.document.documentElement.scrollTop||s"
+".wd.document.body.scrollTop),vh=st+vph,pv=Math.min(Math.round(vh/dh"
+"*100),100),c=s.c_r('s_ppv'),a=(c.indexOf(',')>-1)?c.split(',',4):[]"
+",id=(a.length>0)?(a[0]):escape(s.getPPVid),cv=(a.length>1)?parseInt"
+"(a[1]):(0),p0=(a.length>2)?parseInt(a[2]):(pv),cy=(a.length>3)?pars"
+"eInt(a[3]):(0),cn=(pv>0)?(id+','+((pv>cv)?pv:cv)+','+p0+','+((vh>cy"
+")?vh:cy)):'';s.c_w('s_ppv',cn);");
s.getPercentPageViewed=new Function("pid",""
+"pid=pid?pid:'-';var s=this,ist=!s.getPPVid?true:false;if(typeof(s.l"
+"inkType)!='undefined'&&s.linkType!='e')return'';var v=s.c_r('s_ppv'"
+"),a=(v.indexOf(',')>-1)?v.split(',',4):[];if(a.length<4){for(var i="
+"3;i>0;i--){a[i]=(i<a.length)?(a[i-1]):('');}a[0]='';}a[0]=unescape("
+"a[0]);s.getPPVpid=pid;s.c_w('s_ppv',escape(pid));if(ist){s.getPPVid"
+"=(pid)?(pid):(s.pageName?s.pageName:document.location.href);s.c_w('"
+"s_ppv',escape(s.getPPVid));if(s.wd.addEventListener){s.wd.addEventL"
+"istener('load',s.handlePPVevents,false);s.wd.addEventListener('scro"
+"ll',s.handlePPVevents,false);s.wd.addEventListener('resize',s.handl"
+"ePPVevents,false);}else if(s.wd.attachEvent){s.wd.attachEvent('onlo"
+"ad',s.handlePPVevents);s.wd.attachEvent('onscroll',s.handlePPVevent"
+"s);s.wd.attachEvent('onresize',s.handlePPVevents);}}return(pid!='-'"
+")?(a):(a[1]);");
/********************************************************************
 *
 * channelManager v2.45 - includes Google's new encrypted search
 *
 *******************************************************************/
/*
 * channelManager v2.45 - Tracking External Traffic
 */
s.channelManager=new Function("a","b","c","d","e","f",""
+"var s=this,A,B,g,l,m,M,p,q,P,h,k,u,S,i,O,T,j,r,t,D,E,F,G,H,N,U,v=0,"
+"X,Y,W,n=new Date;n.setTime(n.getTime()+1800000);if(e){v=1;if(s.c_r("
+"e))v=0;if(!s.c_w(e,1,n))s.c_w(e,1,0);if(!s.c_r(e))v=0;}g=s.referrer"
+"?s.referrer:document.referrer;g=g.toLowerCase();if(!g)h=1;i=g.index"
+"Of('?')>-1?g.indexOf('?'):g.length;j=g.substring(0,i);k=s.linkInter"
+"nalFilters.toLowerCase();k=s.split(k,',');l=k.length;for(m=0;m<l;m+"
+"+){B=j.indexOf(k[m])==-1?'':g;if(B)O=B;}if(!O&&!h){p=g;U=g.indexOf("
+"'//');q=U>-1?U+2:0;Y=g.indexOf('/',q);r=Y>-1?Y:i;t=g.substring(q,r)"
+";t=t.toLowerCase();u=t;P='Referrers';S=s.seList+'>'+s._extraSearchE"
+"ngines;if(d==1){j=s.repl(j,'oogle','%');j=s.repl(j,'ahoo','^');g=s."
+"repl(g,'as_q','*');}A=s.split(S,'>');T=A.length;for(i=0;i<A.length;"
+"i++){D=A[i];D=s.split(D,'|');E=s.split(D[0],',');for(G=0;G<E.length"
+";G++){H=j.indexOf(E[G]);if(H>-1){if(D[2])N=u=D[2];else N=t;if(d==1)"
+"{N=s.repl(N,'#',' - ');g=s.repl(g,'*','as_q');N=s.repl(N,'^','ahoo'"
+");N=s.repl(N,'%','oogle');}i=s.split(D[1],',');for(k=0;k<i.length;k"
+"++){M=s.getQueryParam(i[k],'',g).toLowerCase();if(M)break;}}}}}if(!"
+"O||f!='1'){O=s.getQueryParam(a,b);if(O){u=O;if(M)P='Paid Search';el"
+"se P='Paid Non-Search';}if(!O&&N){u=N;P='Natural Search'}}if(h==1&&"
+"!O&&v==1)u=P=t=p='Direct Load';X=M+u+t;c=c?c:'c_m';if(c!='0'){X=s.g"
+"etValOnce(X,c,0);}g=s._channelDomain;if(g&&X){k=s.split(g,'>');l=k."
+"length;for(m=0;m<l;m++){q=s.split(k[m],'|');r=s.split(q[1],',');S=r"
+".length;for(T=0;T<S;T++){Y=r[T];Y=Y.toLowerCase();i=j.indexOf(Y);if"
+"(i>-1)P=q[0];}}}g=s._channelParameter;if(g&&X){k=s.split(g,'>');l=k"
+".length;for(m=0;m<l;m++){q=s.split(k[m],'|');r=s.split(q[1],',');S="
+"r.length;for(T=0;T<S;T++){U=s.getQueryParam(r[T]);if(U)P=q[0]}}}g=s"
+"._channelPattern;if(g&&X){k=s.split(g,'>');l=k.length;for(m=0;m<l;m"
+"++){q=s.split(k[m],'|');r=s.split(q[1],',');S=r.length;for(T=0;T<S;"
+"T++){Y=r[T];Y=Y.toLowerCase();i=O.toLowerCase();H=i.indexOf(Y);if(H"
+"==0)P=q[0];}}}if(X)M=M?M:N?'Keyword Unavailable':'n/a';p=X&&p?p:'';"
+"t=X&&t?t:'';N=X&&N?N:'';O=X&&O?O:'';u=X&&u?u:'';M=X&&M?M:'';P=X&&P?"
+"P:'';s._referrer=p;s._referringDomain=t;s._partner=N;s._campaignID="
+"O;s._campaign=u;s._keywords=M;s._channel=P;");
s.seList="altavista.co,altavista.de|q,r>.aol.,suche.aolsvc.de|q,quer"
+"y>ask.jp,ask.co|q,ask>www.baidu.com|wd>daum.net,search.daum.net|q>g"
+"oogle.|q,as_q>icqit.com|q>bing.com|q>myway.co"
+"m|searchfor>naver.com,search.naver.com|query>netscape.com|query,sea"
+"rch>reference.com|q>seznam|w>abcsok.no|q>tiscali.it,www.tiscali.co."
+"uk|key,query>virgilio.it|qs>yahoo.com,yahoo.co.jp|p,va>yandex|text>"
+"search.cnn.com|query>search.earthlink.net|q>search.comcast.net|q>se"
+"arch.rr.com|qs>optimum.net|q";
 
s.p_fo=new Function("n",""
+"var s=this;if(!s.__fo){s.__fo=new Object;}if(!s.__fo[n]){s.__fo[n]="
+"new Object;return 1;}else {return 0;}");


/*
 * Function - read combined cookies v 0.3
 */
if(!s.__ccucr){s.c_rr=s.c_r;s.__ccucr = true;
s.c_r=new Function("k",""
+"var s=this,d=new Date,v=s.c_rr(k),c=s.c_rr('s_pers'),i,m,e;if(v)ret"
+"urn v;k=s.ape(k);i=c.indexOf(' '+k+'=');c=i<0?s.c_rr('s_sess'):c;i="
+"c.indexOf(' '+k+'=');m=i<0?i:c.indexOf('|',i);e=i<0?i:c.indexOf(';'"
+",i);m=m>0?m:e;v=i<0?'':s.epa(c.substring(i+2+k.length,m<0?c.length:"
+"m));if(m>0&&m!=e)if(parseInt(c.substring(m+1,e<0?c.length:e))<d.get"
+"Time()){d.setTime(d.getTime()-60000);s.c_w(s.epa(k),'',d);v='';}ret"
+"urn v;");}
/**
* Start IKEA00701076
**/
/*
 * Function - write combined cookies v 0.3
 */
if(!s.__ccucw){s.c_wr=s.c_w;s.__ccucw = true;
s.c_w=new Function("k","v","e",""
+"this.new2 = true;"
+"var s=this,d=new Date,ht=0,pn='s_pers',sn='s_sess',pc=0,sc=0,pv,s"
+"v,c,i,t;d.setTime(d.getTime()-60000);if(s.c_rr(k)) s.c_wr(k,'',d);k"
+"=s.ape(k);pv=s.c_rr(pn);i=pv.indexOf(' '+k+'=');if(i>-1){pv=pv.subs"
+"tring(0,i)+pv.substring(pv.indexOf(';',i)+1);pc=1;}sv=s.c_rr(sn);i="
+"sv.indexOf(' '+k+'=');if(i>-1){sv=sv.substring(0,i)+sv.substring(sv"
+".indexOf(';',i)+1);sc=1;}d=new Date;if(e){if(e.getTime()>d.getTime("
+")){pv+=' '+k+'='+s.ape(v)+'|'+e.getTime()+';';pc=1;}}else{if(String"
+"(v).indexOf('%00')>-1){v=s.repl(v,'%00','');}sv+=' '+k+'='+s.ape(v)"
+"+';';sc=1;}if(sc) s.c_wr(sn,sv,0);if(pc){t=pv;while(t&&t.indexOf(';"
+"')!=-1){var t1=parseInt(t.substring(t.indexOf('|')+1,t.indexOf(';')"
+"));t=t.substring(t.indexOf(';')+1);ht=ht<t1?t1:ht;}d.setTime(ht);s."
+"c_wr(pn,pv,d);}return v==s.c_r(s.epa(k));");}
/**
* End IKEA00701076
**/
/* Configure Modules and Plugins */

s.loadModule("Media")
s.Media.autoTrack=false
s.Media.trackWhilePlaying=true
s.Media.trackVars="None"
s.Media.trackEvents="None"

s.loadModule("Survey")
var s_sv_dynamic_root = "survey.122.2o7.net/survey/dynamic"
var s_sv_gather_root = "survey.122.2o7.net/survey/gather"

/* WARNING: Changing any of the below variables will cause drastic
changes to how your visitor data is collected.  Changes should only be
made when instructed to do so by your account manager.*/

if ((typeof(s_trackingServer) != "undefined") && (s_trackingServer == false)) {
    s.dc=122;
} else {
    s.visitorNamespace="ikea";
    s.trackingServer="metrics.ikea.com";
    s.trackingServerSecure="smetrics.ikea.com";

    s.dc=122;
    s.vmk="4A686ACF";
}

/****************************** MODULES *****************************/
/* Module: Media */
s.m_Media_c="var m=s.m_i('Media');m.cn=function(n){var m=this;return m.s.rep(m.s.rep(m.s.rep(n,\"\\n\",''),\"\\r\",''),'--**--','')};m.open=function(n,l,p,b){var m=this,i=new Object,tm=new Date,a='',"
+"x;n=m.cn(n);l=parseInt(l);if(!l)l=1;if(n&&p){if(!m.l)m.l=new Object;if(m.l[n])m.close(n);if(b&&b.id)a=b.id;for (x in m.l)if(m.l[x]&&m.l[x].a==a)m.close(m.l[x].n);i.n=n;i.l=l;i.p=m.cn(p);i.a=a;i.t=0"
+";i.ts=0;i.s=Math.floor(tm.getTime()/1000);i.lx=0;i.lt=i.s;i.lo=0;i.e='';i.to=-1;m.l[n]=i}};m.close=function(n){this.e(n,0,-1)};m.play=function(n,o){var m=this,i;i=m.e(n,1,o);i.m=new Function('var m"
+"=s_c_il['+m._in+'],i;if(m.l){i=m.l[\"'+m.s.rep(i.n,'\"','\\\\\"')+'\"];if(i){if(i.lx==1)m.e(i.n,3,-1);i.mt=setTimeout(i.m,5000)}}');i.m()};m.stop=function(n,o){this.e(n,2,o)};m.track=function(n){va"
+"r m=this;if (m.trackWhilePlaying) {m.e(n,4,-1)}};m.e=function(n,x,o){var m=this,i,tm=new Date,ts=Math.floor(tm.getTime()/1000),ti=m.trackSeconds,tp=m.trackMilestones,z=new Array,j,d='--**--',t=1,b,"
+"v=m.trackVars,e=m.trackEvents,pe='media',pev3,w=new Object,vo=new Object;n=m.cn(n);i=n&&m.l&&m.l[n]?m.l[n]:0;if(i){w.name=n;w.length=i.l;w.playerName=i.p;if(i.to<0)w.event=\"OPEN\";else w.event=(x="
+"=1?\"PLAY\":(x==2?\"STOP\":(x==3?\"MONITOR\":\"CLOSE\")));w.openTime=new Date();w.openTime.setTime(i.s*1000);if(x>2||(x!=i.lx&&(x!=2||i.lx==1))) {b=\"Media.\"+name;pev3 = m.s.ape(i.n)+d+i.l+d+m.s.a"
+"pe(i.p)+d;if(x){if(o<0&&i.lt>0){o=(ts-i.lt)+i.lo;o=o<i.l?o:i.l-1}o=Math.floor(o);if(x>=2&&i.lo<o){i.t+=o-i.lo;i.ts+=o-i.lo;}if(x<=2){i.e+=(x==1?'S':'E')+o;i.lx=x;}else if(i.lx!=1)m.e(n,1,o);i.lt=ts"
+";i.lo=o;pev3+=i.t+d+i.s+d+(m.trackWhilePlaying&&i.to>=0?'L'+i.to:'')+i.e+(x!=2?(m.trackWhilePlaying?'L':'E')+o:'');if(m.trackWhilePlaying){b=0;pe='m_o';if(x!=4){w.offset=o;w.percent=((w.offset+1)/w"
+".length)*100;w.percent=w.percent>100?100:Math.floor(w.percent);w.timePlayed=i.t;if(m.monitor)m.monitor(m.s,w)}if(i.to<0)pe='m_s';else if(x==4)pe='m_i';else{t=0;v=e='None';ti=ti?parseInt(ti):0;z=tp?"
+"m.s.sp(tp,','):0;if(ti&&i.ts>=ti)t=1;else if(z){if(o<i.to)i.to=o;else{for(j=0;j<z.length;j++){ti=z[j]?parseInt(z[j]):0;if(ti&&((i.to+1)/i.l<ti/100)&&((o+1)/i.l>=ti/100)){t=1;j=z.length}}}}}}}else{m"
+".e(n,2,-1);if(m.trackWhilePlaying){w.offset=i.lo;w.percent=((w.offset+1)/w.length)*100;w.percent=w.percent>100?100:Math.floor(w.percent);w.timePlayed=i.t;if(m.monitor)m.monitor(m.s,w)}m.l[n]=0;if(i"
+".e){pev3+=i.t+d+i.s+d+(m.trackWhilePlaying&&i.to>=0?'L'+i.to:'')+i.e;if(m.trackWhilePlaying){v=e='None';pe='m_o'}else{t=0;m.s.fbr(b)}}else t=0;b=0}if(t){vo.linkTrackVars=v;vo.linkTrackEvents=e;vo.p"
+"e=pe;vo.pev3=pev3;m.s.t(vo,b);if(m.trackWhilePlaying){i.ts=0;i.to=o;i.e=''}}}}return i};m.ae=function(n,l,p,x,o,b){if(n&&p){var m=this;if(!m.l||!m.l[n])m.open(n,l,p,b);m.e(n,x,o)}};m.a=function(o,t"
+"){var m=this,i=o.id?o.id:o.name,n=o.name,p=0,v,c,c1,c2,xc=m.s.h,x,e,f1,f2='s_media_'+m._in+'_oc',f3='s_media_'+m._in+'_t',f4='s_media_'+m._in+'_s',f5='s_media_'+m._in+'_l',f6='s_media_'+m._in+'_m',"
+"f7='s_media_'+m._in+'_c',tcf,w;if(!i){if(!m.c)m.c=0;i='s_media_'+m._in+'_'+m.c;m.c++}if(!o.id)o.id=i;if(!o.name)o.name=n=i;if(!m.ol)m.ol=new Object;if(m.ol[i])return;m.ol[i]=o;if(!xc)xc=m.s.b;tcf=n"
+"ew Function('o','var e,p=0;try{if(o.versionInfo&&o.currentMedia&&o.controls)p=1}catch(e){p=0}return p');p=tcf(o);if(!p){tcf=new Function('o','var e,p=0,t;try{t=o.GetQuickTimeVersion();if(t)p=2}catc"
+"h(e){p=0}return p');p=tcf(o);if(!p){tcf=new Function('o','var e,p=0,t;try{t=o.GetVersionInfo();if(t)p=3}catch(e){p=0}return p');p=tcf(o)}}v=\"var m=s_c_il[\"+m._in+\"],o=m.ol['\"+i+\"']\";if(p==1){"
+"p='Windows Media Player '+o.versionInfo;c1=v+',n,p,l,x=-1,cm,c,mn;if(o){cm=o.currentMedia;c=o.controls;if(cm&&c){mn=cm.name?cm.name:c.URL;l=cm.duration;p=c.currentPosition;n=o.playState;if(n){if(n="
+"=8)x=0;if(n==3)x=1;if(n==1||n==2||n==4||n==5||n==6)x=2;}';c2='if(x>=0)m.ae(mn,l,\"'+p+'\",x,x!=2?p:-1,o)}}';c=c1+c2;if(m.s.isie&&xc){x=m.s.d.createElement('script');x.language='jscript';x.type='tex"
+"t/javascript';x.htmlFor=i;x.event='PlayStateChange(NewState)';x.defer=true;x.text=c;xc.appendChild(x);o[f6]=new Function(c1+'if(n==3){x=3;'+c2+'}setTimeout(o.'+f6+',5000)');o[f6]()}}if(p==2){p='Qui"
+"ckTime Player '+(o.GetIsQuickTimeRegistered()?'Pro ':'')+o.GetQuickTimeVersion();f1=f2;c=v+',n,x,t,l,p,p2,mn;if(o){mn=o.GetMovieName()?o.GetMovieName():o.GetURL();n=o.GetRate();t=o.GetTimeScale();l"
+"=o.GetDuration()/t;p=o.GetTime()/t;p2=o.'+f5+';if(n!=o.'+f4+'||p<p2||p-p2>5){x=2;if(n!=0)x=1;else if(p>=l)x=0;if(p<p2||p-p2>5)m.ae(mn,l,\"'+p+'\",2,p2,o);m.ae(mn,l,\"'+p+'\",x,x!=2?p:-1,o)}if(n>0&&"
+"o.'+f7+'>=10){m.ae(mn,l,\"'+p+'\",3,p,o);o.'+f7+'=0}o.'+f7+'++;o.'+f4+'=n;o.'+f5+'=p;setTimeout(\"'+v+';o.'+f2+'(0,0)\",500)}';o[f1]=new Function('a','b',c);o[f4]=-1;o[f7]=0;o[f1](0,0)}if(p==3){p='"
+"RealPlayer '+o.GetVersionInfo();f1=n+'_OnPlayStateChange';c1=v+',n,x=-1,l,p,mn;if(o){mn=o.GetTitle()?o.GetTitle():o.GetSource();n=o.GetPlayState();l=o.GetLength()/1000;p=o.GetPosition()/1000;if(n!="
+"o.'+f4+'){if(n==3)x=1;if(n==0||n==2||n==4||n==5)x=2;if(n==0&&(p>=l||p==0))x=0;if(x>=0)m.ae(mn,l,\"'+p+'\",x,x!=2?p:-1,o)}if(n==3&&(o.'+f7+'>=10||!o.'+f3+')){m.ae(mn,l,\"'+p+'\",3,p,o);o.'+f7+'=0}o."
+"'+f7+'++;o.'+f4+'=n;';c2='if(o.'+f2+')o.'+f2+'(o,n)}';if(m.s.wd[f1])o[f2]=m.s.wd[f1];m.s.wd[f1]=new Function('a','b',c1+c2);o[f1]=new Function('a','b',c1+'setTimeout(\"'+v+';o.'+f1+'(0,0)\",o.'+f3+"
+"'?500:5000);'+c2);o[f4]=-1;if(m.s.isie)o[f3]=1;o[f7]=0;o[f1](0,0)}};m.as=new Function('e','var m=s_c_il['+m._in+'],l,n;if(m.autoTrack&&m.s.d.getElementsByTagName){l=m.s.d.getElementsByTagName(m.s.i"
+"sie?\"OBJECT\":\"EMBED\");if(l)for(n=0;n<l.length;n++)m.a(l[n]);}');if(s.wd.attachEvent)s.wd.attachEvent('onload',m.as);else if(s.wd.addEventListener)s.wd.addEventListener('load',m.as,false)";
s.m_i("Media");
/* Module: Survey */
s.m_Survey_c="var m=s.m_i(\"Survey\");m.launch=function(i,e,c,o,f){this._boot();var m=this,g=window.s_sv_globals||{},l,j;if(g.unloaded||m._blocked())return 0;i=i&&i.constructor&&i.constructor==Array?"
+"i:[i];l=g.manualTriggers;for(j=0;j<i.length;++j)l[l.length]={l:m._suites,i:i[j],e:e||0,c:c||0,o:o||0,f:f||0};m._execute();return 1;};m.version = 10001;m._t=function(){this._boot();var m=this,s=m.s,"
+"g=window.s_sv_globals||{},l,impr,i,k,impr={};if(m._blocked())return;for(i=0;i<s.va_t.length;i++){k=s.va_t[i];if(s[k]) impr[k]=s[k];}impr[\"l\"]=m._suites;impr[\"n\"]=impr[\"pageName\"]||\"\";impr["
+"\"u\"]=impr[\"pageURL\"]||\"\";impr[\"c\"]=impr[\"campaign\"]||\"\";impr[\"r\"]=impr[\"referrer\"]||\"\";l=g.pageImpressions;if(l.length > 4) l[l.length - 4]=null;l[l.length]=impr;m._execute();};m."
+"_rr=function(){var g=window.s_sv_globals||{},f=g.onScQueueEmpty||0;if(f)f();};m._blocked=function(){var m=this,g=window.s_sv_globals||{};return !m._booted||g.stop||!g.pending&&!g.triggerRequested;}"
+";m._execute=function(){if(s_sv_globals.execute)setTimeout(\"s_sv_globals.execute();\",0);};m._boot=function(){var m=this,s=m.s,w=window,g,c,d=s.dc,e=s.visitorNamespace,n=navigator.appName.toLowerCa"
+"se(),a=navigator.userAgent,v=navigator.appVersion,h,i,j,k,l,b;if(w.s_sv_globals)return;if(!((b=v.match(/AppleWebKit\\/([0-9]+)/))?521<b[1]:n==\"netscape\"?a.match(/gecko\\//i):(b=a.match(/opera[ \\"
+"/]?([0-9]+).[0-9]+/i))?7<b[1]:n==\"microsoft internet explorer\"&&!v.match(/macintosh/i)&&(b=v.match(/msie ([0-9]+).([0-9]+)/i))&&(5<b[1]||b[1]==5&&4<b[2])))return;g=w.s_sv_globals={};g.module=m;g."
+"pending=0;g.incomingLists=[];g.pageImpressions=[];g.manualTriggers=[];e=\"survey\";c=g.config={};m._param(c,\"dynamic_root\",(e?e+\".\":\"\")+d+\".2o7.net/survey/dynamic\");m._param(c,\"gather_root"
+"\",(e?e+\".\":\"\")+d+\".2o7.net/survey/gather\");g.url=location.protocol+\"//\"+c.dynamic_root;g.gatherUrl=location.protocol+\"//\"+c.gather_root;g.dataCenter=d;g.onListLoaded=new Function(\"r\","
+"\"b\",\"d\",\"i\",\"l\",\"s_sv_globals.module._loaded(r,b,d,i,l);\");m._suites=(m.suites||s.un).toLowerCase().split(\",\");l=m._suites;b={};for(j=0;j<l.length;++j){i=l[j];if(i&&!b[i]){h=i.length;fo"
+"r(k=0;k<i.length;++k)h=(h&0x03ffffff)<<5^h>>26^i.charCodeAt(k);b[i]={url:g.url+\"/suites/\"+(h%251+100)+\"/\"+encodeURIComponent(i.replace(/\\|/,\"||\").replace(/\\//,\"|-\"))};++g.pending;}}g.suit"
+"es=b;setTimeout(\"s_sv_globals.module._load();\",0);m._booted=1;};m._param=function(c,n,v){var p=\"s_sv_\",w=window,u=\"undefined\";if(typeof c[n]==u)c[n]=typeof w[p+n]==u?v:w[p+n];};m._load=functi"
+"on(){var m=this,g=s_sv_globals,q=g.suites,r,i,n=\"s_sv_sid\",b=m.s.c_r(n);if(!b){b=parseInt((new Date()).getTime()*Math.random());m.s.c_w(n,b);}for(i in q){r=q[i];if(!r.requested){r.requested=1;m._"
+"script(r.url+\"/list.js?\"+b);}}};m._loaded=function(r,b,d,i,l){var m=this,g=s_sv_globals,n=g.incomingLists;--g.pending;if(!g.commonRevision){g.bulkRevision=b;g.commonRevision=r;g.commonUrl=g.url+"
+"\"/common/\"+b;}else if(g.commonRevision!=r)return;if(!l.length)return;n[n.length]={r:i,l:l};if(g.execute)g.execute();else if(!g.triggerRequested){g.triggerRequested=1;m._script(g.commonUrl+\"/trig"
+"ger.js\");}};m._script=function(u){var d=document,e=d.createElement(\"script\");e.type=\"text/javascript\";e.src=u;d.getElementsByTagName(\"head\")[0].appendChild(e);};if(m.onLoad)m.onLoad(s,m)";
s.m_i("Survey");

/************* DO NOT ALTER ANYTHING BELOW THIS LINE ! **************/
var s_code='',s_objectID;function s_gi(un,pg,ss){var c="s._c='s_c';s.wd=window;if(!s.wd.s_c_in){s.wd.s_c_il=new Array;s.wd.s_c_in=0;}s._il=s.wd.s_c_il;s._in=s.wd.s_c_in;s._il[s._in]=s;s.wd.s_c_in++;s"
+".an=s_an;s.cls=function(x,c){var i,y='';if(!c)c=this.an;for(i=0;i<x.length;i++){n=x.substring(i,i+1);if(c.indexOf(n)>=0)y+=n}return y};s.fl=function(x,l){return x?(''+x).substring(0,l):x};s.co=func"
+"tion(o){if(!o)return o;var n=new Object,x;for(x in o)if(x.indexOf('select')<0&&x.indexOf('filter')<0)n[x]=o[x];return n};s.num=function(x){x=''+x;for(var p=0;p<x.length;p++)if(('0123456789').indexO"
+"f(x.substring(p,p+1))<0)return 0;return 1};s.rep=s_rep;s.sp=s_sp;s.jn=s_jn;s.ape=function(x){var s=this,h='0123456789ABCDEF',i,c=s.charSet,n,l,e,y='';c=c?c.toUpperCase():'';if(x){x=''+x;if(s.em==3)"
+"return encodeURIComponent(x);else if(c=='AUTO'&&('').charCodeAt){for(i=0;i<x.length;i++){c=x.substring(i,i+1);n=x.charCodeAt(i);if(n>127){l=0;e='';while(n||l<4){e=h.substring(n%16,n%16+1)+e;n=(n-n%"
+"16)/16;l++}y+='%u'+e}else if(c=='+')y+='%2B';else y+=escape(c)}return y}else{x=s.rep(escape(''+x),'+','%2B');if(c&&s.em==1&&x.indexOf('%u')<0&&x.indexOf('%U')<0){i=x.indexOf('%');while(i>=0){i++;if"
+"(h.substring(8).indexOf(x.substring(i,i+1).toUpperCase())>=0)return x.substring(0,i)+'u00'+x.substring(i);i=x.indexOf('%',i)}}}}return x};s.epa=function(x){var s=this;if(x){x=''+x;return s.em==3?de"
+"codeURIComponent(x):unescape(s.rep(x,'+',' '))}return x};s.pt=function(x,d,f,a){var s=this,t=x,z=0,y,r;while(t){y=t.indexOf(d);y=y<0?t.length:y;t=t.substring(0,y);r=s[f](t,a);if(r)return r;z+=y+d.l"
+"ength;t=x.substring(z,x.length);t=z<x.length?t:''}return ''};s.isf=function(t,a){var c=a.indexOf(':');if(c>=0)a=a.substring(0,c);if(t.substring(0,2)=='s_')t=t.substring(2);return (t!=''&&t==a)};s.f"
+"sf=function(t,a){var s=this;if(s.pt(a,',','isf',t))s.fsg+=(s.fsg!=''?',':'')+t;return 0};s.fs=function(x,f){var s=this;s.fsg='';s.pt(x,',','fsf',f);return s.fsg};s.si=function(){var s=this,i,k,v,c="
+"s_gi+'var s=s_gi(\"'+s.oun+'\");s.sa(\"'+s.un+'\");';for(i=0;i<s.va_g.length;i++){k=s.va_g[i];v=s[k];if(v!=undefined){if(typeof(v)=='string')c+='s.'+k+'=\"'+s_fe(v)+'\";';else c+='s.'+k+'='+v+';'}}"
+"c+=\"s.lnk=s.eo=s.linkName=s.linkType=s.wd.s_objectID=s.ppu=s.pe=s.pev1=s.pev2=s.pev3='';\";return c};s.c_d='';s.c_gdf=function(t,a){var s=this;if(!s.num(t))return 1;return 0};s.c_gd=function(){var"
+" s=this,d=s.wd.location.hostname,n=s.fpCookieDomainPeriods,p;if(!n)n=s.cookieDomainPeriods;if(d&&!s.c_d){n=n?parseInt(n):2;n=n>2?n:2;p=d.lastIndexOf('.');if(p>=0){while(p>=0&&n>1){p=d.lastIndexOf('"
+".',p-1);n--}s.c_d=p>0&&s.pt(d,'.','c_gdf',0)?d.substring(p):d}}return s.c_d};s.c_r=function(k){var s=this;k=s.ape(k);var c=' '+s.d.cookie,i=c.indexOf(' '+k+'='),e=i<0?i:c.indexOf(';',i),v=i<0?'':s."
+"epa(c.substring(i+2+k.length,e<0?c.length:e));return v!='[[B]]'?v:''};s.c_w=function(k,v,e){var s=this,d=s.c_gd(),l=s.cookieLifetime,t;v=''+v;l=l?(''+l).toUpperCase():'';if(e&&l!='SESSION'&&l!='NON"
+"E'){t=(v!=''?parseInt(l?l:0):-60);if(t){e=new Date;e.setTime(e.getTime()+(t*1000))}}if(k&&l!='NONE'){s.d.cookie=k+'='+s.ape(v!=''?v:'[[B]]')+'; path=/;'+(e&&l!='SESSION'?' expires='+e.toGMTString()"
+"+';':'')+(d?' domain='+d+';':'');return s.c_r(k)==v}return 0};s.eh=function(o,e,r,f){var s=this,b='s_'+e+'_'+s._in,n=-1,l,i,x;if(!s.ehl)s.ehl=new Array;l=s.ehl;for(i=0;i<l.length&&n<0;i++){if(l[i]."
+"o==o&&l[i].e==e)n=i}if(n<0){n=i;l[n]=new Object}x=l[n];x.o=o;x.e=e;f=r?x.b:f;if(r||f){x.b=r?0:o[e];x.o[e]=f}if(x.b){x.o[b]=x.b;return b}return 0};s.cet=function(f,a,t,o,b){var s=this,r,tcf;if(s.apv"
+">=5&&(!s.isopera||s.apv>=7)){tcf=new Function('s','f','a','t','var e,r;try{r=s[f](a)}catch(e){r=s[t](e)}return r');r=tcf(s,f,a,t)}else{if(s.ismac&&s.u.indexOf('MSIE 4')>=0)r=s[b](a);else{s.eh(s.wd,"
+"'onerror',0,o);r=s[f](a);s.eh(s.wd,'onerror',1)}}return r};s.gtfset=function(e){var s=this;return s.tfs};s.gtfsoe=new Function('e','var s=s_c_il['+s._in+'],c;s.eh(window,\"onerror\",1);s.etfs=1;c=s"
+".t();if(c)s.d.write(c);s.etfs=0;return true');s.gtfsfb=function(a){return window};s.gtfsf=function(w){var s=this,p=w.parent,l=w.location;s.tfs=w;if(p&&p.location!=l&&p.location.host==l.host){s.tfs="
+"p;return s.gtfsf(s.tfs)}return s.tfs};s.gtfs=function(){var s=this;if(!s.tfs){s.tfs=s.wd;if(!s.etfs)s.tfs=s.cet('gtfsf',s.tfs,'gtfset',s.gtfsoe,'gtfsfb')}return s.tfs};s.mrq=function(u){var s=this,"
+"l=s.rl[u],n,r;s.rl[u]=0;if(l)for(n=0;n<l.length;n++){r=l[n];s.mr(0,0,r.r,0,r.t,r.u)}};s.br=function(id,rs){var s=this;if(s.disableBufferedRequests||!s.c_w('s_br',rs))s.brl=rs};s.flushBufferedReques"
+"ts=function(){this.fbr(0)};s.fbr=function(id){var s=this,br=s.c_r('s_br');if(!br)br=s.brl;if(br){if(!s.disableBufferedRequests)s.c_w('s_br','');s.mr(0,0,br)}s.brl=0};s.mr=function(sess,q,rs,id,ta,u"
+"){var s=this,dc=s.dc,t1=s.trackingServer,t2=s.trackingServerSecure,tb=s.trackingServerBase,p='.sc',ns=s.visitorNamespace,un=s.cls(u?u:(ns?ns:s.fun)),r=new Object,l,imn='s_i_'+(un),im,b,e;if(!rs){if"
+"(t1){if(t2&&s.ssl)t1=t2}else{if(!tb)tb='2o7.net';if(dc)dc=(''+dc).toLowerCase();else dc='d1';if(tb=='2o7.net'){if(dc=='d1')dc='112';else if(dc=='d2')dc='122';p=''}t1=un+'.'+dc+'.'+p+tb}rs='http'+(s"
+".ssl?'s':'')+'://'+t1+'/b/ss/'+s.un+'/'+(s.mobile?'5.1':'1')+'/H.22.1/'+sess+'?AQB=1&ndh=1'+(q?q:'')+'&AQE=1';if(s.isie&&!s.ismac)rs=s.fl(rs,2047);if(id){s.br(id,rs);return}}if(s.d.images&&s.apv>=3"
+"&&(!s.isopera||s.apv>=7)&&(s.ns6<0||s.apv>=6.1)){if(!s.rc)s.rc=new Object;if(!s.rc[un]){s.rc[un]=1;if(!s.rl)s.rl=new Object;s.rl[un]=new Array;setTimeout('if(window.s_c_il)window.s_c_il['+s._in+']."
+"mrq(\"'+un+'\")',750)}else{l=s.rl[un];if(l){r.t=ta;r.u=un;r.r=rs;l[l.length]=r;return ''}imn+='_'+s.rc[un];s.rc[un]++}im=s.wd[imn];if(!im)im=s.wd[imn]=new Image;im.s_l=0;im.onload=new Function('e',"
+"'this.s_l=1;var wd=window,s;if(wd.s_c_il){s=wd.s_c_il['+s._in+'];s.mrq(\"'+un+'\");s.nrs--;if(!s.nrs)s.m_m(\"rr\")}');if(!s.nrs){s.nrs=1;s.m_m('rs')}else s.nrs++;im.src=rs;if((!ta||ta=='_self'||ta="
+"='_top'||(s.wd.name&&ta==s.wd.name))&&rs.indexOf('&pe=')>=0){b=e=new Date;while(!im.s_l&&e.getTime()-b.getTime()<500)e=new Date}return ''}return '<im'+'g sr'+'c=\"'+rs+'\" width=1 height=1 border=0"
+" alt=\"\">'};s.gg=function(v){var s=this;if(!s.wd['s_'+v])s.wd['s_'+v]='';return s.wd['s_'+v]};s.glf=function(t,a){if(t.substring(0,2)=='s_')t=t.substring(2);var s=this,v=s.gg(t);if(v)s[t]=v};s.gl="
+"function(v){var s=this;if(s.pg)s.pt(v,',','glf',0)};s.rf=function(x){var s=this,y,i,j,h,l,a,b='',c='',t;if(x){y=''+x;i=y.indexOf('?');if(i>0){a=y.substring(i+1);y=y.substring(0,i);h=y.toLowerCase()"
+";i=0;if(h.substring(0,7)=='http://')i+=7;else if(h.substring(0,8)=='https://')i+=8;h=h.substring(i);i=h.indexOf(\"/\");if(i>0){h=h.substring(0,i);if(h.indexOf('google')>=0){a=s.sp(a,'&');if(a.lengt"
+"h>1){l=',q,ie,start,search_key,word,kw,cd,';for(j=0;j<a.length;j++){t=a[j];i=t.indexOf('=');if(i>0&&l.indexOf(','+t.substring(0,i)+',')>=0)b+=(b?'&':'')+t;else c+=(c?'&':'')+t}if(b&&c){y+='?'+b+'&'"
+"+c;if(''+x!=y)x=y}}}}}}return x};s.hav=function(){var s=this,qs='',fv=s.linkTrackVars,fe=s.linkTrackEvents,mn,i;if(s.pe){mn=s.pe.substring(0,1).toUpperCase()+s.pe.substring(1);if(s[mn]){fv=s[mn].tr"
+"ackVars;fe=s[mn].trackEvents}}fv=fv?fv+','+s.vl_l+','+s.vl_l2:'';for(i=0;i<s.va_t.length;i++){var k=s.va_t[i],v=s[k],b=k.substring(0,4),x=k.substring(4),n=parseInt(x),q=k;if(v&&k!='linkName'&&k!='l"
+"inkType'){if(s.pe||s.lnk||s.eo){if(fv&&(','+fv+',').indexOf(','+k+',')<0)v='';if(k=='events'&&fe)v=s.fs(v,fe)}if(v){if(k=='dynamicVariablePrefix')q='D';else if(k=='visitorID')q='vid';else if(k=='pa"
+"geURL'){q='g';v=s.fl(v,255)}else if(k=='referrer'){q='r';v=s.fl(s.rf(v),255)}else if(k=='vmk'||k=='visitorMigrationKey')q='vmt';else if(k=='visitorMigrationServer'){q='vmf';if(s.ssl&&s.visitorMigra"
+"tionServerSecure)v=''}else if(k=='visitorMigrationServerSecure'){q='vmf';if(!s.ssl&&s.visitorMigrationServer)v=''}else if(k=='charSet'){q='ce';if(v.toUpperCase()=='AUTO')v='ISO8859-1';else if(s.em="
+"=2||s.em==3)v='UTF-8'}else if(k=='visitorNamespace')q='ns';else if(k=='cookieDomainPeriods')q='cdp';else if(k=='cookieLifetime')q='cl';else if(k=='variableProvider')q='vvp';else if(k=='currencyCode"
+"')q='cc';else if(k=='channel')q='ch';else if(k=='transactionID')q='xact';else if(k=='campaign')q='v0';else if(k=='resolution')q='s';else if(k=='colorDepth')q='c';else if(k=='javascriptVersion')q='j"
+"';else if(k=='javaEnabled')q='v';else if(k=='cookiesEnabled')q='k';else if(k=='browserWidth')q='bw';else if(k=='browserHeight')q='bh';else if(k=='connectionType')q='ct';else if(k=='homepage')q='hp'"
+";else if(k=='plugins')q='p';else if(s.num(x)){if(b=='prop')q='c'+n;else if(b=='eVar')q='v'+n;else if(b=='list')q='l'+n;else if(b=='hier'){q='h'+n;v=s.fl(v,255)}}if(v)qs+='&'+q+'='+(k.substring(0,3)"
+"!='pev'?s.ape(v):v)}}}return qs};s.ltdf=function(t,h){t=t?t.toLowerCase():'';h=h?h.toLowerCase():'';var qi=h.indexOf('?');h=qi>=0?h.substring(0,qi):h;if(t&&h.substring(h.length-(t.length+1))=='.'+t"
+")return 1;return 0};s.ltef=function(t,h){t=t?t.toLowerCase():'';h=h?h.toLowerCase():'';if(t&&h.indexOf(t)>=0)return 1;return 0};s.lt=function(h){var s=this,lft=s.linkDownloadFileTypes,lef=s.linkExt"
+"ernalFilters,lif=s.linkInternalFilters;lif=lif?lif:s.wd.location.hostname;h=h.toLowerCase();if(s.trackDownloadLinks&&lft&&s.pt(lft,',','ltdf',h))return 'd';if(s.trackExternalLinks&&h.substring(0,1)"
+"!='#'&&(lef||lif)&&(!lef||s.pt(lef,',','ltef',h))&&(!lif||!s.pt(lif,',','ltef',h)))return 'e';return ''};s.lc=new Function('e','var s=s_c_il['+s._in+'],b=s.eh(this,\"onclick\");s.lnk=s.co(this);s.t"
+"();s.lnk=0;if(b)return this[b](e);return true');s.bc=new Function('e','var s=s_c_il['+s._in+'],f,tcf;if(s.d&&s.d.all&&s.d.all.cppXYctnr)return;s.eo=e.srcElement?e.srcElement:e.target;tcf=new Functi"
+"on(\"s\",\"var e;try{if(s.eo&&(s.eo.tagName||s.eo.parentElement||s.eo.parentNode))s.t()}catch(e){}\");tcf(s);s.eo=0');s.oh=function(o){var s=this,l=s.wd.location,h=o.href?o.href:'',i,j,k,p;i=h.inde"
+"xOf(':');j=h.indexOf('?');k=h.indexOf('/');if(h&&(i<0||(j>=0&&i>j)||(k>=0&&i>k))){p=o.protocol&&o.protocol.length>1?o.protocol:(l.protocol?l.protocol:'');i=l.pathname.lastIndexOf('/');h=(p?p+'//':'"
+"')+(o.host?o.host:(l.host?l.host:''))+(h.substring(0,1)!='/'?l.pathname.substring(0,i<0?0:i)+'/':'')+h}return h};s.ot=function(o){var t=o.tagName;t=t&&t.toUpperCase?t.toUpperCase():'';if(t=='SHAPE'"
+")t='';if(t){if((t=='INPUT'||t=='BUTTON')&&o.type&&o.type.toUpperCase)t=o.type.toUpperCase();else if(!t&&o.href)t='A';}return t};s.oid=function(o){var s=this,t=s.ot(o),p,c,n='',x=0;if(t&&!o.s_oid){p"
+"=o.protocol;c=o.onclick;if(o.href&&(t=='A'||t=='AREA')&&(!c||!p||p.toLowerCase().indexOf('javascript')<0))n=s.oh(o);else if(c){n=s.rep(s.rep(s.rep(s.rep(''+c,\"\\r\",''),\"\\n\",''),\"\\t\",''),' '"
+",'');x=2}else if(t=='INPUT'||t=='SUBMIT'){if(o.value)n=o.value;else if(o.innerText)n=o.innerText;else if(o.textContent)n=o.textContent;x=3}else if(o.src&&t=='IMAGE')n=o.src;if(n){o.s_oid=s.fl(n,100"
+");o.s_oidt=x}}return o.s_oid};s.rqf=function(t,un){var s=this,e=t.indexOf('='),u=e>=0?t.substring(0,e):'',q=e>=0?s.epa(t.substring(e+1)):'';if(u&&q&&(','+u+',').indexOf(','+un+',')>=0){if(u!=s.un&&"
+"s.un.indexOf(',')>=0)q='&u='+u+q+'&u=0';return q}return ''};s.rq=function(un){if(!un)un=this.un;var s=this,c=un.indexOf(','),v=s.c_r('s_sq'),q='';if(c<0)return s.pt(v,'&','rqf',un);return s.pt(un,'"
+",','rq',0)};s.sqp=function(t,a){var s=this,e=t.indexOf('='),q=e<0?'':s.epa(t.substring(e+1));s.sqq[q]='';if(e>=0)s.pt(t.substring(0,e),',','sqs',q);return 0};s.sqs=function(un,q){var s=this;s.squ[u"
+"n]=q;return 0};s.sq=function(q){var s=this,k='s_sq',v=s.c_r(k),x,c=0;s.sqq=new Object;s.squ=new Object;s.sqq[q]='';s.pt(v,'&','sqp',0);s.pt(s.un,',','sqs',q);v='';for(x in s.squ)if(x&&(!Object||!Ob"
+"ject.prototype||!Object.prototype[x]))s.sqq[s.squ[x]]+=(s.sqq[s.squ[x]]?',':'')+x;for(x in s.sqq)if(x&&(!Object||!Object.prototype||!Object.prototype[x])&&s.sqq[x]&&(x==q||c<2)){v+=(v?'&':'')+s.sqq"
+"[x]+'='+s.ape(x);c++}return s.c_w(k,v,0)};s.wdl=new Function('e','var s=s_c_il['+s._in+'],r=true,b=s.eh(s.wd,\"onload\"),i,o,oc;if(b)r=this[b](e);for(i=0;i<s.d.links.length;i++){o=s.d.links[i];oc=o"
+".onclick?\"\"+o.onclick:\"\";if((oc.indexOf(\"s_gs(\")<0||oc.indexOf(\".s_oc(\")>=0)&&oc.indexOf(\".tl(\")<0)s.eh(o,\"onclick\",0,s.lc);}return r');s.wds=function(){var s=this;if(s.apv>3&&(!s.isie|"
+"|!s.ismac||s.apv>=5)){if(s.b&&s.b.attachEvent)s.b.attachEvent('onclick',s.bc);else if(s.b&&s.b.addEventListener)s.b.addEventListener('click',s.bc,false);else s.eh(s.wd,'onload',0,s.wdl)}};s.vs=func"
+"tion(x){var s=this,v=s.visitorSampling,g=s.visitorSamplingGroup,k='s_vsn_'+s.un+(g?'_'+g:''),n=s.c_r(k),e=new Date,y=e.getYear();e.setYear(y+10+(y<1900?1900:0));if(v){v*=100;if(!n){if(!s.c_w(k,x,e)"
+")return 0;n=x}if(n%10000>v)return 0}return 1};s.dyasmf=function(t,m){if(t&&m&&m.indexOf(t)>=0)return 1;return 0};s.dyasf=function(t,m){var s=this,i=t?t.indexOf('='):-1,n,x;if(i>=0&&m){var n=t.subst"
+"ring(0,i),x=t.substring(i+1);if(s.pt(x,',','dyasmf',m))return n}return 0};s.uns=function(){var s=this,x=s.dynamicAccountSelection,l=s.dynamicAccountList,m=s.dynamicAccountMatch,n,i;s.un=s.un.toLowe"
+"rCase();if(x&&l){if(!m)m=s.wd.location.host;if(!m.toLowerCase)m=''+m;l=l.toLowerCase();m=m.toLowerCase();n=s.pt(l,';','dyasf',m);if(n)s.un=n}i=s.un.indexOf(',');s.fun=i<0?s.un:s.un.substring(0,i)};"
+"s.sa=function(un){var s=this;s.un=un;if(!s.oun)s.oun=un;else if((','+s.oun+',').indexOf(','+un+',')<0)s.oun+=','+un;s.uns()};s.m_i=function(n,a){var s=this,m,f=n.substring(0,1),r,l,i;if(!s.m_l)s.m_"
+"l=new Object;if(!s.m_nl)s.m_nl=new Array;m=s.m_l[n];if(!a&&m&&m._e&&!m._i)s.m_a(n);if(!m){m=new Object,m._c='s_m';m._in=s.wd.s_c_in;m._il=s._il;m._il[m._in]=m;s.wd.s_c_in++;m.s=s;m._n=n;m._l=new Ar"
+"ray('_c','_in','_il','_i','_e','_d','_dl','s','n','_r','_g','_g1','_t','_t1','_x','_x1','_rs','_rr','_l');s.m_l[n]=m;s.m_nl[s.m_nl.length]=n}else if(m._r&&!m._m){r=m._r;r._m=m;l=m._l;for(i=0;i<l.le"
+"ngth;i++)if(m[l[i]])r[l[i]]=m[l[i]];r._il[r._in]=r;m=s.m_l[n]=r}if(f==f.toUpperCase())s[n]=m;return m};s.m_a=new Function('n','g','e','if(!g)g=\"m_\"+n;var s=s_c_il['+s._in+'],c=s[g+\"_c\"],m,x,f=0"
+";if(!c)c=s.wd[\"s_\"+g+\"_c\"];if(c&&s_d)s[g]=new Function(\"s\",s_ft(s_d(c)));x=s[g];if(!x)x=s.wd[\\'s_\\'+g];if(!x)x=s.wd[g];m=s.m_i(n,1);if(x&&(!m._i||g!=\"m_\"+n)){m._i=f=1;if((\"\"+x).indexOf("
+"\"function\")>=0)x(s);else s.m_m(\"x\",n,x,e)}m=s.m_i(n,1);if(m._dl)m._dl=m._d=0;s.dlt();return f');s.m_m=function(t,n,d,e){t='_'+t;var s=this,i,x,m,f='_'+t,r=0,u;if(s.m_l&&s.m_nl)for(i=0;i<s.m_nl."
+"length;i++){x=s.m_nl[i];if(!n||x==n){m=s.m_i(x);u=m[t];if(u){if((''+u).indexOf('function')>=0){if(d&&e)u=m[t](d,e);else if(d)u=m[t](d);else u=m[t]()}}if(u)r=1;u=m[t+1];if(u&&!m[f]){if((''+u).indexO"
+"f('function')>=0){if(d&&e)u=m[t+1](d,e);else if(d)u=m[t+1](d);else u=m[t+1]()}}m[f]=1;if(u)r=1}}return r};s.m_ll=function(){var s=this,g=s.m_dl,i,o;if(g)for(i=0;i<g.length;i++){o=g[i];if(o)s.loadMo"
+"dule(o.n,o.u,o.d,o.l,o.e,1);g[i]=0}};s.loadModule=function(n,u,d,l,e,ln){var s=this,m=0,i,g,o=0,f1,f2,c=s.h?s.h:s.b,b,tcf;if(n){i=n.indexOf(':');if(i>=0){g=n.substring(i+1);n=n.substring(0,i)}else "
+"g=\"m_\"+n;m=s.m_i(n)}if((l||(n&&!s.m_a(n,g)))&&u&&s.d&&c&&s.d.createElement){if(d){m._d=1;m._dl=1}if(ln){if(s.ssl)u=s.rep(u,'http:','https:');i='s_s:'+s._in+':'+n+':'+g;b='var s=s_c_il['+s._in+'],"
+"o=s.d.getElementById(\"'+i+'\");if(s&&o){if(!o.l&&s.wd.'+g+'){o.l=1;if(o.i)clearTimeout(o.i);o.i=0;s.m_a(\"'+n+'\",\"'+g+'\"'+(e?',\"'+e+'\"':'')+')}';f2=b+'o.c++;if(!s.maxDelay)s.maxDelay=250;if(!"
+"o.l&&o.c<(s.maxDelay*2)/100)o.i=setTimeout(o.f2,100)}';f1=new Function('e',b+'}');tcf=new Function('s','c','i','u','f1','f2','var e,o=0;try{o=s.d.createElement(\"script\");if(o){o.type=\"text/javas"
+"cript\";'+(n?'o.id=i;o.defer=true;o.onload=o.onreadystatechange=f1;o.f2=f2;o.l=0;':'')+'o.src=u;c.appendChild(o);'+(n?'o.c=0;o.i=setTimeout(f2,100)':'')+'}}catch(e){o=0}return o');o=tcf(s,c,i,u,f1,"
+"f2)}else{o=new Object;o.n=n+':'+g;o.u=u;o.d=d;o.l=l;o.e=e;g=s.m_dl;if(!g)g=s.m_dl=new Array;i=0;while(i<g.length&&g[i])i++;g[i]=o}}else if(n){m=s.m_i(n);m._e=1}return m};s.vo1=function(t,a){if(a[t]"
+"||a['!'+t])this[t]=a[t]};s.vo2=function(t,a){if(!a[t]){a[t]=this[t];if(!a[t])a['!'+t]=1}};s.dlt=new Function('var s=s_c_il['+s._in+'],d=new Date,i,vo,f=0;if(s.dll)for(i=0;i<s.dll.length;i++){vo=s.d"
+"ll[i];if(vo){if(!s.m_m(\"d\")||d.getTime()-vo._t>=s.maxDelay){s.dll[i]=0;s.t(vo)}else f=1}}if(s.dli)clearTimeout(s.dli);s.dli=0;if(f){if(!s.dli)s.dli=setTimeout(s.dlt,s.maxDelay)}else s.dll=0');s.d"
+"l=function(vo){var s=this,d=new Date;if(!vo)vo=new Object;s.pt(s.vl_g,',','vo2',vo);vo._t=d.getTime();if(!s.dll)s.dll=new Array;s.dll[s.dll.length]=vo;if(!s.maxDelay)s.maxDelay=250;s.dlt()};s.t=fun"
+"ction(vo,id){var s=this,trk=1,tm=new Date,sed=Math&&Math.random?Math.floor(Math.random()*10000000000000):tm.getTime(),sess='s'+Math.floor(tm.getTime()/10800000)%10+sed,y=tm.getYear(),vt=tm.getDate("
+")+'/'+tm.getMonth()+'/'+(y<1900?y+1900:y)+' '+tm.getHours()+':'+tm.getMinutes()+':'+tm.getSeconds()+' '+tm.getDay()+' '+tm.getTimezoneOffset(),tcf,tfs=s.gtfs(),ta=-1,q='',qs='',code='',vb=new Objec"
+"t;s.gl(s.vl_g);s.uns();s.m_ll();if(!s.td){var tl=tfs.location,a,o,i,x='',c='',v='',p='',bw='',bh='',j='1.0',k=s.c_w('s_cc','true',0)?'Y':'N',hp='',ct='',pn=0,ps;if(String&&String.prototype){j='1.1'"
+";if(j.match){j='1.2';if(tm.setUTCDate){j='1.3';if(s.isie&&s.ismac&&s.apv>=5)j='1.4';if(pn.toPrecision){j='1.5';a=new Array;if(a.forEach){j='1.6';i=0;o=new Object;tcf=new Function('o','var e,i=0;try"
+"{i=new Iterator(o)}catch(e){}return i');i=tcf(o);if(i&&i.next)j='1.7'}}}}}if(s.apv>=4)x=screen.width+'x'+screen.height;if(s.isns||s.isopera){if(s.apv>=3){v=s.n.javaEnabled()?'Y':'N';if(s.apv>=4){c="
+"screen.pixelDepth;bw=s.wd.innerWidth;bh=s.wd.innerHeight}}s.pl=s.n.plugins}else if(s.isie){if(s.apv>=4){v=s.n.javaEnabled()?'Y':'N';c=screen.colorDepth;if(s.apv>=5){bw=s.d.documentElement.offsetWid"
+"th;bh=s.d.documentElement.offsetHeight;if(!s.ismac&&s.b){tcf=new Function('s','tl','var e,hp=0;try{s.b.addBehavior(\"#default#homePage\");hp=s.b.isHomePage(tl)?\"Y\":\"N\"}catch(e){}return hp');hp="
+"tcf(s,tl);tcf=new Function('s','var e,ct=0;try{s.b.addBehavior(\"#default#clientCaps\");ct=s.b.connectionType}catch(e){}return ct');ct=tcf(s)}}}else r=''}if(s.pl)while(pn<s.pl.length&&pn<30){ps=s.f"
+"l(s.pl[pn].name,100)+';';if(p.indexOf(ps)<0)p+=ps;pn++}s.resolution=x;s.colorDepth=c;s.javascriptVersion=j;s.javaEnabled=v;s.cookiesEnabled=k;s.browserWidth=bw;s.browserHeight=bh;s.connectionType=c"
+"t;s.homepage=hp;s.plugins=p;s.td=1}if(vo){s.pt(s.vl_g,',','vo2',vb);s.pt(s.vl_g,',','vo1',vo)}if((vo&&vo._t)||!s.m_m('d')){if(s.usePlugins)s.doPlugins(s);var l=s.wd.location,r=tfs.document.referrer"
+";if(!s.pageURL)s.pageURL=l.href?l.href:l;if(!s.referrer&&!s._1_referrer){s.referrer=r;s._1_referrer=1}s.m_m('g');if(s.lnk||s.eo){var o=s.eo?s.eo:s.lnk;if(!o)return '';var p=s.pageName,w=1,t=s.ot(o)"
+",n=s.oid(o),x=o.s_oidt,h,l,i,oc;if(s.eo&&o==s.eo){while(o&&!n&&t!='BODY'){o=o.parentElement?o.parentElement:o.parentNode;if(!o)return '';t=s.ot(o);n=s.oid(o);x=o.s_oidt}oc=o.onclick?''+o.onclick:''"
+";if((oc.indexOf(\"s_gs(\")>=0&&oc.indexOf(\".s_oc(\")<0)||oc.indexOf(\".tl(\")>=0)return ''}if(n)ta=o.target;h=s.oh(o);i=h.indexOf('?');h=s.linkLeaveQueryString||i<0?h:h.substring(0,i);l=s.linkName"
+";t=s.linkType?s.linkType.toLowerCase():s.lt(h);if(t&&(h||l))q+='&pe=lnk_'+(t=='d'||t=='e'?s.ape(t):'o')+(h?'&pev1='+s.ape(h):'')+(l?'&pev2='+s.ape(l):'');else trk=0;if(s.trackInlineStats){if(!p){p="
+"s.pageURL;w=0}t=s.ot(o);i=o.sourceIndex;if(s.gg('objectID')){n=s.gg('objectID');x=1;i=1}if(p&&n&&t)qs='&pid='+s.ape(s.fl(p,255))+(w?'&pidt='+w:'')+'&oid='+s.ape(s.fl(n,100))+(x?'&oidt='+x:'')+'&ot="
+"'+s.ape(t)+(i?'&oi='+i:'')}}if(!trk&&!qs)return '';s.sampled=s.vs(sed);if(trk){if(s.sampled)code=s.mr(sess,(vt?'&t='+s.ape(vt):'')+s.hav()+q+(qs?qs:s.rq()),0,id,ta);qs='';s.m_m('t');if(s.p_r)s.p_r("
+");s.referrer=''}s.sq(qs);}else{s.dl(vo);}if(vo)s.pt(s.vl_g,',','vo1',vb);s.lnk=s.eo=s.linkName=s.linkType=s.wd.s_objectID=s.ppu=s.pe=s.pev1=s.pev2=s.pev3='';if(s.pg)s.wd.s_lnk=s.wd.s_eo=s.wd.s_link"
+"Name=s.wd.s_linkType='';if(!id&&!s.tc){s.tc=1;s.flushBufferedRequests()}return code};s.tl=function(o,t,n,vo){var s=this;s.lnk=s.co(o);s.linkType=t;s.linkName=n;s.t(vo)};if(pg){s.wd.s_co=function(o)"
+"{var s=s_gi(\"_\",1,1);return s.co(o)};s.wd.s_gs=function(un){var s=s_gi(un,1,1);return s.t()};s.wd.s_dc=function(un){var s=s_gi(un,1);return s.t()}}s.ssl=(s.wd.location.protocol.toLowerCase().inde"
+"xOf('https')>=0);s.d=document;s.b=s.d.body;if(s.d.getElementsByTagName){s.h=s.d.getElementsByTagName('HEAD');if(s.h)s.h=s.h[0]}s.n=navigator;s.u=s.n.userAgent;s.ns6=s.u.indexOf('Netscape6/');var ap"
+"n=s.n.appName,v=s.n.appVersion,ie=v.indexOf('MSIE '),o=s.u.indexOf('Opera '),i;if(v.indexOf('Opera')>=0||o>0)apn='Opera';s.isie=(apn=='Microsoft Internet Explorer');s.isns=(apn=='Netscape');s.isope"
+"ra=(apn=='Opera');s.ismac=(s.u.indexOf('Mac')>=0);if(o>0)s.apv=parseFloat(s.u.substring(o+6));else if(ie>0){s.apv=parseInt(i=v.substring(ie+5));if(s.apv>3)s.apv=parseFloat(i)}else if(s.ns6>0)s.apv="
+"parseFloat(s.u.substring(s.ns6+10));else s.apv=parseFloat(v);s.em=0;if(s.em.toPrecision)s.em=3;else if(String.fromCharCode){i=escape(String.fromCharCode(256)).toUpperCase();s.em=(i=='%C4%80'?2:(i=="
+"'%U0100'?1:0))}s.sa(un);s.vl_l='dynamicVariablePrefix,visitorID,vmk,visitorMigrationKey,visitorMigrationServer,visitorMigrationServerSecure,ppu,charSet,visitorNamespace,cookieDomainPeriods,cookieLi"
+"fetime,pageName,pageURL,referrer,currencyCode';s.va_l=s.sp(s.vl_l,',');s.vl_t=s.vl_l+',variableProvider,channel,server,pageType,transactionID,purchaseID,campaign,state,zip,events,products,linkName,"
+"linkType';for(var n=1;n<76;n++)s.vl_t+=',prop'+n+',eVar'+n+',hier'+n+',list'+n;s.vl_l2=',tnt,pe,pev1,pev2,pev3,resolution,colorDepth,javascriptVersion,javaEnabled,cookiesEnabled,browserWidth,browse"
+"rHeight,connectionType,homepage,plugins';s.vl_t+=s.vl_l2;s.va_t=s.sp(s.vl_t,',');s.vl_g=s.vl_t+',trackingServer,trackingServerSecure,trackingServerBase,fpCookieDomainPeriods,disableBufferedRequests"
+",mobile,visitorSampling,visitorSamplingGroup,dynamicAccountSelection,dynamicAccountList,dynamicAccountMatch,trackDownloadLinks,trackExternalLinks,trackInlineStats,linkLeaveQueryString,linkDownloadF"
+"ileTypes,linkExternalFilters,linkInternalFilters,linkTrackVars,linkTrackEvents,linkNames,lnk,eo,_1_referrer';s.va_g=s.sp(s.vl_g,',');s.pg=pg;s.gl(s.vl_g);if(!ss)s.wds()",
w=window,l=w.s_c_il,n=navigator,u=n.userAgent,v=n.appVersion,e=v.indexOf('MSIE '),m=u.indexOf('Netscape6/'),a,i,s;if(un){un=un.toLowerCase();if(l)for(i=0;i<l.length;i++){s=l[i];if(!s._c||s._c=='s_c'){if(s.oun==un)return s;else if(s.fs&&s.sa&&s.fs(s.oun,un)){s.sa(un);return s}}}}w.s_an='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
w.s_sp=new Function("x","d","var a=new Array,i=0,j;if(x){if(x.split)a=x.split(d);else if(!d)for(i=0;i<x.length;i++)a[a.length]=x.substring(i,i+1);else while(i>=0){j=x.indexOf(d,i);a[a.length]=x.subst"
+"ring(i,j<0?x.length:j);i=j;if(i>=0)i+=d.length}}return a");
w.s_jn=new Function("a","d","var x='',i,j=a.length;if(a&&j>0){x=a[0];if(j>1){if(a.join)x=a.join(d);else for(i=1;i<j;i++)x+=d+a[i]}}return x");
w.s_rep=new Function("x","o","n","return s_jn(s_sp(x,o),n)");
w.s_d=new Function("x","var t='`^@$#',l=s_an,l2=new Object,x2,d,b=0,k,i=x.lastIndexOf('~~'),j,v,w;if(i>0){d=x.substring(0,i);x=x.substring(i+2);l=s_sp(l,'');for(i=0;i<62;i++)l2[l[i]]=i;t=s_sp(t,'');d"
+"=s_sp(d,'~');i=0;while(i<5){v=0;if(x.indexOf(t[i])>=0) {x2=s_sp(x,t[i]);for(j=1;j<x2.length;j++){k=x2[j].substring(0,1);w=t[i]+k;if(k!=' '){v=1;w=d[b+l2[k]]}x2[j]=w+x2[j].substring(1)}}if(v)x=s_jn("
+"x2,'');else{w=t[i]+' ';if(x.indexOf(w)>=0)x=s_rep(x,w,t[i]);i++;b+=62}}}return x");
w.s_fe=new Function("c","return s_rep(s_rep(s_rep(c,'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"\\n\",\"\\\\n\")");
w.s_fa=new Function("f","var s=f.indexOf('(')+1,e=f.indexOf(')'),a='',c;while(s>=0&&s<e){c=f.substring(s,s+1);if(c==',')a+='\",\"';else if((\"\\n\\r\\t \").indexOf(c)<0)a+=c;s++}return a?'\"'+a+'\"':"
+"a");
w.s_ft=new Function("c","c+='';var s,e,o,a,d,q,f,h,x;s=c.indexOf('=function(');while(s>=0){s++;d=1;q='';x=0;f=c.substring(s);a=s_fa(f);e=o=c.indexOf('{',s);e++;while(d>0){h=c.substring(e,e+1);if(q){i"
+"f(h==q&&!x)q='';if(h=='\\\\')x=x?0:1;else x=0}else{if(h=='\"'||h==\"'\")q=h;if(h=='{')d++;if(h=='}')d--}if(d>0)e++}c=c.substring(0,s)+'new Function('+(a?a+',':'')+'\"'+s_fe(c.substring(o+1,e))+'\")"
+"'+c.substring(e+1);s=c.indexOf('=function(')}return c;");
c=s_d(c);if(e>0){a=parseInt(i=v.substring(e+5));if(a>3)a=parseFloat(i)}else if(m>0)a=parseFloat(u.substring(m+10));else a=parseFloat(v);if(a>=5&&v.indexOf('Opera')<0&&u.indexOf('Opera')<0){w.s_c=new Function("un","pg","ss","var s=this;"+c);return new s_c(un,pg,ss)}else s=new Function("un","pg","ss","var s=new Object;"+s_ft(c)+";return s");return s(un,pg,ss)}
}



var isOpera = Object.prototype.toString.call(window.opera) === '[object Opera]',
	s_urls = "",
	s_account = "",
	s_country = "",
	s_language = "",
	s_trackingServer = true,
	
	irwstatsStatType = "",
	irwstatsInitialized = false,
	irwstatsDebug = true,
	irwstatsLoaded = true,
	
	irwstatsLocalVars = [],
	irwstatsLocalFlags = [],
	irwstatsLocalTrackVars = [],
	irwstatsLocalMetaTags = [],
	irwstatsLocalFixedVars = [];

function $namespace(name, separator, container) {
	"use strict";
	var ns = name.split(separator || '.'), o = container || window, i, len;
	for (i = 0, len = ns.length; i < len; i += 1) {
		o = o[ns[i]] = o[ns[i]] || {};
	}
	return o;
}

function getKeys(pObj) {
	"use strict";
	var vKeys = [], vKey;
	for (vKey in pObj) {
		if (pObj.hasOwnProperty(vKey)) {
			vKeys.push(vKey);
		}
	}
	return vKeys;
}

function isInternetExplorer() {
	"use strict";
	return !!window.attachEvent && !isOpera;
}

function isChrome() {
	"use strict";
	return navigator.userAgent.contains("AppleWebKit/");
}

function isFirefox() {
	"use strict";
	return navigator.userAgent.contains("Gecko") && !navigator.userAgent.contains("KHTML");
}

function has(pElement, pAttribute, pValue) {
	"use strict";
	
	var hasAttribute = false;
	
	if (!pElement) {
		return false;
	}
	
	// *sigh* IE *shakes head*
	if (pElement.hasAttribute) {
		hasAttribute = pElement.hasAttribute(pAttribute);
		
	} else {
		hasAttribute = (pElement.attributes[pAttribute] !== null);
	}
	
	// This element does not have an attribute with the specified name
	if (!hasAttribute) {
		return false;

	// The attribute exists
	} else {
		// If a value has been passed to lookup
		if (pValue) {
			return pElement.attributes[pAttribute].value === pValue;
		
		// No value to lookup, but attribute found, return true
		} else {
			return true;
		}
	}
}

function getElements(name) {
	"use strict";
	return document.getElementsByTagName(name);
}

function getElement(pName, pOptions) {
	"use strict";
	var vElements,
		vList,
		vElement;
		
	if (!pOptions) {
		vElements = getElements(pName);
		if (vElements) {
			return vElements[0];
		}

		return undefined;
	}

	if (pName && pOptions) {
		vList = getElements(pName);
		if (vList && vList.length !== 0) {
			vElement = vList[0];
			if (has(vElement, pOptions.attribute, pOptions.value)) {
				return vElement;
			}
		}
	}
	
	return undefined;
}

function isType(obj, type) {
	"use strict";
    var clas = Object.prototype.toString.call(obj).slice(8, -1);
    return obj !== undefined && obj !== null && clas === type;
}

function isArray(obj) {
	"use strict";
	return isType(obj, "Array");
}

function isObject(obj) {
	"use strict";
	return isType(obj, "Object");
}

function isString(obj) {
	"use strict";
	return isType(obj, "String");
}

function isFunction(obj) {
	"use strict";
	return isType(obj, "Function");
}

function observe(element, event, listener) {
	"use strict";
	if (element && event && listener) {
		if (element.addEventListener) {
			element.addEventListener(event, listener, false);
			
		} else if (element.attachEvent) {
			element.attachEvent(event, listener);
		}
	}
}

$namespace("com.ikea.irw.stat");/*global isString, isArray*/
/*
 *************************************************************
 *
 *  String prototype modifications
 *
 *************************************************************
 */

/**
 * Check if the string starts with the string.
 * @param {String} pStartsWith the string to look for.
 * @return {Boolean} true if the string contains the substring.
 */
String.prototype.startsWith = String.prototype.startsWith || function (pStartsWith, ignoreCase) {
	"use strict";

	if (!pStartsWith) {
		return false;
	}

	if (ignoreCase) {
		return (this.toLowerCase().indexOf(pStartsWith.toLowerCase()) === 0);

	} else {
		return (this.indexOf(pStartsWith) === 0);
	}
};

/**
 * Check if the string ends with the string.
 * @param {String} pEndsWith the string to look for.
 * @return {Boolean} true if the string ends with the substring.
 */
String.prototype.endsWith = String.prototype.endsWith || function (pEndsWith, ignoreCase) {
	"use strict";
	if (!pEndsWith) {
		return false;
	}

	if (ignoreCase) {
		return (this.toLowerCase().lastIndexOf(pEndsWith.toLowerCase()) === (this.length - pEndsWith.length));

	} else {
		return (this.lastIndexOf(pEndsWith) === (this.length - pEndsWith.length));
	}

};

/**
 * Checks if this string contains the sub-string.
 * @param {String} pSubString the string to look for.
 * @return {Boolean} true if the string contains the substring.
 */
String.prototype.contains = String.prototype.contains || function (pSubString, ignoreCase) {
	"use strict";
	if (!pSubString && isString(pSubString)) {
		return false;
	}

	if (ignoreCase) {
		return (this.toLowerCase().indexOf(pSubString.toLowerCase()) >= 0);

	} else {
		return (this.indexOf(pSubString) >= 0);
	}

};

/**
 * Checks if a string is either empty or just contain spaces.
 * @return true if the string is empty or just full of spaces.
 */
String.prototype.blank = String.prototype.blank || function () {
	"use strict";
	// Return false if empty (without spaces)
	return (/^\s*$/).test(this);
};

/**
 * Strip both leading and trailing spaces from the string.
 * @return {String} the same string sans leading and trailing spaces (if any)
 */
String.prototype.trim = String.prototype.trim || function () {
	"use strict";
	return this.replace(/^\s+/g, "").replace(/\s+$/g, "");
};

/**
 * Returns everything that's after the first occurence of pString, excluding pString.
 * @return {String} Everyting thats after the substring in the string or the same string if the substring's not found.
 * @example var str = "applepear".after("apple "); // str -> "pear"
 * @example var str = "applepear".after("orange"); // str -> "applepear"
 */
String.prototype.after = function (pString) {
	"use strict";
	if (pString && isString(pString) && this.contains(pString)) {
		return this.substr(this.indexOf(pString) + pString.length);

	} else {
		return this.substr(0);
	}
};

/**
 * Returns everything that's after the last occurence of pString, excluding pString.
 * @return {String} everything that's after the last occurence of the substring or the same string if the substring's not found.
 * @example var str = "appleapplepear".afterLast("apple"); // str -> "pear"
 * @example var str = "appleapplepear".afterLast("orange"); // str -> "appleapplepear";
 */
String.prototype.afterLast = function (pString) {
	"use strict";
	if (pString && isString(pString) && this.contains(pString)) {
		return this.substr(this.lastIndexOf(pString) + pString.length);

	} else {
		return this.substr(0);
	}
};

/**
 * Returns everything from the first occurence of pString, including pString.
 */
String.prototype.from = function (pString) {
	"use strict";
	if (pString && isString(pString) && this.contains(pString)) {
		return this.substr(this.indexOf(pString));

	} else {
		return this.substr(0);
	}
};

/**
 * Returns everything from the last occurence of pString, including pString.
 */
String.prototype.fromLast = function (pString) {
	"use strict";
	if (pString && isString(pString) && this.contains(pString)) {
		return this.substr(this.lastIndexOf(pString));

	} else {
		return this.substr(0);
	}
};

/**
 * Returns everything from the beginning of the string and up to the first occurence of pString (exclusive).
 */
String.prototype.upTo = function (pString) {
	"use strict";
	if (pString && isString(pString) && this.contains(pString)) {
		return this.substr(0, this.indexOf(pString));

	} else {
		return this.substr(0);
	}
};

String.prototype.upToLast = function (pString) {
	"use strict";
	if (pString && isString(pString) && this.contains(pString)) {
		return this.substr(0, this.lastIndexOf(pString));

	} else {
		return this.substr(0);
	}
};

/**
 * Ported from Prototype js.
 * Takes a url formatted String and parses the querystring into an object.
 * @param {String} pSeparator optional separator of the querystring, default to "&".
 */
String.prototype.toQueryParams = String.prototype.toQueryParams || function (pSeparator) {
	"use strict";
	var vMatch = this.trim().match(/([^?#]*)(#.*)?$/),
		vCount,
		vMatchArray,
		vPair,
		vKey,
		vValue,
		vReturn = {};

	if (!vMatch) {
		return vReturn;
	}

	vMatchArray = vMatch[1].split(pSeparator || "&");

	for (vCount = 0; vCount < vMatchArray.length; vCount += 1) {
		vPair = vMatchArray[vCount];
		if ((vPair = vPair.split("="))[0]) {
			vKey = decodeURIComponent(vPair.shift());
			vValue = vPair.length > 1 ? vPair.join("=") : vPair[0];
			if (vValue !== undefined) {
				vValue = decodeURIComponent(vValue);
			}

			if (vReturn.hasOwnProperty(vKey)) {
				if (!isArray(vReturn[vKey])) {
					vReturn[vKey] = [vReturn[vKey]];
				}
				vReturn[vKey].push(vValue);
			} else {
				vReturn[vKey] = vValue;
			}
		}
	}

	return vReturn;
};/*global com, getElement, getElements, s, isArray, console */

function printKeys(obj) {
	"use strict";
	com.ikea.irw.stat.Utils.debug(getKeys(obj));
}

function injectMeta(pName, pContent) {
	"use strict";
	var vHead = getElement("head"),
		vMeta = document.createElement("meta");

	vMeta.name = pName;
	vMeta.content = pContent;
	vHead.appendChild(vMeta);
}

function injectInHead(pTags) {
	"use strict";
	var vHead = getElement("head"),
		vCount,
		vTag,
		vMeta,
		vProp;

	for (vCount = 0; vCount < pTags.length; vCount += 1) {
		vTag = pTags[vCount];
		vMeta = document.createElement("meta");
		for (vProp in vTag) {
			if (vTag.hasOwnProperty(vProp)) {
				vMeta[vProp] = vTag[vProp];
			}
		}
		vHead.appendChild(vMeta);
	}
}

function clearMetaTags() {
	"use strict";
	var vHead = getElement("head"),
		vMetaList = getElements("meta"),
		vCount;

	for (vCount = vMetaList.length - 1; vCount >= 0; vCount -= 1) {
		vHead.removeChild(vMetaList[vCount]);
	}
}

function getSVars(pVars) {
	"use strict";
	var vMatches = [],
		vCount,
		vStr,
		vKey,
		vKeyCount;

	if (!isArray(pVars)) {
		com.ikea.irw.stat.Utils.debug("input parameter must be an Array. e.g. getSVars([\"prop\", \"page\"])");
		return vMatches;
	}

	for (vCount = 0; vCount < pVars.length; vCount += 1) {
		vStr = pVars[vCount];
		for (vKeyCount = 0; vKeyCount < getKeys(s).length; vKeyCount += 1) {
			vKey = getKeys(s)[vKeyCount];
			if (vKey.toLowerCase().indexOf(vStr.toLowerCase()) === 0) {
				vMatches.push({ name: vKey, value: s[vKey] });
			}
		}
	}

	vMatches.sort(function (pFirst, pSecond) {
		var vPropRegex = /prop([0-9]+)/,
			vFirstPropMatch = pFirst.name.match(vPropRegex),
			vSecondPropMatch = pSecond.name.match(vPropRegex);

		// Both strings are "props", just compare the numbers to get them in the correct order
		if (vFirstPropMatch && vSecondPropMatch) {
			return vFirstPropMatch[1] - vSecondPropMatch[1];

		// One (or none) of the strings are "props", do a normal comparison
		} else {
			if (pFirst.name < pSecond.name) {
				return -1;
			} else if (pFirst.name > pSecond.name) {
				return 1;
			}
		}
	});

	return vMatches;
}

function clearTrailingTag() {
	"use strict";
	var vDomain = "";

	if (!window.location.host.startsWith("localhost")) {
		vDomain = "; domain=" + window.location.host.replace(/^\w*(\.[\.]+\.[\.]+)$/, "$1");
	}
	document.cookie = "IRWStats.trailingTag=;expires=-1; path=/" + vDomain;
}

function clearCookie(pName) {
	"use strict";
	var vDomain = "";

	if (!window.location.host.startsWith("localhost")) {
		vDomain = "; domain=" + window.location.host.replace(/^\w*(\.[\.]+\.[\.]+)$/, "$1");
	}
	document.cookie = pName + "=;expires=-1; path=/" + vDomain;
}

/**
 * This will only work in FF
 */
function watchS(pProp) {
    s.watch(pProp, function (id, oldval, newval) {
        console.log("s." + id + " changed from \"" + oldval + "\" to \"" + newval + "\"");
        return newval;
    });
}
/*global window, com, s, irwstatsLocalVars: true, irwstatsLocalFlags: true, irwstatsLocalTrackVars: true, irwstatsLocalMetaTags: true, irwstatsLocalFixedVars: true, isString */

/**
 * This class is responsible for all the core functionality of sending and preparing 
 * the statistics to Omniture.
 * 
 * @classDescription Core functionality for sending statistics to Omniture
 * @constructor
 */
com.ikea.irw.stat.Common = (function () {
	"use strict";

	/** @scope com.ikea.irw.stat.Common */
	return {

		/**
		 * Clears the arrays containing the local data.
		 * e.g. meta tags, flags, vars, etc.
		 */
		clearLocalData: function () {
			irwstatsLocalVars = [];
			irwstatsLocalFlags = [];
			irwstatsLocalTrackVars = [];
			irwstatsLocalMetaTags = [];
			irwstatsLocalFixedVars = [];
		},

		/**
		 * Add a flag for local processing
		 * @param {String} pFlagName Name of flag to set
		 * @example addLocalFlag(constants.FLAG_PAGE_NAME_SET);
		 */
		addLocalFlag: function (pFlagName) {
			if (pFlagName && isString(pFlagName) && !pFlagName.blank()) {
				irwstatsLocalFlags.push(pFlagName);
			}
		},

		/**
		 * Removes a flag from local processing.
		 * @param {String} pFlagName Name of flag to remove
		 * @example deleteLocalFlag(constants.PAGE_NAME_SET)
		 */
		deleteLocalFlag: function (pFlagName) {
			var vCount;
			if (pFlagName && isString(pFlagName) && !pFlagName.blank()) {
				for (vCount = 0; vCount < irwstatsLocalFlags.length; vCount += 1) {
					if (irwstatsLocalFlags[vCount] === pFlagName) {
						irwstatsLocalFlags.splice(vCount, 1);
					}
				}
			}
		},

		/**
		 * Check if a local flag has been set
		 * @param {String} pFlagName Name of flag to check status of
		 * @return {Boolean} true if flag has been set.
		 */
		checkLocalFlag: function (pFlagName) {
			var vCount;

			if (pFlagName && isString(pFlagName) && !pFlagName.blank()) {
				for (vCount = 0; vCount < irwstatsLocalFlags.length; vCount += 1) {
					if (irwstatsLocalFlags[vCount] === pFlagName) {
						return true;
					}
				}
			}

			return false;
		},

		/**
		 * Add a variable to the irwLocalTrackVars array
		 * @param {String} pVarName the name of the variable to add to the tracking.
		 * @param {Boolean} pExclusive optional parameter stating that the trackvar is exclusive
		 * @example addTrackVar("IRWStats.pageName"); same as: addTrackVar("IRWStats.pageName", false);
		 * @example addTrackVar("IRWStats.pageName", true);
		 */
		addTrackVar: function (pVarName, pExclusive) {
			var constants = com.ikea.irw.stat.Constants,
				vendor = com.ikea.irw.stat.Vendor;

			irwstatsLocalTrackVars = irwstatsLocalTrackVars || [];

			if (pVarName && isString(pVarName) && !pVarName.blank() && !this.checkLocalFlag(constants.FLAG_TRACK_VAR_EXCLUSIVE_SET)) {
				if (pExclusive) {
					this.addLocalFlag(constants.FLAG_TRACK_VAR_EXCLUSIVE_SET);
					irwstatsLocalTrackVars = [];

					vendor.clearTrackVars();
					vendor.clearTrackEvents();
				}

				irwstatsLocalTrackVars.push(pVarName.replace(/^IRWStats\.(\w*)$/, "$1").toLowerCase());
			}
		},

		/**
		 * Check if a variable exists in the irwstatsLocalTrackVars array
		 * @param {String} pVarName the name of the variable to check
		 * @return {Boolean} true if it exists, false oterwise.
		 * @example checkTrackVar("IRWStats.pageName);
		 * @example checkTrackVar("pageName);
		 */
		checkTrackVar: function (pVarName) {
			var vCount;

			if (pVarName && isString(pVarName) && !pVarName.blank()) {
				for (vCount = 0; vCount < irwstatsLocalTrackVars.length; vCount += 1) {
					if (irwstatsLocalTrackVars[vCount] === pVarName.toLowerCase()) {
						return true;
					}
				}
			}

			return false;
		},

		/**
		 * Calls {@link com.ikea.irw.stat.Vendor.addLinkTrack(pVarName)} unless local flag is trackVarExclusive_SET.
		 * @param {String} pVarName The name of the variable.
		 */
		postProcessVariable: function (pVarName) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants;

			// Only add the variable if the exclusive flag isn't set
			if (!this.checkLocalFlag(constants.FLAG_TRACK_VAR_EXCLUSIVE_SET)) {
				vendor.addLinkTrack(pVarName);
			}
		},

		/**
		 * Saves tag variables (e.g. s.prop20) starting with "s." in an array.
		 * @param {String} pTagName the name of the tag
		 * @param {String} pTagValue the value of the tag
		 * @example addFixedVar("s.prop21", "the value");
		 * @example addFixedVar("s.prop1", "the value");
		 */
		addFixedVar: function (pTagName, pTagValue) {
			if (pTagName && pTagValue && isString(pTagName) && isString(pTagValue) && !pTagName.blank() && !pTagValue.blank()) {
				irwstatsLocalFixedVars.push({
					name: pTagName,
					value: pTagValue
				});
			}
		}
	};
}());
/*global com */

/**
 * This class holds all the possible constants for the web analytics. 
 * 
 * @classDescription All constant values
 * @constructor
 */
com.ikea.irw.stat.Constants = (function () {
	"use strict";
	/** @scope com.ikea.irw.stat.Constants */
	return {
		/**
		 * Common constants
		 */
		UNDEFINED:	"undefined",
		NONE:		"None",
		CASE_LOWER:	"lower",
		CASE_UPPER: "upper",
		CASE_NO:	"no",
		STAT_TYPE_DEV:	"dev",
		STAT_TYPE_LIVE:	"live",
		PAGE_TYPE_STATIC:	"static",
		MLS:		"mls",
		PLANNER:    "planner",
		/**
		 * Tag constants
		 */
		TAG_PAGENAME:				"pagename",
		TAG_PAGENAME_LOCAL:			"pagenamelocal",
		TAG_CATEGORY:				"category",
		TAG_CATEGORY_LOCAL :		"categorylocal",
		TAG_SUB_CATEGORY:			"subcategory",
		TAG_SUB_CATEGORY_LOCAL:		"subcategorylocal",
		TAG_CHAPTER:				"chapter",
		TAG_CHAPTER_LOCAL:			"chapterlocal",
		TAG_SYSTEM:					"system",
		TAG_SYSTEM_LOCAL:			"systemlocal",
		TAG_SYSTEM_CHAPTER:			"systemchapter",
		TAG_SYSTEM_CHAPTER_LOCAL:	"systemchapterlocal",
		/**
		 * Local flag constants
		 */
		FLAG_HAS_CATEGORY:			"hasCategory",
		FLAG_HAS_SUB_CATEGORY:		"hasSubCategory",
		FLAG_HAS_CHAPTER:			"hasChapter",
		FLAG_HAS_SYSTEM:			"hasSystem",
		FLAG_HAS_SYSTEM_CHAPTER:	"hasSystemChapter",
		/**
		 * Normal flag constants
		 */
		FLAG_ADD_ALL_PROPS_AND_EVENTS:			"addAllPropsAndEvents",
		FLAG_ADD_BY_PART_NUMBER_ERROR_SET:		"addByPartNumberError_SET",
		FLAG_ADD_FROM_ADD_ON_SALES_SET:			"addFromAddOnSales_SET",
		FLAG_CATEGORIES_SET:					"categories_SET",
		FLAG_CART_OPENED_IN_SESSION_SET:		"cartOpenedInSession_SET",
		FLAG_CHECOUT_GUEST_SET:					"checkoutGuest_SET",
		FLAG_ECOM_STATUS_SET:					"eComStatus_SET",
		FLAG_FORM:								"form",
		FLAG_FORM_SET:							"form_SET",
		FLAG_FORM_ERROR_FIELDS_SET:				"formErrorFields_SET",
		FLAG_FORM_ERROR_NAME_SET:				"formErrorName_SET",
		FLAG_FORM_ERROR_TEXTS_SET:				"formErrorTexts_SET",
		FLAG_FORM_ERROR_KEYS_SET:				"formErrorKeys_SET",
		FLAG_FORM_ERROR_SET:					"formError_SET",
		FLAG_FRONT:								"front",
		FLAG_FRONT_SET:							"front_SET",
		FLAG_HAS_CHANGED_STORE:					"hasChangedStore",
		FLAG_LAST_PAGE_CART_SET:				"lastPageCart_SET",
		FLAG_MEMBER_LOGIN_STARTED_SET:			"memberLoginStarted_SET",
		FLAG_MEMBER_SIGNUP_START_SET:			"memberSignupStart_SET",
		FLAG_MEMBER_SIGNUP_STARTED_SET:			"memberSignupStarted_SET",
		FLAG_MEMBER_TYPE_SET:					"memberType_SET",
		FLAG_MERCHANDISING_CATEGORY_SET:		"merchandisingcategory_SET",
		FLAG_PAGE_NAME_SET:						"pageName_SET",
		FLAG_PAGE_NAME_LOCAL_SET:				"pageNameLocal_SET",
		FLAG_PIP_FROM_ADD_ON_SALES_SET:			"pipFromAddOnSales_SET",
		FLAG_PROD_VIEW:							"prodView",
		FLAG_PROD_VIEW_SET:						"prodView_SET",
		FLAG_PRODUCT_ALREADY_IN_CART_SET:		"productAlreadyInCart_SET",
		FLAG_PRODUCT_IN_SHOPPING_CART_SET:		"productInShoppingCart_SET",
		FLAG_REVERT_TO_LINK_SET:				"revertToLink_SET",
		FLAG_RIA_PAGE_VIEW_SET:					"riaPageView_SET",
		FLAG_RIA_ACTION_SET:					"riaAction_SET",
		FLAG_SEARCH_PAGE_SET:					"searchPage_SET",
		FLAG_SHOPPING_CART_ADD_PRODUCTS_SET:	"scAddProducts_SET",
		FLAG_SHOPPING_LIST_PROD:				"shoppingList_prod",
		FLAG_STOCK_CHECK_PRESSED:				"stockChkPressed",
		FLAG_STOCK_CHECK_PERFORMED_SET:			"stockchkperformed_SET",
		FLAG_TRACK_VAR_EXCLUSIVE_SET:			"trackVarExclusive_SET",
		FLAG_COLOR_BAR_CLICKED:				    "colorBarClicked",
		/**
		 * Site catalyst link types
		 */
		LINK_TYPE_NORMAL:	"o",
		LINK_TYPE_DOWNLOAD:	"d",
		/**
		 * Site catalyst event constants
		 */
		EVENTS:								"events",
		EVENT_PRODUCT_VIEW:					"prodView",		// Product Views
		EVENT_CART_ADD:						"scAdd",		// Cart Adds 
        EVENT_LIST_ADD:						"slAdd",		// Shopping List adds
		EVENT_CART_REMOVE:					"scRemove",		// Cart Removes
		EVENT_CART_OPEN:					"scOpen",		// Cart Opens
		EVENT_CART_VIEW:					"scView",		// Cart Views
		EVENT_CHECKOUT:						"scCheckout",	// Checkouts
		EVENT_ORDER:						"purchase",		// Orders
//		EVENT_REVENUE:						"purchase",		// Revenue
//		EVENT_UNIT:							"purchase",		// Units
		EVENT_SEARCH:						"event1",		// Internal Search
		EVENT_LOGIN:						"event2",		// Login
		EVENT_PRODUCT_VIEW_CUSTOM:			"event3",		// Product Views (custom)
		EVENT_HOME_PLANNER_START:			"event4",		// Home Planners Start
		EVENT_DOWNLOAD:						"event5",		// Download
		EVENT_STOCK_CHECK:					"event6",		// Stock Check
		EVENT_STOCK_CONTACT:				"event7",		// Stock Contact
		EVENT_APPLICATION_COMPLETED:		"event8",		// Application Completed
		EVENT_NEWSLETTER_SIGNUP:			"event9",		// Newsletter Signup
		EVENT_VIRAL:						"event10",		// Viral
		EVENT_LOCAL_STORE_VIEWED:			"event11",		// Local Store Viewed
		EVENT_PRODUCT_DETAIL_VIEWED:		"event12",		// Product Detail Viewed
		EVENT_NOT_IN_STOCK:					"event13",		// Not in stock
		EVENT_FAMILY_PRICE:					"event14",		// Family Price
		EVENT_USER_TYPE_TRANSITION:			"event15",		// User Type Transition
		EVENT_SUPPORT_REQUEST:				"event16",		// Support Request
		EVENT_SHOPPING_LIST_ADD:			"event17",		// Add to Shopping List
		EVENT_SHOPPING_LIST_REMOVE:			"event18",		// Remove from Shopping List
		EVENT_CART_ADDITIONS:				"event19",		// Cart Additions (once per visits)
		EVENT_SHOPPING_LIST_COMPLETIONS:	"event20",		// Shopping List Completions
		EVENT_ASK_ANNA:						"event21",		// Ask Anna Answers
		EVENT_PRODUCT_VIEW_VISITS:			"event22",		// Product View Visits
		EVENT_ADD_TO_SHOPPING_LIST_VISITS:	"event23",		// Add to shopping list visits
		EVENT_APPLICATION_START:			"event24",		// Application Start
		EVENT_STOCK_CHECK_VISIT:			"event25",		// Stock Check (once per visit)
		EVENT_STOCK_CHECK_MANUAL:			"event26",		// Stock Check (manual)
		EVENT_STOCK_CHECK_PROGNOSIS:		"event27",		// Stock Check prognosis
		EVENT_SHIPPING_COST:				"event28",		// Shipping Cost
		EVENT_CART_ADDITION_VISIT:			"event29",		// Cart Addition Visits
		EVENT_ORDER_VISIT:					"event30",		// Order Visits
		EVENT_SEARCH_AUTO_COMPLETE:			"event31",		// Internal Search Auto Complete
		EVENT_SEARCH_INTERNAL_VISISTS:		"event34",		// Internal Search Visits
		EVENT_CATALOUGE_ORDER:				"event32",		// Catalogue order
		EVENT_CALCULATE_SHIPPING_CLICKS:	"event40",		// A counter of the number of times the calculate shipping cost function is used
		EVENT_CALCULATE_SHIPPING_VISITS:	"event41",		// A counter of the number of times the calculate shipping cost function is used, once per visit.
		/**
		 * Site catalyst properties
		 */
		PROP_PAGE_NAME:							"pageName",	// Pages
//		PROP_PAGE_TYPE:							"pageType",	// Pages Not Found
		PROP_LOCAL_PAGES:						"prop1",	// Local Pages (not used, junk data)
		PROP_DEPARTMENT:						"prop2",	// Department
		PROP_CATEGORY:							"prop3",	// Category
		PROP_SUB_CATEGORY:						"prop4",	// Sub Category
		PROP_PAGE_TYPE:							"prop5",	// Page Type
		PROP_SEARCH_TERM:						"prop6",	// Search Term
		PROP_NUMBER_SEARCH_RESULTS:				"prop7",	// # Search Results
		PROP_COUNTRY:							"prop8",	// Country
		PROP_DOWNLOADS:							"prop9",	// Downloads
		PROP_SHOPPING_CART_STORE_NUMBER:		"prop10",	// SC: Stock Store Number
		PROP_SHOPPING_CART_IN_STOCK:			"prop11",	// SC: In Stock Parameter
		PROP_SHOPPING_CART_ARTICLE_NUMBER:		"prop12",	// SC: Article Number
		PROP_SHOPPING_CART_CONTACT_METHOD:		"prop13",	// SC: Stock Contact Method
		PROP_HOUR:								"prop14",	// Hour
		PROP_DAY:								"prop15",	// Day
		PROP_WEEKDAY:							"prop16",	// Weekday / Weekend
		PROP_LANGUAGE:							"prop17",	// Language
		PROP_RICH_CONTENT_ASSET:				"prop18",	// Rich Content Asset
		PROP_RICH_CONTENT_ACTION:				"prop19",	// Rich Content Actions
		PROP_RICH_CONTENT_ALL_INFO:				"prop20",	// Rich Content All Info
		PROP_SYSTEM:							"prop21",	// System
		PROP_SYSTEM_CHAPTER:					"prop22",	// System Chapter
		PROP_ROOM_SET:							"prop23",	// Room Set
		PROP_PAGE_FUNCTIONALITY:				"prop24",	// Page Functionality
		PROP_PRODUCT_FLOW:						"prop25",	// Product Flow
		PROP_KEYWORD_RANKING:					"prop26",	// Keyword Ranking
		PROP_FORM_ERROR:						"prop27",	// Form Errors
		PROP_USER_TYPE:							"prop28",	// User Type
		PROP_SITE_AREA:							"prop29",	// Site Area 
		PROP_SITE_AREA_DETAILED:				"prop30",	// Site Area Detailed
		PROP_IKEA_FAMILY_ID:					"prop31",	// IKEA Family ID
		PROP_LOCAL_STORE:						"prop32",	// Local Store
		PROP_FLASH_VERSION:						"prop33",	// Flash Version
		PROP_NEW_OR_RETURNING_CUSTOMER:			"prop34",	// New vs. Returning User
		PROP_DAYS_SINCE_LAST_VISIT:				"prop35",	// Days Since Last Visit
		PROP_TEMPLATE_TYPE:						"prop36",	// Template Type
		PROP_UNIFIED_SOURCES_TRIGGER:			"prop40",	// Unified Sources Trigger
		PROP_URL:								"prop41",	// URL
		PROP_NUMBER_OF_SEARCH_RESULTS_TOTAL:	"prop42",	// # search results  total
		PROP_BUSINESS_ID:						"prop43",	// Business ID
		PROP_RANGE_FUNCTIONALITY:				"prop48",	// Range Functionality
		PROP_PRODUCT_VIEW_TYPE:                 "prop53",   // Product View Type
		PROP_SHIPPING_COST:						"prop54",	// Collect the response provided from the calculate shipping cost function.
		PROP_DELIVERY_TIME:						"prop55",	// Collect the response provided from the estimate delivery time function.
		/**
		 * Site catalyst eVars
		 */
		EVAR_PRODUCTS:							"products",		// Products
		EVAR_PURCHASE_ID:						"purchaseID",	// Purchase ID
		EVAR_CAMPAIGN:							"campaign",		// Tracking Codes
		EVAR_SEARCH_TERM:						"eVar1",		// Search Term
		EVAR_INTERNAL_TRACKING_CODE:			"eVar2",		// Internal Tracking Codes
		EVAR_PRODUCT_FINDING_METHOD:			"eVar3",		// Product Finding Methods
		EVAR_MERCHANDISING_CATEGORY:			"eVar4",		// Merchandising Category
		EVAR_PAYMENT_METHODS:					"eVar5",		// Payment Methods
		EVAR_SHIPPING_METHODS:					"eVar6",		// Shipping Methods
		EVAR_COUNTRY:							"eVar7",		// Country
		EVAR_HOME_PLANNER:						"eVar8",		// Home Planner
		EVAR_DOWNLOADS:							"eVar9",		// Downloads
		EVAR_SHOPPING_CART_STOCK_STORE_NUMBER:	"eVar10",		// SC: Stock Store Number
		EVAR_SHOPPING_CART_IN_STOCK_PARAM:		"eVar11",		// SC: In Stock Parameter
		EVAR_ROOM_SET:							"eVar12",		// Room Set
		EVAR_SHOPPING_CART_CONTACT_METHOD:		"eVar13",		// SC: Stock Contact Method
		EVAR_CAMPAIGN_PARTICIPATION:			"eVar14",		// Campaign Participation
		EVAR_MICRO_SITE:						"eVar15",		// Micro Site
		EVAR_PRODUCT_COMPARISION:				"eVar16",		// Product Comparison
		EVAR_LOCAL_STORE:						"eVar17",		// Local Store
		EVAR_APPLICATION_TYPE:					"eVar18",		// Application Type
		EVAR_HOUR:								"eVar19",		// Hour
		EVAR_DAY:								"eVar20",		// Day
		EVAR_WEEKDAY:							"eVar21",		// Weekday / Weekend
		EVAR_LANGUAGE:							"eVar22",		// Language
		EVAR_RICH_CONTENT_ASSET:				"eVar23",		// Rich Content Asset
		EVAR_USER_TYPE:							"eVar24",		// User Type
		EVAR_FAMILY_ID:							"eVar25",		// Family ID
		EVAR_BUSINESS_ID:						"eVar26",		// Business ID
		EVAR_SEARCHES_PER_VISIT:				"eVar27",		// Searches per Visit
		EVAR_STOCK_CHECK_PER_VISIT:				"eVar28",		// Stock Check per Visit
		EVAR_PRODUCT_VIEWS_PER_VISIT:			"eVar29",		// Product Views per Visit
		EVAR_SHOPPING_LIST_ACTION:				"eVar30",		// Shopping List Action
		EVAR_SUPPORT_TYPE:						"eVar31",		// Support Type
		EVAR_NEW_USER_TYPE:						"eVar32",		// New User Type
		EVAR_IKEA_FAMILY_ID:					"eVar33",		// IKEA Family ID
		EVAR_ASK_ANNA_ANSWER:					"eVar34",		// Ask Anna Answer ID
		EVAR_KEYWORD:							"eVar35",		// Keyword
		EVAR_SEARCH_ENGINE:						"eVar36",		// Search Engine
		EVAR_DEPARTMENT:						"eVar37",		// Department
		EVAR_CATEGORY:							"eVar38",		// Category
		EVAR_SUB_CATEGORY:						"eVar39",		// Sub Category
		EVAR_TABS:								"eVar40",		// Tabs - used/not used
		EVAR_RICH_CONTENT_ACTIONS:				"eVar41",		// Rich Content Actions
		EVAR_VIRAL_CHANNEL:						"eVar42",		// Viral Channel        
		EVAR_RAGE_FUNCTIONALITY:				"eVar48",		// Range Functionality
		EVAR_SHIPPING_COST:						"eVar54",	//Collect the response provided from the calculate shipping cost function.	
		EVAR_DELIVERY_TIME:						"eVar55",	//Collect the response provided from the estimate delivery time function.
		EVAR_PRODUCT_VIEW_TYPE:                 "eVar53",        // Product View Type
		EVAR_PIP_USED_RAGE_FUNCTIONALITY:       "eVar56",         // PIP Used Range Functionality
        		PROP_SITE_NAVIGATION:					"prop44"		//site navigation
	};
}());
/*global com, unescape, escape, isString, document, window */

/**
 * This class handles all the functions related to cookie persistance 
 * 
 * @classDescription Cookie functionality 
 * @constructor
 */
com.ikea.irw.stat.Cookie = (function () {
	"use strict";

	/** @scope com.ikea.irw.stat.Cookie */
	return {
		/**
		 * Get the cookie value for the specified cookie name.
		 * @param {String} pName the name of the cookie
		 * @example var trailingTag = cookie.getCookie("IRWStats.trailingTag");
		 */
		getCookie: function (pName) {
			var vStart,
				vEnd;

			// Are there any cookies at all?
			if (document.cookie.length > 0) {
				// Look for the cookie named 'name'.
				vStart = document.cookie.indexOf(pName + "=");
				if (vStart !== -1) {
					// Found it. Now retrieve the value of the cookie
					// and return it unescaped.
					vStart = vStart + pName.length + 1;
					vEnd = document.cookie.indexOf(";", vStart);
					if (vEnd === -1) {
						vEnd = document.cookie.length;
					}
					return unescape(document.cookie.substring(vStart, vEnd));
				}
			}

			// Cookie not found, return empty string.
			return "";
		},

		/**
		 * Set a cookie.
		 * @param {String} pName the name of the cookie.
		 * @param {String} pValue the value of the cookie.
		 * @param {Integer} pExpireDays the number of days this cookie is valid. -1 will remove the cookie.
		 * @example setCookie("IRWStats.trailingTag", "IRWStats.pageName,my page name", 1);
		 * @example setCookie("IRWStats.trailingTag", "IRWStats.pageName,my page name|IRWStats.pageArea,my page area", 1);
		 */
		setCookie: function (pName, pValue, pExpireDays) {
			var vExdate,
				vDomain = "",
				vExpires = "";

			if (pName && isString(pName) && isString(pValue) && !pName.blank()) {
				if (typeof pExpireDays !== "undefined") {
					// Make a new date-object to get the expiration-date.
					vExdate = new Date();
					vExdate.setDate(vExdate.getDate() + pExpireDays);

					vExpires = "; expires=" + vExdate.toGMTString();
				}

				// If running on localhost, don't set the domain, since the cookies (i.e. trailing tags) won't work.
				if (!window.location.host.startsWith("localhost")) {
					vDomain = window.location.href.replace(/^http[s]?:\/\/([^\/]+)\/.*$/, "$1");
					vDomain = "; domain=" + vDomain.replace(/^.*(\.[^\.]+\.[^\.]+)$/, "$1");
				}

				// If a trailing port number is present, it will be removed
				vDomain = vDomain.upTo(":");

				// Set the cookie. (And escape the value)
				document.cookie = pName + "=" + escape(pValue) + vExpires + "; path=/" + vDomain;
			}
		}
	};
}());
/*global window, document, com, s_urls: true, s_account: true, s_country: true, s_language: true, s_trackingServer: true, irwstatsStatType: true, irwstatsInitialized: true, getElement, set_s_var, self, isString, isObject */

/**
 * This class handles all the core functionality of irwstat
 *
 * @classDescription Core functionality for irwstat
 * @constructor
 */
com.ikea.irw.stat.Core = (function () {
	"use strict";

	/** @scope com.ikea.irw.stat.Core */
	return {
		/**
		 * Reset variables.
		 */
		clearData: function () {
			s_urls = "";
			s_account = "";
			s_trackingServer = true;

			s_country = "";
			s_language = "";
			irwstatsStatType = "";
		},
		/**
		 * Set the locale, from this value it also sets the country and language,
		 * should be in the form: "language_Country".
		 * @param {String} pLocale a locale, e.g. "sv-SE", "en_US", etc.
		 * @example setLocale("en-US");
		 * @example setLocale("sv_SE");
		 */
		setLocale: function (pLocale) {
			if (pLocale && isString(pLocale) && !pLocale.blank()) {
				s_language = pLocale.substr(0, pLocale.indexOf("_")).toLowerCase();
				s_country = pLocale.substr(pLocale.indexOf("_") + 1).toLowerCase();
			}
		},
		/**
		 * Get the locale in the form: "language_COUNTRY".
		 * @example getLocale();
		 * @return {String} the locale, for example sv_SE.
		 */
		getLocale: function () {
			return s_language.toLowerCase() + "_" + s_country.toUpperCase();
		},
		/**
		 * Prepares the config to use when sending stats.
		 * ported from: irwstatPrepareConfig and irwstatPrepareOmnitureConfig().
		 *
		 * @param {Object} pOptions optional Object containg the optional values:<br>
		 * <b>locale</b> (String) the locale, if left out it is read from the meta tags.<br>
		 * <b>type</b> (String) can be "dev" or "live", if left out it is read from the location.
		 * @example prepareConfig( { locale: "sv-SE" } );
		 * @example prepareConfig( { locale: "sv-SE", type: "dev" } );
		 * @example prepareConfig( { type: "live" } );
		 */
		prepareConfig: function (pOptions) {
			var vServerHost,
				vElement,
                reportType = "",
				utils = com.ikea.irw.stat.Utils;

			this.clearData();

			// This method was called with options
			if (pOptions) {
				if (pOptions.locale) {
					this.setLocale(pOptions.locale);
				}
				if (pOptions.type) {
					irwstatsStatType = pOptions.type;
				}
				if (pOptions.reporttype) {
					reportType = pOptions.reporttype;
				}
			}

			// Check if the stattype has been set, otherwise try and determine based on the url
			if (irwstatsStatType === "") {
				// Set the stattype based on the address
				vServerHost = document.location.host;
				if (vServerHost === "www.ikea.com" || vServerHost === "secure.ikea.com" || vServerHost === "preview.ikea.com") {
					irwstatsStatType = "live";
				} else {
					irwstatsStatType = "dev";
				}
			}

			// If the s_country and s_language is not set (they are set using the setLocale() method)
			if (s_country === "" || s_language === "") {
				vElement = getElement("meta", {
					attribute: "name",
					value: "language"
				});

				if (vElement) {
					this.setLocale(vElement.getAttribute("content"));
				}
			}

			try {
				s_urls = self.location.host + self.location.pathname;
				if (s_urls.endsWith("/")) {
					s_urls = s_urls.slice(0, -1);
				}

				if (irwstatsStatType === "dev") {
                    if (reportType === "") {
                        s_account = "ikea" + s_country + irwstatsStatType;
                    } else {
                        s_account = "ikeaall" + reportType + irwstatsStatType;
                    }

					s_trackingServer = false;

					irwstatsInitialized = true;

					// CTE-F should be directed to BAT
					if (utils.isBAT()) {
                        if (reportType === "mls") {
                            s_account = "ikeaallmlsbat";
                        } else {
                            s_account = "ikeasebat";
                        }
					}
				} else if (irwstatsStatType === "live") {
                    if (reportType === "planner") {
                        s_account = "ikeaall" + reportType;
                    } else {
                        s_account = "ikea" + s_country + reportType + "prod,ikeaall" + reportType + "prod";
                    }
					s_trackingServer = true;

					irwstatsInitialized = true;
				}

				// This is from s_code.js
				set_s_var();

			} catch (e) {
				com.ikea.irw.stat.Errors.handleError(e, this);
			}

			// DEBUG, ONLY FOR FIREFOX, watch is not supported in chrome (and not in strict mode)
//			watchS("pageName");
//			watchS("prop2");
//			watchS("prop3");
//			watchS("prop29");
		},
		/**
		 * This is the method responsible for sending the stats to omniture.
		 * It will be automatically called when the page has finished loading.
		 */
		send: function () {
			var vIrwTags,
				tag = com.ikea.irw.stat.Tag,
				vendor = com.ikea.irw.stat.Vendor,
				common = com.ikea.irw.stat.Common,
                general = com.ikea.irw.stat.General;
                
			tag.readTrailingTag();
			vIrwTags = tag.readMetaTags();

			if (vIrwTags && vIrwTags.length > 0) {
				vendor.prepareVendor(vIrwTags);
                general.setHomepageReferer(vendor);

				vendor.execute();

				common.clearLocalData();
			}
		},
		/**
		 * Used to send non-pageviews to omniture.
		 * @param {Object} pOptions Object containing the type of link and/or the action. The type is defaulted to "o" if left out.
		 * @example sendLink({ type: "o", action: "the link action" }); which is equal to: sendLink({ action: "the link action" });
		 */
		sendLink: function (pOptions) {
			var vTags,
				tag = com.ikea.irw.stat.Tag,
				vendor = com.ikea.irw.stat.Vendor,
				common = com.ikea.irw.stat.Common,
				constants = com.ikea.irw.stat.Constants;

			vTags = tag.readMetaTags();
			if (vTags && vTags.length > 1) {
				vendor.prepareVendor(vTags);

				if (common.checkLocalFlag(constants.FLAG_RIA_PAGE_VIEW_SET)) {
					vendor.execute();

				} else {
					vendor.executeLink(pOptions);
					common.clearLocalData();
				}
			}
		},
		/**
		 * Send statistics to omniture that a download has been made.
		 * @param {String} pLink the anchor that was pressed.
		 * @example in html: <a href="http://link.com/file.zip" name="name of the link" onclick="sendDownload(this);">My download</a>
		 */
		sendDownload: function (pLink) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants;

			if (pLink && pLink.href && pLink.name) {
				vendor.addEvent(constants.EVENT_DOWNLOAD);

				vendor.setVariable(constants.PROP_DOWNLOADS, pLink.href);
				vendor.setVariable(constants.EVAR_DOWNLOADS, pLink.href);

				vendor.setTrackVars([constants.PROP_DOWNLOADS, constants.EVAR_DOWNLOADS, constants.EVENTS]);
				vendor.setTrackEvent(constants.EVENT_DOWNLOAD);

				vendor.executeLink({ type: "d", action: pLink.name });
			}
		}
	};
}());
/*global com*/

/**
 * @classDescription Base class for error handling
 * @constructor
 */
com.ikea.irw.stat.Errors = (function () {
	/** @scope com.ikea.irw.stat.Error */
	return {

		/**
		 * Handle an error. Will print to the console if debug flag is on.
		 * {@link com.ikea.irw.stat.irwStatsDebug}
		 * @param {Error} pError error that was thrown.
		 * @param {String} pFunc name of function that threw the error..
		 * @throws {Error} if debug is on and the stattype is "dev".
		 */
		handleError: function (pError, pCaller) {
			var callerName, callerContent, key;

			if (pCaller) {
				if (typeof pCaller === "object") {
					callerContent = this.handleError.caller.toString();

					for (key in pCaller) {
						if (pCaller.hasOwnProperty(key)) {
							if (callerContent === pCaller[key].toString()) {
								callerName = key;
								break;
							}
						}
					}

				} else if (typeof pCaller === "function") {
					callerName = pCaller.name;
				}

			} else {
				callerName = this.handleError.caller.name;
			}

			if (callerName) {
				pError.message = "error in " + callerName + ": " + pError.message + "\n";
				com.ikea.irw.stat.Utils.debug(pError.message);
			}

			throw new Error(pError);
		}
	};
}());/*global window, com, s, irwstatsLocalVars: true, irwstatsLocalFlags: true, irwstatsLocalTrackVars, irwstatsLocalMetaTags, irwstatsLocalFixedVars, irwstatSetCookie */

/**
 * This is a class where functionality that doesn't git in another class can be put.
 * 
 * @classDescription General functionality
 * @constructor
 */
com.ikea.irw.stat.General = (function () {
	"use strict";

	/** @scope com.ikea.irw.stat.General */
	return {
		/**
		 * Stats for use with Dynamic Litebox.
		 */
		dynamicLitebox: function () {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants;

			vendor.setVariable(constants.EVAR_PRODUCT_FINDING_METHOD, "static>litebox>static content");
			vendor.setVariable(constants.PROP_PAGE_FUNCTIONALITY, "function>litebox");
			vendor.execute();
		},
		/**
		 * Dynamic list filtered.
		 */
		dynamicListFiltered: function (pListName, pFilterName) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants,
				tag = com.ikea.irw.stat.Tag,
				core = com.ikea.irw.stat.Core,
				vSuffix = ">filter",
				vStr;

			// For now don't send pagefunctionality since there is no global english text available
			// tag.addMetaTag("IRWStats.pagefunctionality", s.prop2 + ">" + pListName.toLowerCase() + ">" + pFilterName.toLowerCase());
			vStr = vendor.getValue(constants.PROP_PAGE_NAME);
			if (vStr && !vStr.endsWith(vSuffix)) {
				tag.addMetaTag("IRWStats.pageName", vStr + vSuffix);
			}

			core.send();
		},
		/**
		 * Family newsletter signup stats.
		 */
		familyNewsletterSignup: function () {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants;

			vendor.setEvent(constants.EVENT_NEWSLETTER_SIGNUP);
			vendor.setTrackVar(constants.EVENTS);
			vendor.setTrackEvent(constants.EVENT_NEWSLETTER_SIGNUP);
			vendor.executeLink({ action: "newsletter_signup" });
		},
		/**
		 * Local store viewed.
		 */
		localStoreViewed: function (pStore) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants;

			if (pStore && !pStore.blank()) {
				vendor.setEvent(constants.EVENT_LOCAL_STORE_VIEWED);
				vendor.setVariable(constants.EVAR_LOCAL_STORE, pStore.toLowerCase());
				vendor.setTrackVar(constants.EVENTS);
				vendor.setTrackEvent(constants.EVENT_LOCAL_STORE_VIEWED);
				vendor.executeLink({ action: "local_store_viewed" });
			}
		},
		/**
		 * Stats when Ask Anna is popuped.
		 */
		popupAnna: function () {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants,
				common = com.ikea.irw.stat.Common,
				vStr = "ask anna";

			vendor.clearVariables();
			vendor.setVariable(constants.PROP_PAGE_NAME, vStr);
			vendor.setVariable(constants.PROP_LOCAL_PAGES, vStr);
			vendor.setVariable(constants.PROP_DEPARTMENT, vStr);
			vendor.setVariable(constants.PROP_PAGE_TYPE, vStr);
			vendor.setVariable(constants.EVAR_SUPPORT_TYPE, vStr);
			vendor.addEvent(constants.EVENT_SUPPORT_REQUEST);
			irwstatsLocalFlags = [];
			irwstatsLocalVars = [];

			common.addLocalFlag(constants.FLAG_PAGE_NAME_SET);
			common.addLocalFlag(constants.FLAG_PAGE_NAME_LOCAL_SET);
			common.addLocalFlag(constants.FLAG_CATEGORIES_SET);

			vendor.execute();
		},
		/**
		 * Stats when Ask Anna is opened.
		 */
		askAnnaOpen: function () {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants,
				common = com.ikea.irw.stat.Common,
				vStr = "ask anna";

			vendor.clearVariables();
			vendor.setVariable(constants.PROP_COUNTRY, s_country);
			vendor.setVariable(constants.PROP_LANGUAGE, s_language);
			vendor.setVariable(constants.PROP_PAGE_NAME, vStr);
			vendor.setVariable(constants.PROP_DEPARTMENT, vStr);
			vendor.setVariable(constants.PROP_CATEGORY, vStr);
			vendor.setVariable(constants.PROP_SUB_CATEGORY, vStr);
			vendor.setVariable(constants.PROP_SYSTEM, vStr);
			vendor.setVariable(constants.EVAR_SUPPORT_TYPE, vStr);

			vendor.setVariable(constants.PROP_PAGE_TYPE, "support");

			vendor.addEvent(constants.EVENT_SUPPORT_REQUEST);

			irwstatsLocalFlags = [];
			irwstatsLocalVars = [];

			common.addLocalFlag(constants.FLAG_PAGE_NAME_SET);
			common.addLocalFlag(constants.FLAG_PAGE_NAME_LOCAL_SET);
			common.addLocalFlag(constants.FLAG_CATEGORIES_SET);

			vendor.execute();
		},
		/**
		 * Page functionality (prop24) sent as a link.
		 */
		pageFunctionality: function (pFunctionality, pAction) {
			var tag = com.ikea.irw.stat.Tag,
				common = com.ikea.irw.stat.Common,
				core = com.ikea.irw.stat.Core,
				constants = com.ikea.irw.stat.Constants;

			tag.addMetaTag("IRWStats.pageFunctionality", pFunctionality);
			common.addLocalFlag(constants.FLAG_ADD_ALL_PROPS_AND_EVENTS);
			common.addTrackVar("IRWStats.pageFunctionality", true);
			core.sendLink({ action: pAction });
		},
		/**
		 * Form error stats.
		 */
		formError: function (pFormName, pFormField, pFormErrorText) {
			var tag = com.ikea.irw.stat.Tag,
				vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants,
				core = com.ikea.irw.stat.Core;

			tag.addMetaTag("IRWStats.formErrorName", pFormName);
			tag.addMetaTag("IRWStats.formErrorFields", pFormField);
			tag.addMetaTag("IRWStats.formErrorTexts", pFormErrorText);

			vendor.setTrackVar(constants.PROP_FORM_ERROR, pFormErrorText);
			vendor.clearTrackEvents();

			core.sendLink({ action: "form error" });
		},
		/**
		 * Form error Key stats.
		 */
		formErrorKey: function (pFormErrorKey, reLoad) {
			var tag = com.ikea.irw.stat.Tag,
				vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants,
				core = com.ikea.irw.stat.Core;
                
			vendor.setVariable(constants.PROP_FORM_ERROR, pFormErrorKey);
			vendor.addTrackVars([constants.PROP_FORM_ERROR]);
			if (!reLoad) {
                vendor.clearVariables(["pageName"]);
			}
			vendor.executeErrorLink({ action: "error>user generated>form error" });
		},
		/**
		 * Functionality to send corresponding channel when share function is used.
		 */
		setShareAction: function (pChannel) {
			var vendor = com.ikea.irw.stat.Vendor,
                constants = com.ikea.irw.stat.Constants;
			vendor.setVariable(constants.PROP_PAGE_FUNCTIONALITY, "function>share");
			vendor.addEvent(constants.EVENT_VIRAL);
			vendor.setVariable(constants.EVAR_VIRAL_CHANNEL, "share>" + pChannel);
			vendor.addTrackVars([constants.PROP_PAGE_FUNCTIONALITY, constants.EVAR_VIRAL_CHANNEL, constants.EVENTS]);
			if (vendor.getValue(constants.EVAR_PRODUCTS).length > 0) {
                vendor.addTrackVar(constants.EVAR_PRODUCTS);
			}
            vendor.setTrackEvent(constants.EVENT_VIRAL);
            vendor.executeLink({ action: "used_" + pChannel});
        },
			/**
			*To track the successfull upload for selfservice form.
			**/
		fileUploadTracking: function () {
			var vendor = com.ikea.irw.stat.Vendor,
                constants = com.ikea.irw.stat.Constants;
			vendor.clearVariables();
			vendor.setVariable(constants.PROP_PAGE_FUNCTIONALITY, "succeed");
			vendor.setTrackVars([constants.PROP_PAGE_FUNCTIONALITY]);
			vendor.executeLink({ action: "Successful Upload"});
		},      
        setCorrosilAction: function () {
            var vendor = com.ikea.irw.stat.Vendor,
                constants = com.ikea.irw.stat.Constants;
            vendor.setVariable(constants.PROP_PAGE_FUNCTIONALITY, "function>promotional area");
            vendor.addTrackVars([constants.PROP_PAGE_FUNCTIONALITY]);
            vendor.executeLink({action: "homepage"});
		},
		/**
		 * Functionality to pass the referer from global startpage to national homepage
		 */
        setHomepageReferer: function (vendor) {
            var cookie = com.ikea.irw.stat.Cookie.getCookie("IRWStats.referer"),
				constants = com.ikea.irw.stat.Constants;

            if (document.referrer !== "" && vendor.getValue(constants.PROP_PAGE_NAME) === "www.ikea.com global start page") {
                irwstatSetCookie("IRWStats.referer", document.referrer, "-1");
            }

            if (cookie !== null && cookie !== "" && vendor.getValue(constants.PROP_PAGE_NAME) === "home page") {
                s.referrer = cookie;
                irwstatSetCookie("IRWStats.referer", "", "-1");
            }
        }
	};
}());
/*global com, isArray, isString, nbrRoomset, document, zoomImageFlag, altImgFlag, localPriceFlag */

/**
 * @classDescription Product specific functions
 * @constructor
 */
com.ikea.irw.stat.Product = (function () {
	"use strict";

	/** @scope com.ikea.irw.stat.Product */
	return {

		/**
		 * Stats to send when comparing products.
		 * @param {Array} pProductArray an array with product ids
		 * @example compareProducts(["myProd", "myOtherProd"]);
		 */
		compareProducts: function (pProductArray) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants,
				vProductId = "",
				vCount,
				vPdtStr = "",
				vStr = "";

			vendor.clearVariable(constants.EVAR_PRODUCT_COMPARISION);
			vendor.clearVariable(constants.EVAR_PRODUCTS);

			if (pProductArray && isArray(pProductArray) && pProductArray.length !== 0) {
				pProductArray.sort();

				for (vCount = 0; vCount < pProductArray.length; vCount += 1) {
					vProductId = pProductArray[vCount];
					if (vProductId && vProductId.toLowerCase().startsWith("s")) {
						vProductId = vProductId.substr(1);
					}
					vPdtStr += ";" + vProductId;
					vStr += vProductId + ">";
				}
			}
			vendor.appendVariable(constants.EVAR_PRODUCT_COMPARISION, vStr.substr(0, vStr.length - 1));
			vendor.appendVariable(constants.EVAR_PRODUCTS, vPdtStr);
			vendor.setEvents([constants.EVENT_PRODUCT_VIEW, constants.EVENT_PRODUCT_VIEW_CUSTOM, constants.EVENT_PRODUCT_VIEW_VISITS]);
		},

		/**
		 * Top ten product was viewed.
		 */
		topTenProductViewed: function () {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants;

			// porp24
			vendor.setVariable(constants.PROP_PAGE_FUNCTIONALITY, "modules>top 10 products");

			// eVar3
			vendor.setVariable(constants.EVAR_PRODUCT_FINDING_METHOD, "main category>top 10 products");

			vendor.addTrackVars([constants.PROP_PAGE_FUNCTIONALITY, constants.EVAR_PRODUCT_FINDING_METHOD]);
			vendor.executeLink({ action: "TopTen Product Viewed from Slideshow" });
		},

		/**
		 * A product was viewed from the slideshow.
		 */
		productViewedFromSlideShow: function (pPartNumber, productViewType) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants;

			if (pPartNumber && isString(pPartNumber) && !pPartNumber.blank()) {
				vendor.clearVariable(constants.EVAR_PRODUCTS);
				this.addProduct(pPartNumber);
				vendor.setEvents([constants.EVENT_PRODUCT_VIEW, constants.EVENT_PRODUCT_VIEW_CUSTOM, constants.EVENT_PRODUCT_VIEW_VISITS]);
				vendor.setVariable(constants.PROP_PRODUCT_VIEW_TYPE, productViewType);
				vendor.setTrackVars([constants.EVENTS, constants.EVAR_PRODUCTS, constants.PROP_PRODUCT_VIEW_TYPE, constants.EVAR_PRODUCT_VIEW_TYPE]);
				vendor.setTrackEvents([constants.EVENT_PRODUCT_VIEW, constants.EVENT_PRODUCT_VIEW_CUSTOM, constants.EVENT_PRODUCT_VIEW_VISITS]);
				vendor.executeLink({ action: "Product Viewed from " + productViewType});
			}
		},

		/**
		 * Stats for when a product changed.
		 */
		productChanged: function (pProductId) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants,
				common = com.ikea.irw.stat.Common,
				vMpaImagesCount = 0,
				vAltImagesCount = 0,
				vProp48 = "",
				vContainer;

			if (pProductId && isString(pProductId) && !pProductId.blank()) {
				vendor.clearVariable(constants.EVAR_PRODUCTS);

				if (!pProductId.startsWith(";")) {
					vendor.setVariable(constants.EVAR_PRODUCTS, ";");
				}

				vendor.clearVariables([
					constants.PROP_SEARCH_TERM, // prop6
					constants.PROP_NUMBER_SEARCH_RESULTS, // prop7
					constants.PROP_SHOPPING_CART_STORE_NUMBER, // prop10
					constants.PROP_SHOPPING_CART_IN_STOCK, // prop11
					constants.PROP_SHOPPING_CART_ARTICLE_NUMBER, // prop12
					constants.PROP_PAGE_FUNCTIONALITY, // prop24
					constants.PROP_NUMBER_OF_SEARCH_RESULTS_TOTAL, // prop42
					constants.EVAR_SEARCH_TERM, // eVar1
					constants.EVAR_PRODUCT_FINDING_METHOD, // eVar3
					constants.EVAR_SHOPPING_CART_STOCK_STORE_NUMBER, // eVar10
					constants.EVAR_SHOPPING_CART_IN_STOCK_PARAM, // eVar11
                    constants.EVAR_SEARCHES_PER_VISIT, // eVar27
					constants.EVAR_STOCK_CHECK_PER_VISIT // eVar28
				]);

				vendor.setEvents([constants.EVENT_PRODUCT_VIEW, constants.EVENT_PRODUCT_VIEW_CUSTOM]);
				if (!common.checkLocalFlag(constants.FLAG_PROD_VIEW)) {
					common.addLocalFlag(constants.FLAG_PROD_VIEW);
				}

				if (common.checkLocalFlag(constants.FLAG_COLOR_BAR_CLICKED)) {
					vendor.setVariable(constants.PROP_RANGE_FUNCTIONALITY, "pip>range_functionality>a16");
					vendor.setVariable(constants.EVAR_PIP_USED_RAGE_FUNCTIONALITY, "pip>range_functionality>a16");
					vendor.clearVariable(constants.EVAR_RAGE_FUNCTIONALITY);
				} else {
					vendor.clearVariables([
						constants.PROP_RANGE_FUNCTIONALITY, // prop48
						constants.EVAR_RAGE_FUNCTIONALITY, // eVar48
						constants.EVAR_PIP_USED_RAGE_FUNCTIONALITY //eVar56
					]);
				}

				if (pProductId.startsWith("S")) {
					pProductId = pProductId.substr(1, pProductId.length);
				}

				vendor.appendVariable(constants.EVAR_PRODUCTS, pProductId);

				vendor.execute();
			}
		},

		/**
		 * Stats for when clicking a product finding link.
		 */
		productFindingLinkClicked: function (pAction) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants,
				vAction = "";

			if (pAction && isString(pAction) && !pAction.blank()) {
				if (pAction === "onlineCatalogue") {
					vendor.setVariable(constants.EVAR_PRODUCT_FINDING_METHOD, "online catalogue");
					vendor.clearVariable(constants.EVAR_INTERNAL_TRACKING_CODE);
					vAction = "browsed_online_catalogue";

				} else if (pAction === "roomset") {
					vendor.setVariable(constants.EVAR_PRODUCT_FINDING_METHOD, "roomset");
					vAction = "clicked_roomset";
				}

				vendor.setTrackVar(constants.EVAR_PRODUCT_FINDING_METHOD);
				vendor.executeLink({ action: vAction });
			}
		},

		/**
		 * Stats for when a product gets added.
		 * @param {String} pProductId the product id to add
		 */
		addProduct: function (pProductId) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants,
				vProducts;

			if (pProductId && isString(pProductId) && !pProductId.blank() && pProductId.length >= 2) {
				vProducts = vendor.getValue(constants.EVAR_PRODUCTS);

				// If the "s.products" do not contain the pProductId
				if (vProducts.length > 0) {
					if (!vProducts.contains(pProductId)) {
						vendor.appendVariable(constants.EVAR_PRODUCTS, ",");
					} else {
						return;
					}
				}

				// If the pProductId do not start with a ";"
				if (!pProductId.startsWith(";")) {
					vendor.appendVariable(constants.EVAR_PRODUCTS, ";");
					if (pProductId.toLowerCase().startsWith("s")) {
						pProductId = pProductId.substr(1);
					}

				// If the second character in the pProductId is a "s"
				} else if (pProductId.substr(1, 1).toLowerCase() === "s") {
					pProductId = ";" + pProductId.substr(2);
				}

				vendor.appendVariable(constants.EVAR_PRODUCTS, pProductId);
			}
		},

		/**
		 * Stats for when a product gets removed.
		 * @param {String} pProductId the product id
		 */
		removeProduct: function (pProductId) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants,
				vProducts,
				vProdArray,
				vCount,
				vProdId;

			if (pProductId && !pProductId.blank() && pProductId.length >= 2) {
				vProducts = vendor.getValue(constants.EVAR_PRODUCTS);

				if (!vProducts.blank()) {
					vProdArray = vProducts.split(",");

					for (vCount = 0; vCount < vProdArray.length; vCount += 1) {
						vProdId = vProdArray[vCount].substr(1);
						if ((pProductId.startsWith(";") && pProductId.substr(1) === vProdId) || (vProdId === pProductId)) {
							vProdArray.splice(vCount, 1);
							break;
						}
					}

					vendor.setVariable(constants.EVAR_PRODUCTS, vProdArray.join(","));
				}
			}
		},

		/**
		 * Stats for when a thumbnail gets clicked in the PIP.
		 * @param {String} pImg the type of image that was clicked.
		 */
		thumbClickedFromPIP: function (pImg) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants,
				vAction;

			if (pImg === "zoom") {
				vAction = "used_zoom";

				vendor.setVariable(constants.PROP_RANGE_FUNCTIONALITY, "pip>range_functionality>a1024");
				vendor.setVariable(constants.EVAR_PIP_USED_RAGE_FUNCTIONALITY, "pip>range_functionality>a1024");

				vendor.setTrackVars([constants.PROP_RANGE_FUNCTIONALITY, constants.EVAR_PIP_USED_RAGE_FUNCTIONALITY]);
			} else {
				vAction = (pImg === "mpaImg") ? "used_mpa" : "used_alt_images";
				if (pImg === "mpaImg") {
					vendor.setVariable(constants.PROP_RANGE_FUNCTIONALITY, "pip>range_functionality>a2");
					vendor.setVariable(constants.EVAR_PIP_USED_RAGE_FUNCTIONALITY, "pip>range_functionality>a2");
				} else {
					vendor.setVariable(constants.PROP_RANGE_FUNCTIONALITY, "pip>range_functionality>a1");
					vendor.setVariable(constants.EVAR_PIP_USED_RAGE_FUNCTIONALITY, "pip>range_functionality>a1");
				}
				vendor.setVariable(constants.EVAR_PRODUCT_FINDING_METHOD, "pip>more_images>" + vAction);

				vendor.setTrackVars([constants.EVAR_PRODUCT_FINDING_METHOD, constants.PROP_RANGE_FUNCTIONALITY, constants.EVAR_PIP_USED_RAGE_FUNCTIONALITY]);
			}

			vendor.executeLink({ action: vAction});
		},
		ContactusFromPIP: function () {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants;
			vendor.setVariable(constants.PROP_RANGE_FUNCTIONALITY, "pip>range_functionality>a4096");
            vendor.setVariable(constants.EVAR_PIP_USED_RAGE_FUNCTIONALITY, "pip>range_functionality>a4096");
			vendor.setTrackVars([constants.PROP_RANGE_FUNCTIONALITY, constants.EVAR_PIP_USED_RAGE_FUNCTIONALITY]);
			vendor.executeLink({ action: "contact_us"});
		},
		/**
		 * The relations of a product.
		 */
		addRelations: function (pRelation) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants,
				vValue;

			if (pRelation && isString(pRelation) && !pRelation.blank()) {
				switch (pRelation) {
				case "expression_match":
					vValue = "pip>matching>product";
					break;

				case "must_be_completed_with":
					vValue = "pip>complementary>must_complete";
					break;

				case "gets_safer_with":
					vValue = "pip>complementary>safety";
					break;

				case "product_care":
					vValue = "pip>complementary>care";
					break;

				case "may_be_completed_with":
					vValue = "pip>complementary>may_complete";
					break;

				case "interior_fittings":
					vValue = "pip>complementary>interior_fitting";
					break;

				default:
					vValue = pRelation;
					break;
				}

				vendor.setVariable(constants.EVAR_PRODUCT_FINDING_METHOD, vValue);
			}
		},

		/**
		 * Functionality to send range functionality from PIP
		 */
		sendRangeFunctionality : function (pUsedModules) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants;
			if (pUsedModules) {
				vendor.setVariable(constants.PROP_RANGE_FUNCTIONALITY, "pip>range_functionality>v" + pUsedModules);
				vendor.setVariable(constants.EVAR_RAGE_FUNCTIONALITY,  "pip>range_functionality>v" + pUsedModules);

				vendor.setTrackVars([constants.PROP_RANGE_FUNCTIONALITY, constants.EVAR_RAGE_FUNCTIONALITY]);
				vendor.executeLink({ action: "modules_loaded"});
			}
		},

		/**
		 * Functionality to check when modules are used
		 */
		moreModulesClicked : function (pModule) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants;
			if (pModule) {
				if (pModule === 'sscContainer') {
					com.ikea.irw.stat.Tag.setTrailingTag("IRWStats.pipRangeFunctionality", "pip>range_functionality>a64");
					com.ikea.irw.stat.Tag.setTrailingTag("IRWStats.pipUsedRangeFunctionality", "pip>range_functionality>a64");
				} else if (pModule === 'simsContainer') {
					com.ikea.irw.stat.Tag.setTrailingTag("IRWStats.pipRangeFunctionality", "pip>range_functionality>a128");
					com.ikea.irw.stat.Tag.setTrailingTag("IRWStats.pipUsedRangeFunctionality", "pip>range_functionality>a128");
				} else if (pModule === 'modelVisibleConatiner') {
					com.ikea.irw.stat.Tag.setTrailingTag("IRWStats.pipRangeFunctionality", "pip>range_functionality>a32");
					com.ikea.irw.stat.Tag.setTrailingTag("IRWStats.pipUsedRangeFunctionality", "pip>range_functionality>a32");
				} else if (pModule === 'matching products') {
					com.ikea.irw.stat.Tag.setTrailingTag("IRWStats.pipRangeFunctionality", "pip>range_functionality>a8");
					com.ikea.irw.stat.Tag.setTrailingTag("IRWStats.pipUsedRangeFunctionality", "pip>range_functionality>a8");
				} else if (pModule === 'complementary products') {
					com.ikea.irw.stat.Tag.setTrailingTag("IRWStats.pipRangeFunctionality", "pip>range_functionality>a4");
					com.ikea.irw.stat.Tag.setTrailingTag("IRWStats.pipUsedRangeFunctionality", "pip>range_functionality>a4");
				} else if (pModule === 'complete products') {
					vendor.setVariable(constants.PROP_RANGE_FUNCTIONALITY, "pip>range_functionality>a256");
					vendor.setVariable(constants.EVAR_PIP_USED_RAGE_FUNCTIONALITY,  "pip>range_functionality>a256");
					vendor.setTrackVars([constants.PROP_RANGE_FUNCTIONALITY, constants.EVAR_PIP_USED_RAGE_FUNCTIONALITY]);
					vendor.executeLink({ action: "used_rangeFunctionality"});
				}
			}
		}
	};
}());/*global com, isArray, irwstatsLocalFlags: true, irwstatsLocalVars: true, irwstatsInitialized, tMapArr, s, irwstatsLocalMetaTags*/

/**
 * @classDescription RIA (Rich internet application -> flash) specifics
 * @constructor
 */
com.ikea.irw.stat.RIA = (function () {
	"use strict";
	
	/** @scope com.ikea.irw.stat.RIA */
	return {
		
		/**
		 * Used to track the RIA actions.
		 * @param {Array} pRiaActions an Array with objects, where each object mus have a "key" and "value" keys with the data.
		 * @example trackRia([ { key: "IRWStats.version", value: tag.getTrailingTagValue("IRWStats.version") } ]);
		 */
		trackRIA: function (pRiaActions) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants,
				common = com.ikea.irw.stat.Common,
				core = com.ikea.irw.stat.Core,
				tag = com.ikea.irw.stat.Tag,
				vRiaAction = "ria action",
				vCount,
				vObj;
				
			if (pRiaActions && isArray(pRiaActions) && pRiaActions.length !== 0) {
				vendor.clearVariable(constants.EVAR_PRODUCTS);
				vendor.clearEvents();
				
				for (vCount = 0; vCount < pRiaActions.length; vCount += 1) {
					vObj = pRiaActions[vCount];
					if (vObj.key.startsWith("IRWStats.")) {
						
						if (vObj.key === "irwstats.riarequestname") {
							vRiaAction = vObj.value;

						} else {
							common.addTrackVar(vObj.key);
							tag.addMetaTag(vObj.key, vObj.value);
						}
					}
				}
				
				irwstatsLocalFlags = [];
				irwstatsLocalVars = [];
				common.addLocalFlag(constants.FLAG_ADD_ALL_PROPS_AND_EVENTS);
				
				this.productActions();
				
				if (irwstatsInitialized === false) {
					core.prepareConfig();
				}
				
				core.sendLink({ action: vRiaAction });
			}
		},
		
		/**
		 * 
		 */
		productActions: function () {
			var product = com.ikea.irw.stat.Product,
				vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants,
				common = com.ikea.irw.stat.Common,
				riaEvent = "",
				riaProduct = "",
				vCount,
				vObj;

			// reset the defaulted riaproduct functionality to tMapArr
			// this is due to legacy code
//			tMapArr.riaproduct.eval = "irwstatOmnitureAddProduct(value); irwstatOmnitureAddEvent('event12'); irwstatAddLocalFlag('event12'); s.eVar29 = '+1'";
			tMapArr.riaproduct = {
				run: function (pValue) {
					if (pValue.startsWith("S")) {
						pValue = pValue.substr(1);
					}
					pValue = ";" + pValue;
					vendor.setVariable(constants.EVAR_PRODUCTS, pValue);
					vendor.setEvent('event12');
					common.addLocalFlag('event12');
					s.eVar29 = '+1';
				},
				addTrack: ["products", "event12", "eVar29"]
			};
			
			for (vCount = 0; vCount < irwstatsLocalMetaTags.length; vCount += 1) {
				vObj = irwstatsLocalMetaTags[vCount];
				if (vObj.name === "riaevent") {
					riaEvent = vObj.value;
					
				} else if (vObj.name === "riaproduct") {
					riaProduct = vObj.value;
				}
			}
			
			if (!riaEvent.blank()) {
				product.addProduct(riaProduct);
				vendor.addEvent(riaEvent);
				
				vendor.setTrackVars([constants.EVENTS, constants.EVAR_PRODUCTS]);
				vendor.setTrackEvent(riaEvent);
				
				riaEvent = riaEvent.toLowerCase();
				if (riaEvent === constants.EVENT_SHOPPING_LIST_ADD) {
					vendor.addEvent(constants.EVENT_ADD_TO_SHOPPING_LIST_VISITS);
					vendor.addTrackEvent(constants.EVENT_ADD_TO_SHOPPING_LIST_VISITS);
					
				} else if (riaEvent === constants.EVENT_CART_ADD.toLowerCase()) {
					vendor.addEvent(constants.EVENT_CART_ADDITION_VISIT);
					vendor.addTrackEvent(constants.EVENT_CART_ADDITION_VISIT);
				}
				
				common.addLocalFlag(constants.FLAG_RIA_ACTION_SET);
				delete tMapArr.riaproduct;
			}
		},
        trackRIAaction: function (pRiaActions) {
            "use strict";
            var vendor = com.ikea.irw.stat.Vendor,
                constants = com.ikea.irw.stat.Constants,
                common = com.ikea.irw.stat.Common,
                core = com.ikea.irw.stat.Core,
                tag = com.ikea.irw.stat.Tag,
                vRiaAction = "ria action",
                vCount,
                vObj;
            if (pRiaActions && isArray(pRiaActions) && pRiaActions.length !== 0) {
                vendor.clearVariable(constants.EVAR_PRODUCTS);
                vendor.clearEvents();
                for (vCount = 0; vCount < pRiaActions.length; vCount += 1) {
                    vObj = pRiaActions[vCount];
                    if (vObj.key.startsWith("IRWStats.")) {
                        if (vObj.key === "irwstats.riarequestname") {
                            vRiaAction = vObj.value;
                        } else {
                            common.addTrackVar(vObj.key);
                            tag.addMetaTag(vObj.key, vObj.value);
                        }
                    }
                }
                irwstatsLocalFlags = [];
                irwstatsLocalVars = [];
                common.addLocalFlag(constants.FLAG_ADD_ALL_PROPS_AND_EVENTS);
                if (irwstatsInitialized === false) {
                    core.prepareConfig();
                }
                core.sendLink({ action: vRiaAction });
            }
        }
	};
}());/*global com*/

/**
 * @classDescription StockCheck functionality
 * @constructor
 */
com.ikea.irw.stat.StockCheck = (function () {
	"use strict";

	/** @scope com.ikea.irw.stat.StockCheck */
	return {

		/**
		 * Stock check notification stats.
		 */
		notification: function (pMethod) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants;

			if (pMethod && !pMethod.blank()) {
				vendor.setVariable(constants.PROP_SHOPPING_CART_CONTACT_METHOD, pMethod.toLowerCase());

				vendor.addEvent(constants.EVENT_STOCK_CONTACT);
				vendor.setTrackVars([
					constants.PROP_SHOPPING_CART_CONTACT_METHOD,
					constants.EVAR_SHOPPING_CART_CONTACT_METHOD,
					constants.EVENTS,
					constants.EVAR_PRODUCTS
				]);
				vendor.setTrackEvent(constants.EVENT_STOCK_CONTACT);
				vendor.executeLink({action: "stock check notification"});
			}
		},

		/**
		 * Stock check from PIP (product information page) stats.
		 */
		fromPIP: function (pInStock, pStoreId) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants,
				product = com.ikea.irw.stat.Product,
				common = com.ikea.irw.stat.Common,
				tag = com.ikea.irw.stat.Tag,
				vAction = "stock check from pip",
				vProducts;

			if (pInStock && pStoreId) {
				// prop11
				vendor.setVariable(constants.PROP_SHOPPING_CART_IN_STOCK, pInStock.toLowerCase());

				// prop10, eVar10
				vendor.setVariable(constants.PROP_SHOPPING_CART_STORE_NUMBER, pStoreId);
				vendor.setVariable(constants.EVAR_SHOPPING_CART_STOCK_STORE_NUMBER, pStoreId);

				vProducts = vendor.getValue(constants.EVAR_PRODUCTS).substr(1);
				if (vProducts.contains(";")) {
					vProducts = vProducts.upTo(";");
				}
				vendor.setVariable(constants.PROP_SHOPPING_CART_ARTICLE_NUMBER, vProducts);

				vendor.addEvents([constants.EVENT_STOCK_CHECK, constants.EVENT_STOCK_CHECK_VISIT]);
				vendor.setTrackVars([
					constants.PROP_SHOPPING_CART_STORE_NUMBER,
					constants.PROP_SHOPPING_CART_IN_STOCK,
					constants.PROP_SHOPPING_CART_ARTICLE_NUMBER,
					constants.EVAR_SHOPPING_CART_STOCK_STORE_NUMBER,
					constants.EVAR_SHOPPING_CART_IN_STOCK_PARAM,
					constants.EVAR_ROOM_SET,
					constants.EVAR_PRODUCTS,
					constants.EVENTS
				]);

				vendor.setTrackEvents([constants.EVENT_STOCK_CHECK, constants.EVENT_STOCK_CHECK_VISIT]);
				if (common.checkLocalFlag(constants.FLAG_STOCK_CHECK_PRESSED)) {
					vendor.setVariable(constants.EVAR_STOCK_CHECK_PER_VISIT, "+1");
					vendor.addTrackVar(constants.EVAR_STOCK_CHECK_PER_VISIT);
					vendor.addEvent(constants.EVENT_STOCK_CHECK_MANUAL);
					vendor.addTrackEvent(constants.EVENT_STOCK_CHECK_MANUAL);

					if (common.checkLocalFlag(constants.FLAG_HAS_CHANGED_STORE)) {
						vendor.setVariable(constants.EVAR_MICRO_SITE, "+1");
						vendor.addTrackVar(constants.EVAR_MICRO_SITE);
					}
				}

				vendor.addTrackVar(constants.EVAR_IKEA_FAMILY_ID);
				tag.setTrailingTag("IRWStats.stockCheckPerformed", "yes");
				vendor.executeLink({ action: vAction });
			}
		},

		/**
		 * Sets stats for page and range functionality when local price link is clicked in lite box.
		 *
		 **/
		onLiteBox: function () {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants;

			vendor.setVariable(constants.PROP_PAGE_FUNCTIONALITY, "function>litebox");
			vendor.setVariable(constants.PROP_RANGE_FUNCTIONALITY, "pip>range_functionality>a2048");

			vendor.setTrackVars([constants.PROP_PAGE_FUNCTIONALITY, constants.PROP_RANGE_FUNCTIONALITY, constants.EVAR_RAGE_FUNCTIONALITY]);

			vendor.executeLink({action: "used_localprice"});
		},

		/**
		 * Stock check from lite box stats.
		 * @param {String} pProducts the products.
		 * @param {String} pStoreNumber the store number.
		 */
		fromLiteBox: function (pProducts, pStoreNumber, pResponse) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants,
				common = com.ikea.irw.stat.Common,
				cookie = com.ikea.irw.stat.Cookie,
				vLocale = com.ikea.irw.stat.Core.getLocale(),
				vProducts;

			// products, prop10, eVar10
			vendor.setVariable(constants.EVAR_PRODUCTS, pProducts);
			vendor.setVariable(constants.PROP_SHOPPING_CART_STORE_NUMBER, pStoreNumber);
			vendor.setVariable(constants.EVAR_SHOPPING_CART_STOCK_STORE_NUMBER, pStoreNumber);

			vProducts = vendor.getValue(constants.EVAR_PRODUCTS).substr(1);
			if (vProducts.contains(";")) {
				vProducts = vProducts.upTo(";");
			}
			vendor.setVariable(constants.PROP_SHOPPING_CART_ARTICLE_NUMBER, vProducts);

			vendor.setVariable(constants.EVAR_IKEA_FAMILY_ID, pResponse);

			vendor.addEvents([constants.EVENT_STOCK_CHECK, constants.EVENT_STOCK_CHECK_VISIT]);

			vendor.setTrackVars([
				constants.PROP_SHOPPING_CART_STORE_NUMBER, //prop10
				constants.EVAR_SHOPPING_CART_STOCK_STORE_NUMBER, //eVar10
				constants.PROP_SHOPPING_CART_ARTICLE_NUMBER, //prop12
				constants.EVAR_IKEA_FAMILY_ID, //eVar33
				constants.EVAR_PRODUCTS, //products
				constants.EVENTS //events
			]);

			vendor.setTrackEvents([constants.EVENT_STOCK_CHECK, constants.EVENT_STOCK_CHECK_VISIT]);

			vendor.setVariable(constants.EVAR_STOCK_CHECK_PER_VISIT, "+1");
			vendor.addTrackVar(constants.EVAR_STOCK_CHECK_PER_VISIT);
			vendor.addEvent(constants.EVENT_STOCK_CHECK_MANUAL);
			vendor.addTrackEvent(constants.EVENT_STOCK_CHECK_MANUAL);

			if (common.checkLocalFlag(constants.FLAG_HAS_CHANGED_STORE)) {
				vendor.setVariable(constants.EVAR_MICRO_SITE, "+1");
				vendor.addTrackVar(constants.EVAR_MICRO_SITE);
			}

			vendor.executeLink({action: "stock check from pip localprice"});
		}
	};
}());/*global com, getElements, irwstatsLocalMetaTags, s, has, isString, location, document */

/**
 * This class handles all the functions regarding the meta tag and
 * trailing tag.
 *
 * @classDescription Meta tag and trailing tag functionality
 * @constructor
 */
com.ikea.irw.stat.Tag = (function () {
	"use strict";

	/** @scope com.ikea.irw.stat.Tag */
	return {

		/**
		 * Read the meta tags from the current page and add them to an Array.
		 * @return {Array} containing an Object {name, value} per entry.
		 */
		readMetaTags: function () {
			var vMetaTags,
				vIrwTags = [],
				vEquiv,
				vCharset,
				vItemName,
				vTag,
				vTagCount,
				vTagCount2,
				vItem,
				constants = com.ikea.irw.stat.Constants;

			vMetaTags = getElements("meta");

			// Iterate all the <meta /> tags that are set on the page
			for (vTagCount = 0; vTagCount < vMetaTags.length; vTagCount += 1) {
				vItem = vMetaTags[vTagCount];

				if (has(vItem, "http-equiv")) {
					vEquiv = vItem.httpEquiv;

					if (vEquiv.toUpperCase() === "CONTENT-TYPE" && vItem.getAttribute("CONTENT")) {
						vCharset = vItem.getAttribute("CONTENT");
						if (vCharset.indexOf("vCharset=") === -1) {
							vCharset = "UTF-8";
						} else {
							vCharset = vCharset.substr(vCharset.indexOf("vCharset=") + 8);
						}
						this.addCharSet(vCharset);
					}
				}

				vItemName = vItem.getAttribute("NAME");

				if (vItemName && vItemName.startsWith("IRWStats.")) {
					vTag = {};
					vTag.name = vItemName.substr(9, vItemName.length).toLowerCase();
					// Remove ' and " so that for example pageName and prop2 gets the correct value.
					vTag.value = vItem.getAttribute("CONTENT").replace(/[\'\"]/g, '');
					vIrwTags.push(vTag);
				}
			}

			// Iterate all the tags in the irwstatsLocalMetaTags array (basically tags set with setTrailingTag)
			for (vTagCount = 0; vTagCount < irwstatsLocalMetaTags.length; vTagCount += 1) {
				vItem = irwstatsLocalMetaTags[vTagCount];
				if (this.checkTag(vItem.name, vIrwTags)) {
					for (vTagCount2 = 0; vTagCount2 < vIrwTags.length; vTagCount2 += 1) {
						if (vIrwTags[vTagCount2].name === vItem.name) {
							// Replace the variable in the array
							vIrwTags[vTagCount2].value = vItem.value;
							break;
						}
					}
				} else {
					// The local META-tag is new, add it to the vIrwTags-array.
					vIrwTags.push(vItem);
				}
			}

			// Add pagename and pagenamelocal if data is missing
			vTag = { };

			if ((vIrwTags.length < 1) || (!this.checkTag(constants.TAG_PAGENAME, vIrwTags))) {
				vTag.name = "fallback_pagename";
				vTag.value = location.href.replace(/\'/g, '').replace(/\"/g, '');
				vIrwTags.push(vTag);
			}

			if ((vIrwTags.length < 2) || (!this.checkTag(constants.TAG_PAGENAME_LOCAL, vIrwTags))) {
				vTag = { };
				vTag.name = "fallback_pagenamelocal";
				vTag.value = document.title.replace(/\'/g, '').replace(/\"/g, '');
				vIrwTags.push(vTag);
			}

			return vIrwTags;
		},

		/**
		 * Check if the pTagName exists in the pIrwTags array
		 * @param {String} pTagname the tagname to look for
		 * @param {Array} pIrwTags the array of tags to look in
		 * @return {Boolean} true if the tagname (case sensitive) was found
		 */
		checkTag: function (pTagName, pIrwTags) {
			var vCount, vTag;

			if (pIrwTags) {
				for (vCount = 0; vCount < pIrwTags.length; vCount += 1) {
					vTag = pIrwTags[vCount];
					if (vTag.name === pTagName) {
						return true;
					}
				}
			}

			return false;
		},

		/**
		 * Remove a tag from an array.
		 * @param {String} pTagname the tag to remove
		 * @param {Array} pIrwTags the array to look in
		 * @return {Array} same pIrwTags array as the second parameter, sans the tag (if found)
		 */
		disableTag: function (pTagName, pIrwTags) {
			var vTagCount;

			if (pTagName && isString(pTagName) && !pTagName.blank() && pIrwTags) {
				for (vTagCount = 0; vTagCount < pIrwTags.length; vTagCount += 1) {
					if (pIrwTags[vTagCount].name === pTagName) {
						// TODO splice it?
//						pIrwTags[vTagCount].value = null;
						pIrwTags.splice(vTagCount, 1);
						break;
					}
				}
			}

			return pIrwTags || [];
		},

		/**
		 * Add a tag to the trailing tag cookie.
		 * @param {String} pTagName the name of the tag.
		 * @param {String} pTagValue the value of the tag.
		 * @example setTrailingTag("IRWStats.pageName", "my page name");
		 * @example setTrailingTag("IRWStats.pageArea", "my page area");
		 */
		setTrailingTag: function (pTagName, pTagValue) {
			var vTrailingTag,
				cookie = com.ikea.irw.stat.Cookie;

			if (pTagName && isString(pTagName) && !pTagName.blank()) {
				vTrailingTag = cookie.getCookie("IRWStats.trailingTag");
				cookie.setCookie("IRWStats.trailingTag", vTrailingTag + pTagName + "," + pTagValue + "|", 1);
			}
		},

		/**
		 * Get the value of the specified tag that's been set using {@link setTrailingTag}
		 * @param {String} pTagName the name of the tag whose value should be returned
		 * @example var pageName = tag.getTrailingTagValue("IRWStats.pageName");
		 * @return {String} the value of the tag or empty string if not found
		 */
		getTrailingTagValue: function (pTagName) {
			var vTrailingTag = "",
				vTags = [],
				vCount,
				vPair;

			vTrailingTag = com.ikea.irw.stat.Cookie.getCookie("IRWStats.trailingTag");

			// Split the tag-value pairs on the | char
			vTags = vTrailingTag.split("|");

			// iterate the tag-value pairs
			for (vCount = 0; vCount < vTags.length; vCount += 1) {
				vPair = vTags[vCount];
				if (vPair.length > 0) {
					if (vPair.startsWith(pTagName)) {
						return vPair.after(",");
					}
				}
			}

			return "";
		},

		/**
		 * Read the trailing tag values from the cookie and put them in the metatag array (irwstatsLocalMetaTags) used later on.
		 * @see com.ikea.irw.stat.Common.addMetaTag(pTagName, pTagValue)
		 */
		readTrailingTag: function () {
			var vTrailingTag = "",
				vTags = [],
				vCount,
				vPair,
				cookie = com.ikea.irw.stat.Cookie;

			// read the trailing tag cookie
			vTrailingTag = cookie.getCookie("IRWStats.trailingTag");

			// after the trailing tag cookie is read, it is reset
			cookie.setCookie("IRWStats.trailingTag", "", -1);

			vTags = vTrailingTag.split("|");
			for (vCount = 0; vCount < vTags.length; vCount += 1) {
				vPair = vTags[vCount];
				if (vPair.length > 0) {
					this.addMetaTag(vPair.upTo(","), vPair.after(","));
				}
			}
		},

		/**
		 * Sets the s.charset
		 * @param {String} pCharSet charset to set
		 */
		addCharSet: function (pCharSet) {
			if (pCharSet) {
				s.charSet = pCharSet.toUpperCase();
			}
		},

		/**
		 * Check and invalidates tags that aren't allowed.
		 * @param {Array} pIrwTags the array of tags to check
		 * @return {Array} the array sans the invalid tags
		 */
		checkCategories: function (pIrwTags) {
			var hasCategory = false,
				hasSubCategory = false,
				hasChapter = false,
				hasSystem = false,
				hasSystemChapter = false,
				common = com.ikea.irw.stat.Common,
				constants = com.ikea.irw.stat.Constants;

			hasCategory = this.checkTag(constants.TAG_CATEGORY, pIrwTags);
			hasSubCategory = this.checkTag(constants.TAG_SUB_CATEGORY, pIrwTags);
			hasChapter = this.checkTag(constants.TAG_CHAPTER, pIrwTags);
			hasSystem = this.checkTag(constants.TAG_SYSTEM, pIrwTags);
			hasSystemChapter = this.checkTag(constants.TAG_SYSTEM_CHAPTER, pIrwTags);

			if (!hasCategory) {
				pIrwTags = this.disableTag(constants.TAG_CATEGORY, pIrwTags);
				pIrwTags = this.disableTag(constants.TAG_CATEGORY_LOCAL, pIrwTags);
				hasSubCategory = false;
			} else {
				common.addLocalFlag(constants.FLAG_HAS_CATEGORY);
			}

			if (!hasSubCategory) {
				pIrwTags = this.disableTag(constants.TAG_SUB_CATEGORY, pIrwTags);
				pIrwTags = this.disableTag(constants.TAG_SUB_CATEGORY_LOCAL, pIrwTags);
				hasChapter = false;
			} else {
				common.addLocalFlag(constants.FLAG_HAS_SUB_CATEGORY);
			}

			if (!hasChapter) {
				pIrwTags = this.disableTag(constants.TAG_CHAPTER, pIrwTags);
				pIrwTags = this.disableTag(constants.TAG_CHAPTER_LOCAL, pIrwTags);
			} else {
				common.addLocalFlag(constants.FLAG_HAS_CHAPTER);
			}

			if (!hasSubCategory && !hasChapter) {
				hasSystem = false;
			}

			if (!hasSystem) {
				pIrwTags = this.disableTag(constants.TAG_SYSTEM, pIrwTags);
				pIrwTags = this.disableTag(constants.TAG_SYSTEM_LOCAL, pIrwTags);
				hasSystemChapter = false;
			} else {
				common.addLocalFlag(constants.FLAG_HAS_SYSTEM);
			}

			if (!hasSystemChapter) {
				pIrwTags = this.disableTag(constants.TAG_SYSTEM_CHAPTER, pIrwTags);
				pIrwTags = this.disableTag(constants.TAG_SYSTEM_CHAPTER_LOCAL, pIrwTags);
			} else {
				common.addLocalFlag(constants.FLAG_HAS_SYSTEM_CHAPTER);
			}

			return pIrwTags || [];
		},

		/**
		 * Adds a tag to the local meta tag array.
		 * @param {String} pTagName the name of the tag
		 * @param {String} pTagValue the value of the tag.
		 * @example addMetaTag("IRWStats.pageName", "the name of the page");
		 * @example addMetaTag("IRWStats.pageArea", "area of the page");
		 */
		addMetaTag: function (pTagName, pTagValue) {
			if (pTagName && pTagValue && isString(pTagName) && isString(pTagValue) && !pTagName.blank() && !pTagValue.blank()) {
				var matches = pTagName.match(/^IRWStats\.(\w*)$/);
				if (matches) {
					irwstatsLocalMetaTags.push({
						"name": matches[1].toLowerCase(),
						"value": pTagValue
					});
				}
			}
		}
	};
}());
/*global com, irwstatsDebug, isInternetExplorer, alert, jstestdriver, irwstatsStatType, console */

/**
 * This class contains different utility methods for use inside the 
 * {@link com.ikea.irw.stat} namespace
 * @classDescription Utility functions for the irwstat namespace
 * @constructor
 */
com.ikea.irw.stat.Utils = (function () {
	"use strict";
	
	/** @scope com.ikea.irw.stat.Utils */
	return {
		
		/**
		 * Check if the current url is a CTE-F url.
		 * @return {Boolean} true if url is a CTE-F
		 */
		isBAT: function () {
			var loc = document.location.href, i, 
				batList = ["cfirw.ikeadt.com", "cfirw01.ikeadt.com", "cfirw02.ikeadt.com", "cte.ikeadt.com"];
			
			for (i = 0; i < batList.length; i += 1) {
				if (loc.indexOf(batList[i]) >= 0) {
					return true;
				}
			}

			return false;
		},
		 
		/**
		 * Print a debug message to the console if the debug flag is 
		 * set to true and the stattype is "dev".
		 * @see com.ikea.irw.stat.irwStatsDebug
		 * @param {String} pMessage the message to print if debug printing is on and dev server is used.
		 */
		debug: function (pMessage) {
			if (irwstatsDebug && this.isDev()) {
				this.log(pMessage);
			}
		},
		
		/**
		 * Prints a message to the console if it is available. 
		 * Should be used with caution in Internet Explorer since 
		 * it will display an Alert with the message.
		 * @param {String} pMessage the message to print
		 */
		log: function (pMessage) {
			if (isInternetExplorer()) {
				alert(pMessage);
				
			} else {
				if (typeof jstestdriver !== "undefined") {
					jstestdriver.console.log(pMessage);
				} else {
					console.log(pMessage);
				}
			}
		},

		/**
		 * Helper for checking if the live stats should be used.
		 * @return {Boolean} true if the live server should be used.
		 */
		isLive: function () {
			return irwstatsStatType === "live";
		},
		
		/**
		 * Helper for checking if the dev stats should be used.
		 * @return {Boolean} true if the development server should be used.
		 */
		isDev: function () {
			return irwstatsStatType === "dev";
		}
	};
}());
/*jslint evil: true */
/*global com, s, irwstatsStatType, irwstatsLocalVars, irwstatsLocalFixedVars, tMapArr, appendExtIfNotFlashInstalled, getCookie, s_urls, isString, isArray, isFunction, getKeys, document, location, window, trim */

/** @namespace */

/**
 * This class holds all the methods that modifies the vendor specific parts of the stats. 
 * In this case all modify operations MUST be done in this class so that vendor specific code 
 * does not spread out.
 *  
 * @classDescription Vendor specific functionality
 * @constructor
 */
com.ikea.irw.stat.Vendor = (function () {
	"use strict";
	/** @scope com.ikea.irw.stat.Vendor */
	return {
		/**
		 * Adds a string to the event string.
		 * @param {String} pEventName
		 * @example addEvent("event1"); // s.events -> "event1"
		 * @example addEvent("event1"); addEvent("event31"); // s.events -> "event1,event31"
		 */
		addEvent: function (pEventName) {
			var constants = com.ikea.irw.stat.Constants;
			if (pEventName && (pEventName !== constants.EVENT_PRODUCT_DETAIL_VIEWED && (!s.products || s.products.length !== 0))) {
				// If s.events is not set or is empty or is "None"
				if (!s.events || s.events === constants.NONE) {
					s.events = pEventName;
				// If s.events don't already contain the event
				} else if (s.events.split(',').indexOf(pEventName) === -1) {
					s.events += "," + pEventName;
				}
			}
		},
		/**
		 * Adds a range of events to the event string.
		 * @param {Array} pEventsArray an Array with events to add to the event string (s.events)
		 * @example addEvents(["event1", "event31"]); // s.events -> "event1,event31"
		 */
		addEvents: function (pEventsArray) {
			var vCount,
				constants = com.ikea.irw.stat.Constants;
			if (pEventsArray && pEventsArray.length !== 0) {
				if (!s.events || s.events === constants.NONE) {
					s.events = pEventsArray.join(",");
				} else {
					for (vCount = 0; vCount < pEventsArray.length; vCount += 1) {
						this.addEvent(pEventsArray[vCount]);
					}
				}
			}
		},
		/**
		 * Remove an event from the event string.
		 * @param {String} pEventName the event to be removed
		 * @example addEvent("event1"); removeEvent("event1"); // s.events -> ""
		 * @example addEvent("event1"); clearEvents(); // s.events -> ""
		 * @example addEvent(com.ikea.irw.stat.Constants.EVENT_SEARCH); removeEvent(com.ikea.irw.stat.Constants.EVENT_SEARCH); // s.events -> ""
		 * @example addEvent("event1"); addEvent("31"); removeEvent("event1"); // s.events -> "event31"
		 */
		removeEvent: function (pEventName) {
			if (pEventName && (s.events && s.events.length > 0)) {
				var vEvents = s.events.split(","),
					vCount,
					constants = com.ikea.irw.stat.Constants;
				for (vCount = 0; vCount < vEvents.length; vCount += 1) {
					if (vEvents[vCount] === pEventName) {
						vEvents.splice(vCount, 1);
						s.events = vEvents.join(",");
						if (s.events === "") {
							s.events = constants.NONE;
						}
						return;
					}
				}
			}
		},
		/**
		 * Set the event string to a single event. An invalid parameter will set the event string to "None". 
		 * Should be set using constants from {@link com.ikea.irw.stat.Constants}.
		 * @param {String} pEvent the event to set to the event string
		 * @example setEvent("event1"); // s.events -> "event1"
		 * @example setEvent("event1"); setEvent("event31"); // s.events -> "event31"
		 * @example setEvent(""); // s.events -> "None"
		 * @example setEvent(); // s.events -> "None"
		 */
		setEvent: function (pEvent) {
			if (pEvent) {
				s.events = pEvent;
			} else {
				s.events = com.ikea.irw.stat.Constants.NONE;
			}
		},
		/**
		 * Set the event string events. This will overwrite the previous set event(s). 
		 * An invalid parameter will set the event string to "None". 
		 * Should be set using "EVENT_xx" constants from {@link com.ikea.irw.stat.Constants}.
		 * @param {Array} pEventsArray an array with event strings
		 * @example setEvents(["event1", "event31", "event1337"]); // s.events -> "event1,event31,event1337"
		 * @example setEvents([]); // s.events -> "None"
		 * @example setEvents(); // s.events -> "None"
		 */
		setEvents: function (pEventsArray) {
			if (pEventsArray && isArray(pEventsArray) && pEventsArray.length !== 0) {
				s.events = pEventsArray.join(",");
			} else {
				s.events = com.ikea.irw.stat.Constants.NONE;
			}
		},
		/**
		 * Removes all set events from the event string.
		 */
		clearEvents: function () {
			s.events = com.ikea.irw.stat.Constants.NONE;
		},
		/**
		 * Adds a variable to the variable tracking string. 
		 * Should be set using "PROP_xx" or "EVAR_xx" constants from {@link com.ikea.irw.stat.Constants}.
		 * @param {String} pTrackVar the variable to add to the tracking string.
		 * @example addTrackVar("prop3"); // s.linkTrackVars -> "prop3"
		 * @example addTrackVar("prop4"); // s.linkTrackVars -> "prop3,prop4"
		 */
		addTrackVar: function (pTrackVar) {
			if (pTrackVar) {
				// If the s.linkTrackVars is undefined, empty or "None"
				if (!s.linkTrackVars || s.linkTrackVars === com.ikea.irw.stat.Constants.NONE) {
					s.linkTrackVars = pTrackVar;
				} else {
					// Only add the track var if not already added
					if (s.linkTrackVars.indexOf(pTrackVar) === -1) {
						s.linkTrackVars += "," + pTrackVar;
					}
				}
			}
		},
		/**
		 * Adds a range of variables to the variable tracking string. 
		 * Should be set using constants "PROP_xx" or "EVAR_xx" from {@link com.ikea.irw.stat.Constants}.
		 * @param {Array} pTrackVarsArray an array with strings
		 * @example addTrackVars(["prop3", "prop4", "prop5"]); 
		 */
		addTrackVars: function (pTrackVarsArray) {
			var vCount,
				constants = com.ikea.irw.stat.Constants;
			if (pTrackVarsArray && pTrackVarsArray.length !== 0) {
				if (!s.linkTrackVars || s.linkTrackVars === constants.NONE) {
					s.linkTrackVars = pTrackVarsArray.join(",");
				} else {
					for (vCount = 0; vCount < pTrackVarsArray.length; vCount += 1) {
						this.addTrackVar(pTrackVarsArray[vCount]);
					}
				}
			}
		},
		/**
		 * Remove a variable from the variable tracking string. 
		 * Should be done using constants "PROP_xx" or "EVAR_xx" from {@link com.ikea.irw.stat.Constants}.
		 * @param {String} pTrackVar the variable to remove
		 * @example removeTrackVar("prop2");
		 */
		removeTrackVar: function (pTrackVar) {
			if (pTrackVar && (s.linkTrackVars && s.linkTrackVars.length > 0)) {
				var vVars = s.linkTrackVars.split(","),
					vCount,
					constants = com.ikea.irw.stat.Constants;
				for (vCount = 0; vCount < vVars.length; vCount += 1) {
					if (vVars[vCount] === pTrackVar) {
						vVars.splice(vCount, 1);
						s.linkTrackVars = vVars.join(",");
						if (s.linkTrackVars === "") {
							s.linkTrackVars = constants.NONE;
						}
						return;
					}
				}
			}
		},
		/**
		 * Set the variable tracking string to a single variable. 
		 * Should be set using constants from {@link com.ikea.irw.stat.Constants}.
		 * @param {String} pTrackVar the event to set to the event string
		 * @example setTrackVar("prop24"); // s.linkTrackVars -> "prop24"
		 * @example setTrackVar("prop24"); setTrackVar("prop29"); // s.linkTrackVars -> "prop29"
		 * @example setTrackVar(""); // s.linkTrackVars -> "None"
		 * @example setTrackVar(); // s.linkTrackVars -> "None"
		 */
		setTrackVar : function (pTrackVar) {
			if (pTrackVar && isString(pTrackVar) && !pTrackVar.blank()) {
				s.linkTrackVars = pTrackVar;
			} else {
				s.linkTrackVars = com.ikea.irw.stat.Constants.NONE;
			}
		},
		/**
		 * Set a range of variables to the variable tracking string. 
		 * Should be set using constants "PROP_xx" or "EVAR_xx" from {@link com.ikea.irw.stat.Constants}.
		 * @param {Array} pTrackVarsArray the array of string variables to set.
		 * @example setTrackVars(["prop2", "prop3"]);
		 */
		setTrackVars: function (pTrackVarsArray) {
			if (pTrackVarsArray && pTrackVarsArray.length !== 0) {
				s.linkTrackVars = pTrackVarsArray.join(",");
			} else {
				s.linkTrackVars = com.ikea.irw.stat.Constants.NONE;
			}
		},
		/**
		 * Remove all the set variables from the variables tracking string.
		 */
		clearTrackVars: function () {
			s.linkTrackVars = com.ikea.irw.stat.Constants.NONE;
		},
		/**
		 * Add an event to the event tracking string. 
		 * Should be set using constants "EVENT_xx" from {@link com.ikea.irw.stat.Constants}.
		 * @param {String} pEvent the event to add
		 * @example addTrackEvent("event1"); 
		 */
		addTrackEvent: function (pEvent) {
			if (pEvent) {
				if (!s.linkTrackEvents || s.linkTrackEvents === com.ikea.irw.stat.Constants.NONE) {
					s.linkTrackEvents = pEvent;
				} else {
					if ((s.linkTrackEvents.split(",")).indexOf(pEvent) === -1) {
						s.linkTrackEvents += "," + pEvent;
					}
				}
			}
		},
		/**
		 * Remove an event from the event tracking string. 
		 * Should be set using constants "EVENT_xx" from {@link com.ikea.irw.stat.Constants}.
		 * @param {String} pEvent the event to remove.
		 * @example removeEvent("event1");
		 */
		removeTrackEvent: function (pEvent) {
			if (pEvent && (s.linkTrackEvents && s.linkTrackEvents.length > 0)) {
				var vEvents = s.linkTrackEvents.split(","),
					vCount;
				for (vCount = 0; vCount < vEvents.length; vCount += 1) {
					if (vEvents[vCount] === pEvent) {
						vEvents.splice(vCount, 1);
						s.linkTrackEvents = vEvents.join(",");
						if (s.linkTrackEvents === "") {
							s.linkTrackEvents = com.ikea.irw.stat.Constants.NONE;
						}
						return;
					}
				}
			}
		},
		/**
		 * Add a range of events to the event tracking string. 
		 * Should be done using constants "EVENT_xx" from {@link com.ikea.irw.stat.Constants}.
		 * @param {Array} pEventsArray an Array containing strings to add.
		 * @example addTrackEvents(["event1", "event31"]);
		 */
		addTrackEvents: function (pEventsArray) {
			var vCount;
			if (pEventsArray && pEventsArray.length !== 0) {
				for (vCount = 0; vCount < pEventsArray.length; vCount += 1) {
					this.addTrackEvent(pEventsArray[vCount]);
				}
			}
		},
		/**
		 * Set a range of events to the event tracking string.
		 * Should be set using constants "EVENT_xx" from {@link com.ikea.irw.stat.Constants}.
		 * @param {Array} pEventsArray an Array with string to set.
		 * @example setTrackEvents([pEventsArray]);
		 */
		setTrackEvents: function (pEventsArray) {
			if (pEventsArray && pEventsArray.length !== 0) {
				s.linkTrackEvents = pEventsArray.join(",");
			} else {
				s.linkTrackEvents = com.ikea.irw.stat.Constants.NONE;
			}
		},
		/**
		 * Set a single event to the event tracking string.
		 * Should be set using constants "EVENT_xx" from {@link com.ikea.irw.stat.Constants}.
		 * @param {String} pTrackEvent the event to set.
		 * @example setTrackEvent("event31");
		 */
		setTrackEvent: function (pTrackEvent) {
			if (pTrackEvent) {
				s.linkTrackEvents = pTrackEvent;
			} else {
				s.linkTrackEvents = com.ikea.irw.stat.Constants.NONE;
			}
		},
		/**
		 * Clears all the set events from the s.linkTrackEvents string.
		 */
		clearTrackEvents: function () {
			s.linkTrackEvents = com.ikea.irw.stat.Constants.NONE;
		},
		/**
		 * Sets a vendor variable to the desired value.
		 * Must be set using constants from {@link com.ikea.irw.stat.Constants} otherwise nothing will happen.
		 * @param {String} pProp the name of the variable to set.
		 * @param {String} pValue the value of the variable.
		 * @example setVariable(constants.PROP_PAGE_NAME, "my page name");
		 * @example setVariable(constants.PROP_PAGE_FUNCTIONALITY, "my functionality");
		 */
		setVariable: function (pProp, pValue) {
			if (pProp) {
				s[pProp] = pValue;
			}
		},
		/**
		 * Adds the value to the selected vendor variable. If the variable is not set, it will be.
		 * @param {String} pProp a String constants from the {@link com.ikea.irw.stat.Constants} class.
		 * @param {String} pValue the value to append.
		 * @example setVariable(constants.PROP_PAGE_NAME, "page name"); appendVariable(constants.PROP_PAGE_NAME, ">some text"); // s.pageName -> "page name>sometext"
		 * @example appendVariable(constants.PROP_PAGE_NAME, ">some text"); // s.pageName -> ">sometext"
		 */
		appendVariable: function (pProp, pValue) {
			if (pProp && pValue) {
				if (s[pProp]) {
					s[pProp] += pValue;
				} else {
					s[pProp] = pValue;
				}
			}
		},
		/**
		 * Removes the value set for the vendor variable. (sets the value to "", an empty string).
		 */
		clearVariable: function (pProp) {
			if (pProp && s[pProp]) {
				s[pProp] = "";
			}
		},
		/**
		 * Remove a set of vendor variables (setting them to "", an empty string).
		 * @param {Array} pPropArray the array with the variables to remove. If left out, all variables will be cleared!
		 * @example clearVariables(["prop10", "prop11"]);
		 * @example clearVariables(["prop", "eVar"]); // This will remove all the variables starting with the name "prop" and "eVar".
		 * @example clearVariables(); // will clear all variables starting with: "prop", "eVar", "event", "pageName" and "products".
		 */
		clearVariables: function (pPropArray) {
			var vPropCount,
				vSCount,
				vSArr = getKeys(s);
			if (pPropArray && isArray(pPropArray) && pPropArray.length !== 0) {
				// Iterate the arguments
				for (vPropCount = 0; vPropCount < pPropArray.length; vPropCount += 1) {
					// Iterate the s variables
					for (vSCount = 0; vSCount < vSArr.length; vSCount += 1) {
						if (vSArr[vSCount].startsWith(pPropArray[vPropCount])) {
							s[vSArr[vSCount]] = "";
						}
					}
				}
			} else if (!pPropArray) {
				this.clearVariables(["prop", "eVar", "event", "pageName", "products"]);
			}
		},
		/**
		 * Retreive the value of the specified vendor variable.
		 * @param {String} pProp the variable name
		 * @return {Object} the value of the variable or en empty string if not found.
		 */
		getValue: function (pProp) {
			return s[pProp] || "";
		},
		/**
		 * This function is used when sending a page view to omniture.
		 */
		execute: function () {
			var s_code,
				common = com.ikea.irw.stat.Common,
				constants = com.ikea.irw.stat.Constants;
			try {
				this.lastChanges();
				if (typeof s.charSet === "undefined") {
					s.charSet = "Auto";
				}
				// Bugfix (proxy problem)
				if (irwstatsStatType === "dev") {
					s.visitorNamespace = "irwdev";
				}
				if (!common.checkLocalFlag(constants.FLAG_REVERT_TO_LINK_SET)) {
					s_code = s.t();
				} else {
					s_code = s.tl(this, "o", irwstatsLocalVars.linkTrackName);
				}
				if (s_code) {
					document.write(s_code);
				}
			} catch (e) {
				com.ikea.irw.stat.Errors.handleError(e, this);
			}
		},
		/**
		 * This function is used when sending a link to omniture.
		 * @param {Object} pOptions options object, containing atleast the key "action", could also contain the optional key "type" describing the link type.
		 * @example executeLink({ action: "my action });
		 * @example executeLink({ type: "o", ation: "my action" }); // Exactly the same as above.
		 * @example exeuteLink({ type: "d", action: "my download" });
		 * 
		 */
		executeLink: function (pOptions) {
			var s_code,
				utils = com.ikea.irw.stat.Utils,
				linkType;
			if (pOptions && pOptions.action) {
				this.lastChanges();
				if (typeof s.charSet === "undefined") {
					s.charSet = "Auto";
				}
				// Bugfix (proxy problem)
				if (irwstatsStatType === "dev") {
					s.visitorNamespace = "irwdev";
				}
				if (pOptions.action !== 'ria action') {
                    delete s.pageName;
                }
				linkType = pOptions.type || "o";
				s_code = s.tl(this, linkType, pOptions.action);
				if (s_code) {
					document.write(s_code);
				}
				com.ikea.irw.stat.Common.clearLocalData();
			} else {
				utils.debug("Must supply executeLink with an object with named parameter \"action\".");
			}
		},
		/**
		 * This function is used when sending a link to omniture.
		 * @param {Object} pOptions options object, containing atleast the key "action", could also contain the optional key "type" describing the link type.
		 * @example executeLink({ action: "my action });
		 * @example executeLink({ type: "o", ation: "my action" }); // Exactly the same as above.
		 * @example exeuteLink({ type: "d", action: "my download" });
		 * 
		 */
		executeErrorLink: function (pOptions) {
			var s_code,
				utils = com.ikea.irw.stat.Utils,
				linkType;
			if (pOptions && pOptions.action) {
				if (typeof s.charSet === "undefined") {
					s.charSet = "Auto";
				}
				// Bugfix (proxy problem)
				if (irwstatsStatType === "dev") {
					s.visitorNamespace = "irwdev";
				}
				linkType = pOptions.type || "o";
				s_code = s.tl(this, linkType, pOptions.action);
				if (s_code) {
					document.write(s_code);
				}
			} else {
				utils.debug("Must supply executeLink with an object with named parameter \"action\".");
			}
		},
		/**
		 * 
		 */
		updateCategories: function () {
			var common = com.ikea.irw.stat.Common,
				constants = com.ikea.irw.stat.Constants;
			if (!common.checkLocalFlag(constants.FLAG_CATEGORIES_SET)) {
				if (s.prop3) {
					// First check if we have any > (delimiter) in the category properties (prop3, prop4, prop21 or prop22)
					if (s.prop3.indexOf(">") !== -1 || (s.prop4 && s.prop4.indexOf(">") !== -1) ||
							(s.prop21 && s.prop21.indexOf(">") !== -1) || (s.prop22 && s.prop22.indexOf(">") !== -1)) {
						common.addLocalFlag(constants.FLAG_CATEGORIES_SET);
						return;
					}
				}
				if (s.prop2 && s.prop3) {
					s.prop3 = s.prop2 + ">" + s.prop3;
				}
				if (s.prop3 && s.prop4) {
					s.prop4 = s.prop3 + ">" + s.prop4;
				}
				if (s.prop4 && s.prop21) {
					s.prop21 = s.prop4 + ">" + s.prop21;
				} else {
					if (s.prop3 && s.prop21) {
						s.prop21 = s.prop3 + ">" + s.prop21;
					}
				}
				if (s.prop21 && s.prop22) {
					s.prop22 = s.prop21 + ">" + s.prop22;
				}
				common.addLocalFlag(constants.FLAG_CATEGORIES_SET);
			}
		},
		/**
		 * Automatically builds the s.pageName based on certain props.
		 */
		updatePageName: function () {
			var common = com.ikea.irw.stat.Common,
				constants = com.ikea.irw.stat.Constants;
			if (!common.checkLocalFlag(constants.FLAG_PAGE_NAME_SET)) {
				if (s.prop2) {
					s.pageName = s.prop2;
				}
				if (s.prop3) {
					s.pageName += ">" + s.prop3;
				}
				if (s.prop4) {
					s.pageName += ">" + s.prop4;
				}
				if (s.prop21) {
					s.pageName += ">" + s.prop21;
				}
				if (s.prop22) {
					s.pageName += ">" + s.prop22;
				}
				if (irwstatsLocalVars.categoryTabId && irwstatsLocalVars.categoryTabId.length > 0) {
					s.pageName += ">" + irwstatsLocalVars.categoryTabId;
					// remove the front flag if tab information is present so that the front string does not appear
					common.deleteLocalFlag(constants.FLAG_FRONT);
					// value set when user clicks on the tab
					s.eVar40 = "tab selected";
					// make sure that the value is set only once per user session
					s.eVar40 = s.getValOnce(s.eVar40, 's_evar40', 0);
				}
				if (irwstatsLocalVars.friendlyPageName && irwstatsLocalVars.friendlyPageName.length > 0) {
					s.prop1 += ">" + irwstatsLocalVars.friendlyPageName;
				}
				common.addLocalFlag(constants.FLAG_PAGE_NAME_SET);
			}
			// Localized page name
			if (!common.checkLocalFlag(constants.FLAG_PAGE_NAME_LOCAL_SET)) {
				if (irwstatsLocalVars.categoryLocal && irwstatsLocalVars.categoryLocal.length > 0) {
					s.prop1 = irwstatsLocalVars.categoryLocal;
				} else {
					return;
				}
				if (irwstatsLocalVars.subcategoryLocal && irwstatsLocalVars.subcategoryLocal.length > 0) {
					s.prop1 += ">" + irwstatsLocalVars.subcategoryLocal;
				}
				if (irwstatsLocalVars.chapterLocal && irwstatsLocalVars.chapterLocal.length > 0) {
					s.prop1 += ">" + irwstatsLocalVars.chapterLocal;
				}
				if (irwstatsLocalVars.systemLocal && irwstatsLocalVars.systemLocal.length > 0) {
					s.prop1 += ">" + irwstatsLocalVars.systemLocal;
				}
				if (irwstatsLocalVars.systemChapterLocal && irwstatsLocalVars.systemChapterLocal.length > 0) {
					s.prop1 += ">" + irwstatsLocalVars.systemChapterLocal;
				}
				if (irwstatsLocalVars.categoryTabId && irwstatsLocalVars.categoryTabId.length > 0) {
					s.prop1 += ">" + irwstatsLocalVars.categoryTabId;
				}
				common.addLocalFlag(constants.FLAG_PAGE_NAME_LOCAL_SET);
			}
		},
		/**
		 * 
		 */
		pushCategory: function (pNewCat) {
			var constants = com.ikea.irw.stat.Constants;
			if (typeof s.prop21 !== constants.UNDEFINED) {
				s.prop22 = s.prop21;
			}
			if (typeof s.prop4 !== constants.UNDEFINED) {
				s.prop21 = s.prop4;
			}
			if (typeof s.prop3 !== constants.UNDEFINED) {
				s.prop4 = s.prop3;
			}
			if (typeof s.prop2 !== constants.UNDEFINED) {
				s.prop3 = s.prop2;
			}
			s.prop2 = pNewCat;
			if (typeof irwstatsLocalVars.systemLocal !== constants.UNDEFINED) {
				irwstatsLocalVars.systemChapterLocal = irwstatsLocalVars.systemLocal;
			}
			if (typeof irwstatsLocalVars.chapterLocal !== constants.UNDEFINED) {
				irwstatsLocalVars.systemLocal = irwstatsLocalVars.chapterLocal;
			}
			if (typeof irwstatsLocalVars.subcategoryLocal !== constants.UNDEFINED) {
				irwstatsLocalVars.chapterLocal = irwstatsLocalVars.subcategoryLocal;
			}
			if (typeof irwstatsLocalVars.categoryLocal !== constants.UNDEFINED) {
				irwstatsLocalVars.subcategoryLocal = irwstatsLocalVars.categoryLocal;
			}
			irwstatsLocalVars.categoryLocal = pNewCat;
		},
		/**
		 * Last minute changes. Like automatically building the pageName and setting custom tags.
		 */
		lastChanges: function () {
			if (irwstatsLocalVars.internalPageType !== com.ikea.irw.stat.Constants.PAGE_TYPE_STATIC) {
				this.updatePageName();
			}
			this.updateCategories();
			this.updateCustomTags();
		},
		/**
		 * Either adds an event to the s.linkTrackEvents or a prop to the s.linkTrackVars.
		 * @param {String} pVarName the name of the variable.
		 * @example addLinkTrack("s.prop1");
		 * @example addLinkTrack("prop1");
		 * @example addLinkTrack("s.event31");
		 * @example addLinkTrack("event31");
		 */
		addLinkTrack: function (pVarName) {
			var vVarName,
				common = com.ikea.irw.stat.Common,
				constants = com.ikea.irw.stat.Constants;
			if (common.checkLocalFlag(constants.FLAG_ADD_ALL_PROPS_AND_EVENTS)) {
				s.prop48 = "";
				s.eVar48 = "";
				s.eVar3 = "";
				vVarName = pVarName.replace(/s\./g, "");
				if ((vVarName.startsWith("event") && !vVarName.startsWith("events")) || vVarName.startsWith("prodView")) {
					this.addTrackEvent(vVarName);
					this.addLinkTrack(constants.EVENTS);
				} else {
					this.addTrackVar(vVarName);
				}
			}
		},
		/**
		 * Like {@link com.ikea.irw.stat.Vendor.addLinkTrack} but for multiple variables.
		 */
		addLinkTracks: function (pVarNamesArray) {
			var vCount;
			if (pVarNamesArray && isArray(pVarNamesArray) && pVarNamesArray.length !== 0) {
				for (vCount = 0; vCount < pVarNamesArray.length; vCount += 1) {
					this.addLinkTrack(pVarNamesArray[vCount]);
				}
			}
		},
		/**
		 * Converts the IKEA specific tags to the vendor specific tags. This is where the magic happens with the tMapArr.
		 * @param {Array} pTags an array with tags, most likely from the result of calling {@link com.ikea.irw.stat.Tag.readMetaTags()}
		 */
		prepareVendor: function (pTags) {
			var vMetaCount,
				vValue,
				vTMapObject,
				vVarCount,
				tag = com.ikea.irw.stat.Tag,
				constants = com.ikea.irw.stat.Constants,
				common = com.ikea.irw.stat.Common;
			pTags = tag.checkCategories(pTags);
			for (vMetaCount = 0; vMetaCount < pTags.length; vMetaCount += 1) {
				vTMapObject = tMapArr[pTags[vMetaCount].name];
				vValue = pTags[vMetaCount].value;
				if (vValue !== null) {
					// changeCase is implicit a "lower", since this is the majority of cases
					// changeCase, can also be "no", which means we should not transform the case so skip it
					if (!vTMapObject.changeCase || (isString(vTMapObject.changeCase) && vTMapObject.changeCase === constants.CASE_LOWER)) {
						vValue = vValue.toLowerCase();
					// Uppercase it
					} else if (isString(vTMapObject.changeCase) && vTMapObject.changeCase === constants.CASE_UPPER) {
						vValue = vValue.toUpperCase();
					}
					// Replace spaces with ">" ?
					vValue = vValue.replace(/[\ ]*\|[\ ]*/g, '>');
					// The value should be directly set to a variable on the s-object
					if (vTMapObject.varName && isString(vTMapObject.varName)) {
						if (common.checkTrackVar(pTags[vMetaCount].name)) {
							this.addLinkTrack(vTMapObject.varName);
						}
						s[vTMapObject.varName] = vValue;
					}
					// If a run function has been defined, call it and pass the vValue as a parameter
					if (vTMapObject.run && isFunction(vTMapObject.run)) {
						// Call the run function
						vTMapObject.run.call(null, vValue);
					}
					// Check if an addTrack array has been defined, if it has, call the addLinkTrack method for all the variables
					if (vTMapObject.addTrack && isArray(vTMapObject.addTrack)) {
						if (common.checkTrackVar(pTags[vMetaCount].name)) {
							for (vVarCount = 0; vVarCount < vTMapObject.addTrack.length; vVarCount += 1) {
								this.addLinkTrack(vTMapObject.addTrack[vVarCount]);
							}
						}
					}
				}
			}
		},
		/**
		 * Used for "last-minute" changes to the meta data. It should only be used as a last 
		 * resort for when a change in the META-tag on the page would be too time-consuming 
		 * to change by hand. 
		 */
		updateCustomTags: function () {
			var vPageType = "",
				vStr = "",
				vShouldSetEvent8 = false,
				errorField,
				errorText,
				errorKey,
				errorForm,
				stepName,
				cookieValue,
				urlParams,
				qry,
				omnitureSplashFlag,
				omnitureLsp,
				omnitureLspFlag,
				omnitureProp3,
				appendStr,
				mySplitResult,
				lspStoreName,
				fileNameRegex,
				isSplashPage,
				splashResRegex,
				storeRegex,
				vProp30Last,
				vUrl,
				relationTypeStr,
				relationType,
				iCount,
				vErrorKeyCount,
				common = com.ikea.irw.stat.Common,
				constants = com.ikea.irw.stat.Constants,
				tag = com.ikea.irw.stat.Tag,
				product = com.ikea.irw.stat.Product;
			// Get the page type, vPageType will never be undefined, so no need to do "undefined"-checks later down
			if (typeof irwstatsLocalVars.internalPageType !== "undefined") {
				vPageType = irwstatsLocalVars.internalPageType;
			}
			// Page type in omniture
			s.prop5 = s.prop5 || "";
			// Page functionality in omniture
			s.prop24 = s.prop24 || "";
			// Set s.prop25 (product flow) if we have prodView
			if (common.checkLocalFlag("prodView")) {
				if (s.products.substr(0, 1) === ";") {
					s.prop25 = s.products.substr(1);
				} else {
					s.prop25 = s.products;
				}
			}
			if (!common.checkLocalFlag(constants.FLAG_SHOPPING_LIST_PROD) && typeof s.events === "undefined") {
				s.products = "";
			}
			if (common.checkLocalFlag(constants.FLAG_MERCHANDISING_CATEGORY_SET)) {
				s.eVar4 = s.pageName;
				common.postProcessVariable("s.eVar4");
			}
			if (common.checkLocalFlag(constants.FLAG_FRONT_SET) && !common.checkLocalFlag(constants.FLAG_FRONT)) {
				vStr = s.prop41.afterLast("/");
				if (vStr === "tools") {
					s.pageName += ">tools";
				} else if (vStr.contains("rooms_ideas")) {
					s.pageName += ">inspiration>";
					s.pageName = this.appendExtIfNotFlashInstalled(s.pageName, 'html_');
					s.pageName += "front";
				} else if (vStr.contains("style_selector")) {
					s.pageName += ">style selector>front";
				} else {
					s.pageName = vStr + ">data>global";
				}
			}
			if (common.checkLocalFlag(constants.FLAG_FRONT) && !common.checkLocalFlag(constants.FLAG_FRONT_SET)) {
				common.addLocalFlag(constants.FLAG_FRONT_SET);
				if (s.prop5 === "main category") {
					s.pageName += ">category front";
				} else {
					s.pageName += ">front";
				}
				s.prop1 += ">front";
			}
			if (common.checkLocalFlag(constants.FLAG_FORM) && !common.checkLocalFlag(constants.FLAG_FROM_SET)) {
				common.addLocalFlag(constants.FLAG_FROM_SET);
				s.pageName += ">form";
				s.prop1 += ">form";
			}
			if (common.checkLocalFlag(constants.FLAG_PROD_VIEW) && !common.checkLocalFlag(constants.FLAG_PROD_VIEW_SET)) {
				common.addLocalFlag(constants.FLAG_PROD_VIEW_SET);
				s.pageName += ">prodview";
				s.prop1 += ">prodview";
			}
			// Check if we need to set event2 - for checkout pages
			if (common.checkLocalFlag(constants.FLAG_MEMBER_LOGIN_STARTED_SET)) {
				if (vPageType === "ecom-step1") {
					this.addEvent("event2");
					common.postProcessVariable("event2");
				}
			}
			if (vPageType === "ecom-step5") {
				this.addEvent("event28");
				common.postProcessVariable("event28");
			}
			if (common.checkLocalFlag(constants.FLAG_MEMBER_SIGNUP_START_SET)) {
				if (vPageType.startsWith("ecom")) {
					if (common.checkLocalFlag(constants.FLAG_CHECOUT_GUEST_SET)) {
						s.eVar18 = "guest ecom flow";
					} else {
						s.eVar18 = "ecom sign up";
					}
					common.postProcessVariable("s.eVar18");
				} else {
					tag.setTrailingTag("IRWStats.memberSignupStarted", "yes");
				}
			}
			// Change in fammily_code --
			if (common.checkLocalFlag(constants.FLAG_MEMBER_SIGNUP_STARTED_SET)) {
				vStr = "";
				if (vPageType === "user confirmation") {
					vShouldSetEvent8 = true;
					if (s.prop5 === "family") {
						vStr = "family ";
					}
				} else if (s.prop5 === "shopping list") {
					vShouldSetEvent8 = true;
				} else if (vPageType === "ecom-step2") {
					vStr = "ecom ";
					vShouldSetEvent8 = true;
				}
				if (vShouldSetEvent8) {
					s.eVar18 = vStr + "sign up";
					this.addEvent("event8");
					common.postProcessVariable("s.eVar18");
					common.postProcessVariable("event8");
				}
			}
			// Change in fammily_code -- ends
			// Check for Form-errors
			if (common.checkLocalFlag(constants.FLAG_FORM_ERROR_KEYS_SET)) {
				errorKey = irwstatsLocalVars.formErrorKeys;
				s.prop5 = "error>user generated>form error";
				s.pageName = s.prop5;
				if (errorKey.indexOf(";") > 0) {
					errorKey = errorKey.split(";");
					if (errorKey.length > 1) {
						for (vErrorKeyCount = 0; vErrorKeyCount < errorKey.length; vErrorKeyCount += 1) {
							com.ikea.irw.stat.General.formErrorKey(errorKey[vErrorKeyCount], true);
						}
					}
				} else {
					s.prop2 = s.prop3 = s.prop4 = s.prop21 = "error";
					s.prop27 = errorKey;
					common.postProcessVariable("s.prop27");
					common.postProcessVariable("s.prop5");
				}
			}
			// Set page functionality property if we're on Request Password Page
			if (vPageType === "request-password") {
				s.prop24 = "request a new password";
				common.postProcessVariable("s.prop24");
			}
			// If we're in the ecom-flow, unset s.prop3 and s.prop4 if it is set
			// Also, set family discount price if it is there
			if (vPageType.startsWith("ecom") || vPageType.startsWith("paydistrorder") || vPageType.startsWith("stockcheck")) {
				s.prop3 = "";
				s.prop4 = "";
			}
			// Shopping cart logic - start
			if (vPageType === "ecom-step0") {
				// Only set scView if last page was not the shopping cart
				if (!common.checkLocalFlag(constants.FLAG_LAST_PAGE_CART_SET)) {
					this.addEvent("scView");
					common.postProcessVariable("scView");
				}
				if (!common.checkLocalFlag(constants.FLAG_CART_OPENED_IN_SESSION_SET) && common.checkLocalFlag(constants.FLAG_PRODUCT_IN_SHOPPING_CART_SET)) {
					this.addEvent("scOpen");
					common.postProcessVariable("scOpen");
					tag.setTrailingTag("IRWStats.cartOpenedInSession", "yes");
				}
				// Make sure the lastPageCart tag is set
				tag.setTrailingTag("IRWStats.lastPageCart", "yes");
				if (document.updateAllForm.calculateClicked.value === "yes") {
					this.addEvent("event40");
					this.addEvent("event41");
					s.prop24 = "function>calculate shipping";
					var code = document.updateAllForm.errCodeForCalculateBtn.value;
					var shippingCostValue;
					var shiptime;
					if (code === "0") {
						shippingCostValue = document.updateAllForm.unFormattedShippingCost.value;
						s.prop54 = s.eVar54 = shippingCostValue;
						shiptime = document.updateAllForm.milliSecDelTime.value;
						if (shiptime === "0" || shiptime === "" || shiptime < 0) {
                            s.prop55 = s.eVar55 = "";
                        } else {
                            var todate = new Date();
                            var totime = todate.getTime();
                            var diff;
                            diff = parseInt((shiptime - totime) / (24 * 3600 * 1000), 10);
                            s.prop55 = s.eVar55 = diff + 1 + " days";
                        }
					} else if (code === "-31040") {
						s.prop54 = s.eVar54 = "error>invalid postcode";
						s.prop55 = s.eVar55 = "error>invalid postcode";
					} else if (code === "-120333") {
						s.prop54 = s.eVar54 = "error>out of range";
						s.prop55 = s.eVar55 = "error>out of range";
					} else if (code === "-120407") {
						s.prop54 = s.eVar54 = "error>out of stock";
						s.prop55 = s.eVar55 = "error>out of stock";
					} else {
						s.prop54 = s.eVar54 = "error>system failure";
						s.prop55 = s.eVar55 = "error>system failure";
					}
					this.removeEvent("scView");
					this.removeEvent("scOpen");
					this.removeEvent("scAdd");
					this.removeEvent("event29");
					this.removeEvent("scRemove");
					document.updateAllForm.calculateClicked.value = "no";
				}
			}
			if (common.checkLocalFlag(constants.FLAG_CART_OPENED_IN_SESSION_SET)) {
				tag.setTrailingTag("IRWStats.cartOpenedInSession", "yes");
			}
			// End - shopping cart logic
			// If we have ecomstatus, set the formError-property accordingly (ECNA)
			if (common.checkLocalFlag(constants.FLAG_ECOM_STATUS_SET) && typeof irwstatsLocalVars.eComStatus !== "undefined") {
				// Get the step number
				stepName = "";
				if (vPageType.startsWith("ecom")) {
					stepName = vPageType.after("ecom");
				} else if (vPageType.startsWith("paydistrorder")) {
					stepName = vPageType.after("paydistrorder");
				}
				s.prop27 = s.prop2 + ">" + stepName + ">fraud check>";
				switch (irwstatsLocalVars.eComStatus) {
				case "1":
					s.prop27 += "passed";
					break;
				case "-2":
					s.prop27 += "rejected";
					break;
				case "-3":
					s.prop27 += "review";
					break;
				case "-4":
					s.prop27 += "error";
					break;
				default:
					// null, 0 and "" is also possible - but we don't send any data for those.
					s.prop27 = "";
					delete s.prop27;
					break;
				}
			}
			// Set s.eVar28 to +1 if we're on the stockcheck result page
			if (vPageType === "stockcheck-result") {
				s.eVar28 = "+1";
				common.postProcessVariable("s.eVar28");
				// if stock check is performed from pip page
				if (common.checkLocalFlag(constants.FLAG_STOCK_CHECK_PERFORMED_SET)) {
					this.removeEvent("event6");
					this.removeEvent("event25");
					this.removeEvent("event26");
					this.addEvent("event27");
				}
			}
			if (vPageType.startsWith("range-category")) {
				if (common.checkLocalFlag(constants.FLAG_HAS_SYSTEM_CHAPTER) || common.checkLocalFlag(constants.FLAG_HAS_SYSTEM) || vPageType === "range-category-series") {
					s.prop5 = "series, collections and systems";
				} else if (common.checkLocalFlag(constants.FLAG_HAS_CHAPTER)) {
					s.prop5 = "subcategory";
				} else if (common.checkLocalFlag(constants.FLAG_HAS_SUB_CATEGORY)) {
					if (s.prop5 === "main category") {
						s.prop36 = "category";
						s.eVar36 = "category";
					} else {
						s.prop5 = "category";
						s.prop36 = "subcategory";
						s.eVar36 = "subcategory";
					}
				} else if (common.checkLocalFlag(constants.FLAG_HAS_CATEGORY) && s.prop5 !== "main category") {
					s.prop5 = "department";
				}
				if (s.prop2 !== "series") {
					if (common.checkLocalFlag(constants.FLAG_HAS_CATEGORY) && !common.checkLocalFlag(constants.FLAG_HAS_SUB_CATEGORY)) {
						s.hier1 = "topnav";
						if (typeof s.prop2 !== "undefined") {
							s.hier1 += ">" + s.prop2;
						}
						common.postProcessVariable("s.hier1");
					} else if (common.checkLocalFlag(constants.FLAG_HAS_SUB_CATEGORY) || common.checkLocalFlag(constants.FLAG_HAS_CHAPTER)) {
						s.hier1 = "leftnav";
						if (typeof s.prop4 !== "undefined") {
							s.hier1 += ">" + s.prop4;
						} else if (typeof s.prop3 !== "undefined") {
							s.hier1 += ">" + s.prop3;
						}
						common.postProcessVariable("s.hier1");
					}
				}
			}
			if (common.checkLocalFlag(constants.FLAG_MEMBER_TYPE_SET)) {
				if (s.prop24 === "logout") {
					s.prop28 = "";
				} else if (typeof s.eVar32 !== "undefined" && (s.eVar32 === "private->family" || s.eVar32 === "business->family")) {
					s.prop28 = "family";
				}
				tag.setTrailingTag("IRWStats.memberType", s.prop28);
				//get the value from cookie
				cookieValue = getCookie("IRWStats.familyCard");
				if (cookieValue !== null) {
					//set it to the variables
					s.prop31 = cookieValue;
				}
			}
			if (common.checkLocalFlag(constants.FLAG_ADD_BY_PART_NUMBER_ERROR_SET)) {
				this.removeEvent("scAdd");
				this.removeEvent("event29");
				s.prop24 = "";
			} else if (common.checkLocalFlag(constants.FLAG_PRODUCT_ALREADY_IN_CART_SET)) {
				this.removeEvent("scAdd");
				this.removeEvent("event29");
			} else if (common.checkLocalFlag(constants.FLAG_SHOPPING_CART_ADD_PRODUCTS_SET)) {
				var vProducts = irwstatsLocalVars.scAddProducts;
	            vProducts = vProducts.replace(/\W/g, "");
	            s.products = "";
	            product.addProduct(vProducts);
			}
            if (vPageType === "search") {
                // Sets values from cookie. Used in adcontent_SearchCloud. IKEA00708596
                for (iCount = 0; iCount < irwstatsLocalFixedVars.length; iCount += 1) {
                    if (irwstatsLocalFixedVars[iCount].name === "eVar3") {
                        s.eVar3 = irwstatsLocalFixedVars[iCount].value;
                    } else if (irwstatsLocalFixedVars[iCount].name === "prop20") {
                        s.prop20 = irwstatsLocalFixedVars[iCount].value;
                    } else if (irwstatsLocalFixedVars[iCount].name === "prop19") {
                        s.prop19 = null;
                    } else if (irwstatsLocalFixedVars[iCount].name === "prop24") {
                        s.prop24 = irwstatsLocalFixedVars[iCount].value;
                    }
                }
                urlParams = location.search;
                if ((urlParams.indexOf("&") === -1 && common.checkLocalFlag(constants.FLAG_SEARCH_PAGE_SET)) ||
                        s.prop30 === "search>search_result_alternative>search_result_bar>did_you_mean" ||
                        s.prop30 === "search>search_result>search_result_bar>did_you_mean") {
                    qry = urlParams.toQueryParams();
                    qry = qry.query.replace(/\+/g,' ');
                    s.prop6 = qry;
					s.prop6 = s.prop6.toLowerCase();
					s.eVar1 = s.prop6;
					this.addEvents([constants.EVENT_SEARCH, constants.EVENT_SEARCH_INTERNAL_VISISTS]);
				} else {
					s.prop6 = null;
					s.prop7 = null;
					s.prop42 = null;
					s.eVar1 = null;
					s.eVar27 = null;
					s.events = null;
				}
			}
			if (vPageType === "pip" && s.prop2 !== "store information") {
				urlParams = location.search;
				if (urlParams.indexOf("query") > 0) {
					s.prop6 = s.getQueryParam('query', decodeURIComponent(urlParams));
					s.eVar1 = s.prop6;
					s.prop7 = 1;
					s.prop42 = 1;
					this.addEvents([constants.EVENT_SEARCH, constants.EVENT_SEARCH_INTERNAL_VISISTS]);
					s.eVar3 = "search";
                    s.eVar27 = '+1';
				}
			}
			if (vPageType === "global") {
				s.eVar22 = "master";
			}
			if (s.pageName === "products a-z") {
				s.prop2 = "all products";
			}
			if (typeof s.prop2 === "undefined" && s.prop5 === "order catalogue") {
				s.prop2 = "customer services";
			}
            if (s.prop5 === "errorpage") {
                s.prop2 = "error";
                s.pageName = "error>page not found>404";
				s.pageType = "errorPage";
				s.prop3 = "error";
				s.prop4 = "error";
				omnitureProp3 = "error";
				s.prop5 = "error>page not found";
            }
			if (irwstatsLocalVars.internalPageType === "range-category" && window.location.href.indexOf("#") !== -1) {
				urlParams =  decodeURIComponent(document.location.search);
				s.campaign = urlParams.replace(/\?cid=/g, "");
			}

			if (s.prop5 === "local store") {
				omnitureSplashFlag = false;
				omnitureLsp = "";
				omnitureLspFlag = false;
				omnitureProp3 = "";
				appendStr = "";
				mySplitResult = s_urls.split("/");
				lspStoreName = mySplitResult[4];
				if ((mySplitResult.length < 6) || (mySplitResult[5] === "storeInfo") || ((mySplitResult[5] === "indexPage")) || (trim(mySplitResult[5]).length === 0)) {
					appendStr = ">front";
				} else if (mySplitResult.length >= 6) {
					appendStr = ">" + mySplitResult[5];
				}
				if (document.referrer.length > 0) {
					fileNameRegex = /\.(htm|html)$/i;
					if (fileNameRegex.test(document.referrer)) {
						isSplashPage = document.referrer.split("/");
						splashResRegex = /[a-z]+_[A-Z]+/;
						if (splashResRegex.test(isSplashPage[4])) {
							omnitureSplashFlag = true;
						}
					}
					omnitureLsp = "store information>";
					omnitureProp3 = omnitureLsp + "ikea " + lspStoreName;
					if (omnitureSplashFlag) {
						omnitureLsp = omnitureLsp + "ikea " + lspStoreName + ">front";
					} else {
						omnitureLsp = omnitureLsp + "ikea " + lspStoreName + appendStr;
					}
					omnitureLspFlag = true;
				} else {
					// Directly from homepage or from inside any links in store pages
					omnitureLsp = "store information>";
					if (mySplitResult.length > 3) {
						storeRegex = /^store$/i;
						if (storeRegex.test(mySplitResult[3])) {
							omnitureProp3 = omnitureLsp + "ikea " + lspStoreName;
							omnitureLsp = omnitureLsp + "ikea " + lspStoreName + appendStr;
							omnitureLspFlag = true;
						}
					}
				}
				if (lspStoreName && omnitureLspFlag) {
					s.pageName = omnitureLsp;
					s.prop3 = omnitureProp3;
					s.prop4 = omnitureProp3;
					s.prop20 = omnitureLsp;
				}
			}
	        s.prop21 = omnitureProp3;
			vProp30Last = "";
			vUrl = window.location.href;
			vStr = vUrl.substr(vUrl.lastIndexOf("=") + 1);
			if (s.prop5.indexOf("errorpage") === 0) {
				s.prop2  = "error";
				s.prop3  = "error";
				s.prop4  = "error";
				s.prop21 = "error";
			}
			switch (s.prop5) {
			case "errorpage404":
				s.pageName = "error>page not found>404";
				s.pageType = "errorPage";
				s.prop5    = "error>page not found";
				break;
			case "errorpage403":
				s.pageName = "error>application error>403";
				s.prop5 = "error>application";
				break;
			case "errorpage500":
				s.pageName = "error>server>500";
				s.prop5 = "error>server";
				break;
			default:
			}
			// s.prop24 starts with the word "filter>"
			if (s.prop24.startsWith("filter>")) {
				if (s.prop2 === "search" && s.prop5 === "search" && typeof s.prop30 !== "undefined") {
					// Get the last part of the s.prop30 variable, which determines the s.prop24
					vProp30Last = s.prop30.after("search>search_result>narrow_down_result>");
					if ((vProp30Last === "categories" && s.prop1 === "search>search result 1" && s.prop29 === "search>search_result>narrow_down_result") ||
							(vProp30Last === "categories" || vProp30Last === "color" || vProp30Last === "department")) {
						vProp30Last = vProp30Last.replace("categories", "category");
						s.prop24 = "filter>" + vProp30Last;
					}
				} else if ((s.prop5 === "category" || s.prop5 === "subcategory") && s.prop24.indexOf("online") === -1) {
					s.prop24 = "filter>color";
				}
			// s.prop24 is not set
			} else if (!s.prop24) {
				if (s.prop5 === "search" && s.prop30 === "search>search_result>search_result_bar>sort") {
					if (vStr === "name" || vStr === "price" || vStr === "newest") {
						s.prop24 = "sort>" + vStr;
					} else {
						s.prop24 = "sort>relevance";
					}
				} else if (s.prop5 === "subcategory" && typeof s.prop1 !== "undefined") {
					s.prop24 = "filter>category";
				}
			}
			if (s.prop2 === "search" && s.prop5 === "search" && s.prop30 === "search>search_result>search_result_bar>did_you_mean") {
				s.prop24 = "search>did you mean";
			}
			if (s.events === "scAdd" && s.products.startsWith(";S")) {
				s.products = ";" + s.products.substr(2, s.products.length);
			}
			if (typeof s.events !== "undefined" && typeof s.products !== "undefined") {
				if (s.products.startsWith(";S") && (s.events === "event17" || s.events.afterLast(",") === "event17")) {
					s.products = ";" + s.products.substr(2, s.products.length);
				}
			}
			if (this.checkProp2()) {
				s.eVar37 = s.prop2;
			}
			if (typeof s.eVar3 !== "undefined" && s.eVar3 === "family offers" && s.pageName === "family>product display>prodview") {
				s.events = "event12";
			}
			if (typeof s.events !== "undefined" && s.prop2 === "store information" && s.prop5 === "prodview") {
				s.events = "event12";
			}
			// Add on sales functionality
			if (common.checkLocalFlag(constants.FLAG_ADD_FROM_ADD_ON_SALES_SET) || common.checkLocalFlag(constants.FLAG_PIP_FROM_ADD_ON_SALES_SET)) {
				if (common.checkLocalFlag(constants.FLAG_ADD_FROM_ADD_ON_SALES_SET)) {
					s.products = ";" + irwstatsLocalVars.addOnSalesProduct;
					this.addEvent("scAdd");
					this.addEvent("event29");
				}
				relationTypeStr = ">matching>product";
				relationType = irwstatsLocalVars.addOnSalesType;
				if (relationType) {
					if (relationType !== "matching") {
						relationTypeStr = ">complementary>" + relationType;
					}
				}
				s.eVar48 = s.prop48 = "shopping_cart>range_functionality>use_add_on_sales";
				s.eVar3 = "shopping_cart" + relationTypeStr;
			}
			s.prop45 = s.eVar45 = this.getSitePlatform();
            if (common.checkLocalFlag(constants.FLAG_RIA_ACTION_SET)) {
				if (typeof irwstatsLocalVars.riaAsset !== "undefined" &&
						typeof irwstatsLocalVars.riaAssetType !== "undefined" &&
						typeof irwstatsLocalVars.riaAction !== "undefined" &&
						typeof irwstatsLocalVars.riaActionType !== "undefined") {
					if (irwstatsLocalVars.riaAssetType === "other") {
						irwstatsLocalVars.riaAssetType = irwstatsLocalVars.riaCategory;
					}
					var eVar4 = s.eVar4;
                    this.clearVariables([
						constants.EVAR_PRODUCT_FINDING_METHOD,
						constants.EVAR_RICH_CONTENT_ASSET,
						constants.PROP_RICH_CONTENT_ASSET,
						constants.EVAR_ROOM_SET,
						constants.PROP_ROOM_SET,
						"prop44", "prop52", "eVar52", "prop53", "eVar53", "eVar4", "prop45", "eVar45",
						"prop61", "prop62", "prop63", "prop64", "prop65",
						"eVar61", "eVar62", "eVar63", "eVar64", "eVar65", "eVar51",
						"products"
					]);
					s.pageName = s.pageName.replace(">front", ">RIA");
					s.pageName += ">" + irwstatsLocalVars.riaAsset;
					var cookie = com.ikea.irw.stat.Cookie;
					var RIAcookie = cookie.getCookie("currentRIAPage");
					if (RIAcookie === null || RIAcookie !==  s.pageName) {
						cookie.setCookie("currentRIAPage", s.pageName, 1);
						s.prop2 = eVar4;
						s.prop5 = "rich content";
						s.eVar3 = "rich content";
						s.prop44 = "horizontal navigation";
						s.prop52 = irwstatsLocalVars.riaAssetType;
						s.eVar52 = irwstatsLocalVars.riaAssetType;
						this.addEvents(['event37', 'event38']);
						common.postProcessVariable("s.prop2");
						common.postProcessVariable("s.prop5");
						common.postProcessVariable("s.prop44");
						common.postProcessVariable("event37");
						common.postProcessVariable("event38");
						common.postProcessVariable("s.prop52");
						common.postProcessVariable("s.eVar52");
						common.postProcessVariable("s.eVar3");
						common.postProcessVariable("s.prop45");
						common.postProcessVariable("s.eVar45");
					}
					s.eVar23 = s.prop18 = irwstatsLocalVars.riaAssetType + ">" + irwstatsLocalVars.riaAsset;
					s.prop18 = this.appendExtIfNotFlashInstalled(s.prop18, '_html');
					s.eVar23 = s.prop18;
					common.postProcessVariable("s.eVar12");
					common.postProcessVariable("s.eVar23");
					common.postProcessVariable("s.prop18");
                    common.postProcessVariable("s.pageName");
				}
				if (typeof irwstatsLocalVars.ria_prop1 !== "undefined") {
					s.prop61 = irwstatsLocalVars.ria_prop1;
					common.postProcessVariable("s.prop61");
				}
				if (typeof irwstatsLocalVars.ria_prop2 !== "undefined") {
					s.prop62 = irwstatsLocalVars.ria_prop2;
					common.postProcessVariable("s.prop62");
				}
				if (typeof irwstatsLocalVars.ria_prop3 !== "undefined") {
					s.prop63 = irwstatsLocalVars.ria_prop3;
					common.postProcessVariable("s.prop63");
				}
				if (typeof irwstatsLocalVars.ria_prop4 !== "undefined") {
					s.prop64 = irwstatsLocalVars.ria_prop4;
					common.postProcessVariable("s.prop64");
				}
				if (typeof irwstatsLocalVars.ria_prop5 !== "undefined") {
					s.prop65 = irwstatsLocalVars.ria_prop5;
					common.postProcessVariable("s.prop65");
				}
				if (typeof irwstatsLocalVars.ria_var1 !== "undefined") {
					s.eVar61  = irwstatsLocalVars.ria_var1;
					common.postProcessVariable("s.eVar61");
				}
				if (typeof irwstatsLocalVars.ria_var2 !== "undefined") {
					s.eVar62  = irwstatsLocalVars.ria_var2;
					common.postProcessVariable("s.eVar62");
				}
				if (typeof irwstatsLocalVars.ria_var3 !== "undefined") {
					s.eVar63  = irwstatsLocalVars.ria_var3;
					common.postProcessVariable("s.eVar63");
				}
				if (typeof irwstatsLocalVars.ria_var4 !== "undefined") {
					s.eVar64  = irwstatsLocalVars.ria_var4;
					common.postProcessVariable("s.eVar64");
				}
				if (typeof irwstatsLocalVars.ria_var5 !== "undefined") {
					s.eVar65  = irwstatsLocalVars.ria_var5;
					common.postProcessVariable("s.eVar65");
				}
				if (typeof irwstatsLocalVars.riaCompletion !== "undefined") {
					s.eVar51 = irwstatsLocalVars.riaCompletion;
					this.addEvents(['event33', 'event39']);
					common.postProcessVariable("s.eVar51");
                    common.postProcessVariable("event33");
                    common.postProcessVariable("event39");
				}
				if (typeof irwstatsLocalVars.ria_event1 !== "undefined") {
					this.addEvent(irwstatsLocalVars.ria_event1);
                    common.postProcessVariable(irwstatsLocalVars.ria_event1);
				}
				if (typeof irwstatsLocalVars.ria_event2 !== "undefined") {
					this.addEvent(irwstatsLocalVars.ria_event2);
                    common.postProcessVariable(irwstatsLocalVars.ria_event2);
				}
				if (typeof irwstatsLocalVars.ria_event3 !== "undefined") {
					this.addEvent(irwstatsLocalVars.ria_event3);
                    common.postProcessVariable(irwstatsLocalVars.ria_event3);
				}
				if (typeof irwstatsLocalVars.ria_event4 !== "undefined") {
					this.addEvent(irwstatsLocalVars.ria_event4);
                    common.postProcessVariable(irwstatsLocalVars.ria_event4);
				}
				if (typeof irwstatsLocalVars.ria_event5 !== "undefined") {
					this.addEvent(irwstatsLocalVars.ria_event5);
                    common.postProcessVariable(irwstatsLocalVars.ria_event5);
				}
				if (typeof irwstatsLocalVars.riaRoomSet !== "undefined" && irwstatsLocalVars.riaRoomSet.length > 0) {
					s.prop23 = irwstatsLocalVars.riaRoomSet;
					common.postProcessVariable("s.prop23");
				}
                this.setTrackEvent(s.events);
			}
			if (typeof irwstatsLocalVars.riaProduct !== "undefined" ||
					typeof irwstatsLocalVars.riaEvent !== "undefined") {
				this.trackRIAproduct();
			}
		},
        trackRIAproduct : function () {
			"use strict";
			if (typeof irwstatsLocalVars.riaEvent !== "undefined") {
				var riaEvent = irwstatsLocalVars.riaEvent.toLowerCase();
				var riaProduct = irwstatsLocalVars.riaProduct;
				if (riaEvent === constants.EVENT_SHOPPING_LIST_ADD) {
					product.addProduct(riaProduct);
					this.addEvents([constants.EVENT_ADD_TO_SHOPPING_LIST_VISITS, constants.EVENT_SHOPPING_LIST_ADD]);
                    common.postProcessVariable(constants.EVENT_ADD_TO_SHOPPING_LIST_VISITS);
                    common.postProcessVariable(constants.EVENT_SHOPPING_LIST_ADD);
                    //this.addLinkTrack(constants.EVENT_SHOPPING_LIST_ADD);
				} else if (riaEvent === constants.EVENT_CART_ADD.toLowerCase()) {
					product.addProduct(riaProduct);
					this.addEvents([constants.EVENT_CART_ADDITION_VISIT, constants.EVENT_CART_ADD]);
                    common.postProcessVariable(constants.EVENT_CART_ADDITION_VISIT);
                    common.postProcessVariable(constants.EVENT_CART_ADD);
				} else {
					product.addProduct(riaProduct);
					this.addEvents(['event3', 'event22', 'prodView']);
                    common.postProcessVariable('event3');
                    common.postProcessVariable('event22');
                    common.postProcessVariable('prodView');
				}
			} else if (typeof irwstatsLocalVars.riaProduct !== "undefined") {
				s.eVar53 = s.prop53 = "rich content";
				common.postProcessVariable("s.eVar53");
				common.postProcessVariable("s.prop53");
				product.addProduct(irwstatsLocalVars.riaProduct);
				this.addEvents(['event3', 'event22', 'prodView']);
                common.postProcessVariable('event3');
                common.postProcessVariable('event22');
                common.postProcessVariable('prodView');
			}
		},
		/**
		 * Checks which platform is using .
		 * @return {String} Platform is return .
		 */
		getSitePlatform : function () {
			"use strict";
			return "web";
		},
		/**
		 * Checks if s.prop2 is in a predefined array.
		 * @return {Boolean} true if the s.prop2 has any if the predefined values.
		 */
		checkProp2: function () {
			var vProp2s = ["all products", "ikea news", "other", "living room", "kitchen", "bedroom", "childrens ikea", "textiles", "workspaces", "bathroom", "lighting", "decoration", "secondary storage", "hallway", "ikea family products", "dining", "small storage", "cooking", "laundry", "youth room", "outdoor", "eating", "summer", "winter holidays"],
				vCount;
			if (s.prop2) {
				for (vCount = 0; vCount < vProp2s.length; vCount += 1) {
					if (vProp2s[vCount] === s.prop2) {
						return true;
					}
				}
			}
			return false;
		},
		/**
		 * Appends an extension if flash is not installed on the client.
		 * @param {String} pStr.
		 * @param {String} pExt.
		 * @return {String} Either just pStr or pStr concatenated with pExt.
		 */
		appendExtIfNotFlashInstalled: function (pStr, pExt) {
			if (!com.ikea.irw.flash.Util.isValid()) {
				pStr += pExt;
			}
			return pStr;
		}
	};
}());
/*global com, isArray, isString, document */

/**
 * @classDescription ShoppingCart functionality
 * @constructor
 */
com.ikea.irw.stat.ShoppingCart = (function () {
	"use strict";

	/** @scope com.ikea.irw.stat.ShoppingCart */
	return {

		/**
		 * Stats for adding products to the shopping cart.
		 */
        add: function (pProdArray, pQuantityId) {
            var vProducts = "",
                vPrevQty = "",
                vCurQty = "",
                tag = com.ikea.irw.stat.Tag;

            if (!(pProdArray instanceof Array)) {
				pProdArray = [ pProdArray ];
            }

            if (pProdArray && isArray(pProdArray) && pProdArray.length !== 0) {
                vProducts = pProdArray.join(",;");
                if (!vProducts.blank()) {
                    vProducts = ";" + vProducts;
                }
                if (document.getElementById(pQuantityId) !== null) {
                    vPrevQty = document.getElementById(pQuantityId).defaultValue;
                    vCurQty = document.getElementById(pQuantityId).value;
                }
                if (vCurQty < vPrevQty) {
                    tag.setTrailingTag("IRWStats.removefromcart", "yes");
                } else {
                    tag.setTrailingTag("IRWStats.addToCart", "yes");
                }
                tag.setTrailingTag("IRWStats.scAddProducts", vProducts);
            }
        },

		/**
		 * Stats for removing products from the shopping cart.
		 */
		remove: function (pProdArray) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants,
				vProducts = "";

            if (!(pProdArray instanceof Array)) {
				pProdArray = [ pProdArray ];
            }

			if (pProdArray && isArray(pProdArray) && pProdArray.length !== 0) {
				vProducts = pProdArray.join(",;");
				if (!vProducts.blank()) {
					vProducts = ";" + vProducts;
				}

				if (vProducts.startsWith(";S")) {
					vProducts = ";" + vProducts.substr(2);
				}

				vendor.setVariable(constants.EVAR_PRODUCTS, vProducts);
				vendor.setEvent(constants.EVENT_CART_REMOVE);

				vendor.setTrackVars([constants.EVENTS, constants.EVAR_PRODUCTS]);
				vendor.setTrackEvent(constants.EVENT_CART_REMOVE);

				vendor.executeLink({ action: constants.EVENT_CART_REMOVE });
			}
		},

		/**
		 *
		 */
		addOnSales: function (pAction, pValue, pRelation) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants,
				tag = com.ikea.irw.stat.Tag,
				vStr = "shopping_cart>range_functionality>";

			if (pAction && typeof pValue !== "undefined") {

				if (!pRelation) {
					pRelation = "matching";
				}

				if (pAction === "loadAddOnSales") {

					// Link request - value = true/false
					if (pValue) {
						// Add on sales box was shown.
						vStr += "add_on_sales";

					} else {
						// Add on sales box wasn't shown.
						vStr += "original";
					}

					vendor.setVariable(constants.PROP_RANGE_FUNCTIONALITY, vStr);
					vendor.setVariable(constants.EVAR_RAGE_FUNCTIONALITY, vStr);

					vendor.setTrackVars([constants.PROP_RANGE_FUNCTIONALITY, constants.EVAR_RAGE_FUNCTIONALITY]);
					vendor.clearTrackEvents();
					vendor.executeLink({ action: vStr });

				} else {
					if (pAction === "addToCart") {
						// Trailing tag - value = product
						tag.setTrailingTag("IRWStats.addFromAddOnSales", pValue);

					} else if (pAction === "productLink") {
						// Trailing tag - value = product
						tag.setTrailingTag("IRWStats.pipFromAddOnSales", pValue);
					}

					tag.setTrailingTag("IRWStats.addOnSalesType", pRelation);
				}
			}
		},

		/**
		 * Shopping list action stats.
		 */
		shoppingList: function (pListAction, pProduct, pRelation, pDiv, pActionPipBuyable) {
			var vendor = com.ikea.irw.stat.Vendor,
				constants = com.ikea.irw.stat.Constants,
				common = com.ikea.irw.stat.Common,
				product = com.ikea.irw.stat.Product,
				vListAction,
				vActionName = "shopping list",
				vRestoreProducts;

			if (pListAction && isString(pListAction) && !pListAction.blank()) {
				vListAction = pListAction.toLowerCase();

				if (vListAction === "buyonline") {
					vendor.addEvents([ constants.EVENT_CART_ADD, constants.EVENT_CART_ADDITION_VISIT ]);

					vRestoreProducts = vendor.getValue(constants.EVAR_PRODUCTS);
					vendor.clearVariable(constants.EVAR_PRODUCTS);
					product.addProduct(pProduct);

					if (vendor.getValue(constants.PROP_PAGE_TYPE) === "main category") {
						if (pDiv === ("popupAddToCart" + pProduct)) {
							vendor.setVariable(constants.PROP_PAGE_FUNCTIONALITY, "modules>top 10 products");
							vendor.setVariable(constants.EVAR_PRODUCT_FINDING_METHOD, "main category>top 10 products");
							vendor.setTrackVars([ constants.PROP_PAGE_FUNCTIONALITY, constants.EVENTS, constants.EVAR_PRODUCTS, constants.EVAR_PRODUCT_FINDING_METHOD ]);
						}
					} else if (pRelation && isString(pRelation) && !pRelation.blank()) {
						product.addRelations(pRelation.toLowerCase());
						vendor.setTrackVars([ constants.EVENTS, constants.EVAR_PRODUCTS, constants.EVAR_PRODUCT_FINDING_METHOD ]);
					} else {
						vendor.setTrackVars([ constants.EVENTS, constants.EVAR_PRODUCTS ]);
					}
					if (pActionPipBuyable && pActionPipBuyable === 'pipBuyOnline') {
						vendor.setVariable(constants.PROP_RANGE_FUNCTIONALITY, "pip>range_functionality>a512");
						vendor.setVariable(constants.EVAR_PIP_USED_RAGE_FUNCTIONALITY, "pip>range_functionality>a512");
						vendor.addTrackVars([constants.PROP_RANGE_FUNCTIONALITY, constants.EVAR_PIP_USED_RAGE_FUNCTIONALITY]);
					}

					vendor.setTrackEvents([constants.EVENT_CART_ADD, constants.EVENT_CART_ADDITION_VISIT]);
					vActionName += " buy online";

				} else if (vListAction === "createnewlist") {
					vendor.setVariable(constants.PROP_PAGE_FUNCTIONALITY, "shopping list created");
					vendor.setTrackVar(constants.PROP_PAGE_FUNCTIONALITY);
					vendor.clearTrackEvents();
					vActionName = " create";

				} else if (vListAction === "addbypartnumber") {
					vendor.addEvents([ constants.EVENT_SHOPPING_LIST_ADD, constants.EVENT_ADD_TO_SHOPPING_LIST_VISITS ]);
					vRestoreProducts = vendor.getValue(constants.EVAR_PRODUCTS);
					vendor.clearVariable(constants.EVAR_PRODUCTS);
					product.addProduct(pProduct);

					vendor.setTrackEvents([ constants.EVENT_SHOPPING_LIST_ADD, constants.EVENT_ADD_TO_SHOPPING_LIST_VISITS ]);
					vendor.setTrackVars([ constants.EVENTS, constants.EVAR_PRODUCTS ]);
					vActionName += " add by part number";

				} else if (vListAction === "addfrompiporsc") {
					vendor.addEvents([ constants.EVENT_SHOPPING_LIST_ADD, constants.EVENT_ADD_TO_SHOPPING_LIST_VISITS ]);
					vRestoreProducts = vendor.getValue(constants.EVAR_PRODUCTS);
					vendor.clearVariable(constants.EVAR_PRODUCTS);
					product.addProduct(pProduct);

					if (vendor.getValue(constants.PROP_PAGE_TYPE) === "main category") {
						vendor.setVariable(constants.PROP_PAGE_FUNCTIONALITY, "modules>top 10 products");
						vendor.setVariable(constants.EVENT_PRODUCT_VIEW_CUSTOM, "main category>top 10 products");
						vendor.setTrackVars([ constants.PROP_PAGE_FUNCTIONALITY, constants.EVENTS, constants.EVAR_PRODUCTS, constants.EVAR_PRODUCT_FINDING_METHOD ]);

					} else if (pRelation && isString(pRelation) && !pRelation.blank()) {
						product.addRelations(pRelation.toLowerCase());
						vendor.setTrackVars([ constants.EVENTS, constants.EVAR_PRODUCTS, constants.EVAR_PRODUCT_FINDING_METHOD ]);

					} else {
						vendor.setTrackVars([ constants.EVENTS, constants.EVAR_PRODUCTS ]);
					}
					if (pDiv === '0') {
						vendor.setVariable(constants.PROP_PAGE_FUNCTIONALITY, "shopping list created");
						vendor.addTrackVar(constants.PROP_PAGE_FUNCTIONALITY);
					}
					vendor.setTrackEvents([constants.EVENT_SHOPPING_LIST_ADD, constants.EVENT_ADD_TO_SHOPPING_LIST_VISITS]);
					vActionName += " add from pip or stockcheck";

				} else if (vListAction === "poppopupopened") {
					vendor.setVariable(constants.PROP_PAGE_FUNCTIONALITY, "shopping list popup opened");
					vendor.setTrackVar(constants.PROP_PAGE_FUNCTIONALITY);
					vendor.clearTrackEvents();
					vActionName += " popup opened";

				} else if (vListAction === "emailshoppinglist") {
					vendor.setVariable(constants.EVAR_SHOPPING_LIST_ACTION, "email");
					vendor.addEvent(constants.EVENT_SHOPPING_LIST_COMPLETIONS);
					vendor.setTrackVars([ constants.EVAR_SHOPPING_LIST_ACTION, constants.EVENTS, constants.EVAR_PRODUCTS ]);
					vendor.setTrackEvent(constants.EVENT_SHOPPING_LIST_COMPLETIONS);
					vActionName += " email";

				} else if (vListAction === "removeproduct") {
					vendor.setVariable(constants.EVAR_SHOPPING_LIST_ACTION, "remove");
					vendor.addEvent(constants.EVENT_SHOPPING_LIST_REMOVE);
					product.removeProduct(pProduct);
					vRestoreProducts = vendor.getValue(constants.EVAR_PRODUCTS);
					vendor.clearVariable(constants.EVAR_PRODUCTS);
					product.addProduct(pProduct);
					vendor.setTrackVars([ constants.EVAR_SHOPPING_LIST_ACTION, constants.EVENTS, constants.EVAR_PRODUCTS ]);
					vendor.setTrackEvent(constants.EVENT_SHOPPING_LIST_REMOVE);
					vActionName += " remove";

				} else if (vListAction === "updateproduct") {
					vendor.addEvent(constants.EVENT_SHOPPING_LIST_ADD);
					vRestoreProducts = vendor.getValue(constants.EVAR_PRODUCTS);
					vendor.clearVariable(constants.EVAR_PRODUCTS);
					product.addProduct(pProduct);
					vendor.setTrackVars([ constants.EVENTS, constants.EVAR_PRODUCTS ]);
					vendor.setTrackEvent(constants.EVENT_SHOPPING_LIST_ADD);
					vActionName += " update";

				} else if (vListAction === "printshoppinglist") {
					vendor.setVariable(constants.EVAR_SHOPPING_LIST_ACTION, "print");
					vendor.addEvent(constants.EVENT_SHOPPING_LIST_COMPLETIONS);
					vendor.setTrackVars([ constants.EVAR_SHOPPING_LIST_ACTION, constants.EVENTS, constants.EVAR_PRODUCTS ]);
					vendor.setTrackEvent(constants.EVENT_SHOPPING_LIST_COMPLETIONS);
					vActionName += " print";

				} else if (vListAction === "saveshoppinglist") {
					vendor.setVariable(constants.EVAR_SHOPPING_LIST_ACTION, "save");
					vendor.setTrackVars([ constants.EVAR_SHOPPING_LIST_ACTION, constants.EVAR_PRODUCTS ]);
					vendor.clearTrackEvents();
					vActionName += " save";
				}
			}

			common.addLocalFlag(constants.FLAG_SHOPPING_LIST_PROD);
			vendor.executeLink({ action: vActionName });

			if (vRestoreProducts && !vRestoreProducts.blank()) {
				vendor.setVariable(constants.EVAR_PRODUCTS, vRestoreProducts);
			}
		}
	};
}());/*global s, common, vendor, com, irwstatsLocalVars, observe, has, getElements, document, window */

var common = com.ikea.irw.stat.Common,
	constants = com.ikea.irw.stat.Constants,
	cookie = com.ikea.irw.stat.Cookie,
	core = com.ikea.irw.stat.Core,
	error = com.ikea.irw.stat.Errors,
	tag = com.ikea.irw.stat.Tag,
	utils = com.ikea.irw.stat.Utils,
	vendor = com.ikea.irw.stat.Vendor,
	product = com.ikea.irw.stat.Product,
	tMapArr = {};

tMapArr.pagename = {
	run: function (pValue) {
		"use strict";
		s.pageName = pValue;
		common.addLocalFlag("pageName_SET");
	},
	addTrack: ["pageName"]
};

tMapArr.pagenamelocal = {
	run: function (pValue) {
		"use strict";
		s.prop1 = pValue;
		common.addLocalFlag("pageNameLocal_SET");
	},
	addTrack: ["prop1"]
};

tMapArr.fallback_pagename = { varName: "pageName" };
tMapArr.fallback_pagenamelocal = { varName: "prop1" };
tMapArr.country = { varName: "prop8" };
tMapArr.language = { varName: "prop17" };
tMapArr.pagetype = { varName: "prop5" };

tMapArr.event = {
	run: function (pValue) {
		"use strict";
		vendor.addEvent(pValue);
		vendor.addLinkTrack(pValue);
	},
	changeCase: "no"
};

// omniture-name: department
tMapArr.category = {
	run: function (pValue) {
		"use strict";
		s.prop2 = pValue;
		irwstatsLocalVars.riaCategory = pValue;
	},
	addTrack: ["prop2"]
};

tMapArr.subcategory = { varName: "prop3" };		// omniture-name: category
tMapArr.chapter = { varName: "prop4" };			// omniture-name: Sub category
tMapArr.system = { varName: "prop21" };			// omniture-name: Subsub Category
tMapArr.systemchapter = { varName: "prop22" };	// omniture-name: Subsubsub Category

tMapArr.categorytabid = {
	run: function () {
		"use strict";
		irwstatsLocalVars.categoryTabId = "tab";
	}
};

// 2.6.3 - Local names (not sent to omniture, used to build pagenamelocal)
tMapArr.categorylocal = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.categoryLocal = pValue;
	}
};

tMapArr.subcategorylocal = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.subcategoryLocal = pValue;
	}
};

tMapArr.chapterlocal = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.chapterLocal = pValue;
	}
};

tMapArr.systemlocal = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.systemLocal = pValue;
	}
};

tMapArr.systemchapterlocal = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.systemChapterLocal = pValue;
	}
};
// End - 2.6.3 - Local names

tMapArr.nofsearchresultsproduct = { varName: "prop7" };
tMapArr.nofsearchresultstotal = { varName: "prop42" };

tMapArr.products = {
	run: function (pValue) {
		"use strict";
		com.ikea.irw.stat.Product.addProduct(pValue);
		irwstatsLocalVars.products = pValue;
	},
	addTrack: ["products"]
};

tMapArr.productfindingmethod = {
	run: function (pValue) {
		"use strict";
		product.addRelations(pValue);
	}
};

tMapArr.scinuse = {
	run: function () {
		"use strict";
		vendor.addEvents(["event6", "event25", "event26"]);
		vendor.removeEvent("event27");
	},
	changeCase: "no",
	addTrack: ["event6", "event25", "event26"]
};

tMapArr.scinstock = { varName: "prop11" };
tMapArr.scstoreno = { varName: "prop10" };
tMapArr.scproduct = {
	run: function (pValue) {
		"use strict";
		s.prop12 = pValue;
		product.addProduct(pValue);
	},
	addTrack: ["prop12", "products"]
};

tMapArr.sccontactmethod = {
	run: function (pValue) {
		"use strict";
		s.prop13 = pValue;
		vendor.addEvent("event7");
	},
	addTrack: ["prop13", "event7"]
};

tMapArr.ecomorderid = { varName: "purchaseID" };
tMapArr.ecompaymentmethod = { varName: "eVar5" };
tMapArr.ecomshippingmethod = { varName: "eVar6" };


tMapArr.ecomstatus = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.eComStatus = pValue;
		common.addLocalFlag("eComStatus_SET");
	}
};

tMapArr.newslettersignup = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			vendor.addEvent("event9");
			vendor.addLinkTrack("event9");
		}
	}
};

tMapArr.internalpagetype = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.internalPageType = pValue;
	},
	changeCase: "no"
};

tMapArr.cartopenedinsession = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			common.addLocalFlag("cartOpenedInSession_SET");
		}
	},
	changeCase: "no"
};

tMapArr.lastpagecart = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			common.addLocalFlag("lastPageCart_SET");
		}
	},
	changeCase: "no"
};

tMapArr.addtocart = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			vendor.addEvents(["scAdd", "event29"]);
			vendor.addLinkTracks(["scAdd", "event29"]);
		}
	}
};
tMapArr.scaddproducts = {
	run: function (pValue) {
		"use strict";
		common.addLocalFlag('scAddProducts_SET');
		irwstatsLocalVars.scAddProducts = pValue;
	}
};
tMapArr.productalreadyincart = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			common.addLocalFlag('productAlreadyInCart_SET');
		}
	}
};
tMapArr.removefromcart = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			vendor.addEvent('scRemove');
			vendor.addLinkTrack("scRemove");
		}
	}
};
tMapArr.checkoutstart = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			vendor.addEvent('scCheckout');
			vendor.addLinkTrack("scCheckout");
		}
	}
};
tMapArr.currencycode = { varName: "currencyCode", changeCase: "upper" };
tMapArr.url = { varName: "prop41" };
tMapArr.sitenavigation = { varName: "prop44" };
//tMapArr.familyloginsuccessful = { toVar: false };
tMapArr.familyloginsuccessful = { };
tMapArr.familyusersignedup = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			vendor.addEvent('event8');
			vendor.addLinkTrack("event8");
		}
	}
};
tMapArr.shoppingcartview = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			vendor.addEvent('scView');
			vendor.addLinkTrack("scView");
		}
	}
};
tMapArr.downloadurl = {
	run: function (pValue) {
		"use strict";
		s.prop9 = pValue;
		s.eVar9 = pValue;
		vendor.addEvent('event5');
	},
	addTrack: ["prop9", "eVar9", "event5"]
};

tMapArr.prodview = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			vendor.addEvent('prodView');
			common.addLocalFlag('prodView');
			s.eVar29 = '+1';
			addTrack: ["prodView", "eVar29"]
		}
	}
};
tMapArr.event3 = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			vendor.addEvents(["event3", "event22"]);
			addTrack: ["event3", "event22"]
		}
	}
};
tMapArr.purchase = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			vendor.addEvents(["purchase", "event30"]);
			vendor.addLinkTracks(["purchase", "event30"]);
		}
	}
};

tMapArr.front = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			common.addLocalFlag('front');
		} else {
			common.addLocalFlag('front_SET');
		}
	}
};

tMapArr.hasform = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			common.addLocalFlag('form');
		}
	}
};

tMapArr.newproduct = {
	run: function () {
		"use strict";
		common.addLocalFlag('newProduct');
	}
};

tMapArr.merchandisingcategory = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			common.addLocalFlag('merchandisingcategory_SET');
		}
	}
};

tMapArr.friendlypagename = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.friendlyPageName = pValue;
	},
	changeCase: "no"
};

tMapArr.filter = {
	run: function (pValue) {
		"use strict";
		s.prop24 = "filter>" + pValue;
	},
	addTrack: ["prop24"]
};

tMapArr.sort = {
	run: function (pValue) {
		"use strict";
		s.prop24 = "sort>" + pValue;
	},
	addTrack: ["prop24"]
};

tMapArr.formerrorfields = {
	run: function (pValue) {
		"use strict";
		common.addLocalFlag('formErrorFields_SET');
		irwstatsLocalVars.formErrorFields = pValue;
	}
};

tMapArr.formerrortexts = {
	run: function (pValue) {
		"use strict";
		common.addLocalFlag('formErrorTexts_SET');
		irwstatsLocalVars.formErrorTexts = pValue;
	}
};

tMapArr.formerrorkeys = {
	run: function (pValue) {
		"use strict";
		common.addLocalFlag('formErrorKeys_SET');
		irwstatsLocalVars.formErrorKeys = pValue;
	}
};

tMapArr.formerrorname = {
	run: function (pValue) {
		"use strict";
		common.addLocalFlag('formErrorName_SET');
		irwstatsLocalVars.formErrorName = pValue;
	}
};

tMapArr.searchvisited = {
	run: function () {
		"use strict";
		s.eVar27 = '+1';
	},
	addTrack: ["eVar27"]
};
tMapArr.pagefunctionality = { varName: "prop24" };
tMapArr.productviewtype = { varName: "prop53" };

tMapArr.familydiscount = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			vendor.addEvent('event14');
			vendor.addLinkTrack("event14");
		}
	}
};

tMapArr.memberloginstart = {
	run: function () {
		"use strict";
		common.addLocalFlag('memberLoginStarted_SET');
	}
};

tMapArr.memberloggedin = {
	run: function (pValue) {
		"use strict";
		vendor.addEvent('event2');
		s.prop28 = pValue;
		common.addLocalFlag('memberType_SET');
		common.addLocalFlag('memberLoggedIn_SET');
	},
	addTrack: ["event2", "prop28"]
};

tMapArr.membertype = {
	run: function (pValue) {
		"use strict";
		s.prop28 = pValue;
		common.addLocalFlag('memberType_SET');
	},
	addTrack: ["prop28"]
};

tMapArr.membersignupstart = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			common.addLocalFlag('memberSignupStart_SET');
			vendor.addEvent('event24');
			vendor.addLinkTrack("event24");
		}
	}
};
tMapArr.membersignupstarted = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			common.addLocalFlag('memberSignupStarted_SET');
		}
	}
};
tMapArr.checkoutguest = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			common.addLocalFlag('checkoutGuest_SET');
		}
	}
};

tMapArr.emailshoppinglist = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			s.eVar30 = 'email';
			vendor.addEvent('event20');
			vendor.addLinkTracks(["eVar30", "event20"]);
		}
	}
};

tMapArr.usertypetransition = {
	run: function (pValue) {
		"use strict";
		vendor.addEvent('event15');
		s.eVar32 = pValue;
		common.addLocalFlag('memberType_SET');
	},
	addTrack: ["event15", "eVar32"]
};

tMapArr.localstoreno = {
	run: function (pValue) {
		"use strict";
		s.prop32 = pValue;
		s.eVar17 = pValue;
	},
	addTrack: ["prop32", "eVar17"]
};

//tMapArr.newsletterstoreno = {
//	run: function (pValue) {
//		"use strict";
//		s.prop32 = pValue; 
//	}
//};
tMapArr.newsletterstoreno = { varName: "prop32" };

tMapArr.trackdownload = {
	run: function (pValue) {
		"use strict";
		if (pValue === "no") {
			common.addLocalFlag('disableDownloadTrack_SET');
		}
	}
};

tMapArr.riaapplicationstart = {
	run: function () {
		"use strict";
	}
};
tMapArr.riaapplicationcomplete = {
	run: function () {
		"use strict";
	}
};

tMapArr.supportrequest = {
	run: function (pValue) {
		"use strict";
		s.eVar31 = pValue;
		vendor.addEvent('event16');
	},
	addTrack: ["eVar31", "event16"]
};

tMapArr.addbypartnumbererror = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			common.addLocalFlag('addByPartNumberError_SET');
		}
	}
};

tMapArr.version = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.version = pValue;
	}
};
tMapArr.riaassettype = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.riaAssetType = pValue;
	}
};
tMapArr.riaasset = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.riaAsset = pValue;
	}
};

tMapArr.riaaction = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.riaAction = pValue;
		common.addLocalFlag('riaAction_SET');
	}
};
tMapArr.riaactiontype = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.riaActionType = pValue;
	}
};
tMapArr.riaroomset = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.riaRoomSet = pValue;
	}
};
tMapArr.riapageview = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			common.addLocalFlag('riaPageView_SET');
		}
	}
};
tMapArr.ria_prop1 = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.ria_prop1 = pValue;
	}
};
tMapArr.ria_prop2 = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.ria_prop2 = pValue;
	}
};
tMapArr.ria_prop3 = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.ria_prop3 = pValue;
	}
};
tMapArr.ria_prop4 = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.ria_prop4 = pValue;
	}
};
tMapArr.ria_prop5 = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.ria_prop5 = pValue;
	}
};
tMapArr.ria_var1 = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.ria_var1 = pValue;
	}
};
tMapArr.ria_var2 = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.ria_var2 = pValue;
	}
};
tMapArr.ria_var3 = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.ria_var3 = pValue;
	}
};
tMapArr.ria_var4 = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.ria_var4 = pValue;
	}
};
tMapArr.ria_var5 = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.ria_var5 = pValue;
	}
};
tMapArr.ria_event1 = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.ria_event1 = pValue;
	}
};
tMapArr.ria_event2 = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.ria_event2 = pValue;
	}
};
tMapArr.ria_event3 = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.ria_event3 = pValue;
	}
};
tMapArr.ria_event4 = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.ria_event4 = pValue;
	}
};
tMapArr.ria_event5 = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.ria_event5 = pValue;
	}
};
tMapArr.riacompletion = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.riaCompletion = pValue;
	}
};
tMapArr.riarequestname = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.riaRequestName = pValue;
		common.addLocalFlag('riaRequestName_SET');
	}
};
tMapArr.riaevent = {
	run: function (pValue) {
		"use strict";
        if (pValue === constants.EVENT_LIST_ADD.toLowerCase()) {
			pValue = constants.EVENT_SHOPPING_LIST_ADD;
		}
		irwstatsLocalVars.riaEvent = pValue;
	}
};
tMapArr.riaspokenlanguage = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.riaSpokenLanguage = pValue;
	}
};
tMapArr.riasubtitlelanguage = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.riaSubtitleLanguage = pValue;
	}
};

//tMapArr.riaproduct = { eval:"irwstatOmnitureAddProduct(value); irwstatOmnitureAddEvent('prodView'); irwstatAddLocalFlag('prodView'); s.eVar29 = '+1'", changeCase:"lower" };
tMapArr.riaproduct = {
	run: function (pValue) {
		"use strict";
		product.addProduct(pValue);
		vendor.addEvent('event12');
		common.addLocalFlag('event12');
		s.eVar29 = '+1';
	},
	addTrack: ["products", "event12", "eVar29"]
};

tMapArr.pagearea = { varName: "prop29" };
tMapArr.detailedpagearea = { varName: "prop30" };

// Tag is set if stockcheck event is sent from previous page, used in pip page
tMapArr.stockcheckperformed = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			common.addLocalFlag('stockchkperformed_SET');
		}
	}
};

// Tag to set Alt Image used in pip page
tMapArr.piprangefunctionality = { varName: "prop48" };
tMapArr.pipusedrangefunctionality = { varName: "eVar56" };

// Add on sales
tMapArr.addfromaddonsales = {
	run: function (pValue) {
		"use strict";
		common.addLocalFlag('addFromAddOnSales_SET');
		irwstatsLocalVars.addOnSalesProduct = pValue;
	}
};
tMapArr.pipfromaddonsales = {
	run: function (pValue) {
		"use strict";
		common.addLocalFlag('pipFromAddOnSales_SET');
		irwstatsLocalVars.addOnSalesProduct = pValue;
	}
};
tMapArr.addonsalestype = {
	run: function (pValue) {
		"use strict";
		irwstatsLocalVars.addOnSalesType = pValue;
	}
};
tMapArr.templatetype = {
	run: function (pValue) {
		"use strict";
		s.prop36 = pValue;
		s.eVar36 = pValue;
	},
	addTrack: ["prop36", "eVar36"]
};

tMapArr.productinshoppingcart = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			common.addLocalFlag('productInShoppingCart_SET');
		}
	}
};
tMapArr.searchtype = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			common.addLocalFlag('searchPage_SET');
		}
	}
};

tMapArr.acv3 = { varName: "eVar3" };
tMapArr.ac31 = { varName: "events" };

tMapArr.ac48 = {
	run: function (pValue) {
		"use strict";
		s.prop48 = pValue;
		s.eVar48 = pValue;
	},
	addTrack: ["prop48", "eVar48"]
};

//Autocomplete directlinks to Omniture
tMapArr.acdl = {
	run: function (pValue) {
		"use strict";
		s.prop6 = pValue;
		s.eVar1 = pValue;
		s.prop7 = 1;
		s.prop42 = 1;
		s.eVar27 = '+1';
		vendor.setEvents([constants.EVENT_SEARCH, constants.EVENT_SEARCH_AUTO_COMPLETE, constants.EVENT_SEARCH_INTERNAL_VISISTS]);
	},
	addTrack: ["prop6", "prop7", "prop42", "eVar1", "eVar27", "event1", "event31", "event34"]
};

tMapArr.addtoshoppinglist = {
	run: function (pValue) {
		"use strict";
		if (pValue === "yes") {
			vendor.addEvents(["event17", "event23"]);
			vendor.addLinkTracks(["event17", "event23"]);
		}
	}
};

function irwstatClearLocalData() {
	"use strict";
    com.ikea.irw.stat.Common.clearLocalData();
}

/**
 * @desc Add a flag for local processing
 * @param flagName (String) - Name of flag to set
 */
function irwstatAddLocalFlag(flagName) {
	"use strict";
    com.ikea.irw.stat.Common.addLocalFlag(flagName);
}

/**
 * @desc Remove a flag for local processing
 * @param flagName (String) - Name of flag to remove
 */
function irwstatDeleteLocalFlag(flagName) {
	"use strict";
    com.ikea.irw.stat.Common.deleteLocalFlag(flagName);
}

/**
 * @desc Check if a local flag has been set
 * @param flagName (String) - Name of flag to check status of
 * @return Bool - True/False if flag has been set
 */
function irwstatCheckLocalFlag(flagName) {
	"use strict";
	return com.ikea.irw.stat.Common.checkLocalFlag(flagName);
}

/**
 * @desc Add a flag for local processing
 * @param flagName (String) - Name of flag to set
 */
function irwstatCheckEVar37() {
	"use strict";
    return com.ikea.irw.stat.Vendor.checkProp2();
}

function irwstatAddTrackVar(varName) {
	if (arguments.length > 1) {
		com.ikea.irw.stat.Common.addTrackVar(varName, true);
	} else {
		com.ikea.irw.stat.Common.addTrackVar(varName);
	}
}

function irwstatCheckTrackVar(varName) {
	"use strict";
	return com.ikea.irw.stat.Common.checkTrackVar(varName);
}

function irwstatAddFixedVars(tagName, tagValue) {
	"use strict";
	com.ikea.irw.stat.Common.addFixedVar(tagName, tagValue);
}

function irwstatAddMetaTag(tagName, tagValue) {
	"use strict";
    com.ikea.irw.stat.Tag.addMetaTag(tagName, tagValue);
}

function irwstatReadMetaTags() {
	"use strict";
	return com.ikea.irw.stat.Tag.readMetaTags();
}

function irwstatCheckTag(tagName, irwTags) {
	"use strict";
	return com.ikea.irw.stat.Tag.checkTag(tagName, irwTags);
}

function irwstatDisableTag(tagName, irwTags) {
	"use strict";
	return com.ikea.irw.stat.Tag.disableTag(tagName, irwTags);
}

function irwstatGetCookie(name) {
	"use strict";
	return com.ikea.irw.stat.Cookie.getCookie(name);
}

function irwstatSetCookie(name, value, expiredays) {
	"use strict";
    com.ikea.irw.stat.Cookie.setCookie(name, value, expiredays);
}

function irwstatSetTrailingTag(tagName, tagValue) {
	"use strict";
	com.ikea.irw.stat.Tag.setTrailingTag(tagName, tagValue);
}

function irwstatGetTrailingTagValue(tagName) {
	"use strict";
    return com.ikea.irw.stat.Tag.getTrailingTagValue(tagName);
}

function irwstatReadTrailingTag() {
	"use strict";
	com.ikea.irw.stat.Tag.readTrailingTag();
}

function irwstatCheckCategories(irwTags) {
	"use strict";
    return com.ikea.irw.stat.Tag.checkCategories(irwTags);
}

function irwstatPostProcessVariable(varName) {
	"use strict";
    com.ikea.irw.stat.Common.postProcessVariable(varName);
}

function irwstatPostProcessEval(evalString, value) {
	"use strict";
	com.ikea.irw.stst.Utils.debug("irwstatPostProcessEval should not be used, since it's been made a no-op.\nConsider using the addLinkTrack from the Vendor class or setVariable and addTrackVar also from the Vendor class.");
}

function irwstatPrepareVendor(tags) {
	"use strict";
	com.ikea.irw.stat.Vendor.prepareVendor(tags);
}

function irwstatPrepareConfig() {
	var options = {};
	if (arguments.length === 2) {
		options.locale = arguments[0];
		options.type = arguments[1];
	} else if (arguments.length === 1) {
		options.locale = arguments[0];
	}

    com.ikea.irw.stat.Core.prepareConfig(options);
}

function irwstatPrepareOmnitureConfig() {
	var options = {};
	if (arguments.length === 2) {
		options.locale = arguments[0];
		options.type = arguments[1];

	} else if (arguments.length === 1) {
		options.locale = arguments[0];
	}

    com.ikea.irw.stat.Core.prepareConfig(options);
}

function irwstatPrepareMLSConfig() {
	var options = {};
	if (arguments.length === 2) {
		options.locale = arguments[0];
		options.type = arguments[1];
        options.reporttype = constants.MLS;
	} else if (arguments.length === 1) {
		options.locale = arguments[0];
        options.reporttype = constants.MLS;
	}

    com.ikea.irw.stat.Core.prepareConfig(options);
}

function irwstatPreparePlannerConfig() {
	var options = {};
	if (arguments.length === 2) {
		options.locale = arguments[0];
		options.type = arguments[1];
        options.reporttype = constants.PLANNER;
	} else if (arguments.length === 1) {
		options.locale = arguments[0];
        options.reporttype = constants.PLANNER;
	}

    com.ikea.irw.stat.Core.prepareConfig(options);
}

function irwstatOmnitureAddCharset(charset) {
	"use strict";
    com.ikea.irw.stat.Tag.addCharSet(charset);
}

function irwstatOmnitureAddEvent(eventName) {
	"use strict";
    com.ikea.irw.stat.Vendor.addEvent(eventName);
}

function irwstatOmnitureRemoveEvent(eventName) {
	"use strict";
	com.ikea.irw.stat.Vendor.removeEvent(eventName);
}

function irwStatTrackRia() {
	var vCount,
		vParamArray = [];

	for (vCount = 0; vCount < arguments.length; vCount += 2) {
		vParamArray.push({ key: arguments[vCount], value: arguments[vCount + 1]});
	}

	com.ikea.irw.stat.RIA.trackRIA(vParamArray);
}
function trackRIAaction() {
	"use strict";
	var vCount,
		pRiaActions = [];
	for (vCount = 0; vCount < arguments.length; vCount += 2) {
		pRiaActions.push({ key: arguments[vCount], value: arguments[vCount + 1]});
	}
	com.ikea.irw.stat.RIA.trackRIAaction(pRiaActions);
}
function irwStatPopupAnna() {
	"use strict";
	com.ikea.irw.stat.General.popupAnna();
}

function irwStatAskAnnaOpen() {
	"use strict";
	com.ikea.irw.stat.General.askAnnaOpen();
}

function irwStatFormError(formName, formField, formErrorText) {
	"use strict";
	com.ikea.irw.stat.General.formError(formName, formField, formErrorText);
}

function irwStatFormErrorKey(errorKey) {
	"use strict";
	com.ikea.irw.stat.General.formErrorKey(errorKey, false);
}

function irwStatCompareProducts(productArray) {
	"use strict";
	com.ikea.irw.stat.Product.compareProducts(productArray);
}

function irwStatPageFunctionality(pageFunctionality, actionName) {
	"use strict";
	com.ikea.irw.stat.General.pageFunctionality(pageFunctionality, actionName);
}

function irwStatTopTenProductViewed() {
	"use strict";
    com.ikea.irw.stat.Product.topTenProductViewed();
}

function irwStatProductViewedFromSlideShow(partNumber, productViewType) {
	"use strict";
	com.ikea.irw.stat.Product.productViewedFromSlideShow(partNumber, productViewType);
}

function irwStatShoppingList() {
	com.ikea.irw.stat.ShoppingCart.shoppingList(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
}

function irwStatAddOnSales(actionName, value, relationType) {
	"use strict";
	com.ikea.irw.stat.ShoppingCart.addOnSales(actionName, value, relationType);
}

function irwStatProductChanged(productID) {
	"use strict";
	com.ikea.irw.stat.Product.productChanged(productID);
}

function irwStatThumbImgClickedFromPIP() {
	com.ikea.irw.stat.Product.thumbClickedFromPIP(arguments[0]);
}

function irwStatContactusFromPIP() {
	com.ikea.irw.stat.Product.ContactusFromPIP(arguments[0]);
}

function irwStatProductZoomOnPip(noOfMpaImages, noOfAltImages) {
	return com.ikea.irw.stat.Product.productZoomOnPip(noOfMpaImages, noOfAltImages);
}

/**
 * @desc Functionality to set product finding variable used in room set
 * 
 **/
function irwStatRoomSetClicked() {
	"use strict";
	com.ikea.irw.stat.Product.productFindingLinkClicked("roomset");
}

/**
 * @desc Functionality to set product finding variable
 * 
 **/
function irwStatProductFindingLinkClicked() {
	com.ikea.irw.stat.Product.productFindingLinkClicked(arguments[0]);
}

/**
 * @desc Functionality to set different relations
 * @param itemRelation(String) - Name of the relations
 **/
function irwstatOmnitureAddRelations(itemRelation) {
	"use strict";
	com.ikea.irw.stat.Product.addRelations(itemRelation);
}

function irwStatTopProductClicked() {
	"use strict";
//	Event.observe( $( 'topTenProductId'), 'click', function( e ) {
//		irwstatSetTrailingTag("IRWStats.productFindingMethod","main category>top 10 products");
//	    irwstatSetTrailingTag("IRWStats.pageFunctionality", "modules>top 10 products");
//	});
	var element = document.getElementById("topTenProductId");
	if (element !== null) {
		observe(element, "click", function () {
			com.ikea.irw.stat.Tag.setTrailingTag("IRWStats.productFindingMethod", "main category>top 10 products");
			com.ikea.irw.stat.Tag.setTrailingTag("IRWStats.pageFunctionality", "modules>top 10 products");
		});
	}
}

function irwstatOmnitureAddProduct(productID) {
	"use strict";
    com.ikea.irw.stat.Product.addProduct(productID);
}

function irwstatOmnitureRemoveProduct(productID) {
	"use strict";
    com.ikea.irw.stat.Product.removeProduct(productID);
}

function irwStatScAdd(prodArray, quantityId) {
	"use strict";
	com.ikea.irw.stat.ShoppingCart.add(prodArray, quantityId);
}

function irwStatScRemove(prodArray) {
	"use strict";
    com.ikea.irw.stat.ShoppingCart.remove(prodArray);
}

function irwStatLocalStoreViewed(storeNo) {
	"use strict";
	com.ikea.irw.stat.General.localStoreViewed(storeNo);
}

function irwStatFamilyNewsletterSignup() {
	"use strict";
	com.ikea.irw.stat.General.familyNewsletterSignup();
}

function irwstatSend() {
	"use strict";
	com.ikea.irw.stat.Core.send();
}

function irwstatSendLink() {
	var vOptions = {};

	if (arguments.length === 2) {
		vOptions.type = arguments[0];
		vOptions.action = arguments[1];

	// Only one argument, it must be the options object
	} else if (arguments.length === 1) {
		vOptions = arguments[0];
	}

	com.ikea.irw.stat.Core.sendLink(vOptions);
}

function irwstatHandleError(err, func) {
	"use strict";
    com.ikea.irw.stat.Errors.handleError(err, func);
}

function omnitureRemoveVariable() {
	com.ikea.irw.stat.Vendor.clearVariables(arguments);
}

function omniturePushCategory(newCat) {
	"use strict";
	com.ikea.irw.stat.Vendor.pushCategory(newCat);
}

function omnitureLastChanges() {
	"use strict";
	com.ikea.irw.stat.Vendor.lastChanges();
}

function omnitureUpdateCategories() {
	"use strict";
    com.ikea.irw.stat.Vendor.updateCategories();
}

function omnitureUpdatePageName() {
	"use strict";
	com.ikea.irw.stat.Vendor.updatePageName();
}

function omnitureUpdateCustomTags() {
	"use strict";
	com.ikea.irw.stat.Vendor.updateCustomTags();
}

function omnitureAddLinkTrack(varName) {
	"use strict";
	com.ikea.irw.stat.Vendor.addLinkTrack(varName);
}

function omnitureExecute() {
	"use strict";
    com.ikea.irw.stat.Vendor.execute();
}

function omnitureExecuteLink() {
	var vOptions = {};

	if (arguments.length === 2) {
		vOptions.type = arguments[0];
		vOptions.action = arguments[1];

	// Only one argument, it must be the options object
	} else if (arguments.length === 1) {
		vOptions = arguments[0];
	}

	com.ikea.irw.stat.Vendor.executeLink(vOptions);
}

function trim(myString) {
	"use strict";
    return myString.trim();
}

function irwStatDynamicListFiltered(listName, filterName) {
	"use strict";
	com.ikea.irw.stat.General.dynamicListFiltered(listName, filterName);
}

// Added by Ramge Presentation
// Process stock check statistics in PIP page
function irwStatStockCheckFromPIP() {
    com.ikea.irw.stat.StockCheck.fromPIP(arguments[0], arguments[1]);
}

// Send stock check notification statistics
function irwStatStockCheckNotification() {
    com.ikea.irw.stat.StockCheck.notification(arguments[0]);
}

// Added by Range Presentation
// Sends download event
function irwStatDownload(link) {
	"use strict";
    com.ikea.irw.stat.Core.sendDownload(link);
}

/**
* setIrwRiaProductActions() -> void
* - 
* 
* Sets the desired event based upon the ria product and ria event
**/
function setIrwRiaProductActions() {
	"use strict";
	com.ikea.irw.stat.RIA.productActions();
}

// Used by Litebox accessed from dynamic_template
function irwStatDynamicLitebox() {
	"use strict";
    com.ikea.irw.stat.General.dynamicLitebox();
}

/**
 * @desc Method irwStatProductFindingLinkClicked will execute only the class onlineCatalogueLink is present
 * 
 **/
function clickOnlineCatalogue() {
	"use strict";
	var elements = getElements("a"),
		count,
		element,
		clickListener = function () {
			com.ikea.irw.stat.Product.productFindingLinkClicked("onlineCatalogue");
			return true;
		};

	if (elements) {
		for (count = 0; count < elements.length; count += 1) {
			element = elements[count];
			if (has(element, "class", "onlineCatalogueLink")) {
				observe(element, "click", clickListener);
			}
		}
	}
}

observe(window, "load", clickOnlineCatalogue);

// Do this instead of the document.write in the footer?
//observe(window, "load", com.ikea.irw.stat.Core.send);

function irwStatSetShareAction(channel) {
	"use strict";
	com.ikea.irw.stat.General.setShareAction(channel);
}


/**
 * @desc Functionality to send range functionality from PIP
 * 
 **/
function irwStatSendRangeFunctionality(usedModules) {
	"use strict";
	com.ikea.irw.stat.Product.sendRangeFunctionality(usedModules);
}

function irwStatMoreModulesClicked(usedModules) {
	"use strict";
	com.ikea.irw.stat.Product.moreModulesClicked(usedModules);
}

function irwStatStockCheckOnLiteBox() {
	"use strict";
	com.ikea.irw.stat.StockCheck.onLiteBox();
}

function irwStockCheckFromLiteBox() {
	com.ikea.irw.stat.StockCheck.fromLiteBox(arguments[0], arguments[1], arguments[2]);
}

/**
*	
*	To track the file upload for selfservice form.
*		
**/

function irwStatFileUploadTracking() {
	"use strict";
	com.ikea.irw.stat.General.fileUploadTracking();
}

/**
*	
*	To track the googleplus button.
*		
**/
function plusoneTrack(obj) {
	s.linkTrackVars = 'eVar42,prop24,events,products';
	s.linkTrackEvents = 'event10';
	s.prop24 = "function>share";
	s.events = "event10";
	if (obj.state === "on") {
		s.eVar42 = "share>google plus";
	} else {
		s.eVar42 = "share>google plus remove";
	}
	s.tl(obj, 'o', 'Google Plus One Click');
}/*globals $namespace*/
/** @namespace  */
$namespace('com.ikea.irw.stats');/*globals com, ikea, irw, stat, Mpa2HtmlClass, $A, document, $$, irwStatTrackRia, Event, irwstatSetTrailingTag, irwstatGetCookie, irwstatSetCookie, irwstatGetTrailingTagValue, window*/
/**
 * <p>Class for handling WA in MPA2HTML
 *
 * Reads the following information from a class attribute of a A-tag:
 * riaAsset
 * riaActionType
 * riaAction
 *
 * The information will be sent to Omniture with the help of the trailing tag functionality.
 * Eg mean it will be sent after the page jump after a click.
 * </p>
 *
 * @classDescription This class contains functionality for WA in MPA2HTML
 * @constructor
 * @version 1.0.0
 *
 */


if (/\/visual\//.test(document.location.pathname)) {
    irwstatSend = function() { return; };
}

com.ikea.irw.stats.Mpa2HtmlClass = function() {
    var a, res, myArray;
    $A($$('.wastat')).each(function(item) {
        item.observe('click', function(ev) {
            a = ev.findElement('a');
            res = a.classNames().grep(/wainfo\|([a-zA-z0-9_]*)\|/);
            if (res === null) {
                return;
            }

            myArray = res[0].split('|');
            myArray.shift();

            irwstatSetTrailingTag("IRWStats.version", "2");
            irwstatSetTrailingTag("IRWStats.riaAsset", myArray[0]);
            irwstatSetTrailingTag("IRWStats.riaAssetType", "other");
            irwstatSetTrailingTag("IRWStats.riaActionType", myArray[1]);
            irwstatSetTrailingTag("IRWStats.riaAction", myArray[2]);
            irwstatSetTrailingTag("IRWStats.riaRoomSet", myArray[1]);
			Event.stop(ev);
			
            document.location.href = a.href;
        });
    });
};

Event.observe(document, 'dom:loaded', function() {
    var trailingTag, mpa2html;
    if ($$('div.flashHtml').length === 0) {       
        if($('shareHtml') !== null){
            $('shareHtml').remove();
        }
        return;
    } else {
        if ($('shareFlash') !== null) {
            $('shareFlash').remove();
        }
    }
    trailingTag = irwstatGetCookie("IRWStats.trailingTag");
    if (trailingTag) {
        irwStatTrackRia("IRWStats.version", irwstatGetTrailingTagValue("IRWStats.version"), "IRWStats.riaAsset", irwstatGetTrailingTagValue("IRWStats.riaAsset"), "IRWStats.riaAssetType", irwstatGetTrailingTagValue("IRWStats.riaAssetType"), "IRWStats.riaActionType", irwstatGetTrailingTagValue("IRWStats.riaActionType") + ">Room Settings", "IRWStats.riaAction", irwstatGetTrailingTagValue("IRWStats.riaAction"), "IRWStats.riaRoomSet", irwstatGetTrailingTagValue("IRWStats.riaRoomSet"), "IRWStats.riaProduct", irwstatGetTrailingTagValue("IRWStats.riaProduct"));
    }
    irwstatSetCookie("IRWStats.trailingTag", "", -1);
    mpa2html = new com.ikea.irw.stats.Mpa2HtmlClass();
    Event.observe(window, 'unload', function() {
        mpa2html = null;
    });
});/*global $,$$,$H,$A,Class,Template,Ajax,Position,Effect,s,window,XPathResult*/

// JSDoc notation used, for tag reference:
// http://code.google.com/p/jsdoc-toolkit/wiki/TagReference

/**
 * IRW Namespace Definition
 */
var IRW = {
	
	/**
	 * Resolver function object. Resolves the name space in XPath for browsers 
	 * other than IE. At the moment only ir name space is defined.
	 * 
	 * @param prefix The prefix to resolve at.
	 */	
	nsResolver: function (prefix) {
		var ns = {
			'ir' : 'http://www.ikea.com/v1.0'
		};
		return ns[prefix] || null;
	},

	/**
	 * Gets the function name of the calling function. The callee 
	 * parameter can be retreived from the function's arguments 
	 * object, i.e. <code>arguments.callee</code>.
	 *
	 * @param callee the provided callee
	 * @example
	 * function myFunction() {
	 *     alert(IRW.getFuncName(arguments.callee));
	 *         // alerts "myFunction"
	 * }
	 */
	getFuncName: function (callee) {
		var re = /^function\s+([^(]+)/;
		return re.exec(callee.toString())[1];
	},
	
	/**
	 * Gets the locale path. It is retrieved from the IKEA logo 
	 * path.
	 * 
	 * @param element the element whose href has the locale path
	 * @returns the locale path
	 */
	getLocalePath: function (element) {
		// fetch logo element
		if (typeof element === 'undefined') {
			element = $('lnkIKEALogoHeader');
		} else if (typeof element === 'string') {
			element = $(element);
		}
		if (element === null) {
			return null;
		}
		// read 'href' attribute
		return element.readAttribute('href');
	},
	
	/**
	 * Gets the locale string, e.g. sv-SE. Uses 
	 * {@link IRW#getLocalePath} and converts to a
	 * locale string.
	 * 
	 * @param element the element whose href has the locale path
	 * @returns the locale string
	 */
	getLocale: function (element) {
		var attr = IRW.getLocalePath(element),
			arr;
		
		if (attr === null) {
			return null;
		}
		
		// convert from '/se/sv/' to 'sv-SE'
		if (attr.startsWith('/')) {
			attr = attr.substr(1);
		} 
		arr = attr.split('/');
		return arr[1] + '-' + arr[0].toUpperCase();
	}
	
};/* global $, $$, $H, $A, IRW,Class,Template,Ajax,Position,Effect,escape,Element,Event,Prototype,irwstatSetTrailingTag,s,window,XPathResult,irwstatSend,search,clearTimeout,setTimeout*/

/**
 *  @namespace The IRW search module used for search and autocompletion features.
 */
IRW.search = (function () {
	var module = {};
	
	/**
	 * Creates a default autocompleter and sets it in <code>IRW.search.currentCompleter</code>.
	 * 
	 * @returns the created autocompleter
	 */
	module.createAutoCompleter = function () {
		IRW.search.loadConfig();
		var config = IRW.search.currentOptions, t, o;
		if (config.isEnabled) {
			if (typeof config.searchPath === 'undefined') {
				// TODO: load the search path dynamically somehow to the live/pt sites.
				config.searchPath = 'ptsearch.ikeadt.com';
			}
			t = new Template(config.searchPath);
			o = {
				locale: IRW.getLocalePath()
			};
			config.searchPath = t.evaluate(o);
			IRW.search.currentCompleter = new IRW.search.Autocompleter(config.searchPath, config);
		}
		return IRW.search.currentCompleter;
	};
	
	/**
	 * Loads both the global and the market specific options.
	 * 
	 * @returns the IRW options related object that can be used for the autocompleter 
	 */
	module.loadConfig = function () {
		var options = {};
		if (IRW.search.globalConfig) {
			Object.extend(options, IRW.search.globalConfig || {});
				// adds global options to empty options object
		}
		if (IRW.search.localConfig) {
			Object.extend(options, IRW.search.localConfig || {}); 
				// adds/overwrites global options with market specific options
		}
		IRW.search.currentOptions = options;
		return IRW.search.currentOptions;
	};
	
	/**
	 * Finds the position from where the whole "word" string starts in 
	 * the "haystack" string.
	 * @param word the word to search for
	 * @param haystack the haystack to search in
	 */
	module.findPosition = function (haystack, word) {
		haystack = haystack.toLowerCase();
		word = word.toLowerCase();
		var lastHaystack = haystack.length - 1, lastWord = word.length, i, j;
		for (i = 0; i < lastHaystack; i += 1) {
			j = 0;
			while (haystack.charAt(i + j) === word.charAt(j) && j < lastWord) {
				j += 1;
			}
			if (j === lastWord) {
				return i;
			}
		}
		return -1;
	};
	
	return module;
}());

/**
 * Local search result caching
 * @class
 */
IRW.search.LocalResultCache = Class.create({
	
	/**
	 * @constructor
	 */
	initialize: function (options) {
		this.options = {
		};
		Object.extend(this.options, options || {});
		this.cachedEntries = $H();
	},
	
	/**
	 * Puts the entry to the local hash cache. Will ignore null 
	 * arguments.
	 * @param searchTerm the search term to store the content under
	 * @param content the content to store
	 */
	put: function (searchTerm, content) {
		if (typeof searchTerm === 'undefined' || null === searchTerm) {
			return;
		}
		var lowerCaseTerm = (String.toLocaleLowerCase) ?
				searchTerm.toLocaleLowerCase() : 
				searchTerm.toLowerCase();
		this.cachedEntries[lowerCaseTerm] = content;
	},
	
	/**
	 * <p>Fetches the entry from the local hash cache. It will 
	 * also fetch empty entries if a beginning substring of 
	 * given search term exists and returns empty entries. </p>
	 * <p>Returns undefined if the search term is missing from the 
	 * local hash cache.</p>
	 * 
	 * @param searchTerm the search term used to put entry
	 * @returns the stored entry or undefined if none exist
	 */
	find: function (searchTerm) {
		if (typeof searchTerm === 'undefined' || null === searchTerm) {
			return null;
		}
		var lowerCaseTerm = (String.toLocaleLowerCase) ? 
				searchTerm.toLocaleLowerCase() : 
				searchTerm.toLowerCase(), 
			term = lowerCaseTerm, 
			entry = this.cachedEntries[term];
		if (typeof entry !== 'undefined') {
			return entry;
		}

		while (term.length > 0) {
			term = term.substr(0, term.length - 1);
			entry = this.cachedEntries[term];
			// if an entry is found, exit the loop
			if (typeof entry !== 'undefined' && null !== entry) {
				return ($H(entry).size() < 1) ? entry : null;
			}
		}
		return entry;

	}
	
});

/**
 * Builder used by the autocompleter to build the 
 * <code><ul></code>-list.
 * 
 * @class
 */
IRW.search.ListBuilder = Class.create({
	/**
	 * @constructor
	 * @param options IRW related options
	 */
	initialize: function (options) {
		this.options = {
			enableTokenEmphasis: true,
			enableLabels: true,
			enableDirectLinks: false
		};
		Object.extend(this.options, options || {});
	},
	
	formatListItem: function (item, token) {
		var out = '', str = item.name, url, hasEmphasis, tokenSize, index, firstPart, emPart, lastPart;
		
		if (item.type) {
			str += " " + item.type;
		}
		if (item.color) {
			str += " " + item.color;
		}
		url = item.url;
		hasEmphasis = false;
		if (item.hit_type === 'product') {
			hasEmphasis = true;
		}
		tokenSize = token.length;
		out += '<li>';
		if (this.options.enableDirectLinks && url) {
			out += '<a href="' + url + '">';
		}
		if (this.options.enableTokenEmphasis && hasEmphasis) {
			index = IRW.search.findPosition(str, token);
			if (index >= 0) {
				firstPart = str.substr(0, index);
				emPart = str.substr(index, tokenSize); 
				lastPart = str.substr(index + tokenSize);
				str = firstPart + '<em>' + emPart + '</em>' + lastPart;
			}
		}
		out += '<div class="text">';
		out += str;
		out += '</div>';
		
		if (IRW.search.currentOptions.labels && item.label === '') {
			item.label = IRW.search.currentOptions.labels[item.hit_type];
		}
		if (this.options.enableDirectLinks && this.options.enableLabels && item.label) {
			out += '<div class="label">';
			out += item.label;
			out += '</div>';
		}
		if (this.options.enableDirectLinks && url) {
			out += '</a>'; 
		}
		out += '</li>';
		return out;
	},
		
	formatList: function (json, token) {
		var out = '<ul class="results">';
		json.each(function (item) {
			out += this.formatListItem(item, token);
		}.bind(this));
		out += '</ul>';
		return out;
	},
	
	emptyList: '<ul class="results"></ul>',
	
	/**
	 * Formats the given json into a <code><ul></code>-list. Is
	 * called.
	 * @param token the search string token
	 */
	build: function (json, token) {
		if (json === null) {
			return this.emptyList;
		}
		if (($H(json).size()) < 1) {
			return this.emptyList;
		}
		return this.formatList(json, token);
	}
	
});

/**
 * IRW specific extension of the script.aculo.us Ajax.Autocompleter.
 * @class
 */
IRW.search.Autocompleter = Class.create(Ajax.Autocompleter, {
	/**
	 * @constructor
	 * @param options IRW related options
	 */
	initialize: function ($super, url, options) {
		$super('search', 'acList', url, {
			indicator: 'indicator',
			onShow: function (element, update) {
				if (!update.style.position || update.style.position === 'absolute') {
					update.style.position = 'absolute';
					Position.clone(element, update, {
						setHeight: false, 
						setWidth: false,
						offsetTop: element.offsetHeight
					});
				}
				Effect.Appear(update, {duration: 0.15});
			},
			callback: function (element, entry) {
				if (entry.startsWith('query=')) {
					entry = entry.substring(6); 
						// remove the "query=" prefix from entry
				}
				var options = {
					token: entry,
					locale: IRW.getLocale(),
					maxEntries: IRW.search.currentOptions.maxEntries
				},
					template = new Template(IRW.search.currentOptions.searchQueryTemplate), 
					url = template.evaluate(options);
				return url;
			},
			method: 'get'
		});
		this.setIrwOptions(options);
		this.cachedEntries = new IRW.search.LocalResultCache();
		this.options.autoSelectFirst = false;
	},
	
	selectEntry: function ($super) {
		if (this.index > -1) {
			$super();
		}
		this.submitEntry();
	},
	
	submitEntry: function () {
		IRW.search.sendStat();
		/* Fetch anchor, and if it exists redirect to the href */
		var entry = this.getCurrentEntry(), 
			anchor = entry.select('a'),
			text = entry.select('.text'),
			vText = text[0].innerHTML;
		if (anchor.size() > 0) {
			irwstatSetTrailingTag('IRWStats.acdl', vText);
			window.location = anchor[0].readAttribute('href');
		} else {
			vText = vText.replace("<em>", "");
			vText = vText.replace("</em>", "");
            irwstatSetTrailingTag("IRWStats.searchType", "yes");
			$('searchForm').submit();
		}
	},
	
	/**
	 * Sets the IRW related options
	 */
	setIrwOptions: function (options) {
		this.IrwOptions = {
			enableLabels: true,
			enableTokenEmphasis: true,
			keyStrokeAmount: 2,
			keyStrokeDelay: 100,
			maxEntries: 7
		};
		Object.extend(this.IrwOptions, options || {});
		this.builder = options.builder || new IRW.search.ListBuilder(this.IrwOptions);
		this.options.minChars = this.IrwOptions.keyStrokeAmount;
		this.options.frequency = (this.IrwOptions.keyStrokeDelay / 1000.0);
	},

	getUpdatedChoices: function ($super) {
		if (!this.IrwOptions.isEnabled) {
			return;
		}
		var active = this.IrwOptions.charAmountActive, token = this.getToken(), tokenSize = token.length, json, list;
		if ((active >= 0 && tokenSize <= active) || tokenSize < 1) {
			return;
		}
		// check cache
		json = this.cachedEntries.find(token);
		if (typeof json === 'undefined' || json === null) {
			$super();
			return;
		}
		list = this.builder.build(json, token);
		this.updateChoices(list);
	},
	
	/** markPrevious is a PATCH on autocompleter **/
	markPrevious: function () {
		if (this.index > -1) {
			this.index -= 1;
		} else {
			this.index = this.entryCount - 1;
		}
		if (this.index === -1) {
			this.hasFocus = false;
		} else {
			this.getEntry(this.index).scrollIntoView(false);
		}
	},
	
	markNext: function () {
		if (this.index > this.entryCount - 1) {
			this.index = 0;
		} else {
			this.index += 1;
		}
		if (this.index === this.entryCount) {
			this.hasFocus = false;
		} else {
			this.getEntry(this.index).scrollIntoView(false);
		}
	},
  
	/**updateChoices is a PATCH on autocompleter **/
	updateChoices: function ($super, choices) {
		if (!this.changed && this.hasFocus) {
			this.update.innerHTML = choices;
			Element.cleanWhitespace(this.update);
			Element.cleanWhitespace(this.update.down());
			var i, 
				entry;
	  
			if (this.update.firstChild && this.update.down().childNodes) {
				this.entryCount = 
					this.update.down().childNodes.length;
				for (i = 0; i < this.entryCount; i += 1) {
					entry = this.getEntry(i);
					entry.autocompleteIndex = i;
					this.addObservers(entry);
				}
			} else { 
				this.entryCount = 0;
			}

			this.stopIndicator();
			this.index = this.options.autoSelectFirst ? 0 : -1;
      
			if (this.entryCount === 1 && this.options.autoSelect) {
				this.selectEntry();
				this.hide();
			} else {
				this.render();
			}
		}
	},
	
	onComplete: function (response) {
		var json = response.responseText.evalJSON(true).result.products, 
			token = this.getToken(), 
			list;
		if (($(json).size()) < 1) {
			this.cachedEntries.put(token, {});
			this.stopIndicator();
		} else {
			this.cachedEntries.put(token, json);
		}
		list = this.builder.build(json, token);
		if (list === null) {
			this.stopIndicator();
			return;
		}
		this.updateChoices(list);
	},
/**
 * onKeyPress is a PATCH on autocompleter
 **/	
	onKeyPress: function (event) {
	    if (this.active) {
			switch (event.keyCode) {
			case Event.KEY_TAB:
			case Event.KEY_RETURN:
				if (this.index === this.entryCount || this.index === -1) {
					irwstatSetTrailingTag('IRWStats.ac48', 'search>range_functionality>autocomplete_not_used');
					search("searchForm");
				} else {
					this.selectEntry();
				}
				Event.stop(event);
			case Event.KEY_ESC:
				this.hide();
				this.active = false;
				Event.stop(event);
				return;
			case Event.KEY_LEFT:
			case Event.KEY_RIGHT:
				return;
			case Event.KEY_UP:
				this.markPrevious();
				this.render();
				Event.stop(event);
				return;
			case Event.KEY_DOWN:
				this.markNext();
				this.render();
				Event.stop(event);
				return;
			}
		} else {
			if (event.keyCode === Event.KEY_TAB || event.keyCode === Event.KEY_RETURN || 
					(Prototype.Browser.WebKit > 0 && event.keyCode === 0)) {
				IRW.search.sendStat(false);
				return;
			}
		}
			
	    this.changed = true;
	    this.hasFocus = true;
	
	    if (this.observer) {
			clearTimeout(this.observer);
		}
		this.observer = 
	        setTimeout(this.onObserverEvent.bind(this), this.options.frequency * 1000);
	}
});

/**
 * Sends search field related stats.
 * 
 * @param [withoutAc] true if auto complete was not used, default is 
 * using <code>IRW.search.currentOptions.isEnabled</code>.
 */
IRW.search.sendStat = function (isEnabled) {
	if (typeof isEnabled === 'undefined') {
		isEnabled = IRW.search.currentOptions.isEnabled;
	}
	var propvar = 'search>range_functionality>autocomplete_';
	propvar += isEnabled ? 'used' : 'not_used';
	irwstatSetTrailingTag('IRWStats.ac48', propvar);
	if (isEnabled) {
		irwstatSetTrailingTag('IRWStats.acv3', 'search>autocomplete');
		irwstatSetTrailingTag('IRWStats.ac31', 'event1,event31');
		s.linkTrackEvents = 'event31';
	} 
    s.linkTrackVars = 'eVar3,eVar48,prop48,events';
};/**
* Global configuration options are configured here
*/
IRW.search.globalConfig = {

	/**
	 * The number of entries to be shown in the auto-complete list
	 */
	maxEntries: 10,

	/**
	 * Turns off the auto-completion on or off, by default they 
	 * should be off before "roll out".
	 */
	isEnabled: false,

	/**
	 * Number of keystrokes before the autocomplete activates.
	 */
	keyStrokeAmount: 1, 

	/**
	 * The delay after the keystroke before autocomplete sends 
	 * (in millis).
	 */
	keyStrokeDelay: 100,
	
	/**
	 * The roof value for when autocomplete stops sending requests. 
	 * Negative means unlimited number of characters.
	 */
	charAmountActive: -1,
	
	searchPath: '/retail/irw#{locale}complete',

	searchQueryTemplate: 'q=#{token}&max=#{maxEntries}'

};/*global $,$H,$A,$$,IRW,Element,Template,search,document*/

/**
 * Create the autoload div and load the autocompleter when the DOM has loaded
 */
document.observe("dom:loaded", function () {
	// failsafe for when the search field is not present
	if (!$('search')) {
		return;		
	}
	// adding autocompleter list, div#searchList.autocomplete
	var searchList = new Element('div', {
		'id': 'acList',
		'class': 'autocomplete'
	}), indicatorDiv, button;
	$$('body')[0].insert({bottom: searchList});
	
	// adding indicator, div#indicator+img
	indicatorDiv = new Element('span', {
		id: 'indicator',
		style: 'display: none'
	});
	indicatorDiv.insert({
		top: new Element('img', {
			src: '/ms/img/loading.gif'
		})
	});
	// check if search is used and then use the insert
	if ($('search')) {
		$('search').insert({
			after: indicatorDiv 
		});
	}

	IRW.search.createAutoCompleter();

	// Fetch button
	if ($('lnkSearchBtnHeader')) {
		button = $('lnkSearchBtnHeader');
		// Removing the current onclick event on element
		button.writeAttribute({
			onclick: null
		});
		// Adding the send stat function to the button click
		button.observe('click', function () {
			IRW.search.sendStat(false);
			return false;
		});
	}
});/*global $,IRW,Ajax,js_fn_SEARCH_FEEDBACK_ERROR_1,js_fn_SEARCH_FEEDBACK_ERROR_2,s,irwstatSendLink,document,alert*/
IRW.feedback = (function () {
	var m = {};
	
	m.sendRequest = function (url, nbrHits, pStoreId, pLangId) {
		if (!m.validate()) {
			return;
		}
        var target = "feedback_result",
			qs = {
				storeId: pStoreId,
				langId: pLangId,
				answer: m.getSearchAck(),
				comment: document.getElementById("feedback_comment").value,
				nbrHits: nbrHits
	        },
			opts = {
                method: "post",
                parameters: qs,
                onComplete : function (e) {
                    $("feedback_result").show();
				}
			}, 
			r = new Ajax.Updater(target, url, opts), 
			f = document.getElementById("feedback_form");
		f.style.display = "none";
		m.sendOption();
    };
	
	m.getSearchAck = function () {
		var i, x;
		for (i = 0; i < document.forms.feedback_form.search_ack.length; i += 1) {
			x = document.forms.feedback_form.search_ack[i];
			if (x.checked) {
				return x.value;
			}
		}
		return null;
	};
	
	m.validate = function () {
		if (!m.getSearchAck()) {
			alert(js_fn_SEARCH_FEEDBACK_ERROR_1);
			return false;
		}
		var fc = document.getElementById("feedback_comment");
		if (fc) {
			if (fc.value.length > 500) {
				alert(js_fn_SEARCH_FEEDBACK_ERROR_2);
				return false;
			}
		}
		return true;
	};

	m.expand = function (item) {
		$(item).show();
	};
	
	m.sendOption = function () {
		s.prop24 = "search>feedback>" + m.getSearchAck();
		s.prop29 = "search>search_result>search_feedback";
		s.prop30 = "search>search_result>search_feedback>sent";
		s.linkTrackVars = "prop24,prop29,prop30";
		irwstatSendLink("o", s.prop29);
	};
	return m;
}());/**
 * The IRW.stockinfo module contains functions that handles
 * stock availability from IKEA's REST service.
 */
IRW.stockcheck = (function() {
	var module = {
		// Web analytics constants
		WA_HIGH: 't1',
		WA_MEDIUM: 't2',
		WA_LOW: 't3',
		WA_HIGH_MULTIPART: 't4',
		WA_MEDIUM_MULTIPART: 't5',
		WA_LOW_MULTIPART: 't6',
		WA_NIS: 't7', 
			// out of stock
		WA_ORDER: 't8',
			//	only by order
		WA_NFS: 't9', 
			// not for sale
		WA_ONLINE: 't10',
			// online purchase, shopping cart button enabled
		WA_NIS_NODATE: 't11',
			// out of stock, delivery date missing
		WA_ERR: 'error'
			// stock check unavailable error
	};
	
	/**
	 * Strips the unwanted leading characters from the given product id. Will remove
	 * ';', ';s', and ';S' from the product id.
	 *
	 * @param productId the product id to format
	 * @returns the formatted product id
	 */
	module.formatProductId = function(productId) {
		if (productId.startsWith('s')) {
			productId = productId.substr(1);
		} else if (productId.startsWith('S')) {
			productId = productId.substr(1);
		} else if (productId.startsWith(';s')) {
			productId = productId.substr(2);
		} else if (productId.startsWith(';S')) {
			productId = productId.substr(2);
		} else if (productId.startsWith(';')) {
			productId = productId.substr(1);
		}
		return productId;
	};
	
	/**
	 * Stock Node class to store data related to product availability (i.e. it's in stock). 
	 * Is obtained by parsing the Webservice XML for the given partnumber 
	 * buNodeList stores the attributes for the given local store
	 * @class
	 */
	module.StockNode = Class.create({	
		/**
		 * Creates a {@link IRW.StockNode} class with given part number
		 * and node list
		 * @param partNumber The given part number
		 * @param buCode The BU code (i.e. store id).
		 * @param {Object} buNodeList The business unit node list
		 * @constructor
		 */
		initialize: function(partNumber, buCode, buNodeList) {   
			this.buNodeList = buNodeList;
			if (this.buNodeList !== undefined) {
				this.buNodeList.buCode = buCode;
				if (this.buNodeList.partsMustBeOrderedInStore === undefined) {
					this.buNodeList.partsMustBeOrderedInStore = '';
				}
			}
			// IE bug fix hack, multiproduct is not always set correctly
			if (partNumber.startsWith('S') || partNumber.startsWith(';S') ||
				partNumber.startsWith('s') || partNumber.startsWith(';s')) {
				this.buNodeList.isMultiProduct = true;
			}
			this.partNumber = module.formatProductId(partNumber);
		},
		hasError: function() {
			return this.buNodeList === undefined;
		},
		isInStore: function() {
			return this.buNodeList.partsMustBeOrderedInStore === '' 
					&& this.buNodeList.isSoldInStore 
					&& this.buNodeList.availableStock > 0;		
		},
		hasHighStock: function() {
			return this.isInStore()
					&& this.buNodeList.inStockProbabilityCode === 'HIGH';
		},
		hasMediumStock: function() {
			return this.isInStore()
					&& this.buNodeList.inStockProbabilityCode === 'MEDIUM';
		},
		hasLowStock: function() {
			return this.isInStore()
					&& this.buNodeList.inStockProbabilityCode === 'LOW';
		},
		isByOrder: function() {
			if (this.buNodeList === undefined) {
				return false;
			}
			return this.buNodeList.partsMustBeOrderedInStore === 'SOME' 
				|| this.buNodeList.partsMustBeOrderedInStore === 'ALL';
		},
		isNotInStore: function() {
			if (this.buNodeList === undefined) {
				return false;
			}
			return this.buNodeList.availableStock === 0;
		},
		isNotForSale: function() {
			if (this.buNodeList === undefined) {
				return false;
			}
			return this.buNodeList.availableStock === -1 
				|| !this.buNodeList.isInStoreRange;
		},
		hasValidDate: function() {
			return this.buNodeList.validDate !== undefined ||
				this.buNodeList.validDate !== '';
		},
		isMultiPart: function() {
			return this.buNodeList.isMultiProduct !== undefined 
				&& this.buNodeList.isMultiProduct === true;
		},
		/**
		 * Creates a stock status object from given stock info node.
		 *
		 * @return The status string
		 */
		getStockStatus: function() {
			if(this.hasError()) {
				return module.WA_ERR;
			} else if(this.hasHighStock()) {
				if (this.isMultiPart()) {
					return module.WA_HIGH_MULTIPART;
				}
				return module.WA_HIGH;
			} else if (this.hasMediumStock()) {
				if (this.isMultiPart()) {
					return module.WA_MEDIUM_MULTIPART;
				}
				return module.WA_MEDIUM;
			} else if (this.hasLowStock()) {
				if (this.isMultiPart()) {
					return module.WA_LOW_MULTIPART;
				}
				return module.WA_LOW;
			} else if (this.isByOrder()) {
				return module.WA_ORDER;
			} else if (this.isNotInStore()) {
				if (this.hasValidDate()) {
					return module.WA_NIS;
				}
				return module.WA_NIS_NODATE;
			} else if (this.isNotForSale()) {
				return module.WA_NFS;
			} else {
				return module.WA_NIS;		
			}
		},
		/**
		 * Creates a stock status object with pageCode 
		 * as prefix. Will always return the stock status code
		 * even if no pageCode or separator is given.
		 *
		 * @example
		 * // stockNode has stock status t1
		 * var pageName = 'pip';
		 * var status = stockNode.formatStockStatus(pageName);
		 * // Status should be "pip>t1"
		 * @param {String} [pageCode] the page code to be used as prefix.
		 * @param {String} [separator] the separating character, default is "&gt;"
		 */
		getFormattedStockStatus: function(pageCode, separator) {
			var stockStatus = this.getStockStatus();
			return formatStatusCode(stockStatus, pageCode, separator);
		}
	});

	// Private fields
	var selectionLang = "XPath";
	var selectionNS = "xmlns:ir='http://www.ikea.com/v1.0' xmlns='http://www.ikea.com/v1.0'";
	var stockPath = "/ir:ikea-rest/availability/localStore[@buCode='{storeId}']/stock";

	// Formats the status appropriately, private method
	var formatStatusCode = function(statusCode, pageCode, separator) {
		if (statusCode === undefined) {
			return '';
		}
		if (separator === undefined) {
			separator = '>';
		}
		if (pageCode === undefined) {
			return statusCode;
		}
		return pageCode + separator + statusCode;	
	};

	
	// Get formatted node location with given storeid, private method
	var formatStockPath = function(storeId) {
		return stockPath.replace("{storeId}", storeId);
	};
	
	// Converts IE nodes to object literal, private recursive method
	var convertIENodeToOL = function(nodes) {
		var out = {};
		$A(nodes).each(function(node) {
			if (node === null) {
				return;
			}
			if (node.childNodes.length > 1) {
				var arrNode = [];
				$A(node.childNodes).each(function(childNode) {
					var arrNodeObj = convertIENodeToOL(childNode.childNodes);
					arrNode[arrNode.length] = arrNodeObj;
				});
				out[node.nodeName] = arrNode;
			} else {
				out[node.nodeName] = node.firstChild.nodeValue;
			}
		});
		return out;
	};
	
	// IE implementation, private method
	var getStockInfoWithIE = function(doc, storeId) {
		var s = {};
		doc.setProperty( "SelectionLanguage", selectionLang );
		doc.setProperty( "SelectionNamespaces", selectionNS );

		var nodes = $A(doc.selectNodes(formatStockPath(storeId)));
		
		nodes.each(function(node) {
			s = convertIENodeToOL(node.childNodes);
		});
		return s;
	};
		
	// Formats an XPath node textual content to an appropriate value
	var formatXPathNode = function(node) {
		var s = node.textContent;
		if( s.length > 0) {
			if (s === 'true') {
				return true; 
					// return 'true' as boolean value, if there is any
			}
			return s; 
				// otherwise return the string value
		} else {
			return null;
		}
	};
	
	// Converts XPath nodes to object literal, private recursive method
	var convertXPathNodeToOL = function (nodes) {
		var out = {};
		$H(nodes).each(function (pair) {
			var node = pair.value;
			if (node.textContent === undefined) { 
				return; 
			}
			// NOTE: "find it" and "forecast" objects are easily accesible 
			// in an array
			if (node.childNodes.length > 1) {
				var arrNode = [];
				$A(node.childNodes).each(function(childNode) {
					var arrNodeObj = convertXPathNodeToOL(childNode.childNodes);
					arrNode[arrNode.length] = arrNodeObj;
				});
				out[node.tagName] = arrNode;
			} else {
				out[node.tagName] = formatXPathNode(node);
			}
			
		});
		return out;
	};
	
	// Get stock info using XPath (other browsers than IE), private method
	var getStockInfoWithXPath = function(doc, storeId) {
		var s = {};
		var iterator = doc.evaluate(
				formatStockPath(storeId), 
				doc, 
				IRW.nsResolver, 
				XPathResult.ORDERED_NODE_ITERATOR_TYPE, 
				null);
		
		var node = iterator.iterateNext();
		while (node) {
			s = convertXPathNodeToOL(node.childNodes);
			node = iterator.iterateNext();
		}
		return s;
	};
	
	/**
	 * Formats the stock information from the xml response object retrieved from 
	 * IKEA REST service.
	 *
	 * @param doc The xml response object
	 * @param {String} storeId The store id (business unit)
	 * @param partNumber The part or article number
	 * @return {IRW.StockNode} A stock info object, is null if the doc did not conform to XPath
	 */
	module.formatStockInfo = function(doc, storeId, partNumber) {
		var buNodeList;
		if ( window.ActiveXObject ) {
			// IE specific implementation
			buNodeList = getStockInfoWithIE(doc, storeId);
		} else if ( doc.implementation && doc.implementation.createDocument ) {
			// XPath specific implementation (i.e. other browsers)
			buNodeList = getStockInfoWithXPath(doc, storeId);
		} else {
			return null;
		}
		return new module.StockNode(partNumber, storeId, buNodeList);
	};
	
	/**
	 * <p>Ajax call that fetches the stock info from the given REST url. The stock info 
	 * is available on the event when it is loaded.<p>
	 *
	 * <p><b>Events:</b>
	 * <dl>
	 * <dt>onSuccess(response)</dt>
	 * <dd>Called during the event that the ajax call has succeeded.</dd>
	 * <dt>onFailure(response)</dt>
	 * <dd>Called during the event that the ajax call has failed.</dd>
	 * <dt>onLoad(stockInfo)</dt>
	 * <dd>Called during the event that the stock info has loaded.</dd>
	 * </dl>
	 * </p>
	 * @example
	 * IRW.stockcheck.fetchStockInfo(url, storeId, {
	 *     onLoad: function(stockInfo) {
	 *         // do something with the retrieved stockInfo
	 *     },
	 *     onFailure: function(response) {
	 *         // do something on ajax call failure
	 *         console.error(response);
	 *     }
	 * });
	 * @param {String} url The REST url for stock info
	 * @param {String} storeId The store id (business unit)
	 * @param {Object} events The events to be called
	 */
	module.fetchStockInfo = function(url, storeId, events) {
		return new Ajax.Request(url, {
				method: 'get',
				contentType: 'application/xml',
				onSuccess: function(response) {
					if (events.onSuccess) {
						events.onSuccess(response);
					}
					var doc = response.responseXML;
					var stockInfo = module.formatStockInfo(doc, storeId);
					if (events.onLoad) {
						events.onLoad(stockInfo);
					}
				},
				onFailure: function(response) {
					if (events.onFailure) {
						events.onFailure(response);
					}
				}				
		});	
	};
	
	/**
	 * Creates and formats an error status code.
	 * 
	 * @param {String} [pageCode] the page code to be used as prefix.
	 * @param {String} [separator] the separating character, default is "&gt;"
	 */
	module.formatErrorStatus = function(pageCode, separator) {
		return formatStatusCode(module.WA_ERR, pageCode, separator);
	};
		
	return module;
}());
/**
 * <p>StockStats helper class. Will wait for given products to have their 
 * stock checks done before sending the tracking information to Omniture.</p>
 * <p>External dependency: irwstat.js and s_code.js.</p>
 *
 * @see IRW.stockcheck.ShoppingListStockStats (subclass for shopping list)
 */
IRW.stockcheck.StockStats = Class.create({

	/**
	 * @constructor
	 * @param pageCode page name code, used for stock info format
	 * @param {Number} productAmount the amount of products to wait for
	 */
	initialize: function(pageCode, productAmount) {
		this.pageCode = pageCode;
		this.productAmount = Number(productAmount);
		this.vars = {};
		this.statuses = [];
		this.events = [];
		this.savedVars = {};
	},

	/**
	 * Adds stock info for a product which will be formatted to Omniture.
	 * @param {IRW.stockcheck.StockNode} stockNode the stock node
	 */
	addStockInfo: function(stockNode) {
		var status = stockNode.getFormattedStockStatus(this.pageCode);
		this.statuses[this.statuses.length] = {
			productId: IRW.stockcheck.formatProductId(stockNode.partNumber),
			status: status
		};
	},
	
	/**
	 * Adds stock error for the given product
	 * @param productId the product id for the affected product
	 */
	addStockError: function(productId) {
		var status = IRW.stockcheck.formatErrorStatus(this.pageCode);
		this.statuses[this.statuses.length] = {
			productId: IRW.stockcheck.formatProductId(productId),
			status: status
		};
	},
	
	/**
	 * Add event to events.
	 * @param evtName the event name
	 */
	addEvent: function(evtName) {
		this.events[this.events.length] = evtName;
	},
	
	/**
	 * Add 'custom' vars on s.
	 *
	 * @example
	 * stats.addVar('eVar28', '+1');
	 *   // Will set s.eVar28 and add it to s.linkTrackVars
	 * @param {String} varName the variable name
	 * @param val the variable value to set
	 */
	addVar: function(varName, val) {
		this.vars[varName] = val;
	},
	
	/**
	 * Hook method for setting up various omniture variables in subclasses.
	 */
	omnitureHook: function() {
	},
	
	/**
	 * Helper method that removes the meta element (that may disturb the 
	 * omniture script).
	 * @param metaName the name of the meta element
	 */
	removeMetaElement: function(metaName) {
		var metaElements = $$('meta[name=' + metaName + ']');
		if (metaElements.length > 0) {
			metaElements[0].remove();
		}
	},
	
	/**
	 * Stages the set variables (statuses and events) for omniture.
	 */
	setUpOmnitureVars: function() {
		var joinedEvents = this.events.join(',');
		s.events = joinedEvents;

		// set up s.products
		var prodStr = [];
		this.statuses.each(function(st) {
			prodStr[prodStr.length] = ';'+st.productId+';;;;eVar33='+st.status;
		});
		s.products = prodStr.join(',');
		
		var trackVars = [];
		$H(this.vars).each(function(pair) {
			trackVars[trackVars.length] = pair.key;
			s[pair.key] = pair.value;
		});
		trackVars[trackVars.length] = 'products';
		trackVars[trackVars.length] = 'eVar33';
		
		if (!s.linkTrackVars) {
			s.linkTrackVars = "";
		}
		if (s.linkTrackVars.length > 0) {
			s.linkTrackVars += ',';
		}
		s.linkTrackVars += trackVars.join(',');
       s.linkTrackEvents = joinedEvents;
	},
	
	/**
	 * Hook used to send information to Omniture, used by commit function. Can 
	 * be reimplemented in a subclass if a page needs to do it differently than 
	 * default.
	 *
	 * Default calls irwstatSend();
	 */
	sendToOmniture: function() {
		irwstatSend();
	},
	
	/**
	 * Attempts to send the omniture statistics. Will not do anything until all
	 * product statuses are supplied. Should be called each time after a product 
	 * is added.
	 */
	commit: function() {
		if (this.productAmount !== this.statuses.length) {
			return;
		}
		this.omnitureHook();

		this.saveVars();
		
		this.setUpOmnitureVars();
		
		this.sendToOmniture();
		
		this.revertVars();
	},
	
	/**
	 * Saves affected Omniture vars for later revert. Used initially in the commit
	 * method to save the vars so they can be restored for other stats scripts that
	 * may execute in the same page.
	 */
	saveVars: function() {
		$H(this.vars).each(function(pair) {
			if(s[pair.key]) {
				this.savedVars[pair.key] = s[pair.key];
			}
		});
		this.savedVars.products = s.products;
		this.savedVars.events = s.events;
		this.savedVars.linkTrackVars = s.linkTrackVars;
		this.savedVars.linkTrackEvents = s.linkTrackEvents;
	},
	
	/**
	 * Reverts the Omniture vars from before the commit. Used at the end of the
	 * commit method after sendToOmniture method has been called.
	 */
	revertVars: function() {
		$H(this.vars).each(function(pair) {
			s[pair.key] = this.savedVars[pair.key];
		}.bind(this));
		s.products = this.savedVars.products;
		s.events = this.savedVars.events;
		s.linkTrackVars = this.savedVars.linkTrackVars;
		s.linkTrackEvents = this.savedVars.linkTrackEvents;
	}
	
});

/**
 * StockStats class with specific implementation for the shopping list page.
 * @class
 */
IRW.stockcheck.ShoppingListStockStats = Class.create(IRW.stockcheck.StockStats, {

	/**
	 * @constructor
	 * @param {Number} productAmount the amount of products to wait for
	 * @param buCode the selected store
	 * @param [isManual] true if the stock check has performed manual user interaction, false by default
	 * @param [buCodeHasChanged] true if the store selection has changed, false by default
	 */
	initialize: function($super, productAmount, buCode, isManual, buCodeHasChanged) {
		$super('sl', productAmount);
		this.buCode = buCode;
		if (isManual === undefined) {
			isManual = false;
		}
		this.isManual = isManual;
		if (!this.isManual) {
			// if automatic, s.eVar15 should not be set
			// this is because the user has not switched BU 
			// when the page loads
			this.buCodeHasChanged = false;
		} else if (buCodeHasChanged !== undefined) {
			this.buCodeHasChanged = buCodeHasChanged;
		}
	},
	
	/**
	 * Adding omniture variables for shoppinglist through the omniture hook
	 */
	omnitureHook: function() {
		// Remove the IRWStats.products meta tag as it will automatically
		// be added in Omniture scripts.
		this.removeMetaElement('IRWStats.products');

		if (this.pageCode === 'sc') {
			this.addEvent('event27');
		} else {
			this.addEvent('event6');
			this.addEvent('event25');
		}
		if (this.isManual) {
			// event for manual click
			this.addEvent('event26');
		}
		
		this.addVar('eVar10', this.buCode);
		this.addVar('prop10', this.buCode);
		if (this.buCodeHasChanged) {
			this.addVar('eVar15', '+1');
		}
		this.addVar('eVar28', '+1');
	}

});

/**
 * Stock check stats for the Stock Check Page (SC)
 * @class
 */
IRW.stockcheck.ScStockStats = Class.create(IRW.stockcheck.ShoppingListStockStats, {

	/**
	 * @constructor
	 * @param buCode the selected store
	 * @param [isManual] true if the stock check has performed manual user interaction, false by default
	 * @param [buCodeHasChanged] true if the store selection has changed, false by default
	 */
	initialize: function($super, buCode, isManual, buCodeHasChanged) {
		$super(1, buCode, isManual, buCodeHasChanged);
		this.pageCode = 'sc';
		
		// This meta tag adds the events (but in the wrong configuration)
		this.removeMetaElement('IRWStats.scInUse');
	}
	
});

/**
 * Stock check stats for the Product Information Page (PIP)
 * @class
 */
IRW.stockcheck.PipStockStats = Class.create(IRW.stockcheck.ShoppingListStockStats, {

	/**
	 * @constructor
	 * @param buCode the selected store
	 * @param [isManual] true if the stock check has performed manual user interaction, false by default
	 * @param [buCodeHasChanged] true if the store selection has changed, false by default
	 */
	initialize: function($super, buCode, isManual, buCodeHasChanged) {
		$super(1, buCode, isManual, buCodeHasChanged);
		this.pageCode = 'pip';
		
		
	}

});/**
 * Initialize ikeaMiniPip class 
 * JSLint Predefined: document, $, IkeaMiniPip, Class, $$, js_fn_SLIDE_SHOW_ENABLED, jsonPartNumbers, PresentationLayer, Pintip, updateCheckbox
 * getCookie, escape
 */
var enableElement;

document.observe('dom:loaded', function () {
	enableElement = false;
	if ($('productsTable') !== null) {
		var miniPipOnCategory = new IkeaMiniPip();
	}
});
/**
 * ikeaMiniPip - Initialize the pintip with products to observe mouse over events of the user
 */
var IkeaMiniPip = Class.create({
    initialize: function (valChk) {		
		this.bindMiniPip(valChk);
		this.bindClickOnCompare();
    },
	/**
    * bindMiniPip - Initialize the pintip, insert data to popup and positioning the poup
    */
    bindMiniPip: function (valChk) {
        var miniPipPopDimension, elementHeight, popStr, id, prodId, increaseHeight, prodIndex;
        increaseHeight = 10;
		prodIndex = 0;
        $$("#productsTable .productContainer").each(function (link) {	
			var slideshowEnabled, moreOptionEnabled, temp;
			slideshowEnabled = typeof (js_fn_SLIDE_SHOW_ENABLED) !== "undefined" ? js_fn_SLIDE_SHOW_ENABLED : false;            
			if (typeof (jsonPartNumbers) !== "undefined" && jsonPartNumbers !== null && jsonPartNumbers.length !== 0) {
                moreOptionEnabled = typeof (jsonPartNumbers[prodIndex]) !== "undefined" ? true : false; 
            }
            temp = link.id.split('_');            
            prodId = temp[1];
			// inserting moreoption navigation buttons
			if (!valChk) {
				if (moreOptionEnabled) {
					if (jsonPartNumbers[prodIndex].length > 1) {
						$(link).insert(PresentationLayer.showMoreOption(prodId));
					}	
				}
				if (slideshowEnabled) {
					$(link).insert("<a href=\"javascript:slideshow.open( '" + prodId + "' );\" class=\"zoom\" title=\"Slideshow\">&nbsp;</a>");
				}		
			}			
			link.observe('mouseenter', function (evt) {
				miniPipPopDimension = $(link).getDimensions();
				elementHeight = miniPipPopDimension.height + increaseHeight;	
				if ($('main').down('.serpLeftMenu') !== undefined) {
					popStr = "<div id=\"popupContent\"><div class=\"productContainer productContainerCategory productSearch\">";
				} else {
					popStr = "<div id=\"popupContent\"><div class=\"productContainer productContainerCategory productMoreoption\">";
				}
				if (!moreOptionEnabled) {
					popStr = popStr +  $(link).innerHTML;
				}
				popStr = popStr + "</div></div>";
				// pintip for the more options enabled page
				if (moreOptionEnabled) {
					PresentationLayer.initialProdId = link.id;					
					new Pintip(link, {content: popStr, id: 'miniPip', categoryPage: 'true', moreOption: 'ture', maxWidth: '140', pinY: 'bottom', align: 'bottom', offsetY: -elementHeight});
				} else {
					new Pintip(link, {content: popStr, id: 'miniPip', categoryPage: 'true', maxWidth: '140', pinY: 'bottom', align: 'bottom', offsetY: -elementHeight});
				}
			});
			prodIndex++;			
        });
    },	
	/**
    * bindMiniPip - bindclick events on the compare checkbox in the product listing layer
    */
    bindClickOnCompare : function () {
	    var cookieLength, productsId, cookieLengthAfter, cookieArr, prodPos;
		$$("#productsTable .compare").each(function (link) {
			var displayCompareChk, prodId, compareCont;
            displayCompareChk = link.down('input');	  
			if (displayCompareChk.checked === true) {
				displayCompareChk.checked = true;			
			} else {
				displayCompareChk.checked = false;
				link.style.display = 'none';			
			}
			link.observe("click", function () {
                prodId = displayCompareChk.id.split("_");
                if ($(displayCompareChk.id).checked) {
				    link.style.display = 'block';
                } else {
				    link.style.display = 'none';
                }
                updateCheckbox(prodId[2], false);
            }.bind(this));
        });		
		cookieArr = this.getCookieArray();
		if (cookieArr !== undefined) {
			cookieLength = cookieArr.length;
			productsId = js_fn_SLIDE_SHOW_IDS;
			for ( i = 0; i < cookieLength; i++) {
				prodPos = productsId.indexOf(cookieArr[i]);
				if (prodPos < 0) {
					removeProductToCompare(cookieArr[i]);
				}
			}
		}
		cookieArr = this.getCookieArray();
		if (cookieArr !== undefined) {
			cookieLengthAfter = cookieArr.length;
			if (cookieLengthAfter < 2) {
				if ($('jsButton_SortFilterBar_01') !== null ) {
					if ( $('jsButton_SortFilterBar_01').hasClassName() !== "disabledButton") {
						$('jsButton_SortFilterBar_01').addClassName('disabledButton');
						$('jsButton_SortFilterBar_01').href = "JavaScript:void(0);";
						$('jsButton_SortFilterBar_01_1').addClassName('disabledButton');
						$('jsButton_SortFilterBar_01_1').href = "JavaScript:void(0);";					
					}
				}	
			}
		}
    },
	/**
    * getCookieArray - function to read the cookie 
    */
	getCookieArray : function () {
		var cookieName, cookieValueSeparator, currentValue, cokkieArr;
		cookieName = "irw_compare";
		cookieValueSeparator = "**";
		currentValue = getCookie(cookieName);
		if (currentValue !== null) {
			cokkieArr = currentValue.split('**'); 	
		}		
		return cokkieArr;
	}
}); 
/**
* Add event listeners to the productsContainer and each td
*/
function addProductEvts(pageName) {
	var miniPipOnCategory;
	enableElement = false;	
	if (!pageName) {
		miniPipOnCategory = new IkeaMiniPip('fromClose'); 
	} else {
		miniPipOnCategory = new IkeaMiniPip(); 
	}
}//  Tooltip script which pops up a layer with content when an object is hovered and also follows the mouse
//  The script is using objects and methods in the prototype and scriptacolous library, so these need to be included before this script.
//  Creator: Jake (jbnn) && Sigge (sfid)
//  Date: 090107 - 090204
var tooltip;
var globalProdId;
/**
* Object for common IKEA JS popup and tooltip handling
*/
function IkeaPopup(){
    var cssClass = 'tt';
    var top = 5;    // tooltip offset top
    var left = 1;   // tooltip offset left
    var tt,h;
    var ie = document.all ? true : false;
    var contentHolderId;
    var globalEvent;
    return{
     /**
     * Creates a JS popup layer to be populated with content
     * 
     * @param _width  The width in pixels for the popup
     * @param _height  The height in pixels for the popup
     * @param _id      The ID that will be given to the div that holds the content of the popup
     * @param _ownerObj   The prototype DOM element that the popup will align to
         * @param _offsetX    The x position of the popup related to the _ownerObj
         * @param _offsetY     The y position of the popup related to the _ownerObj
     * @return    Nothing
     */
        createGenericPopup:function(_width,_height,_id,_class,_ownerObj,_offsetX,_offsetY,setOuterLayout){
            var col1, col2, ttCont;         
            if(tt == null){
                contentHolderId = _id;
                if(setOuterLayout == null) {                    
                    tt = new Element('div', {'id': _id, 'class': _class + ' shadow-one' });
                    conA = new Element('div', {'class': 'corner-a'});
                    tt.insert(conA);
                    conB = new Element('div', {'class': 'corner-b'});
                    tt.insert(conB);
                
                    shadow2 = new Element('div', {'class': 'shadow-two'});
                    tt.insert(shadow2);
                    shadow3 = new Element('div', {'class': 'shadow-three'});
                    shadow2.insert(shadow3);
                    shadow4 = new Element('div', {'class': 'shadow-four'});
                    shadow3.insert(shadow4); 
                }else{
                    tt = new Element('div', {'id': _id, 'class': _class +' outerPopupContainer' });
                    topShadow = new Element('div', {'class': 'divPopupTop'});
                    tt.insert(topShadow);
                      midShadow = new Element('div', {'class': 'divPopupMid'});
                    tt.insert(midShadow);
                    botShadow = new Element('div', {'class': 'divPopupBottom'});
                    tt.insert(botShadow);
                }
                document.body.insert(tt);
            }
            tt.setOpacity(0);
            tt.show();
            tt.style.height = _height ? _height + 'px' : 'auto';            
            tt.style.width = _width ? _width + 'px' : 'auto';
            tt.style.border='none';
            if(setOuterLayout == null) {
                pos = _ownerObj.cumulativeOffset();            
                tt.style.top = pos.top + _offsetY + 'px';
                tt.style.left = pos.left + _offsetX + 'px';
            }else{
                var arr = $(_ownerObj).positionedOffset();
                var dimensions = $('thumpPopup').getDimensions(); 
                tt.style.top = arr[1] - dimensions.height + 'px';
                tt.style.left = arr[0] -55 + 'px';
            }
            
            if(!ie){
                new Effect.Opacity(tt,{
                    from: 0.0,
                    to: 1.0,
                    duration: 0.4
                });
            }else{
                tt.setOpacity(1);
            }
        },
        createGenericPopupCenter:function(_width,_height,_id,_class,_ownerObj,_offsetX,_offsetY,setOuterLayout){
            var col1, col2, ttCont;         
            if(tt == null){
                contentHolderId = _id;
                if(setOuterLayout == null) {                    
                    tt = new Element('div', {'id': _id, 'class': _class + ' shadow-one' });
                    conA = new Element('div', {'class': 'corner-a'});
                    tt.insert(conA);
                    conB = new Element('div', {'class': 'corner-b'});
                    tt.insert(conB);
                
                    shadow2 = new Element('div', {'class': 'shadow-two'});
                    tt.insert(shadow2);
                    shadow3 = new Element('div', {'class': 'shadow-three'});
                    shadow2.insert(shadow3);
                    shadow4 = new Element('div', {'class': 'shadow-four'});
                    shadow3.insert(shadow4); 
                }else{
                    tt = new Element('div', {'id': _id, 'class': _class +' outerPopupContainer' });
                    topShadow = new Element('div', {'class': 'divPopupTop'});
                    tt.insert(topShadow);
                      midShadow = new Element('div', {'class': 'divPopupMid'});
                    tt.insert(midShadow);
                    botShadow = new Element('div', {'class': 'divPopupBottom'});
                    tt.insert(botShadow);
                }
                document.body.insert(tt);
            }
            tt.setOpacity(0);
            tt.show();
            tt.style.height = _height ? _height + 'px' : 'auto';            
            tt.style.width = _width ? _width + 'px' : 'auto';
            tt.style.border='none';
            if(setOuterLayout == null) {
                pos = _ownerObj.cumulativeOffset();            
                tt.style.top = '350px';
                tt.style.left = '500px';
            }else{
                var arr = $(_ownerObj).positionedOffset();
                var dimensions = $('thumpPopup').getDimensions(); 
                tt.style.top = arr[1] - dimensions.height + 'px';
                tt.style.left = arr[0] -55 + 'px';
            }
            
            if(!ie){
                new Effect.Opacity(tt,{
                    from: 0.0,
                    to: 1.0,
                    duration: 0.4
                });
            }else{
                tt.setOpacity(1);
            }
        },
setDynamicHeight:function(_ownerObj,popupId){
    var dimensions = $(popupId).getDimensions();
    var arr = $(_ownerObj).positionedOffset(); 
    var popHeight = dimensions.height -10;
    $(popupId).style.top = arr[1] - popHeight + 'px';
},
createGenericPopupNew:function(_width,_height,_id,_class,_ownerObj,_offsetX,_offsetY){
            var col1, col2, ttCont;
            
            if(tt == null){
                contentHolderId = _id;
                tt = new Element('div', {'id': _id, 'class': _class + ' shadow-one' });
                conA = new Element('div', {'class': 'corner-a'});
                tt.insert(conA);
                conB = new Element('div', {'class': 'corner-b'});
                tt.insert(conB);
                
                shadow2 = new Element('div', {'class': 'shadow-two'});
                tt.insert(shadow2);
                shadow3 = new Element('div', {'class': 'shadow-three'});
                shadow2.insert(shadow3);
                shadow4 = new Element('div', {'class': 'shadow-four'});
                shadow3.insert(shadow4);                
                document.body.insert(tt);
            }
        _ownerObj.observe('mousemove', this.pos);
            tt.setOpacity(0);
            tt.show();
             h = parseInt(tt.offsetHeight) + top;
            tt.style.height = _height ? _height + 'px' : 'auto';            
            tt.style.width = _width ? _width + 'px' : 'auto';
            tt.style.border='none';
            pos = _ownerObj.cumulativeOffset();
                
            
             if(!ie && Prototype.Browser.WebKit){
                new Effect.Opacity(tt,{
                    from: 0.0,
                    to: 1.0,
                    duration: 0.4
                });
            }else{
                tt.setOpacity(1);
            }
        },
     /**
     * Creates a JS tooltip that follows the mousepointer
     * 
     * @param width  The width in pixels for the tooltip
     * @param height  The height in pixels for the tooltip
     * @param objId  The prototype DOM element that the tooltip will align to
     * @param ttId  The ID that will be given to the div that holds the content of the tooltip
     * @return   Nothing
     */
        createToolTip:function(content,width,height,objId,ttId){
            var img, imgAttr, col1, col2, ttCont, prodInfoCont;
            if(tt == null){
                tt = new Element('div', {'id': ttId, 'class': cssClass});
                col1 = new Element('div', {'class': 'offset color1'});
                tt.insert(col1);
                col2 = new Element('div', {'class': 'offset color2'});
                col1.insert(col2);
                ttCont = new Element('div', {'class': 'offset ttContainer'});
                col2.insert(ttCont);
                img = new Element('img', {'id': 'bigViewImg' ,'class': 'bigView'});
                ttCont.insert(img);
                imgAttr = new Element('div', {'id': 'bigImgAttributes'});
                ttCont.insert(imgAttr);
                document.body.insert(tt);
            }
            objId.observe('mousemove', this.pos);
            tt.setOpacity(0);
            // Update content in tooltip
            $('bigViewImg').replace('<img src="' + content +'" id="bigViewImg" class="bigView" />');
            try {
                prodInfoCont = objId.up('.colProduct').down('.prodInfoContainer').adjacent('.prodInfo');
                $('bigImgAttributes').update();
                prodInfoCont.each(function(element){
                    $('bigImgAttributes').insert(element.cloneNode(true));
                });
            }
            catch(e){
                $('bigImgAttributes').setStyle({ margin: '0', padding: '0' });
            };
            tt.show();
            tt.style.width = width ? width + 'px' : 'auto';
            if(!width && ie){
                tt.style.width = tt.offsetWidth;
            }
            h = parseInt(tt.offsetHeight) + top;
            new Effect.Opacity(tt,{
                from: 0.0,
                to: 1.0,
                duration: 0.4
            });
            if(!ie) setTimeout("tooltip.refreshPos();",10);
        },
        /**
        * Aligns the popup to a given Prototype DOM element
        *
        * @param objId  The Prototype DOM element that the popup will align with
        * @return   Nothing
        */
        alignToObject:function(objId){
            var pos, left, top;
            // Get the position of the specified obj
            pos = objId.cumulativeOffset();
            left = pos.left;
            top = pos.top;
            // Set position
            layerHeight = tt.getHeight();
            top = top - layerHeight - 5;
            left = left - 32;
            // Move the layer 
            tt.style.top = top + 'px';
            tt.style.left = left + 'px';
            tt.show();
        },
        /**
        * Helper function to createToolTip
        *
        * @param e   Event object
        * @return   Nothing
        */
        pos:function(e){
            var u = ie ? window.event.clientY + document.documentElement.scrollTop : e.pageY;      // Get y-position of mouse
            var l = ie ? window.event.clientX + document.documentElement.scrollLeft : e.pageX;     // Get x-position of mouse
            var winW = document.viewport.getWidth();    // Get the window width
            var w = tt.getWidth();           // Get the width of the tip
            
                
            
            if((l + w) > winW){
                tt.style.left = (l - w) + 'px';
            }
            else{
                tt.style.left = (l + left) + 'px';
            }
        if($(this).tagName =="A")
            {
             var prodIdTop = $(this).viewportOffset().top;
                if (navigator.platform.toLowerCase().indexOf('mac') != -1) 
                 {
                        if(Prototype.Browser.Gecko)
                        {
                            tt.style.top = (u +12) + 'px';
                            tt.style.left=(l-6) + 'px';
                        } else if(Prototype.Browser.WebKit)
                        {
                            tt.style.top = (u +10) + 'px';
                            tt.style.left=(l-7) + 'px';
                        }
                 }         
                else {
                    if(Prototype.Browser.IE)
                        {
                        tt.style.top = (u +15) + 'px';
                        tt.style.left=(l-8)+'px';
                        }
                    else {
                        tt.style.top = (u +17) + 'px';
                        tt.style.left=(l-5)+'px';
                        }
                    }
             }
            else{
            var prodIdTop = $(globalProdId).viewportOffset().top;
            if((prodIdTop) < (h -50)){
                // Move layer below mouse
                tt.style.top = (u + 25) + 'px';
            }
            else{
                // Position layer above mouse
                
                tt.style.top = (u - h) + 'px';
            }
            }
           
            //$('trace').update('this: ' + this.id + '<br/> top:' + u + '<br/> left:' + l + '<br/> prodIdTop:' + prodIdTop);
        },
        refreshPos:function() {
            tooltip.pos(tooltip.globalEvent);
        },
        /**
        * Updates the content in the popup
        *
        * @param layoutString A string with a valid HTML snippet
        * @return    Nothing
        */
        setGenericContent:function(layoutString, targetClass) {
            
            if(targetClass == null){
                tt.down('.shadow-four').update(layoutString);
            }else{
                tt.down(targetClass).update(layoutString);
            }
        },
        /**
        * Returns a prototype object that holds the content of the popup
        * @return  A prototype object that holds the content of the popup
        */
        getContent:function() {
           return tt;
        },
        /**
        * Generates a layout with a spinning circle. Handy when loading ajax.
        */
        generateLoadingLayout:function(){
           var retString = "<div class=\"content\" style=\"text-align:center;\"><div class=\"headline\" style=\"text-align:left;\">Loading ...</div><img src=\"/ms/img/loading_transparent.gif\" /></div>";
           return retString;
        },
        generateLoadingLayoutSaving:function(){
                   var retString = "<div class=\"content\" style=\"text-align:center;\"><div class=\"headline\" style=\"text-align:left;\">Saving ...</div><img src=\"/ms/img/loading.gif\" /></div>";
                   return retString;
        },
        /**
        * Makes the popup show the layout that informs the user that a remote call is loading.
        * Requires that a method called generateLoadingLayout that returns valid HTML layout is defined.
        * @return     false to stop link exection
        */
        loadingPopup:function() {
           this.setGenericContent(this.generateLoadingLayout());
           var picDiv = tt.down('.ttContainer');
           // picDiv.style.position = "relative";
           // picDiv.style.left = ((parseInt(tt.getWidth()) / 2) - 16)+"px";
           // picDiv.style.top = ((parseInt(tt.getHeight()) / 2) - 16)+"px";
           return false;
        },
        loadingSaving:function() {
                   this.setGenericContent(this.generateLoadingLayoutSaving());
                   var picDiv = tt.down('.ttContainer');
                   // picDiv.style.position = "relative";
                   // picDiv.style.left = ((parseInt(tt.getWidth()) / 2) - 16)+"px";
                   // picDiv.style.top = ((parseInt(tt.getHeight()) / 2) - 16)+"px";
                   return false;
        },
        /**
        * Hides the popup
        *
        * @return   Nothing
        */
        hide:function(){
            if(tt){
                tt.hide();
            }
        }
    };
};

// Pixel fix to open all popups in correct offset
function setProductOffset(obj){
    var objOffset = new Object();
    var offL = -5;
    var offT = -10;
    if($('compare') != null) {
        offL = -4;
        offT = -9;
    }
    var elem = obj.parentNode.childNodes.length;
    var prevCols = obj.previousSiblings().length;
    var myPos = prevCols + 1;
    
    if (navigator.platform.toLowerCase().indexOf('mac') != -1) {
        if(Prototype.Browser.Gecko){
            if(myPos == 5){offL = -4;}
        }
        else if(Prototype.Browser.WebKit){
            offL = -4;
            offT = -9;
            if(myPos == 1){offL = -5;}
        }
    }
    else{
        if(Prototype.Browser.IE){            
            if($('compare') == null) {
                offL = -4;
                offT = -10;
                if(myPos == 1){offL = -5;}
            } else {
                offL = -4;
                offT = -9;
                if(elem==3){
                    if(myPos == 1){offL = -4;}
                    else if(myPos % 2 == 0){offL = -2;}
                    else if(myPos % 2 != 0){offL = -3;}
                }
            }
        }
        else if(Prototype.Browser.Gecko){
            if($('compare') == null) {
                if(myPos == 5){offL = -4;}
            } else {
                if(myPos % 2 == 0){offL = -3;}
            }
        }
        else if(Prototype.Browser.WebKit){
            offL = -4;
            offT = -9;
            if(myPos == 1){offL = -5;}
        }
    }
    objOffset.left = offL;
    objOffset.top = offT;
    return objOffset;
}
/**
 Tooltip Class 
**/
var Tooltip = Class.create({
    initialize: function (el, options) {
        this.el = $(el);
        this.initialized = false;
        this.setOptions(options);
        this.instances.push(this);  // Collect all Tooltip instances
        this.template = new Template('<div id="#{id}" class="#{css} shadow-one" style="display:none;"><div class="corner-a"></div><div class="corner-b"></div><div class="shadow-two"><div class="shadow-three"><div class="shadow-four">#{content}</div></div></div></div>');
        // Event handlers
        this.showEvent = this.show.bindAsEventListener(this);
        this.hideEvent = this.hide.bindAsEventListener(this);
        this.updateEvent = this.update.bindAsEventListener(this);

        // Determine event behaviour
        if (this.options.mouseClick) {
            this.options.mouseFollow = false;
            this.el.observe("click", function (e) {
                if (!this.initialized) {
                    // Hide all open Tooltips
                    this.instances.each(function (obj) {
                        obj.hideEvent();
                    });
                    this.show(e);
                } else {
                    this.hide(e);
                }
                Event.stop(e);
            }.bind(this));
        } else {
            this.setEvents();
        }
        
        // Removing title from DOM element to avoid showing it
        this.el.title = "";
        
        // If descendant elements has 'alt' attribute defined, clear it
        this.el.descendants().each(function (el) {
            if (el.readAttribute('alt')) {
                //el.alt = "";
            }
        });
    },
    instances: [],  // Used to collect all Tooltip instances
    setEvents: function () {
        if (!this.options.flashHtml) {
            this.el.observe("mouseenter", this.showEvent);
            this.el.observe("mouseleave", this.hideEvent);
        } else {
            this.el.observe("mouseover", this.showEvent);    
            this.el.observe("mouseout", this.hideEvent);
        }
    },
    setOptions: function (options) {
        this.options = {
            content: 'this is the default content <br/> replace this with your own',
            id: 'tt',               // Default id
            css: 'tt',              // Default css class
            maxWidth: 140,            // Default tooltip width
            align: "left",          // Default align to mouse
            delay: 0.05,            // Default delay before tooltip appears in sec
            mouseFollow: true,      // Default mousefollow behaviour
            mouseClick: false,      // Default mouseclick behaviour
            opacity: 1.0,           // Default tooltip opacity
            appearDuration: 0.5,    // Default appear duration in sec
            hideDuration: 0,        // Default disappear duration in sec
            offsetX: 0,             // Default offset x position
            offsetY: 0              // Default offset y position
        };
        Object.extend(this.options, options || {});
        this.options.delay = (this.options.delay * 1000);
    },
    show: function (e) {
        if (this.options.zoomOnPip === 'true' ) {
            var zoomUrl = ikeaZoomOnPip.getUrlZoom();
            if (zoomUrl !== null) {
                if (this.stay) {
                    this._clearTimeout(this.timeout);
                    this.stay = false;
                    return;
                }
                if (!this.options.categoryPage) {
                    this.xCord = Event.pointerX(e);
                    this.yCord = Event.pointerY(e);
                }
                if (!this.initialized) {
                    this.timeout = window.setTimeout(this.createLayout.bind(this), this.options.delay);
                }            
            }
        } else {
            if (this.stay) {
                this._clearTimeout(this.timeout);
                this.stay = false;
                return;
            }
            if (!this.options.categoryPage) {
                this.xCord = Event.pointerX(e);
                this.yCord = Event.pointerY(e);
            }
            if (!this.initialized) {
                this.timeout = window.setTimeout(this.createLayout.bind(this), this.options.delay);
            }
        }
    },
    hide: function (e) {
        if (this.pinned) {
            this._clearTimeout(this.timeout);
            return;
        }
        if (this.initialized) {
            if (Prototype.Browser.IE) {
                this.tooltip.hide();
            } else {
                this.appearingFX.cancel();
            }
            
            if (this.options.mouseFollow) {
                this.el.stopObserving("mousemove", this.updateEvent);
            }
            this.fadingFX = new Effect.Fade(this.tooltip, {duration: this.options.hideDuration, afterFinish: function () { try { this.tooltip.remove(); } catch (e) {} }.bind(this) });
        }

        this._clearTimeout(this.timeout);
        this.stay = false;
        this.initialized = false;
    },
    update: function (e) {
        this.xCord = Event.pointerX(e);
        this.yCord = Event.pointerY(e);
        this.align();
    },
    createLayout: function () {
        // Force remove tooltip if hide() not finished
        try {$(this.options.id).remove(); } catch (e) {}
        try {this.fadingFX.cancel(); } catch (e) {}

        // Building tooltip container
        this.content = this.template.evaluate(this.options);
        $(document.body).insert({top: this.content});
        this.tooltip = $(this.options.id);
        
        // Obsolete?
        // Might be needed for outside reference...
        this.tooltip.ref = this;
        
        Element.extend(this.tooltip); // IE needs element to be manually extended
        this.options.width = this.tooltip.getWidth();
        this.tooltip.setStyle({width: this.options.width + 'px'}); // IE7 needs width to be defined
        
        this.align();
        if (this.options.mouseFollow) {
            this.el.observe("mousemove", this.updateEvent);
        }
        this.initialized = true;
        if (Prototype.Browser.IE) {
            this.tooltip.show();
        } else {
            this.appearingFX = new Effect.Appear(this.tooltip, {
                duration: this.options.appearDuration, 
                to: this.options.opacity
            });
        }
    },
    align: function () {
        // If content width is more then allowed max width, set width to max
        if (this.options.width > this.options.maxWidth) {
            this.options.width = this.options.maxWidth;
            this.tooltip.setStyle({width: this.options.width + 'px'});
        }
        
        // Set defaults
        this.xCord = this.xCord;
        this.yCord = this.yCord + 20;
        
        if (this.options.align === 'right') {
            this.xCord = this.xCord - this.options.width - 20;
        }
        
        // Right align if it does not fit inside viewport
        if ((this.xCord + this.options.width) >= document.viewport.getWidth()) {
            this.xCord = this.xCord - this.options.width - 20;
        }   
        var OffsetsTop = document.viewport.getScrollOffsets();
        if ((this.yCord + this.options.height) >= (document.viewport.getHeight()+OffsetsTop.top)) {
            this.yCord = this.yCord - this.options.height - 20;
        }

        if ( !this.options.zoomOnPip ) {
            this.tooltip.setStyle({
                left: this.xCord + this.options.offsetX + "px",
                top: this.yCord  + this.options.offsetY + "px"
            });
        } else {
            this.tooltip.setStyle({
                left: (this.xCord - 15) + this.options.offsetX + "px",
                top: (this.yCord - 25) + this.options.offsetY + "px"
            });
        }
    },
    _clearTimeout: function (timer) {
        clearTimeout(timer);
        clearInterval(timer);
        return null;
    }
});

/** 
    PINTIP 
    This is a subclass of Tooltip      
    It creates a Pintip which is aligned to the element which it is attached to
**/
var Pintip = Class.create(Tooltip, {
    setOptions: function ($super, options) {
        $super(options);
        this.options.css = 'slPopup';
        this.options.mouseFollow = false;
        this.options.pin = true;
        this.options.pinX = 'center';
        this.options.pinY = 'top';
        this.options.pinDelay = 200;
        
        Object.extend(this.options, options || {});
    },
    setEvents: function () {
        if (!this.options.categoryPage) {
            this.el.observe("mouseenter", this.showEvent);
            this.el.observe("mouseleave", function(){
                this.pinned = false;
                this.timeout = window.setTimeout(this.hideEvent.bind(this), this.options.pinDelay);
            }.bind(this));
        } else {
            this.showEvent();
            this.el.observe("mouseleave", function(){
                this.pinned = false;
                this.timeout = window.setTimeout(this.hideEvent.bind(this), this.options.pinDelay);
            }.bind(this));
        }
        this.el.observe("mouseenter", function(){
        if(this.stay)
            this.pinned = true
        }.bind(this));
    },
    align: function () {
        // If content width is more then allowed max width, set width to max
    
        if (this.options.width > this.options.maxWidth) {
            this.options.width = this.options.maxWidth;
            
            this.tooltip.setStyle({width: this.options.width + 'px'});
        } else {
            this.tooltip.setStyle({width: this.options.maxWidth + 'px'});
        }
        
        // Align the tooltip to the element
        this.tooltip.width = this.tooltip.getWidth();
        this.tooltip.height = this.tooltip.getHeight();
        this.el.width = this.el.getWidth();
        // This is explicity for product listing section in PIP
        if (this.options.pinY === 'bottomPL') {
            if (Prototype.Browser.IE) {
                this.el.height = this.el.up().getHeight();
            } else {
                this.el.height = this.el.down().getHeight();
            }
        } else {
            this.el.height = this.el.getHeight();
        }
            
        // Set defaults
        this.tooltip.pinX = (this.el.cumulativeOffset().left - (this.tooltip.width / 2) + (this.el.width / 2));
        this.tooltip.pinY = (this.el.cumulativeOffset().top - this.tooltip.height);
        
        if (this.options.pinX === 'left') {this.tooltip.pinX = this.el.cumulativeOffset().left; }
        if (this.options.pinX === 'right') {this.tooltip.pinX = (this.el.cumulativeOffset().left + this.el.width - this.tooltip.width); }
        if (this.options.pinY === 'bottom') {this.tooltip.pinY = this.el.cumulativeOffset().top + this.el.height; }
        // This is explicity for product listing section in PIP
        if (this.options.pinY === 'bottomPL') {
            if (Prototype.Browser.IE) {
                this.tooltip.pinY = this.el.up().cumulativeOffset().top + this.el.height;
            } else {
                this.tooltip.pinY = this.el.down().cumulativeOffset().top + this.el.height;
            }
        }

        this.tooltip.setStyle({
            left: this.tooltip.pinX + this.options.offsetX + "px",
            top: this.tooltip.pinY + this.options.offsetY + "px"
        });
    },
    createLayout: function ($super) {
        $super();
        if (!this.options.mouseClick) {
            this.pin();
        }

        if (this.options.moreOption) {
            var prodInfo = PresentationLayer.contentForMiniPip(PresentationLayer.initialProdId);        
            if (this.options.landingPage) {
                $(this.tooltip).down('.product').insert(prodInfo);
            } else {
                $(this.tooltip).down('.productContainer').insert(prodInfo);
            }
        }
    
    },
    pin: function () {
        this.tooltip.stopObserving();
    
        this.tooltip.observe("mouseenter", function () {
            this.pinned = true;
            this._clearTimeout(this.timeout);
            // Callback to IRW Share Framework
            if (this.options.moreOption) {
                PresentationLayer.bindClickOnMoreOption();
            }
            if (this.options.shareLink) {                
                com.ikea.irw.share.Util.callBack();
            }
            if (this.options.categoryPage && !this.options.landingPage) {
                this.checkCompare();
            }
        }.bind(this));        
        this.tooltip.observe("mouseleave", function () {
        if (this.options.landingPage) {
           com.ikea.irw.shoppinglist.SaveToList.clearTimer();
            }
            // This "if condition" is explicity for product listing section in PIP
            if (enableElement === false) {
                this.pinned = false;
                this.stay = true;
                this.timeout = window.setTimeout(this.hideEvent.bind(this), this.options.pinDelay);
            }
            // This block explicity for product listing section in PIP
            if (enableElement === true) {
                this.instances.each(function (obj) {
                    obj.el.stopObserving();
                });
            }
        }.bind(this));        
    },
    checkCompare: function(){    
       FeaturesOnPopup.init(this.options.id);
    }
});

/**
   POPUP
   This is a base class for showing something on top. 
   This is meant to be an abstract class, please inherit from it and implement. 
   
   At instantiation it will run
   * setOptions() - Sets the parameters/custom/configuration information.
   * createLayout() - Set the layout of the popup.
   * setEvents() - Binds events to functions.
   
   When the popup is made visible this is executed
   * show() - Function which the showEvent event is bound to.
   * align() - Sets position and optional the size of the popup.
   * showPopup() - Shows the popup.
   
   When the popup is made unvisible this is executed
   * hide() - Function which the hideEvent event is bound to.
   * hidePopup() - Removes the popup.
   
   In the extended class you must at least do:
   * Set the layout in this.template in function createLayout. The #{id} parameter must be used on the element that should be shown.
   * The align function must be implemented. The position and optional the size should be set.
   * To show the popup, add "this.show();" in the initialized function or bind this.showEvent in the setEvents function.
   * To hide the popup, bind this.hideEvent in the setEvents function.
   
   JSLint Predefined: Class, document, $, window, Prototype, clearTimeout, Effect, clearInterval, js_lightbox_close_button_alt_text, Template, Element, Event, $$, js_lightbox_error_text, Ajax, irwStatDynamicLitebox,irwStatPageFunctionality
**/
var Popup = Class.create({
    initialize: function (options) {
        this.setOptions(options);
        this.createLayout();
        this.setEvents();
    },
    setOptions: function (options) {
        this.options = {
            content: 'this is the default content <br/> replace this with your own',
            id: 'popup',            // Default id
            addWithinId: 'body',    // Default adds popup to body
            delay: 0,               // Default delay before popup appears (seconds)
            opacity: 1,             // Default popup opacity
            appearDuration: 0,      // Default duration before popup is faded in (seconds)
            hideDuration: 0         // Default duration before popup is faded out (seconds)
        };
        Object.extend(this.options, options || {}); // Adds options to existing options
        this.options.delay = (this.options.delay * 1000); // Convert to milliseconds
    },
    createLayout: function () {
        this.content = this.template.evaluate(this.options);
        if (this.options.addWithinId === 'body') {
            $(document.body).insert({top: this.content});
        } else {
            $(this.options.addWithinId).insert({top: this.content});
        }
    },
    setEvents: function () {
        this.showEvent = this.show.bindAsEventListener(this);
        this.hideEvent = this.hide.bindAsEventListener(this);
        this.updateEvent = this.update.bindAsEventListener(this);
    },
    show: function (e) { // Sets position/size and shows popup
        this.align();

        this._clearTimeout(this.timeout);
        this.timeout = window.setTimeout(this.showPopup.bind(this), this.options.delay); // Shows popup with delay
    },
    update: function (e) { // Called from eventhandler, but is otherwise the same as align
        this.align();
    },
    align: function () { // Set position and size
    },
    showPopup: function () {
        try { // Force remove popup if hide() not finished
            this.fadingFX.cancel(); 
        } catch (e) {}

        if (Prototype.Browser.IE) {
            this.appearingFX = new Effect.Appear(this.options.id, { 
                duration: 0, 
                from: 0,
                to: this.options.opacity
            });
        } else {
            this.appearingFX = new Effect.Appear(this.options.id, { 
                duration: this.options.appearDuration, 
                from: 0,
                to: this.options.opacity
            });
        }
    },
    hide: function (e) {
        this.hidePopup();
    },
    hidePopup: function () {
        // Fades out popup before deleting it
        this.fadingFX = new Effect.Fade(this.options.id, {
            duration: this.options.hideDuration, 
            from: this.options.opacity,
            to: 0,
            afterFinish: function () { try { this.options.id.remove(); } catch (e) {} }.bind(this)
        });
    },
    _clearTimeout: function (timer) {
        clearTimeout(timer);
        clearInterval(timer);
        return null;
    }
});

/**
   LITEBOX
**/
var Litebox = Class.create(Popup, {
    initialize: function ($super, options) {
        $super(options);
        this.show();
        if ($('localPriceLink') === null) {
            irwStatPageFunctionality('function>lightbox', 'content lightbox');
        }
    },
    setOptions: function ($super, options) {
        $super(options);
        this.options.appearDuration = 0.7;
        this.options.hideDuration = 0.7;
        if (typeof (js_lightbox_close_button_alt_text) !== 'undefined') {
            this.options.closeButtonDescription = js_lightbox_close_button_alt_text;
        } else {
            this.options.closeButtonDescription = 'Close'; //Default close button description text
        }
    },
    createLayout: function ($super) {
        if (this.options.fullScreen) {
            // Litebox using fullscreen
            var scrollDiv = "";
            if (this.options.newScroll) {
                scrollDiv = '<div id="track" class="scrollBackground" ><div id="handle" class="scrollHandle" ></div></div>';
            }
            this.template = new Template('<div id="#{id}" class="lbContainerTopFullScrn" style="display:block; opacity:0;">' +  
                '    <div class="lbBorderFullScrn">' +                                                  
                '       <div id="lbContainer" class="lbContentContainerFullScrn">' +                     
                '           #{content}' +
                '       </div>' + 
                '   </div>' + scrollDiv +
                '</div>');
        } else {
            this.template = new Template('<div id="#{id}" class="lbContainerTop" style="display:block; opacity:0;">' +  
                '    <div class="lbBorder">' +                                                  
                '       <div id="lbContainer" class="lbContentContainer">' +        
                '           #{content}' +
                '       </div>' +
                '   </div>' +
                '</div>');
        }

        $super();

        // Create background container
        if ($('liteboxOutsideBg') === null) {
            if (!this.options.fullScreen) {        
                this._overlay = new Element('div', {'id': 'liteboxOutsideBg', 'class': ''});
            } else {
                this._overlay = new Element('div', {'id': 'liteboxOutsideBg', 'class': 'liteboxOutsideBgFullScrn'});
            }
            var h = $(document.body).getHeight();
            this._overlay.setStyle({height: (h) + 'px'});
            $(document.body).insert(this._overlay);
        }

        // Close Button
        this._closeBtn = new Element('a', {'id': 'lbCloseBtn', 'href': '#', 'title': this.options.closeButtonDescription});         
        if (!this.options.fullScreen) {    
            // Litebox using fullscreen        
            $(this.options.id).insert(this._closeBtn);
        } else {
            $(this.options.id).down().insert(this._closeBtn);
        }
    },
    setEvents: function ($super) {
        $super();

        var self = this;
        this._closeBtn.observe('click', function (evt) {
            self.hideEvent();
            Event.stop(evt);
        });
        if (!this.options.fullScreen) {
            // Litebox using fullscreen
            this._overlay.observe('click', this.hideEvent);
        }
        Event.observe(document.onresize ? document : window, "resize", this.updateEvent);
    },
    align: function ($super) { // Set position and size
        $super();
        if (this.options.position) {
            this._positionWindowCenter(this.options.id);
        } else {
            this._positionWindow(this.options.id);            
        }
    },
    showPopup: function ($super) {
        $super();
        $("liteboxOutsideBg").style.visibility = "visible";        
    },
    hidePopup: function ($super) {
        $super();
        try { 
            if (this.options.fullScreen) {
                // Litebox using fullscreen
                $$('div.lbContainerTopFullScrn')[0].remove();
                $('liteboxOutsideBg').remove(); 
            } else {
                $$('div.lbContainerTop')[0].remove();
                $('liteboxOutsideBg').remove(); 
            }
        } catch (e) {}
    },

    _positionWindow : function positionWindow(element) {
        if ($(element) !== null) {
            this._px = document.viewport.getScrollOffsets().top; // em doesn't seem to be correct
            if (this._px <= '114') {
                $(element).style.top = '114px'; // Header size 114 px
            } else {
                $(element).style.top = this._px + 'px';
            } 
            $(element).style.left = Math.round(document.viewport.getScrollOffsets().left + ((document.viewport.getWidth() - $(element).getWidth())) / 2) + 'px';
            if (this.options.fullScreen) {
                // Litebox using fullscreen
                $(element).style.height =  '100%';
                $(element).style.top = '0px';
            }             
        }
    },
    _positionWindowCenter : function positionWindowCenter(element) {
        var screenHeight, lftPos, topPos;
        screenHeight = document.viewport.getHeight();
        lftPos = Math.round(document.viewport.getScrollOffsets().left + ((document.viewport.getWidth() - $(element).getWidth())) / 2);
        topPos = Math.round(document.viewport.getScrollOffsets().top + ((document.viewport.getHeight() - $(element).getHeight())) / 2);            
        $(element).style.left =  lftPos + 'px';    
        $(element).style.top =  topPos + 'px';        
    }
});

/**
   LiteboxFile - Shows a textfile with html content in a litebox
                 Dynamic Template uses this
**/
var LiteboxFile = Class.create(Litebox, {
    setOptions: function ($super, options) {
        $super(options);
        //this.options.LbFile = '';                  // Path to the Litebox text file with html content. No default value exist.
        this.options.addWithinId = 'liteboxHook';
        this.options.content = '<div id="liteboxLoading"></div>';
        if (typeof (js_lightbox_error_text) !== 'undefined') {
            this.options.errorText = js_lightbox_error_text;
        } else {
            this.options.errorText = "Oops, we couldn't find the content of this lightbox."; //Default close button description text
        }
    },
    createLayout: function ($super) {
        $super();
        var self, myTemp;
        self = this;
        
        myTemp = new Ajax.Request(this.options.LbFile, {
            method: 'get',
            asynchronous: false,
            onSuccess: function (transport) {
                $('lbContainer').update(transport.responseText);
                
                // Remove scrollbar if applicable
                var contentDiv, contentHeight, scrollDiv, allowedHeight, mainDiv;
                contentDiv = $("liteboxLeftRightMargin");
                contentHeight = contentDiv.getHeight();
                scrollDiv = $("liteboxScrollbar");
                allowedHeight = scrollDiv.getHeight();
                if (contentHeight <= allowedHeight && contentHeight !== 0 && allowedHeight !== 0) {
                    scrollDiv.parentNode.removeChild(scrollDiv);
                    mainDiv = $("liteboxTopBottomMargin");
                    mainDiv.appendChild(contentDiv);
                }
                
                self._positionWindow(self.options.id);
                
            },
            onFailure: function () { 
                $('lbContainer').update('<div id="liteboxError"><p>' + self.options.errorText + '</p></div>');
            }
        });
    },
    showPopup: function ($super) {
        $$('div.lbContainerTop')[0].setStyle({
            display: 'none',
            visibility: 'visible'
        });
        $super();
        irwStatDynamicLitebox(); // Send to WA
    }
});

/**
   LiteboxFlash - Shows a swf file   
**/
var LiteboxFlash = Class.create(Litebox, {
    createLayout: function ($super) {        
        $super();
        this.options.swfObj.addVariable("flash_swfstate", this.options.firstSelect);
        writeFlash(this.options.swfObj,'noFlashText');
    },
    align: function ($super) {
        $('lbCloseBtn').addClassName('flashCloseButton');
        $('lbCloseBtn').insert(new Element('div', {'id':'closeTxt','class':'flashCloseText'}).update(closeText)); 
        $super();
        this._positionWindow(this.options.id);
         $$('div.lbContainerTop')[0].setStyle({
            display: 'none',
            visibility: 'visible'
        });
    },
    _positionWindow : function positionWindow(element) {
        var screenHeight = document.viewport.getHeight();
            var lftPos = Math.round(document.viewport.getScrollOffsets().left + ((document.viewport.getWidth() - $(element).getWidth()))/2);
            var topPos = Math.round(document.viewport.getScrollOffsets().top + ((document.viewport.getHeight() - $(element).getHeight()))/2);            
            $(element).style.left =  lftPos +'px';    
        if(screenHeight > 584){
            $(element).style.top =  topPos +'px';
        }else{            
            $(element).style.top =  10 +'px';
        }
    }    
});

/**
 * featuresOnPopup - has been used to handle Compare, addToCart and SaveToList features
 * JSLint Predefined: Class, $, Event, updateCheckbox, enableElement, getCookie, cbCount, jsonPartNumbers, PresentationLayer
 **/
var FeaturesOnPopup = (function () {    
    var  extentMiniPip = {};
    extentMiniPip.init = function (checkBoxId) {        
        if ($('productsTable') !== null) {
            var obj, compareBox, compareCont, popupContent, id;
            obj = $(checkBoxId);
            id = obj.down('.productPadding a').readAttribute('href').split('/').last();
            // Find compare container and show it
            popupContent = $('popupContent');
            extentMiniPip.bindClickEventsSlideShow(obj);
            if (typeof popupContent !== 'undefined') {
                compareCont = popupContent.down('div.compare');
                if (typeof compareCont !== 'undefined') {
                    compareCont.style.display = 'block';
                    // Find chk in container
                    compareBox = compareCont.down('input');
                    //trying cookie
                    extentMiniPip.numberOfProductsSelected(compareBox);
                    extentMiniPip.selectCheckBox(compareBox);
                    //Add click observer to the checkbox in popup that will copy values to the original objects in the product listing
                    Event.observe(compareBox, 'click', function (e) {
                        var element = Event.element(e), chkValue = element.checked, compareBox, compareCont, cbDisplay, moreOptionEnabled, initialProd;                        
                        compareBox = obj.down('div.cartContainer .compare').down('input');
                        moreOptionEnabled = typeof (jsonPartNumbers) !== "undefined" && jsonPartNumbers.length !== 0 ? true : false;    
                        if (moreOptionEnabled) {
                            initialProd =  PresentationLayer.initialProdId.split("_")[1];
                            compareCont = $('parent_compare_' + initialProd);
                        } else {
                            compareBox = obj.down('div.cartContainer .compare').down('input');
                            compareCont = $('display_' + compareBox.id).up('div.compare');                            
                        }    
                        compareBox.checked = chkValue;
                        cbDisplay = compareCont.down('input');
                        cbDisplay.checked = chkValue;
                        cbDisplay.stopObserving('click');
                        if (moreOptionEnabled) {
                            compareCont = compareCont.down('.compare');
                        } 
                        cbDisplay.observe('click', function (e) {
                            compareBox.checked = this.checked;
                            if (!compareBox.checked) {
                                compareCont.hide();
                            }
                            //Set cookie in compare.js
                            updateCheckbox(compareBox, false);
                        });
                        if (!compareBox.checked) {
                            compareCont.hide();
                        } else {
                            compareCont.style.display = 'block';
                        }
                        updateCheckbox(compareBox, false);
                    });
                    extentMiniPip.bindClickEventsAddToCart(obj, id);
                    extentMiniPip.bindClickEventsSaveToList(obj, id);                    
                }
            }
        }
    },
    /**
    * numberOfProductsSelected - has been used to disable and enable check box on the basis of the cbCount  
    **/
    extentMiniPip.numberOfProductsSelected = function (compareBox) {
        if (cbCount >= 4) {
            compareBox.disabled = true;
        } else {
            compareBox.disabled = false;
        }
    },
    /**
    * selectCheckBox -  used to tick the check box if product already selected by user
    **/
    extentMiniPip.selectCheckBox = function (compareBox) {
        var cookieValues, products, length, chkbox, k, objId;
        cookieValues = getCookie("irw_compare");
        if (cookieValues !== null && cookieValues !== "") {
            products = cookieValues.split("**");
            length = products.length;
            for (k = 0; k < length; k++) {
                chkbox = $('compare_' + products[k]);
                if (chkbox !== null) {
                    objId = chkbox.id;
                    if (objId === compareBox.id) {
                        compareBox.checked = 'checked';
                        compareBox.disabled = false;
                        break;
                    }
                }
            }
        }
    },
    /**
    * bindClickEventsAddToCart -  bind click events on addTocart button to disable minipip
    **/
    extentMiniPip.bindClickEventsAddToCart = function (obj, id) {
        if ($('popupAddToCart'+id) !== null) {
            var objButton = obj.down('div.cartContainer .buttonContainer').down('a');    
            Event.observe(objButton, 'click', function (e) {        
                enableElement = true;                
                $$("#productsTable .productContainer").each(function (link) {
                    Event.stopObserving(link, 'mouseenter');

                });
            });
        }
    },
    /**
    * bindClickEventsAddToCart -  bind click events on saveToList Link to disable minipip
    **/
    extentMiniPip.bindClickEventsSaveToList = function (obj, id) {
        if ($('popupShoppingList'+id) !== null) {
            var objLink = obj.down('.listLink');
            Event.observe(objLink, 'click', function (e) {
                enableElement = true;
                $$("#productsTable .productContainer").each(function (link) {
                    Event.stopObserving(link, 'mouseenter');
                });
            });
        }
    },
    /**
    * bindClickEventsSlideShow -  bind click events on slide show Link to hide minipip
    **/
    extentMiniPip.bindClickEventsSlideShow = function (obj) {
        var layerTimeOut = 300;
        var objLink = obj.down('.zoom');
        Event.observe(objLink, 'click', function (e) {
            delayToHideLayer = setTimeout( 
                function() {
                    if ($('miniPip') !== null) {
                        $('miniPip').style.display = "none";
                    }
                },
                layerTimeOut
            );                
        });
    }
    return extentMiniPip;
}());

/*global $,$$,Tooltip,Event,document*/
document.observe('dom:loaded', function () {
	$$('.ulContainer .SERPcategoryList .listItem a').each(function (link) {
		var linkId = $(link.id), linkTextId = $(link.id + '-text'), linkDateId = $(link.id + '-date'), linkText, linkTextText, linkDateText,
			tT;
	
		if (!(linkId === null && linkTextId === null && linkDateId === null)) {
			linkText = linkId.innerText ? linkId.innerText : linkId.textContent;
			linkTextText = linkTextId.innerText ? linkTextId.innerText : linkTextId.textContent;
			linkDateText = linkDateId.innerText ? linkDateId.innerText : linkDateId.textContent;
			tT = new Tooltip(link, {
				content: '<span class="tooltip_title">' + linkText + '</span><p class="tooltip_text">' + linkTextText + '</p><span class="tooltip_date">' + linkDateText + '</span>',
				id: 'NewTooltip',
				css: 'newTooltip',
				maxWidth: 325,
				align: "left"
			});
		}
	});
});    function getHostnameAndPathname(){
        return document.location.hostname + document.location.pathname ;
    }
        
    function appendStringToElement(elementName, appendString){
        var str = $(elementName).insert(  appendString );
        return str;
    }
    
    function printUrl(){
        appendStringToElement('printFooterAdressModule',  getHostnameAndPathname()   );
    }
    
    function printSMNR(){
        var url = document.location.href.replace("#","").concat("?printView=true");
        window.open(url,'windowname','scrollbars=1,width=600,height=800') 
    }    /**
* document.observe() -> void
* - 
* 
* Calls a WA method for Adcontent Search Cloud with Unobtrusive Javascript
**/
document.observe('dom:loaded', function () {
	$$('a.adSearchCloudLinkInCloud').each(function (item) {
	    item.observe('click', function (ev) {
	        irwStatSearchCloud();
	    });
	});
});


/**
 * SWFAddress 2.4: Deep linking for Flash and Ajax <http://www.asual.com/swfaddress/>
 *
 * SWFAddress is (c) 2006-2009 Rostislav Hristov and contributors
 * This software is released under the MIT License <http://www.opensource.org/licenses/mit-license.php>
 *
 */
/**
 * SWFAddress 2.4: Deep linking for Flash and Ajax <http://www.asual.com/swfaddress/>
 *
 * SWFAddress is (c) 2006-2009 Rostislav Hristov and contributors
 * This software is released under the MIT License <http://www.opensource.org/licenses/mit-license.php>
 *
 */

if (typeof asual == "undefined") var asual = {};
if (typeof asual.util == "undefined") asual.util = {};

asual.util.Browser = new function() {
 
    var _agent = navigator.userAgent.toLowerCase(),
        _safari = /webkit/.test(_agent),
        _opera = /opera/.test(_agent),
        _msie = /msie/.test(_agent) && !/opera/.test(_agent),
        _mozilla = /mozilla/.test(_agent) && !/(compatible|webkit)/.test(_agent),
        _version = parseFloat(_msie ? _agent.substr(_agent.indexOf('msie') + 4) : 
            (_agent.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [0,'0'])[1]);

    this.toString = function() {
        return '[class Browser]';
    };

    this.getVersion = function() {
        return _version;
    };

    this.isMSIE = function() {
        return _msie;
    };

    this.isSafari = function() {
        return _safari;
    };

    this.isOpera = function() {
        return _opera;
    };

    this.isMozilla = function() {
        return _mozilla;
    };
}

asual.util.Events = new function() {

    var DOM_LOADED = 'DOMContentLoaded', 
        STOP = 'onstop',
        _w = window,
        _d = document,
        _cache = [],
        _util = asual.util,
        _browser = _util.Browser,
        _msie = _browser.isMSIE(),
        _safari = _browser.isSafari();

    this.toString = function() {
        return '[class Events]';
    };

    this.addListener = function(obj, type, listener) {
        _cache.push({o: obj, t: type, l: listener});
        if (!(type == DOM_LOADED && (_msie || _safari))) {
            if (obj.addEventListener)
                obj.addEventListener(type, listener, false);
            else if (obj.attachEvent)
                obj.attachEvent('on' + type, listener);
        }
    };

    this.removeListener = function(obj, type, listener) {
        for (var i = 0, e; e = _cache[i]; i++) {
            if (e.o == obj && e.t == type && e.l == listener) {
                _cache.splice(i, 1);
                break;
            }
        }
        if (!(type == DOM_LOADED && (_msie || _safari))) {
            if (obj.removeEventListener)
                obj.removeEventListener(type, listener, false);
            else if (obj.detachEvent)
                obj.detachEvent('on' + type, listener);
        }
    };

    var _unload = function() {
        for (var i = 0, evt; evt = _cache[i]; i++) {
            if (evt.t != DOM_LOADED)
                _util.Events.removeListener(evt.o, evt.t, evt.l);
        }
    };

    var _unloadFix = function() {
        if (_d.readyState == 'interactive') {
            function stop() {
                _d.detachEvent(STOP, stop);
                _unload();
            };
            _d.attachEvent(STOP, stop);
            _w.setTimeout(function() {
                _d.detachEvent(STOP, stop);
            }, 0);
        }
    };

    if (_msie || _safari) {
        (function (){
            try {
                if ((_msie && _d.body) || !/loaded|complete/.test(_d.readyState))
                    _d.documentElement.doScroll('left');
            } catch(e) {
                return setTimeout(arguments.callee, 0);
            }
            for (var i = 0, e; e = _cache[i]; i++)
                if (e.t == DOM_LOADED) e.l.call(null);
        })();
    }

    if (_msie)
        _w.attachEvent('onbeforeunload', _unloadFix);

    this.addListener(_w, 'unload', _unload);
}

asual.util.Functions = new function() {

    this.toString = function() {
        return '[class Functions]';
    };

    this.bind = function(method, object, param) {
        for (var i = 2, p, arr = []; p = arguments[i]; i++)
            arr.push(p);
        return function() {
            return method.apply(object, arr);
        }
    };
}

var SWFAddressEvent = function(type) {

    this.toString = function() {
        return '[object SWFAddressEvent]';
    };

    this.type = type;

    this.target = [SWFAddress][0];

    this.value = SWFAddress.getValue();

    this.path = SWFAddress.getPath();

    this.pathNames = SWFAddress.getPathNames();

    this.parameters = {};

    var _parameterNames = SWFAddress.getParameterNames();
    for (var i = 0, l = _parameterNames.length; i < l; i++)
        this.parameters[_parameterNames[i]] = SWFAddress.getParameter(_parameterNames[i]);

    this.parameterNames = _parameterNames;

}

SWFAddressEvent.INIT = 'init';

SWFAddressEvent.CHANGE = 'change';

SWFAddressEvent.INTERNAL_CHANGE = 'internalChange';

SWFAddressEvent.EXTERNAL_CHANGE = 'externalChange';

var SWFAddress = new function() {

    var _getHash = function() {
        var index = _l.href.indexOf('#');
        return index != -1 ? _ec(_dc(_l.href.substr(index + 1))) : '';
    };

    var _getWindow = function() {
        try {
            top.document;
            return top;
        } catch (e) {
            return window;
        }
    };

    var _strictCheck = function(value, force) {
        if (_opts.strict)
            value = force ? (value.substr(0, 1) != '/' ? '/' + value : value) : (value == '' ? '/' : value);
        return value;
    };

    var _ieLocal = function(value, direction) {
        return (_msie && _l.protocol == 'file:') ? 
            (direction ? _value.replace(/\?/, '%3F') : _value.replace(/%253F/, '?')) : value;
    };

    var _searchScript = function(el) {
        if (el.childNodes) {
            for (var i = 0, l = el.childNodes.length, s; i < l; i++) {
                if (el.childNodes[i].src)
                    _url = String(el.childNodes[i].src);
                if (s = _searchScript(el.childNodes[i]))
                    return s;
            }
        }
    };

    var _titleCheck = function() {
        if (_d.title != _title && _d.title.indexOf('#') != -1)
            _d.title = _title;
    };

    var _listen = function() {
        if (!_silent) {
            var hash = _getHash();
            var diff = !(_value == hash);
            if (_safari && _version < 523) {
                if (_length != _h.length) {
                    _length = _h.length;
                    if (typeof _stack[_length - 1] != UNDEFINED)
                        _value = _stack[_length - 1];
                    _update.call(this, false);
                }
            } else if (_msie && diff) {
                if (_version < 7)
                    _l.reload();
                else
                    this.setValue(hash);
            } else if (diff) {
                _value = hash;
                _update.call(this, false);
            }
            if (_msie)
                _titleCheck.call(this);
        }
    };

    var _bodyClick = function(e) {
        if (_popup.length > 0) {
            var popup = window.open(_popup[0], _popup[1], eval(_popup[2]));
            if (typeof _popup[3] != UNDEFINED)
                eval(_popup[3]);
        }
        _popup = [];
    };

    var _swfChange = function() {
        for (var i = 0, id, obj, value = SWFAddress.getValue(), setter = 'setSWFAddressValue'; id = _ids[i]; i++) {
            obj = document.getElementById(id);
            if (obj) {
                if (obj.parentNode && typeof obj.parentNode.so != UNDEFINED) {
                    obj.parentNode.so.call(setter, value);
                } else {
                    if (!(obj && typeof obj[setter] != UNDEFINED)) {
                        var objects = obj.getElementsByTagName('object');
                        var embeds = obj.getElementsByTagName('embed');
                        obj = ((objects[0] && typeof objects[0][setter] != UNDEFINED) ? 
                            objects[0] : ((embeds[0] && typeof embeds[0][setter] != UNDEFINED) ? 
                                embeds[0] : null));
                    }
                    if (obj)
                        obj[setter](value);
                } 
            } else if (obj = document[id]) {
                if (typeof obj[setter] != UNDEFINED)
                    obj[setter](value);
            }
        }
    };

    var _jsDispatch = function(type) {
        this.dispatchEvent(new SWFAddressEvent(type));
        type = type.substr(0, 1).toUpperCase() + type.substr(1);
        if(typeof this['on' + type] == FUNCTION)
            this['on' + type]();
    };

    var _jsInit = function() {
        if (_util.Browser.isSafari())
            _d.body.addEventListener('click', _bodyClick);
        _jsDispatch.call(this, 'init');
    };

    var _jsChange = function() {
        _swfChange();
        _jsDispatch.call(this, 'change');
    };

    var _update = function(internal) {
        _jsChange.call(this);
        if (internal) {
            _jsDispatch.call(this, 'internalChange');
        } else {
            _jsDispatch.call(this, 'externalChange');
        }
        _st(_functions.bind(_track, this), 10);
    };

    var _track = function() {
        var value = (_l.pathname + (/\/$/.test(_l.pathname) ? '' : '/') + this.getValue()).replace(/\/\//, '/').replace(/^\/$/, '');
        var fn = _t[_opts.tracker];
        if (typeof fn == FUNCTION)
            fn(value);
        else if (typeof _t.pageTracker != UNDEFINED && typeof _t.pageTracker._trackPageview == FUNCTION)
            _t.pageTracker._trackPageview(value);
        else if (typeof _t.urchinTracker == FUNCTION) 
            _t.urchinTracker(value);
    };

    var _htmlWrite = function() {
        var doc = _frame.contentWindow.document;
        doc.open();
        doc.write('<html><head><title>' + _d.title + '</title><script>var ' + ID + ' = "' + _getHash() + '";</script></head></html>');
        doc.close();
    };

    var _htmlLoad = function() {
        var win = _frame.contentWindow;
        var src = win.location.href;
        _value = (typeof win[ID] != UNDEFINED ? win[ID] : '');
        if (_value != _getHash()) {
            _update.call(SWFAddress, false);
            _l.hash = _ieLocal(_value, TRUE);
        }
    };

    var _load = function() {
        if (!_loaded) {
            _loaded = TRUE;
            if (_msie && _version < 8) {
                var frameset = _d.getElementsByTagName('frameset')[0];
                _frame = _d.createElement((frameset ? '' : 'i') + 'frame');
                if (frameset) {
                    frameset.insertAdjacentElement('beforeEnd', _frame);
                    frameset[frameset.cols ? 'cols' : 'rows'] += ',0';
                    _frame.src = 'javascript:false';
                    _frame.noResize = true;
                    _frame.frameBorder = _frame.frameSpacing = 0;
                } else {
                    _frame.src = 'javascript:false';
                    _frame.style.display = 'none';
                    _d.body.insertAdjacentElement('afterBegin', _frame);
                }
                _st(function() {
                    _events.addListener(_frame, 'load', _htmlLoad);            
                    if (typeof _frame.contentWindow[ID] == UNDEFINED) 
                        _htmlWrite();
                }, 50);
            } else if (_safari) {
                if (_version < 418) {
                    _d.body.innerHTML += '<form id="' + ID + '" style="position:absolute;top:-9999px;" method="get"></form>';
                    _form = _d.getElementById(ID);
                }
                if (typeof _l[ID] == UNDEFINED) _l[ID] = {};
                if (typeof _l[ID][_l.pathname] != UNDEFINED) _stack = _l[ID][_l.pathname].split(',');
            }

            _st(_functions.bind(function() {
                _jsInit.call(this);
                _jsChange.call(this);
                _track.call(this);
            }, this), 1);

            if (_msie && _version >= 8) {
                _d.body.onhashchange = _functions.bind(_listen, this);
                _si(_functions.bind(_titleCheck, this), 50);
            } else {
                _si(_functions.bind(_listen, this), 50);
            }
        }
    };

    var ID = 'swfaddress',
        FUNCTION = 'function',
        UNDEFINED = 'undefined',
        TRUE = true,
        FALSE = false,
        _util = asual.util,
        _browser = _util.Browser, 
        _events = _util.Events,
        _functions = _util.Functions,
        _version = _browser.getVersion(),
        _msie = _browser.isMSIE(),
        _mozilla = _browser.isMozilla(),
        _opera = _browser.isOpera(),
        _safari = _browser.isSafari(),
        _supported = FALSE,
        _t = _getWindow(),
        _d = _t.document,
        _h = _t.history, 
        _l = _t.location,
        _si = setInterval,
        _st = setTimeout, 
        _dc = decodeURI,
        _ec = encodeURI,
        _frame,
        _form,
        _url,
        _title = _d.title, 
        _length = _h.length, 
        _silent = FALSE,
        _loaded = FALSE,
        _justset = TRUE,
        _juststart = TRUE,
        _ref = this,
        _stack = [], 
        _ids = [],
        _popup = [],
        _listeners = {},
        _value = _getHash(),
        _opts = {history: TRUE, strict: TRUE};    

    if (_msie && _d.documentMode && _d.documentMode != _version)
        _version = _d.documentMode != 8 ? 7 : 8;

    _supported = 
        (_mozilla && _version >= 1) || 
        (_msie && _version >= 6) ||
        (_opera && _version >= 9.5) ||
        (_safari && _version >= 312);

    if (_supported) {

        if (_opera) 
            history.navigationMode = 'compatible';

        for (var i = 1; i < _length; i++)
            _stack.push('');

        _stack.push(_getHash());

        if (_msie && _l.hash != _getHash())
            _l.hash = '#' + _ieLocal(_getHash(), TRUE);

        _searchScript(document);
        var _qi = _url ? _url.indexOf('?') : -1;
        if (_qi != -1) {
            var param, params = _url.substr(_qi + 1).split('&');
            for (var i = 0, p; p = params[i]; i++) {
                param = p.split('=');
                if (/^(history|strict)$/.test(param[0])) {
                    _opts[param[0]] = (isNaN(param[1]) ? /^(true|yes)$/i.test(param[1]) : (parseInt(param[1]) != 0));
                }
                if (/^tracker$/.test(param[0]))
                    _opts[param[0]] = param[1];
            }
        }

        if (_msie)
            _titleCheck.call(this);

        if (window == _t)
            _events.addListener(document, 'DOMContentLoaded', _functions.bind(_load, this));
        _events.addListener(_t, 'load', _functions.bind(_load, this));

    } else if ((!_supported && _l.href.indexOf('#') != -1) || 
        (_safari && _version < 418 && _l.href.indexOf('#') != -1 && _l.search != '')){
        _d.open();
        _d.write('<html><head><meta http-equiv="refresh" content="0;url=' + 
            _l.href.substr(0, _l.href.indexOf('#')) + '" /></head></html>');
        _d.close();
    } else {
        _track();
    }

    this.toString = function() {
        return '[class SWFAddress]';
    };

    this.back = function() {
        _h.back();
    };

    this.forward = function() {
        _h.forward();
    };

    this.up = function() {
        var path = this.getPath();
        this.setValue(path.substr(0, path.lastIndexOf('/', path.length - 2) + (path.substr(path.length - 1) == '/' ? 1 : 0)));
    };

    this.go = function(delta) {
        _h.go(delta);
    };

    this.href = function(url, target) {
        target = typeof target != UNDEFINED ? target : '_self';     
        if (target == '_self')
            self.location.href = url; 
        else if (target == '_top')
            _l.href = url; 
        else if (target == '_blank')
            window.open(url); 
        else
            _t.frames[target].location.href = url; 
    };

    this.popup = function(url, name, options, handler) {
        try {
            var popup = window.open(url, name, eval(options));
            if (typeof handler != UNDEFINED)
                eval(handler);
        } catch (ex) {}
        _popup = arguments;
    };

    this.getIds = function() {
        return _ids;
    };

    this.getId = function(index) {
        return _ids[0];
    };

    this.setId = function(id) {
        _ids[0] = id;
    };

    this.addId = function(id) {
        this.removeId(id);
        _ids.push(id);
    };

    this.removeId = function(id) {
        for (var i = 0; i < _ids.length; i++) {
            if (id == _ids[i]) {
                _ids.splice(i, 1);
                break;
            }
        }
    };

    this.addEventListener = function(type, listener) {
        if (typeof _listeners[type] == UNDEFINED)
            _listeners[type] = [];
        _listeners[type].push(listener);
    };

    this.removeEventListener = function(type, listener) {
        if (typeof _listeners[type] != UNDEFINED) {
            for (var i = 0, l; l = _listeners[type][i]; i++)
                if (l == listener) break;
            _listeners[type].splice(i, 1);
        }
    };

    this.dispatchEvent = function(event) {
        if (this.hasEventListener(event.type)) {
            event.target = this;
            for (var i = 0, l; l = _listeners[event.type][i]; i++)
                l(event);
            return TRUE;           
        }
        return FALSE;
    };

    this.hasEventListener = function(type) {
        return (typeof _listeners[type] != UNDEFINED && _listeners[type].length > 0);
    };

    this.getBaseURL = function() {
        var url = _l.href;
        if (url.indexOf('#') != -1)
            url = url.substr(0, url.indexOf('#'));
        if (url.substr(url.length - 1) == '/')
            url = url.substr(0, url.length - 1);
        return url;
    };

    this.getStrict = function() {
        return _opts.strict;
    };

    this.setStrict = function(strict) {
        _opts.strict = strict;
    };

    this.getHistory = function() {
        return _opts.history;
    };

    this.setHistory = function(history) {
        _opts.history = history;
    };

    this.getTracker = function() {
        return _opts.tracker;
    };

    this.setTracker = function(tracker) {
        _opts.tracker = tracker;
    };

    this.getTitle = function() {
        return _d.title;
    };

    this.setTitle = function(title) {
        if (!_supported) return null;
        if (typeof title == UNDEFINED) return;
        if (title == 'null') title = '';
        title = _dc(title);
        _st(function() {
            _title = _d.title = title;
            if (_juststart && _frame && _frame.contentWindow && _frame.contentWindow.document) {
                _frame.contentWindow.document.title = title;
                _juststart = FALSE;
            }
            if (!_justset && _mozilla)
                _l.replace(_l.href.indexOf('#') != -1 ? _l.href : _l.href + '#');
            _justset = FALSE;
        }, 10);
    };

    this.getStatus = function() {
        return _t.status;
    };

    this.setStatus = function(status) {
        if (!_supported) return null;
        if (typeof status == UNDEFINED) return;
        if (status == 'null') status = '';
        status = _dc(status);
        if (!_safari) {
            status = _strictCheck((status != 'null') ? status : '', TRUE);
            if (status == '/') status = '';
            if (!(/http(s)?:\/\//.test(status))) {
                var index = _l.href.indexOf('#');
                status = (index == -1 ? _l.href : _l.href.substr(0, index)) + '#' + status;
            }
            _t.status = status;
        }
    };

    this.resetStatus = function() {
        _t.status = '';
    };

    this.getValue = function() {
        if (!_supported) return null;
        return _dc(_strictCheck(_ieLocal(_value, FALSE), FALSE));
    };

    this.setValue = function(value) {
        if (!_supported) return null;
        if (typeof value == UNDEFINED) return;
        if (value == 'null') value = '';
        value = _ec(_dc(_strictCheck(value, TRUE)));
        if (value == '/') value = '';
        if (_value == value) return;
        _justset = TRUE;
        _value = value;
        _silent = TRUE;
        _update.call(SWFAddress, true);
        _stack[_h.length] = _value;
        if (_safari) {
            if (_opts.history) {
                _l[ID][_l.pathname] = _stack.toString();
                _length = _h.length + 1;
                if (_version < 418) {
                    if (_l.search == '') {
                        _form.action = '#' + _value;
                        _form.submit();
                    }
                } else if (_version < 523 || _value == '') {
                    var evt = _d.createEvent('MouseEvents');
                    evt.initEvent('click', TRUE, TRUE);
                    var anchor = _d.createElement('a');
                    anchor.href = '#' + _value;
                    anchor.dispatchEvent(evt);                
                } else {
                    _l.hash = '#' + _value;
                }
            } else {
                _l.replace('#' + _value);
            }
        } else if (_value != _getHash()) {
            if (_opts.history)
                _l.hash = '#' + _dc(_ieLocal(_value, TRUE));
            else
                _l.replace('#' + _dc(_value));
        }
        if ((_msie && _version < 8) && _opts.history) {
            _st(_htmlWrite, 50);
        }
        if (_safari)
            _st(function(){ _silent = FALSE; }, 1);
        else
            _silent = FALSE;
    };

    this.getPath = function() {
        var value = this.getValue();
        if (value.indexOf('?') != -1) {
            return value.split('?')[0];
        } else if (value.indexOf('#') != -1) {
            return value.split('#')[0];
        } else {
            return value;   
        }        
    };

    this.getPathNames = function() {
        var path = this.getPath(), names = path.split('/');
        if (path.substr(0, 1) == '/' || path.length == 0)
            names.splice(0, 1);
        if (path.substr(path.length - 1, 1) == '/')
            names.splice(names.length - 1, 1);
        return names;
    };

    this.getQueryString = function() {
        var value = this.getValue(), index = value.indexOf('?');
        if (index != -1 && index < value.length) 
            return value.substr(index + 1);
    };

    this.getParameter = function(param) {
        var value = this.getValue();
        var index = value.indexOf('?');
        if (index != -1) {
            value = value.substr(index + 1);
            var p, params = value.split('&'), i = params.length, r = [];
            while(i--) {
                p = params[i].split('=');
                if (p[0] == param)
                    r.push(p[1]);
            }
            if (r.length != 0)
                return r.length != 1 ? r : r[0];
        }
    };

    this.getParameterNames = function() {
        var value = this.getValue();
        var index = value.indexOf('?');
        var names = [];
        if (index != -1) {
            value = value.substr(index + 1);
            if (value != '' && value.indexOf('=') != -1) {
                var params = value.split('&'), i = 0;
                while(i < params.length) {
                    names.push(params[i].split('=')[0]);
                    i++;
                }
            }
        }
        return names;
    };

    this.onInit = null;

    this.onChange = null;

    this.onInternalChange = null;

    this.onExternalChange = null;

    (function() {

        var _args;

        if (typeof FlashObject != UNDEFINED) SWFObject = FlashObject;
        if (typeof SWFObject != UNDEFINED && SWFObject.prototype && SWFObject.prototype.write) {
            var _s1 = SWFObject.prototype.write;
            SWFObject.prototype.write = function() {
                _args = arguments;
                if (this.getAttribute('version').major < 8) {
                    this.addVariable('$swfaddress', SWFAddress.getValue());
                    ((typeof _args[0] == 'string') ? 
                        document.getElementById(_args[0]) : _args[0]).so = this;
                }
                var success;
                if (success = _s1.apply(this, _args))
                    _ref.addId(this.getAttribute('id'));
                return success;
            }
        } 

        if (typeof swfobject != UNDEFINED) {
            var _s2r = swfobject.registerObject;
            swfobject.registerObject = function() {
                _args = arguments;
                _s2r.apply(this, _args);
                _ref.addId(_args[0]);
            }
            var _s2c = swfobject.createSWF;
            swfobject.createSWF = function() {
                _args = arguments;
                var swf = _s2c.apply(this, _args);
                if (swf)
                    _ref.addId(_args[0].id);
                return swf;
            }
            var _s2e = swfobject.embedSWF;
            swfobject.embedSWF = function() {
                _args = arguments;
                if (typeof _args[8] == UNDEFINED)
                    _args[8] = {};
                if (typeof _args[8].id == UNDEFINED)
                    _args[8].id = _args[1];
                _s2e.apply(this, _args);
                _ref.addId(_args[8].id);
            }
        }

        if (typeof UFO != UNDEFINED) {
            var _u = UFO.create;
            UFO.create = function() {
                _args = arguments;
                _u.apply(this, _args);
                _ref.addId(_args[0].id);
            }
        }

        if (typeof AC_FL_RunContent != UNDEFINED) {
            var _a = AC_FL_RunContent;
            AC_FL_RunContent = function() {
                _args = arguments;        
                _a.apply(this, _args);
                for (var i = 0, l = _args.length; i < l; i++)
                    if (_args[i]== 'id') _ref.addId(_args[i+1]);
            }
        }

    })();
}

/** 
    Global IOWS functions wrapped in the Iows namespace.
    Functions used to parse the IOWS xml returned and display it in HTML format.
	JSLint Predefined: Iows, js_fn_ALL_PRODUCTS_NEW, irwstats_locale, js_fn_BUY_ONLINE, js_fn_SAVE_TO_SHOPPING_LIST, Template, js_fn_MORE_PRODUCTS, js_fn_IKEA_FAMILY, js_fn_WEE_PRF, js_fn_WEE_LESSPRF, getDescriptiveAttributes, getDescAttributeByType, descAttrWarning, formatTRODate
*/

var IowsCommon = {
    /** Base parameters for the call **/
    method: "get",
    type: "xml",
    contentType: 'application/xml',
    dataset: "normal,prices,allimages,parentCategories",

    /** Returns the value from a specific node
    * @param node       : The element representing the node
    * @param tagName    : The element representing the tagName
    * @return           : The node value if present, otherwise an empty string */
    getNodeVal: function (node, tagName) {
		var val;
        try {
            val = node.getElementsByTagName(tagName)[0].firstChild.nodeValue;
        } catch (e) {
            val = "";
        }
        return val;
    },

    /** 
    * Extracts the measures from the measure node and uses a template to return the html snippet
    * @param node           : The element representing the measure node
    * @param dimTemplate    : The template to evaluate a dimension
    * @param template       : The template to evaluate and return the measures
    * @param moreText       : A string representing the "more" text
    * @param moreLink       : A string representing the link for the "more" text
    * @return               : The evaluated html snippet from the template */
    getMeasures: function (node, dimTemplate, template, moreText, moreLink) {
        var measure = "";
        
        if (node !== "null null" && node !== "null") {
            var array = node.replace("</v></m></rm> <rm><m><d>", "</v></m><m><d>").replace("<rm><m><d>","").replace("</v></m></rm>","").split("</v></m><m><d>");
            var len = array.length;
            for (var i=0; i<len; i++) {
                measure += dimTemplate.evaluate({dimension: array[i].replace("</d><v>",":&nbsp;")});
                if (i==2) { 
					break; 
				}
            }
            measure = '<div class=\"dimensions\">' + measure + '</div>';
        }
        return measure;
    },

    /** 
    * Checks if the product has any parent in series, systems or collections and returns the proper one
    * @param template   : The template to use to evaluate and return the html 
    * @param node       : The element representing the Item node
    * @return           : The evaluated html snippet from the template */
    getSSC: function (node, template) {
        var categoryNames = new Array("collections", "systems", "series");
        var categories = node.getElementsByTagName("categories")[0];
        
        if (typeof (categories) !== 'undefined' && categories !== null) {
            for (var i = 0; i < 3; i++) {
                var tmp = categories.getElementsByTagName(categoryNames[i]);
                var category = tmp[0].getElementsByTagName("category");
                if (category !== null && category.length > 0){
                    var ssc = {"name":this.getNodeVal(category[0],'name'),
                                "link":this.getNodeVal(category[0],'URL')};
                                
                    return template.evaluate(ssc);
                }
            }
        } else {
            return "";
        }
    },

    /**
    * Parses the price information an returns an object with the price information.
    * @param node   : The element representing the node
    * @return       : An object with the following properties set: price, pricePkg family, familyPkg */
    getPrices: function (node) {
        var obj = new Object();
        var prices = node.getElementsByTagName("prices")[0];
        var normal = this.getPricePart(prices, "normal");
        obj.price = normal.price;
        obj.pricePkg = normal.pricePkg;
        var family = this.getPricePart(prices, "family-normal");
        obj.family = family.price;
        obj.familyPkg = family.pricePkg;
        var dual = this.getPricePart(prices, "second");
        obj.priceDual = dual.price;
        obj.priceDualPkg = dual.pricePkg;
        
        try {
            obj.prfCharge = prices.getElementsByTagName("normal")[0].getElementsByTagName("priceNormal")[0].getAttribute("prfChargeFormatted");
            obj.noPrfCharge = prices.getElementsByTagName("normal")[0].getElementsByTagName("priceNormal")[0].getAttribute("priceWithNoPrfChargeFormatted");
            obj.comparisonPrice = prices.getElementsByTagName('normal')[0].getElementsByTagName('priceNormal')[0].getAttribute('comparisonPrice');
            obj.comparisonUnit = prices.getElementsByTagName('normal')[0].getElementsByTagName('priceNormal')[0].getAttribute('unit');
            obj.comparisonFamilyPrice = prices.getElementsByTagName('family-normal')[0].getElementsByTagName('priceNormal')[0].getAttribute('comparisonPrice');
        } catch (err) {}

        return obj;
    }, 

    /**
    * Retrieves the set price of a price node. 
    * The method returns "priceChanged" if set, otherwise "priceNormal" is returned.
    * @param node       : The element representing the "prices" node
    * @param tagName    : The name of the prices-node to retrieve the price from
    * @return           : An object with the following properties set: price, pricePkg */
    getPricePart: function (node, tagName) {
        var obj = new Object();
        var normal = node.getElementsByTagName(tagName)[0];
        var unitPrice = node.getAttribute("unitPricePrimary");
        var suffix = "";
        var perUnit = "";
        
        // If unitprice attribute exists, add suffix to get price from PerUnit node
        if (unitPrice !== null && unitPrice === "true") {
            suffix = "PerUnit";
            unitPrice = true;
        }
        
        // Test if price changed exists, else get normal price
        var price = this.getNodeVal(normal, "priceChanged"+ suffix);
        if (price.blank()) {
            obj.price = this.getNodeVal(normal, "priceNormal"+ suffix);
            if (unitPrice) {
                obj.pricePkg = this.getNodeVal(normal, "priceNormal");
                obj.price = obj.price + this.getUnitSuffix(normal, "priceNormal"+ suffix);
            }
        } else {
            obj.price = price;
            if (unitPrice) {
                obj.pricePkg = this.getNodeVal(normal, "priceChanged");
                obj.price = obj.price + this.getUnitSuffix(normal, "priceChanged"+ suffix);
            }
        }
        
        return obj;
    },
    
    /**
    * The method returns a unit suffix from the <priceXxxxxPerUnit> node if it exists, otherwise an empty string.
    * @param node       : The element representing the price node
    * @param tagName    : The name of the price-node to retrieve the price from
    * @return           : The unit suffix  */
    getUnitSuffix: function (node, tagName) {
        var suffix = "";
        try {
            var priceNode = node.getElementsByTagName(tagName)[0];
            var unit = priceNode.getAttribute("unit");
            if (unit !== null) {
                suffix = " / " + unit;
            }
        } catch (err) {}
        
        return suffix;
    },
	
	/**
    * Function to route the response to proper handler method. 
    * @param response       : Ajax Responsoe for route to methods. 
    * @param inputParams    : input to handle the response
    **/
	routetoHandler : function (response, inputParams) {
		switch (inputParams.handlerId) {
			case "compare": 
				addProduct(response.responseXML, inputParams.compareIndex);
				break;
			case "slideshow": 
				slideshow._addProduct(response.responseXML, inputParams.showFlag);
				break;
			case "sims":
				// To get json object from WS call for Similiar Soln
				similarSolutionJSON = response.responseJSON;
				// To display Similiar Soln
				showProductModule(similarSolutionJSON, 'simsContainer', 'sims');
				break;
			case "ssc":
				// To get json object from WS call for Depth in SSC
				depthinSSCJSON = response.responseJSON;
				// To display Depth in SSC
				showProductModule(depthinSSCJSON, 'sscContainer', 'ssc');
				break;
			case "relatedproducts":
				if (inputParams.requestId === 2) {
					var relatedProductJson = response.responseJSON;
					relatedProducts.writeBack(relatedProductJson, this.id, inputParams.requestId);
				} else {
					relatedProducts.writeBack(response.responseXML, this.id, inputParams.requestId);
				}
				break;
            case "localStoreProductDisplay":
                displayLocalStoreProduct(response.responseXML);
                break;
			case "localPrice":
				localPriceLiteBox.displayPriceContent(response.responseText);
				break;
			case "moreOption":
                if (inputParams.isResponseReq === true) {
                    var strSplit = PresentationLayer.initialProdId.split('_');                  
                    var index = strSplit[2];
                    var value = inputParams.jsonArray[index - 1];
                    if(value.indexOf(inputParams.partNumber) != -1){
                        var doc, productNodeList, product, item;
                        doc = response.responseXML;
                        if(doc !== null){
                            productNodeList = doc.getElementsByTagName('product');
                            product = productNodeList[0];
                            item = this.parseAjaxResponse(product, value);
                            PresentationLayer.changeProductInfo(item);
                            DataStructure.updateLinkedList(index,inputParams.action);
							PresentationLayer.bindClickOnMoreOption();
                        }                        
                    }                                   
                }				
                break;
            default:																
		}
	},
    
	/**
    * Function to cretae the object for product info 
    * @param product       : Product information in XML format.     
	* @return       	   : item - object with product information;
    **/
	parseAjaxResponse : function (product, value) {  
		var item = {}; 
		var itemNode = product.getElementsByTagName('item')[0];                
        item.partNumber = Iows.getNodeVal(itemNode, 'partNumber');				
        item.name = Iows.getNodeVal(itemNode, 'name'); 
        item.facts = Iows.getNodeVal(itemNode, 'type');
        if (value !== undefined && value !== null) {
            //to construct url as highest rank partnumber/#/clicked partnumber 
			var	url, strSplit, partNumber, newUrl;
            url = Iows.getNodeVal(itemNode, 'URL');
            strSplit = url.split('/');
            partNumber = strSplit[strSplit.length - 2];        
            newUrl = url.replace(partNumber, value[0]);
            newUrl = newUrl + '#/' + partNumber;
            item.URL  = newUrl; 
        } else {
            item.URL  = Iows.getNodeVal(itemNode, 'URL');
        }
        item.isNew = Iows.getNodeVal(itemNode, 'new') === 'true' ? true : false;
        if (item.isNew) {            
			item.newImgAlt = js_fn_ALL_PRODUCTS_NEW;
            item.newImgSrc = "/ms/" + irwstats_locale + "/img/icons/new_small.gif";
        }
        item.isBuyable = Iows.getNodeVal(itemNode, 'buyable') === 'true' ? true : false;
        item.measure = Iows.getNodeVal(itemNode, 'measure');
        item.bti = Iows.getNodeVal(itemNode, 'bti') === 'true' ? true : false;
        if (item.bti) {
            item.btiClass = "bti";
        }				
        //  Get all images
        var itemImages = itemNode.getElementsByTagName('images')[0];
		this.getImage(itemImages, item);
        //   Check if item is GPR. (More than one attribute value)
        item.isGPR = false;
        var noOfItems = Iows.getNodeVal(product, 'numberOfItems');
        if (noOfItems > 1) {
            item.isGPR = true;
        }
		item.keyBuyOnline = js_fn_BUY_ONLINE;
		item.keySaveToList = js_fn_SAVE_TO_SHOPPING_LIST;
		this.getPrice(product, item);
		var sscTemplate = new Template('<a href=\"#{link}\" class=\"moreLink\">' + js_fn_MORE_PRODUCTS + '</a>');
		item.compare = "compare_" + Iows.getNodeVal(itemNode, 'partNumber');
		item.ssc = Iows.getSSC(product, sscTemplate);
		return item;
	},
	
	/**
    * Function to parse the image XML tag. This function wil be invoked from the function parseAjaxResponse
    * @param product       : Price information in XML format.     
	* @param item      	   : item - object with product information;
    **/
	getImage : function (itemImages, item) {
		var small, thumb, normal;
		item.images = {};
        small = itemImages.getElementsByTagName('small')[0];
        item.images.small = new Array(Iows.getNodeVal(small, 'image'));
        thumb = itemImages.getElementsByTagName('thumb')[0];
        item.images.thumb = new Array(Iows.getNodeVal(thumb, 'image'));
        normal = itemImages.getElementsByTagName('normal')[0];
        item.images.normal = new Array(Iows.getNodeVal(normal, 'image'));
	},
	
	/**
    * Function to parse the price XML tag. This function wil be invoked from the function parseAjaxResponse
    * @param product       : Price information in XML format.     
	* @param item      	   : item - object with product information;
    **/
	getPrice : function (product, item) {
		var pricesNode, itemNode, prices, unitPricePrimary, descriptiveAttributes, priceNormalNode, priceNormalPerUnitNode, priceFamNormalNode,comparePriceExists,unitMeasureEnglish; 
		pricesNode = product.getElementsByTagName("prices")[0];
		itemNode = product.getElementsByTagName("item")[0];
		prices = Iows.getPrices(product);
		item.prices = {"normal" : {"priceNormal" : {}, "priceNormalPerUnit" : {}}}; 						
		// Is unit price primary
		item.prices.isUnitPricePrimary = false;
		unitPricePrimary = pricesNode.getAttribute("unitPricePrimary"); 
		if (unitPricePrimary !== undefined && unitPricePrimary === "true") {
			item.prices.isUnitPricePrimary = true;
		}
        
         item.prices.comparePriceExists = false;   
        item.prices.unitMeasureEnglish =  pricesNode.getAttribute("unitMeasureEnglish");
		comparePriceExists = pricesNode.getAttribute("comparisonPriceExists"); 
		if (comparePriceExists !== undefined && comparePriceExists === "true") {
			item.prices.comparePriceExists = true;
		}
		// Get all relevant nodes
		priceNormalNode = pricesNode.getElementsByTagName('normal')[0].getElementsByTagName('priceNormal')[0];
		priceNormalPerUnitNode = pricesNode.getElementsByTagName('normal')[0].getElementsByTagName('priceNormalPerUnit')[0];
		priceFamNormalNode = pricesNode.getElementsByTagName('family-normal')[0].getElementsByTagName('priceNormal')[0];
		//	Fetch Main price, unit price, Family prices and Weee prices
		item.prices.normal.priceNormal.value = priceNormalNode.firstChild.nodeValue;
		if (item.prices.isUnitPricePrimary) {
			item.prices.normal.priceNormalPerUnit.value = priceNormalPerUnitNode.firstChild.nodeValue;
			item.prices.normal.priceNormalPerUnit.unit = priceNormalPerUnitNode.getAttribute('unit');
			item.prices.usesUnitPriceMeasure = true;
		} else {
			item.prices.normal.priceNormal.perUnit = priceNormalNode.getAttribute('perUnit');
		}
        if(item.prices.comparePriceExists){
            item.prices.normal.priceNormal.comparisonPrice = priceNormalNode.getAttribute('comparisonPrice');
            item.prices.normal.priceNormalPerUnit.unit = priceNormalNode.getAttribute('unit');
        }
		this.getFamilyPrice(priceFamNormalNode, item);
		this.getWeePrice(prices, item);
		//	get the descriptive attributes and get the warning attribute from the descriptive attributes array
		descriptiveAttributes = getDescriptiveAttributes(itemNode);
		item.warningDescAttr = getDescAttributeByType(descAttrWarning, descriptiveAttributes);
		item.isCalTitle20 = false;
		if (product.getElementsByTagName("californiaTitle20").length > 0) {
			item.isCalTitle20 = true;
		}
		//retrieve TRO and NLP attributes and Assign NLP and TRO to object			
		this.getNlpTro(product, itemNode, item);
	},
	
	/**
    * Function to parse the family price XML tag. This function wil be invoked from the function getPrice
    * @param product	 : porduct information in XML format.    
	* @param itemNode	 : item information in XML format.    	
	* @param item      	 : item - object with product information;
    **/	
	getNlpTro : function (product, itemNode, item) {
		var previousPrice, isNlp, isTro, troStartDate, troEndDate;
		previousPrice = null;
		if (item.prices.isUnitPricePrimary !== null && item.prices.isUnitPricePrimary === 'true') {
			previousPrice = Iows.getNodeVal(itemNode, 'pricePreviousPerUnit');						
		} else {
			previousPrice = Iows.getNodeVal(itemNode, 'pricePrevious');		
		}	
		item.prices.normal.priceNormal.nlp = false;
		isNlp = product.getElementsByTagName("priceNormal")[0].getAttribute("nlp");
		if (isNlp !== null && isNlp === "true") {
			item.prices.normal.priceNormal.nlp = true;
		}
		item.nlpImgSrc = "/ms/img/nlp/" + irwstats_locale + "/nlp_02.png";
		item.prices.normal.priceNormal.tro = false;
		isTro = product.getElementsByTagName("priceNormal")[0].getAttribute("tro");
		if (isTro !== null && isTro === "true") {
			item.prices.normal.priceNormal.tro = true;
		}
		troStartDate = formatTRODate(product.getElementsByTagName("priceNormal")[0].getAttribute("startDate"));
		troEndDate = formatTRODate(product.getElementsByTagName("priceNormal")[0].getAttribute("endDate"));
		item.prices.normal.priceNormal.previousprice = previousPrice;
		item.prices.normal.priceNormal.trostartdate = troStartDate;
		item.prices.normal.priceNormal.troenddate = troEndDate;
	},
	
	/**
    * Function to parse the family price XML tag. This function wil be invoked from the function getPrice
    * @param priceFamNormalNode : Family price information in XML format.     
	* @param item      	   		: item - object with product information;
    **/	
	getFamilyPrice : function (priceFamNormalNode, item) {
		var familyPrice;
		item.prices.hasFamilyPrice = false;
		familyPrice = "";
		if (priceFamNormalNode.firstChild) {
			familyPrice = priceFamNormalNode.firstChild.nodeValue; 
		}							
		if (!familyPrice.blank()) {
			item.prices.hasFamilyPrice = true;
			item.keyFamily = js_fn_IKEA_FAMILY;
			item.prices.familyNormal = {"priceNormal": {}};
			item.prices.familyNormal.priceNormal.value = familyPrice;
            if(item.prices.comparePriceExists){
                item.prices.familyNormal.priceNormal.comparisonPrice = priceFamNormalNode.getAttribute('comparisonPrice');
            }
		}
	},
	
	/**
    * Function to parse the prf/Wee price XML tag. This function wil be invoked from the function getPrice
    * @param prices        : Price information in js format.     
	* @param item      	   : item - object with product information;
    **/	
	getWeePrice : function (prices, item) {
		item.prices.isWeePrf = false;
		item.prices.WEEEFeeNormal = {};
		if (prices.prfCharge !== null && prices.noPrfCharge !== null) {
			item.prices.isWeePrf = true;
			item.prices.normal.priceNormal.prfCharge = prices.prfCharge;
			item.prices.normal.priceNormal.priceWithNoPrfCharge = prices.noPrfCharge;
		
			item.weee_prf = js_fn_WEE_PRF;
			item.weee_less_prf = js_fn_WEE_LESSPRF;
			if (item.bti) {
				item.btiClass = "bti";
			}
		}
	}
}
/** 
* Ajax.Request.abort 
* extend the prototype.js Ajax.Request object so that it supports an abort method 
*/
Ajax.Request.prototype.abort = function() {    
    // prevent and state change callbacks from being issued    
    this.transport.onreadystatechange = Prototype.emptyFunction;  
        
    // abort the XHR    
    this.transport.abort();    
    // update the request counter    
    Ajax.activeRequestCount--;
};

/** Class used to send ajax request
* @param ajaxParams		: Map for holding following values
* @param inputParams	: Map for holding handlerId for routing to the proper handler method and any other parameters
*/

var AjaxRequestObject = Class.create({
	// this is the constructor of the class 
	initialize: function (ajaxParams, inputParams) {
		var request;
		this.execute(ajaxParams, inputParams);
	},
	// function used to call createRequest from constructor
	execute: function (ajaxParams, inputParams) {    
		this.createRequest(ajaxParams, inputParams);
	}, 
	// function to send an ajax request
	createRequest: function (ajaxParams, inputParams) {
		// To destroy the existing request if the flag is set, so as to create a fresh request.
		if (this.request !== null && this.request !== undefined && ajaxParams.singletonFlag) {		
			this.request.abort();
		}
		
		this.request = new Ajax.Request(ajaxParams.url, {
			asynchronous: ajaxParams.asyncFlag, 
			contentType: ajaxParams.contentType,
			method: 'get',
			onSuccess: function (response) {
				IowsCommon.routetoHandler(response, inputParams);
			},
			onFailure: function () {
				// Ajax request failed!;
				// Just call the writeback with null, so it can invoke subsequent request.
				if (inputParams.handlerId === "relatedproducts") {
					relatedProducts.writeBack(null, null, null);
				}
			},
			onComplete: function () {

			}
		});
	}
	
});
/********************************************************
******************** irwShare.js ************************
********************************************************/

/**
* Namespace declaration: A bug in IE causes window scoped global variables to be nuked, so define using var
*/
if (Prototype.Browser.IE) {
	if (!com) {
		var com = {ikea: {irw: {share: {}}}};
	} else if (!com.ikea) {
		com.ikea = {irw: {share: {}}};
	} else if (!com.ikea.irw) {
		com.ikea.irw = {share: {}};
	} else {
		com.ikea.irw.share = {};
	}
} else {
	com.ikea.irw.share = {};
}

/**
* The com.ikea.irw.share.Util object groups utility methods
*/
com.ikea.irw.share.Util = {
	/**
	* Entry point for share & like functionality
	*/
	init: function () {
		// Check if the share placeholder div exists
		var shareDiv = $$('div.shareDiv')[0];
		if (shareDiv) {
			if(com.ikea.irw.flash.Constants.htmlEnabled === true || $('pipContainer') != null || $('contentModule-0') != null  || $('newsShareSection') != null || $('ps2012Share') != null || $('shareChoice') != null || $('roomsetShare') != null ) {
				// Read the settings from JSON config file
				com.ikea.irw.share.Store.readSettings();
				// Read data
				com.ikea.irw.share.Store.readParams();
				if (com.ikea.irw.share.Store.settings.shareEnabled) {
					// Create Share button
					com.ikea.irw.share.Util.createShareButton(shareDiv);
					// Create share popup
					com.ikea.irw.share.Util.createPopupContent();
					com.ikea.irw.share.Util.createPopup();
				}
				// Add google plus one button
				if (com.ikea.irw.share.Store.settings.googlePlus){
					if (com.ikea.irw.share.Store.settings.googlePlus.enabled) {
						com.ikea.irw.share.Util.createPlusOneButton();
					}
				}
				// Add facebook Like function
				if (com.ikea.irw.share.Store.settings.fbLike){
					if (com.ikea.irw.share.Store.settings.fbLike.enabled) {
						com.ikea.irw.share.Util.createLikeButton();
					}
				}
				// Bind address change listener
				SWFAddress.addEventListener(SWFAddressEvent.CHANGE, function (e) {
					// Hide the share DIV. It will be re-displayed by the refreshData method
					shareDiv.hide();
					// Refresh the data after a small delay, so that the changed URL is updated in address bar.
					window.setTimeout(com.ikea.irw.share.Util.refreshData.bind(this), 1000);
				}.bind(this));
			}
		}
	},
	/**
	* Create Share button
	*/
	createShareButton: function (shareDiv) {
        var shareButton = '<div id="shareButtonWrapper"><img src="/ms/img/share/icons/share.jpg"></img>' +
				'<a id="shareButton" class="link" href="javascript:void(0);">' + com.ikea.irw.share.Store.settings.shareButtonLabel + '</a></div>';
        shareDiv.insert(shareButton);
        if (shareDiv.up(0).hasClassName( 'shareOuterContainer' )) { 
		    shareDiv.up(0).addClassName('shareContainerBorder');
        }
    },
	/**
	* This method creates the popup content. Content will be stored for reuse
	*/
	createPopupContent: function () {
		var settings = com.ikea.irw.share.Store.settings, shareDiv = new Element('div'), listItemTemplate, pluginMenuList,
			emailPlugin, evalObj, favPlugin, pluginCount=1, pluginHeight;
		shareDiv.insert('<div id="layoutPlugin">' +
							'<ul id="pluginRows" class="pluginRows">' +
								'<li id="termsCond" class="termsnoBorder"><div class="containerTerms">' + com.ikea.irw.share.Store.settings.termsCond.termsCondLabel +
								'&nbsp;<a href="javascript:void(0);">' + com.ikea.irw.share.Store.settings.termsCond.termsCondLinkText + 
								'</a></div></li></ul></div>');
		// Choose the template based on settings
		switch (settings.shareAppearence) {
		case "ICON":
			listItemTemplate = new Template('<li id="popup_#{pluginName}" class="sharePlugin"><div class="iconHolder">' +
								'<img src="#{icon}"/></div></li>');
			break;
		case "TEXT":
			listItemTemplate = new Template('<li id="popup_#{pluginName}" class="sharePlugin">' +
								'<div class="textLink">#{label}</div></li>');
			break;
		default:
			// Use ICON & TEXT as default
			listItemTemplate = new Template('<li id="popup_#{pluginName}" class="sharePlugin"><div class="iconHolder">' +
									'<img src="#{icon}"/></div><div class="textLink">#{label}</div></li>');
										
		}
		pluginMenuList = shareDiv.down('ul.pluginRows');
		
		// Add email option
		emailPlugin = com.ikea.irw.share.Registry.lookup("email");
		evalObj = {
			"pluginName": settings.email.pluginName,
			"icon": emailPlugin.getIcon(),
			"label": settings.email.label								
		};
		pluginCount++;
		pluginMenuList.insert(listItemTemplate.evaluate(evalObj));		
		
		// Add favourites option
		favPlugin = com.ikea.irw.share.Registry.lookup("bookmark");
		evalObj = {
			"pluginName": settings.bookmark.pluginName,
			"icon": favPlugin.getIcon(),
			"label": settings.bookmark.label								
		};
		pluginMenuList.insert(listItemTemplate.evaluate(evalObj));
		
		// Add enabled and registered social media plugins
		if(settings.socialMedia){
		settings.socialMedia.each(function (socialPlugin) {
			var plugin = com.ikea.irw.share.Registry.lookup(socialPlugin.pluginName), evalObj;
				if (plugin) {
					// This object is used to evaluate the template
						evalObj = {
							"pluginName": socialPlugin.pluginName,
							"icon": plugin.getIcon(),
							"label": socialPlugin.label								
						};
						pluginMenuList.insert(listItemTemplate.evaluate(evalObj));
						pluginCount++;
					}
				}
			)
		};
		
		// Store the DIV element for reuse
		var offset = $('shareButtonWrapper').cumulativeOffset();	
		var offsetParent = $('allContent').cumulativeOffset();
		
		com.ikea.irw.share.Store.shareDivHeight = (pluginCount * 32) + 150;
		com.ikea.irw.share.Store.shareDivPos = offset.top;
		com.ikea.irw.share.Store.parentDivPos = offsetParent.top;		
        var difference = com.ikea.irw.share.Store.shareDivPos - com.ikea.irw.share.Store.parentDivPos;
		if (difference < com.ikea.irw.share.Store.shareDivHeight) {			
		    com.ikea.irw.share.Store.yPos = "bottom";
			shareDiv.insert(new Element('div', {'id' : 'pluginArrow', 'class': 'topArrow'}).update('&nbsp'));
		}else{
		    com.ikea.irw.share.Store.yPos = "top";			
			shareDiv.insert(new Element('div', {'id' : 'pluginArrow', 'class': 'bottomArrow'}).update('&nbsp'));			
		}
		com.ikea.irw.share.Store.shareDivContent = shareDiv.innerHTML; 
	},
	/**
	* Create share popup using Pintip class
	*/
	createPopup: function () {
		var yPos = com.ikea.irw.share.Store.yPos;
		com.ikea.irw.share.Store.popup = new Pintip('shareButtonWrapper', 
				{id: 'pluginPopup', shareLink: 'true', align: 'top',
				pinX: 'left', pinY: yPos, content: com.ikea.irw.share.Store.shareDivContent,
				offsetX: -48, width: 140});
	},
	/**
	* This method routes click events to the respective plugins' clickHandler method.
	*/
	clickHandler: function (pluginName) {
		//Route to plugin's handler
		var plugin = com.ikea.irw.share.Registry.lookup(pluginName);
		if (plugin) {
			plugin.clickHandler();
		}
	},
	/**
	* This method is invoked when mouse enters the Pintip region
	*/
	callBack: function (detach) {
		this.bindEventListeners();
	},
	/**
	* Binds event listeners for
	*	- Hover animation on popup items
	*	- Click event for terms and conditions link
	*	- Click events for each popup item
	*/
	bindEventListeners: function () {
		// Listeners for highlighting current row
		$$(".pluginRows li.sharePlugin").each(function (listItem) {
			listItem.observe('mouseenter', function (evt) {
				$(listItem).addClassName('mouseOver');
			});
			listItem.observe('mouseleave', function (evt) {
				$(listItem).removeClassName('mouseOver');
			});
		});	
		
		// Bind event listener for terms and conditions link
		var termsCondLink = $$('div#pluginPopup ul#pluginRows div.containerTerms a');
		if (termsCondLink) {
			termsCondLink[0].stopObserving('click');
			termsCondLink[0].observe('click', com.ikea.irw.share.Util.openTermsAndConditions.bind(this));
		}
		
		// Bind click events for plugin links. Click events are bound to the Util.clickHandler method
		$$('div#pluginPopup ul#pluginRows li').each(function (listItem) {
			if (listItem.id.startsWith("popup_")) {
				var pluginName = listItem.id.replace("popup_", "");
				listItem.stopObserving('click');
				listItem.observe('click', com.ikea.irw.share.Util.clickHandler.bind(this, pluginName));					
			}
		});
	},
	/**
	* Displays the share via email popup
	*/
	clickOnEmail: function (shareURL) {
		var storeId = $F($('myAccount').storeId), langId = $F($('myAccount').langId), topPos;
		if ($('pluginOutsideBg') !== null) {
			$('pluginOutsideBg').remove();
		}
		if ($('pluginPopup').down('#parentEmailContainer')) {
			$('pluginPopup').down('#parentEmailContainer').remove();
		}
		$('pluginPopup').down('.shadow-four').insert('<div id="parentEmailContainer">' +
			'<iframe  id="shareEmailIframe" width="220px" frameborder="0"  vspace="0" ' +
			'hspace="0"  marginwidth="0"  marginheight="0" scrolling="no" ' +
			'src="/webapp/wcs/stores/servlet/IrwSharePageByEmail?storeId=' + storeId +
			'&langId=' + langId + '&shareURL=' + encodeURIComponent(shareURL) + '" onload="com.ikea.irw.share.Util.resizeIframe();"></iframe></div>');

        enableElement = true;
		$('pluginPopup').down('#pluginRows').style.display = 'none';					
		$('pluginPopup').down('#parentEmailContainer').style.display = 'block';					
		topPos = com.ikea.irw.share.Util.checkPositionTop();
		if (com.ikea.irw.share.Store.yPos === "top" ){
		    $('pluginPopup').style.top = topPos + "px";
		}
		$('pluginPopup').style.width = "230px";
		com.ikea.irw.share.Util.insertTransperentLayer();		
	},
	checkPositionTop: function () {
		var pinY = $('shareButton').cumulativeOffset().top - $('pluginPopup').getHeight();
		return pinY;
	},
	checkPositionLeft: function () {
	    var pinX = ($('shareButton').cumulativeOffset().left - ($('pluginPopup').getWidth() / 2) + ($('shareButton').getWidth() / 2));
		return pinX;
	},
    insertTransperentLayer: function () {
        var overlay = new Element('div', {'id': 'pluginOutsideBg'}), h = $(document.body).getHeight();
        overlay.setStyle({height: h + 'px'});
        $(document.body).insert(overlay);
        $('pluginOutsideBg').observe('click', function (evt) {
            $('pluginPopup').style.display = 'none';
            if ($('pluginOutsideBg') !== null) {
                $('pluginOutsideBg').remove();
            }
            if ($('termsPopup') !== null) {
                $('termsPopup').remove();
            }
            com.ikea.irw.share.Util.createPopup();
            enableElement = false;
			com.ikea.irw.share.Util.objectRefresh();
        });		
    },
	/**
	* Displays the terms and conditions text
	*/
    openTermsAndConditions: function () {
		var termsCond = com.ikea.irw.share.Store.settings.termsCond, termsTemplate, topPos, leftPos;
        enableElement = true;
		if ($('pluginOutsideBg') !== null) {
			$('pluginOutsideBg').remove();
        }
        
        termsTemplate = new Template('<div id="termsPopup" class="slPopup shadow-one" ' +
			'style="display:block; width:230px;"><div class="corner-a">' +
			'</div><div class="corner-b"></div><div class="shadow-two">' +
			'<div class="shadow-three"><div class="shadow-four"><div class="content">' +
			'<div class="termsContent"><div class="termsText">' +
			'#{termsCondTxt}</div><div class="closeContainer">' +
			'<a href="javascript:void(0);" onclick="com.ikea.irw.share.Util.closeTerms();" id="termsCondClose">#{closeButtonTxt}</a></div></div>' +
			'</div></div></div></div></div>');
        $(document.body).insert(termsTemplate.evaluate(termsCond));
        com.ikea.irw.share.Util.insertTransperentLayer();
        // Bind Close button handler
        topPos = com.ikea.irw.share.Util.checkPositionTop() + 20;
        leftPos = com.ikea.irw.share.Util.checkPositionLeft() - 60;
        if (com.ikea.irw.share.Store.yPos === "top" ){
            $('termsPopup').style.top =  topPos + "px";
		} else {
		    topPos = $('shareButton').cumulativeOffset().top + 40;
		    $('termsPopup').style.top = topPos +'px';
		}
        $('termsPopup').style.left =  leftPos + "px";
        return false;
    },
    /**
	* Closes terms and conditions
	*/
    closeTerms: function () {
        $('termsPopup').remove();
		com.ikea.irw.share.Util.objectRefresh();
        $('pluginOutsideBg').observe('mouseenter', function (evt) {
			var layerTimeOut = 500;
			delayToHideLayer = setTimeout( 
                function () {
					$('pluginPopup').style.display = 'none';
					$('pluginOutsideBg').remove();
					enableElement = false;
					com.ikea.irw.share.Util.objectRefresh();
					com.ikea.irw.share.Util.createPopup();
                },
                layerTimeOut
            );  
        }); 
    },
	/**
	* Closes the share by email popup
	*/
    cancelShareEmail: function (ev) {
		if (ev.target.id !== 'emailShareAgain') {
			// In case of close or cancel, hide the popup
			$('pluginPopup').style.display = 'none';
		}
        $('pluginPopup').down('#pluginRows').style.display = 'block';     
        $('pluginPopup').down('#parentEmailContainer').style.display = 'none';
        $('pluginPopup').style.width = "150px";
        $('pluginPopup').style.top = parent.$('shareButton').cumulativeOffset().top - parent.$('pluginPopup').getHeight() + "px";  
        $('pluginOutsideBg').observe('mouseenter', function (evt) {
            $('pluginPopup').style.display = 'none';
            $('pluginOutsideBg').remove();
            enableElement = false;
            com.ikea.irw.share.Util.createPopup();
			com.ikea.irw.share.Util.objectRefresh();			
        }); 
		com.ikea.irw.share.Util.objectRefresh();
    },
	/**
	* This method creates a like button on the page, if Like functionality is enabled.
	*/
	createLikeButton: function () {
		var plugin = com.ikea.irw.share.Registry.lookup('facebook_like'), shareHolder, likeHolder, clearDiv,
            mapMarket = com.ikea.irw.share.Util.mapMarket, market;
        market = mapMarket(irwstats_locale);
		// Float share button left.
		shareHolder = $('shareDiv').down('#shareButtonWrapper');
		if (shareHolder) {
			$('shareDiv').down('#shareButtonWrapper').addClassName('floatLeft');
		}
		likeHolder = $('shareDiv').down('#likeButton');
		if (!likeHolder) {
			$('shareDiv').insert(new Element('div', {'id': 'likeButton', 'class': 'floatLeft'}));
			likeHolder = $('shareDiv').down('#likeButton');
		}
		if (plugin) {
			likeHolder.innerHTML = '<iframe src="http://www.facebook.com/plugins/like.php?' +
				'locale=' + market +
				'&amp;href=' + encodeURIComponent(plugin.getUrl().split('?')[0]) +
				'&amp;send=true&amp;layout=button_count&amp;width=450&amp;show_faces=false&amp;action=like&amp;' +
				'colorscheme=light&amp;font=verdana&amp;height=21"' +
				'scrolling="no" frameborder="0" style="border:none; overflow:hidden; ' +
				'width:100%; height:21px;" allowTransparency="true"></iframe>';
		}
		// Insert a div to clear the float property
		clearDiv = $('shareDiv').down('.clear');
		if (!clearDiv) {
			$('shareDiv').insert(new Element('div', {'class': 'clear'}));
		}
	},
    mapMarket: function (irwstats_locale) {
        // All markets that will use en_GB
        var enMarketArray = ["en_AA",
							 "en_AE",
							 "en_AU",
						     "en_CA",
							 "en_CN",
							 "en_HK",
							 "en_IE",
							 "en_IL",
							 "en_JP",
							 "en_MY",
							 "en_SA",
							 "en_SG",
							 "en_TH",
							 "en_US"
                            ];
            market = irwstats_locale;

        switch (market) {
            case "fr_CA":
            market = "fr_FR";
            break;
            case "it_CH":
            market = "it_IT";
            break; 
			case "de_AT":
            market = "de_DE";
            break;
			case "de_CH":
            market = "de_DE";
            break;
			case "fr_BE":
            market = "fr_FR";
            break;
			case "fr_CH":
            market = "fr_FR";
            break;
			case "nl_BE":
            market = "nl_NL";
            break;	
			case "no_NO":
            market = "nn_NO";
            break;
			case "es_DO":
            market = "es_ES";
            break;			
            default:
            // If no hit in any of the cases, do not change irwstats_locale
            market = irwstats_locale;
        }
        for (i; i < enMarketArray.length; i += 1) {
            if (enMarketArray[i] === market) {
                market = "en_GB";
            }
        }
        return market;
	},
	/**
	* This method creates a google plus one button if the feature is enabled
	*/
	createPlusOneButton: function () {
		var plugin = com.ikea.irw.share.Registry.lookup('google_plus');
		if (plugin) {
			plugin.createPlusOneButton();
		}
	},
	refreshData: function () {
		com.ikea.irw.share.Store.readParams();
		// Clear the instance registry, so that plugins are reloaded on next lookup.
		com.ikea.irw.share.Registry.purge();
        // Update plus one button
        if (com.ikea.irw.share.Store.settings.googlePlus){
			if (com.ikea.irw.share.Store.settings.googlePlus.enabled) {
				com.ikea.irw.share.Util.createPlusOneButton();
			}
		}
		// Update facebook Like function
		if (com.ikea.irw.share.Store.settings.fbLike){
			if (com.ikea.irw.share.Store.settings.fbLike.enabled) {
				com.ikea.irw.share.Util.createLikeButton();
			}
		}
		var shareDiv = $$('div.shareDiv')[0];
		shareDiv.show();
	},
	resizeIframe: function () {
			var obj, h, top;
			obj = $('shareEmailIframe');
			h = 0;
			h = Try.these(
				function () {return obj.contentDocument.body.getHeight(); },       //FF & Safari
				function () {return obj.contentWindow.document.body.getHeight(); },   //IE
				function () {return 710; }
			);    
			obj.height = h;
			if (com.ikea.irw.share.Store.yPos === "top" ){
				var difference = com.ikea.irw.share.Store.shareDivPos - com.ikea.irw.share.Store.parentDivPos;
				if (difference < h) {
					top = $('shareButton').cumulativeOffset().top + 13;
					if($('pluginArrow').hasClassName('bottomArrow') ) {
						 $('pluginArrow').removeClassName('bottomArrow');
						 $('pluginArrow').addClassName('topArrow');
					}
				} else {
					top = $('shareButton').cumulativeOffset().top - h;
					top = top - 18;		
					if ($('pluginArrow').hasClassName('topArrow') ) {
						$('pluginArrow').removeClassName('topArrow');
						$('pluginArrow').addClassName('bottomArrow');
					}					
				}
			} else {
				top = $('shareButton').cumulativeOffset().top;
				top = top + 16;
			}
			$('pluginPopup').style.top = top + "px";		
	},
	objectRefresh: function() {
		if ($('pipContainer') !== null) {		
			ikeaZoomOnPip.refreshObject();
		}
	}
};

/*
* Share Framework plugin registry. Creates plugin objects on demand and caches them for reuse.
*/
com.ikea.irw.share.Registry = {
	classReg: new Hash(),
	instReg: null,
	/**
	* Registers a plugin class
	*/
	register: function (pluginName, plugin) {
		this.classReg.set(pluginName, plugin);
	},
	/**
	* Returns an instance of the plugin if it is registered
	*/
	lookup: function (pluginName) {
		var classRef, instRef;
		// See if the plugin class is registered
		classRef = this.classReg.get(pluginName);
		if (classRef !== undefined && classRef !== null) {
			// Initialize the instance Registry first time
			if (this.instReg === null) {
				this.instReg = new Hash();
			}
			// See if an instance of the plugin already exists
			instRef = this.instReg.get(pluginName);
			// If it doesn't exist, create and register an instance.
			if (instRef === undefined || instRef === null) {
				instRef = this.createInstance(classRef);
				this.instReg.set(pluginName, instRef);
			}
			return instRef;
		}
		// Return null in any other scenario
		return null;
	},
	/**
	* This helper method creates an object instance based on the class reference passed
	* as argument
	*/
	createInstance: function (klass) {
		var o, F, c;
		c = klass; // get reference to class constructor function
		F = function () {}; // dummy function
		F.prototype = c.prototype; // reference same prototype
		o = new F(); // instantiate dummy function to copy prototype methods
		c.apply(o); // call class constructor, supplying new object as context
		o.constructor = c; // assign correct constructor
		return o;
	},
	/**
	* Purges the plugin instance cache
	*/
	purge: function (klass) {
		// Clear the instance Registry
		this.instReg = null;
	}
};

/*
* This is a data store/cache that can be reused by various plugins
*/
com.ikea.irw.share.Store = {
	/**
	* Read data for the plugins. This is cached and reused by all plugins.
	*/
	readParams: function () {
		var metaTags;
		// Start with blank object
		this.shareParams = {};
		// Try reading the meta tags
		metaTags = $A($$('meta')).each(function (tag) {
			var tagName, tagContent, attrVal;
			if (tag.name) {
				tagName = tag.name;
			} else {
				attrVal = tag.attributes.getNamedItem("property");
				if (attrVal !== null) {
					tagName = attrVal.nodeValue;
				}
			}
			tagContent = tag.content;
			switch (tagName) {
			case "og:title":
				this.shareParams.title = tagContent;
				break;
			case "og:url":
				this.shareParams.url = tagContent;
				break;
			case "og:description":
				this.shareParams.text = tagContent;
				break;
			case "og:image":
				this.shareParams.image = tagContent;
				break;
			case "ikea-share-url-rule":
				this.shareParams.urlRule = tagContent;
				break;
			default:
			}
		}.bind(this));
	},
	/**
	* Read settings from locale specific settings file
	*/
	readSettings: function () {
		// Path to settings
		var settingsFile = '/ms/' + irwstats_locale + '/js/share_settings.json';
		// Initialize settings store
		this.settings = {};
		new Ajax.Request(settingsFile,
			{
				method: 'get',
				asynchronous: false,
				contentType: 'application/json',
				onSuccess: function (transport) {
					this.settings = transport.responseText.evalJSON();
				}.bind(this),
				onFailure: function () { 
					// Do nothing
				}
			});
	}
};

/*
* This is an Abstract share plugin. It contains common code
* that can be reused by all plugins
*/
com.ikea.irw.share.AbstractSharePlugin = Class.create({
	initialize: function () {
		this.setData();
	},
	/**
	* Sets the data for the share plugin instance
	*/
	setData: function () {
		var params = com.ikea.irw.share.Store.shareParams;
		if (params.title) {
			this.title = params.title;
		}
		if (params.text) {
			this.text = params.text;
		}
		if (params.image) {
			this.image = params.image;
		}
		if (params.url) {
			this.url = params.url;
		} else {
			// Fallback
			this.url = location.href;
		}
		if (params.urlRule) {
			this.urlRule = params.urlRule;
		}
	},
	/**
	* This is the default click handler class for the share popup's click event.
	* Override this to use a custom handler.
	* By default, the handler will open a new window with the share URL
	*/
	clickHandler: function () {
		irwStatSetShareAction(this.getPluginName());
		window.open(this.getShareUrl(), "popup");
	},
	/**
	* Returns URL to be shared: Transforms deep-linked URLS if neccessary
	*/
	getUrl: function () {
		var locURL, regex, match, newURL, queryString;
		queryString = '';
		if (this.urlRule) {
			locURL = location.href;
			switch (this.urlRule) {
			// PIP URL : e.g. /products/43243242#45435454
			case "0":
				regex = new RegExp("(.+)/[^#?]+(?:\\?(.*))?/?#/?([^#]+/?)$");
				match = regex.exec(locURL);
				if (match !== null) {
					newURL = match[1];
					if (match.length >= 4 && match[3] !== undefined) {
						newURL = newURL + '/' + match[3];
					}
					if (match.length >= 3 && match[2] !== undefined) {
						queryString = match[2];
					}
					newURL = newURL + '?' + this.addWATracker(queryString);
					return newURL;
				}
				break;
			// MPA URL . e.g. catalog/categories/departments/living_room/tools/livingroom_rooms_ideas#/rama_visa_foto
			case "1":
				regex = new RegExp("^([^\\?#]*[^/#\\?])/?(?:\\?([^/#]*))?(?:/?#/?(.*))?$");
				match = regex.exec(locURL);
				if (match !== null) {
					// Base URL
					newURL = match[1];
					// Add /visual/
					if (match.length >= 4 && match[3] !== undefined) {
						newURL = newURL + "/visual/" + match[3];
					}
					// Append Query String if present
					if (match.length >= 3 && match[2] !== undefined) {
						queryString = match[2];
					}
					newURL = newURL + "?" + this.addWATracker(queryString);
					return newURL;
				}
				break;
			}
		}
		// Return the og:url by default, with the WA tracker attached
		return this.url + '?' + this.addWATracker(queryString);
	},
	/**
	* Adds/replaces cid parameter in the Query string
	* Format: [country_code]>ot>[share_channel]>ikea_share
	* e.g. gb>ot>facebook>ikea_share
	*/
	addWATracker: function (queryString) {
		var newString, cidParam;
		// Strip existing icid/cid parameters
		newString = queryString.replace(/i?cid=[^&]*/g, '').replace('&&', '&').replace(/&$/, '').strip();
		cidParam = irwstats_locale.replace(/[a-z]{2}_/, '').toLowerCase() + ">" +
			'ot>' + this.getPluginName() + '>ikea_share';
		if (newString !== '') {
			newString = newString + '&';
		}
		newString = newString + 'cid=' + encodeURIComponent(cidParam);
		return newString;
	}
});

/*
* Email share plugin
*/
com.ikea.irw.share.EmailSharePlugin = Class.create(com.ikea.irw.share.AbstractSharePlugin, {
	getIcon: function () {
		return "/ms/img/share/icons/mail.jpg";
	},
	clickHandler: function () {
		irwStatSetShareAction("email");
		com.ikea.irw.share.Util.clickOnEmail(this.getUrl());
	},
	getPluginName: function () {
		return "email";
	}
});
com.ikea.irw.share.Registry.register("email", com.ikea.irw.share.EmailSharePlugin);

/*
* Bookmark plugin
*/
com.ikea.irw.share.BookmarkSharePlugin = Class.create(com.ikea.irw.share.AbstractSharePlugin, {
	getIcon: function () {
		return "/ms/img/share/icons/bookmark.jpg";
	},
	clickHandler: function () {
	    irwStatSetShareAction("bookmark");
		if (window.sidebar) { // Mozilla Firefox Bookmark
			window.sidebar.addPanel(this.title, this.getUrl(), "");
		} else if (window.external) { // IE Favorite
			window.external.AddFavorite(this.getUrl(), this.title); 
		}
	},
	getPluginName: function () {
		return "bookmark";
	}
});
com.ikea.irw.share.Registry.register("bookmark", com.ikea.irw.share.BookmarkSharePlugin);


// Load after page loads
document.observe("dom:loaded", com.ikea.irw.share.Util.init);






/********************************************************
******************** blogger.js *************************
********************************************************/

/*
* This is a Blogger share plugin implementation. It contains blogger specific code
*/
com.ikea.irw.share.BloggerSharePlugin = Class.create(com.ikea.irw.share.AbstractSharePlugin, {
	getShareUrl: function () {
		return 'http://www.blogger.com/blog_this.pyra?' +
			'&u=' + encodeURIComponent(this.getUrl()) +
			'&t=' + encodeURIComponent(this.text) +
			'&n=' + encodeURIComponent(this.title);
	},
	getIcon: function () {
		return "/ms/img/share/icons/blogger.jpg";
	},
	getPluginName: function () {
		return "blogger";
	}
});

com.ikea.irw.share.Registry.register("blogger", com.ikea.irw.share.BloggerSharePlugin);
			/********************************************************
******************** facebook.js ************************
********************************************************/

/*
* This is a Facebook share plugin implementation. It contains facebook specific code
*/
com.ikea.irw.share.FacebookSharePlugin = Class.create(com.ikea.irw.share.AbstractSharePlugin, {
	getShareUrl: function () {
		return 'http://www.facebook.com/share.php?' +
			'u=' + encodeURIComponent(this.getUrl());
	},
	getIcon: function () {
		return "/ms/img/share/icons/facebook.jpg";
	},
	getPluginName: function () {
		return "facebook";
	}
});

com.ikea.irw.share.Registry.register("facebook", com.ikea.irw.share.FacebookSharePlugin);

/*
* This is a Facebook Like plugin implementation.
*/
com.ikea.irw.share.FacebookLikePlugin = Class.create(com.ikea.irw.share.AbstractSharePlugin, {
	getPluginName: function () {
		return "facebook_like";
	}
});

com.ikea.irw.share.Registry.register("facebook_like", com.ikea.irw.share.FacebookLikePlugin);/********************************************************
******************** myspace.js *************************
********************************************************/

/*
* This is a Myspace share plugin implementation. It contains twitter specific code
*/
com.ikea.irw.share.MyspaceSharePlugin = Class.create(com.ikea.irw.share.AbstractSharePlugin, {
	getShareUrl: function () {
		return 'http://www.myspace.com/Modules/PostTo/Pages/?' +
			'&u=' + encodeURIComponent(this.getUrl());
	},
	getIcon: function () {
		return "/ms/img/share/icons/myspace.jpg";
	},
	getPluginName: function () {
		return "myspace";
	}
});

com.ikea.irw.share.Registry.register("myspace", com.ikea.irw.share.MyspaceSharePlugin);
			/********************************************************
******************** twitter.js ************************
********************************************************/

/*
* This is a Twitter share plugin implementation. It contains twitter specific code
*/
com.ikea.irw.share.TwitterSharePlugin = Class.create(com.ikea.irw.share.AbstractSharePlugin, {
	getShareUrl: function () {
		return "http://twitter.com/share?" + 
			"url=" + encodeURIComponent(this.getUrl()) +
			"&text=" + encodeURIComponent(this.title.replace(/-\sIKEA$/g, '').strip() + " #ikea");
	},
	getIcon: function () {
		return "/ms/img/share/icons/twitter.jpg";
	},
	getPluginName: function () {
		return "twitter";
	}
});


com.ikea.irw.share.Registry.register("twitter", com.ikea.irw.share.TwitterSharePlugin);/*******************************************************
******************** googleplus.js *********************
********************************************************/
/*
* This is a Google Plus button plugin implementation
*/

com.ikea.irw.share.GooglePlusPlugin = Class.create(com.ikea.irw.share.AbstractSharePlugin, {
	getPluginName: function () {
		return "google_plus";
	},
	createPlusOneButton: function () {
		var shareHolder, plusOneHolder, po, s;
		// Float share button left.
		shareHolder = $('shareDiv').down('#shareButtonWrapper');
		if (shareHolder) {
			$('shareDiv').down('#shareButtonWrapper').addClassName('floatLeft');
		}
		plusOneHolder = $('shareDiv').down('#plusOneButton');
		if (!plusOneHolder) {
			$('shareDiv').insert(new Element('div', {'id': 'plusOneButton', 'class': 'floatLeft'}));
			plusOneHolder = $('shareDiv').down('#plusOneButton');
		}
		// Add g:plusone element
		var gPlusElem = new Element('g:plusone', {'size': 'medium', 'href': this.getUrl().escapeHTML(),'callback':'plusoneTrack'} );
		plusOneHolder.update(gPlusElem);

		// Invoke Google plus one code
		/** Code from Google Start */
		window.___gcfg = {lang: irwstats_locale.replace('_', '-')};
		po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
		po.src = 'https://apis.google.com/js/plusone.js';
		s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
		/** Code from Google End */
	}
});

com.ikea.irw.share.Registry.register("google_plus", com.ikea.irw.share.GooglePlusPlugin);
/********************************************************
******************** vKontakte.js ************************
********************************************************/

/*
* This is a vKontakte share plugin implementation. It contains vKontakte specific code
*/
com.ikea.irw.share.vKontakteSharePlugin = Class.create(com.ikea.irw.share.AbstractSharePlugin, {
          getShareUrl: function () {
                   return "http://vkontakte.ru/share.php?" + 
                             "url=" + encodeURIComponent(this.getUrl()) +
                             "&title=" + encodeURIComponent(this.title.replace(/-\sIKEA$/g, '').strip() + " #ikea");
          },
          getIcon: function () {
                   return "/ms/img/share/icons/vKontakte.jpg";
          },
          getPluginName: function () {
                   return "vKontakte";
          }
});

// Registers the vKontakte plug-in
com.ikea.irw.share.Registry.register("vKontakte", com.ikea.irw.share.vKontakteSharePlugin);
/** @namespace  */
$namespace('com.ikea.irw.popup');/*global com, ikea, irw, popup, DI, window */
/**
 * 
 * Class for handling new windows as popups
 * 
 * @classDescription This class contains functions for creating new window popups
 * @constructor
 * @version 1.0.0
 * 
 */
com.ikea.irw.popup.Window = {
    
	/**
     * Create Ask Anna window
     * @param inURL     : The URL to Ask Anna
     * @param inOptions : Optional settings to override default. Used as {"width": 200,"height": 300} etc
     * 
     */
    askAnna : function (inURL, inOptions) {
        var thisOptions, thisOptionString;
        //Track the opening of Anna
        irwStatAskAnnaOpen();
        //Should new Anna be used?
        if (com.ikea.irw.askAnna.Settings.active === true) {
            if (com.ikea.irw.askAnna.anna !== undefined) {
                com.ikea.irw.askAnna.anna.open();
            } else {
                DI.LoadAnna();
                DI.StartAnna("anna" + com.ikea.irw.askAnna.Settings.reference, com.ikea.irw.askAnna.Settings.default_locale, function() {});
            }
        } else {
            //Set default variables
            thisOptions = {
                name: 'ask_anna_window',
                height: 600,
                width: 242,
                scrollbars: 0,
                location: 0,
                menubar: 0,
                resizable: 1,
                status: 0,
                titlebar: 0,
                toolbar: 0
            };
            //Allow override of default variables
            Object.extend(thisOptions, inOptions || {});
            thisOptionString = '';
            thisOptionString = thisOptionString.concat('height=', thisOptions.height, ',width=', thisOptions.width, ',scrollbars=', thisOptions.scrollbars, ',location=', thisOptions.location, ',menubar=', thisOptions.menubar, ',resizable=', thisOptions.resizable, ',status=', thisOptions.status, ',titlebar=', thisOptions.titlebar, ',toolbar=', thisOptions.toolbar);
            window.open(inURL, thisOptions.name, thisOptionString);
        }
    }
};
/**
* document.observe() -> void
* - 
* 
* Activates Litebox links with Unobtrusive Javascript
**/
document.observe('dom:loaded', function () {
    "use strict";
    $A($$('a.liteboxfileLink')).each(function (item) { // Used in <a>
        item.setStyle({
            visibility: 'visible'
        });
        item.observe('click', function (ev) {
            var lb = new parent.LiteboxFile({id: 'liteboxId', LbFile: item.readAttribute('href')});
            Event.stop(ev);
        });
    });
    
    $A($$('.liteboxfileImgLink')).each(function (item) { // Used in <span>
        var itemA;
        itemA = item.up();
        itemA.writeAttribute("href", "");
        itemA.observe('click', function (e) {
            var lb = new parent.LiteboxFile({id: 'liteboxId', LbFile: item.innerHTML});
            Event.stop(e);
        });
    });
});/*global $,window */

/**
 * This function is used to get litebox-content from the servlet view
 * that handles it.
 */

function getLiteBox() {
	"use strict";
	var distrOrderIdInputFormErrorTierDiv = $('distrOrderIdInputFormErrorTier'); 

	if(""+distrOrderIdInputFormErrorTierDiv != "null"){
		distrOrderIdInputFormErrorTierDiv.style.display='none';
	}

	var langId = $('langId').value,
		storeId = $('storeId').value,
		distrOrderId = $('distrOrderIdInputForm_distrOrderId').value,
		additionalIdentifier = $('distrOrderIdInputForm_additionalIdentifier').value,
		getOrderUrl;
		
	$('liteBoxFrame').toggle();
	
	getOrderUrl = Object.toQueryString({langId: langId, storeId: storeId, distrOrderId: distrOrderId, additionalIdentifier: additionalIdentifier});
	
	$('liteBoxFrame').innerHTML = '<iframe id="distrOrderIfrm" class="distrOrderIfrm" width="320" height="300" scrolling="no" frameBorder="0" src="/webapp/wcs/stores/servlet/IrwGetDistrOrderDetails?' + getOrderUrl + '"></iframe>';
}
/**
 * Make the litebox popout and disappear
 */

function toggleLiteBox() {
	"use strict";
	getLiteBox();
}

function liteBoxOff() {
	"use strict";
	window.parent.document.getElementById('liteBoxFrame').style.display = 'none';
}

/**
 * New litebox for Gift Cards
 * Using the same functionality as for enter your e-mail
 */

function getRegisterGiftCardsLiteBox() {
	"use strict";
	var langId = $('langId').value,
		storeId = $('storeId').value,
		orderId = $('orderId').value,
		giftCard1 = $('giftCard1').value,
		giftCard2 = $('giftCard2').value,
		giftCard3 = $('giftCard3').value,
		giftCard4 = $('giftCard4').value,
		getOrderUrl;
		
	$('liteBoxFrame').toggle();
	
	getOrderUrl = Object.toQueryString({langId: langId, storeId: storeId, orderId: orderId, giftCard1: giftCard1, giftCard2: giftCard2, giftCard3: giftCard3, giftCard4: giftCard4});
	
	$('liteBoxFrame').innerHTML = '<iframe id="registerGiftCardsIfrm" width="320" height="340" scrolling="no" frameBorder="0" src="/webapp/wcs/stores/servlet/IrwGiftCardView?' + getOrderUrl + '"></iframe>';
}
/**
 * Make the litebox popout
 */

function toggleRegisterGiftCardsLiteBox() {
	"use strict";
	getRegisterGiftCardsLiteBox();
}

/**
 * Close the litebox and return to parent
 */
function registerGiftCardsLiteBoxOff() {
	"use strict";
	window.parent.document.getElementById('liteBoxFrame').style.display = 'none';
}
/**
 * com.ikea.irw.flash.flashHtml - has been used to handle mouse over text on flashHTML
 * JSLint Predefined: Class, $, $$, Ajax, Template, AjaxRequestObject, Iows, Effect, Tooltip, document, Pintip, Element, Hash, Event,  irwstats_locale, prevTitleTxt, nextTitleTxt, nextImageTitle, prevImageTitle, com
 **/
com.ikea.irw.flash.flashHtml = {};

com.ikea.irw.flash.flashHtml.mouseOverText = function () {
    var productHash = new Hash(), prodDetails = new Hash(), partNums = [];
    return {
        init : function () {
            this.createNavigationTooltip();
            if ($('thumbNailsContainer') !== null) {                
                this.createProductsDetails();                
            }
            if ($('scrollToProducts') !== null) {
                this.scrollToProducts();
            }
            this.iowsProductCall();
        },
        scrollToProducts : function () {
            $('scrollToProducts').down().href = "javascript:void(0);";
            $('scrollToProducts').observe("click", function (pEvent) {
                Effect.ScrollTo('productsTable'); 
                return false;
            });            
        },
        iowsProductCall : function () {
            var prodHref, arrLength, prodNo, urlPrefix, prodIowsUrl, ajaxParams, inputParams, countryCode, languageCode;
            countryCode = irwstats_locale.replace(/^[a-z]{2}_/, '').toLowerCase();
            languageCode = irwstats_locale.replace(/_[A-Z]+$/, '');
            urlPrefix = '/' + countryCode + '/' + languageCode + '/';
            $$("#mapname area").each(function (link) {    
                prodHref = link.href.split("/");
                arrLength = prodHref.length;
                prodNo = prodHref[arrLength - 1];
                partNums.push(prodNo);
            });
            prodIowsUrl = urlPrefix + "catalog/products/" + partNums.toString();
            if (partNums.length !== 0) {
                new Ajax.Request(prodIowsUrl, {
                    method: Iows.method,
                    contentType: Iows.contentType,
                    parameters: {type: Iows.type, dataset: Iows.dataset},
                    onSuccess: function (response) {
                        var doc = response.responseXML;
                        this.populateMPAData(doc);
                    }.bind(this)
                });    
            }
        },
        populateMPAData : function (doc) {    
            var product, itemDetails, itemNode, itemImages, small, thumb, normal, pricesNode, prices, unitPricePrimary, priceNormalNode, priceNormalPerUnitNode, priceFamNormalNode, i, productNodeList, productNodeListCount;
            productNodeList = doc.getElementsByTagName('product');
            productNodeListCount = productNodeList.length;
            for (i = 0; i < productNodeListCount; i += 1) {
                
                product = productNodeList[i];
                itemDetails = {};
                itemNode = product.getElementsByTagName('item')[0];
                
                itemDetails.partNumber = Iows.getNodeVal(itemNode, 'partNumber');
                itemDetails.name = Iows.getNodeVal(itemNode, 'name'); 
                itemDetails.type = Iows.getNodeVal(itemNode, 'type'); 
                
                itemImages = itemNode.getElementsByTagName('images')[0];
                itemDetails.images = {};
                small = itemImages.getElementsByTagName('small')[0];
                itemDetails.images.small = [];
                itemDetails.images.small = Iows.getNodeVal(small, 'image');
                thumb = itemImages.getElementsByTagName('thumb')[0];
                itemDetails.images.thumb = [];
                itemDetails.images.thumb = Iows.getNodeVal(thumb, 'image');                
                normal = itemImages.getElementsByTagName('normal')[0];
                itemDetails.images.normal = [];
                itemDetails.images.normal = Iows.getNodeVal(normal, 'image');    
                
                pricesNode = product.getElementsByTagName("prices")[0];
                itemNode = product.getElementsByTagName("item")[0];
                prices = Iows.getPrices(product);
                itemDetails.prices = {"normal": {"priceNormal": {}, "priceNormalPerUnit": {}}};
                itemDetails.prices.isUnitPricePrimary = false;
                unitPricePrimary = pricesNode.getAttribute("unitPricePrimary"); 
                if (unitPricePrimary !== undefined && unitPricePrimary === "true") {
                    itemDetails.prices.isUnitPricePrimary = true;
                }
                priceNormalNode = pricesNode.getElementsByTagName('normal')[0].getElementsByTagName('priceNormal')[0];
                priceNormalPerUnitNode = pricesNode.getElementsByTagName('normal')[0].getElementsByTagName('priceNormalPerUnit')[0];
                priceFamNormalNode = pricesNode.getElementsByTagName('family-normal')[0].getElementsByTagName('priceNormal')[0];
                itemDetails.prices.normal.priceNormal.value = priceNormalNode.firstChild.nodeValue;
                if (itemDetails.prices.isUnitPricePrimary) {
                    itemDetails.prices.normal.priceNormalPerUnit.value = priceNormalPerUnitNode.firstChild.nodeValue;
                    itemDetails.prices.normal.priceNormalPerUnit.unit = priceNormalPerUnitNode.getAttribute('unit');
                    itemDetails.prices.usesUnitPriceMeasure = true;
                } else {
                    itemDetails.prices.normal.priceNormal.perUnit = priceNormalNode.getAttribute('perUnit');
                }    
                prodDetails.set(itemDetails.partNumber, itemDetails);
            }
            this.bindEventsImageMap();
        },        
        createNavigationTooltip : function () {
            var content;
            if ($('flashcontent_used').down('.previous') !== undefined) {
                $('flashcontent_used').down('.mainImage').insert(new Element('div', {'id': 'prevAnimContainer', 'class': 'prevAnimContainer'}));
                $('prevAnimContainer').insert(new Element('div', {'class': 'htmlContent'}));        
                content = this.navigationTemplate('previous');            
                $('prevAnimContainer').down('.htmlContent').update(content);
            }
            if ($('flashcontent_used').down('.next') !== undefined) {
                $('flashcontent_used').down('.mainImage').insert(new Element('div', {'id': 'nextAnimContainer', 'class': 'nextAnimContainer'}));
                $('nextAnimContainer').insert(new Element('div', {'class': 'htmlContent'}));
                content = this.navigationTemplate('next');            
                $('nextAnimContainer').down('.htmlContent').update(content);    
            }
            this.bindEventsNavigation();
        },
        bindEventsNavigation : function () {
            if ($('flashcontent_used').down('.previous') !== undefined) {
                Event.observe($('flashcontent_used').down('.previous'), 'mouseover', function (event) {        
                    new Effect.Morph('prevAnimContainer', { style: 'width:220px;',  duration: 0.3});
                });
                Event.observe($('flashcontent_used').down('.previous'), 'mouseout', function (event) {
                    new Effect.Morph('prevAnimContainer', { style: 'width:40px;',  duration: 0.3});
                });
            }
            if ($('flashcontent_used').down('.next') !== undefined) {
                Event.observe($('flashcontent_used').down('.next'), 'mouseover', function (event) {
                    new Effect.Morph('nextAnimContainer', { style: 'width:220px;',  duration: 0.3});                
                });
                Event.observe($('flashcontent_used').down('.next'), 'mouseout', function (event) {
                    new Effect.Morph('nextAnimContainer', { style: 'width:40px;',  duration: 0.3});
                });
            }
        },
        navigationTemplate : function (navTitle) {
            var navDetails, navTemplate;
            navDetails = {};
            if (navTitle === 'next') {
                if (nextTitleTxt === "") {    
                    nextTitleTxt = "Next room detail:";
                }
                navDetails.roomHeadline = nextTitleTxt;
                navDetails.roomName = nextImageTitle;
                $('flashcontent_used').down('.next').title = "";
            } else {
                if (prevTitleTxt === "") {    
                    prevTitleTxt = "Previous room detail:";
                }
                navDetails.roomHeadline = prevTitleTxt;
                navDetails.roomName = prevImageTitle;
                $('flashcontent_used').down('.previous').title = "";
            }
            navTemplate = new Template('<div class="outerContainer">' +
                    '<div class="textBlock">' +
                        '<div class="navHeadline"> #{roomHeadline} </div>' +    
                        '<div class="navRoomTittle"> #{roomName} </div>' +
                    '</div>' +
                '</div>' +
                '<div class="rightEdge"></div>');                                       
            return navTemplate.evaluate(navDetails);    
        },
        createProductsDetails : function () {
            var i, prodDetails, prodIndex;
            i = 1;
            $$('#productsTable a').find(function (element) { 
                prodDetails = {};
                prodDetails.imageName = element.down('.prodImg').src;
                prodDetails.prodName = element.down('.prodName').innerHTML;
                prodDetails.prodType = element.down('.prodDesc').innerHTML;
                prodDetails.prodPrice = element.down('.prodPrice').innerHTML;
                prodDetails.href = element.href;
                prodIndex = "prodIndex" + i;
                productHash.set(prodIndex, prodDetails);  
                i += 1;                                            
            });
            this.createMiniatureProducts();
        },
        createMiniatureProducts : function () {
            var i, hashIndex, prod, prodTemplate, popupContent, thumpId;
            i = 1;
            prodTemplate = new Template('<div class="bottomArrow">&nbsp;</div><div class="productContainer">' +
                    '<div><img class="popupImg" src="#{imageName}"/> </div>' +
                    '<div id="prodName" class="prodName"> #{prodName} </div>' +    
                    '<div id="prodDesc" class="prodDesc"> #{prodType} </div>' +    
                    '<div id="prodPrice" class="prodPrice"> #{prodPrice} </div>' +                    
                '</div>');             
            productHash.each(function (pair) {
                hashIndex = "prodIndex" + i;
                prod = productHash.get(hashIndex);
                $('thumbNailsContainer').insert(new Element('div', {'class': 'thumbBorder'}));
                var aHrf = new Element('a', {href: prod.href});
                aHrf.insert({top: new Element('img', {src: prod.imageName})});   
                thumpId = $('thumbNailsContainer').childElements().last();
                thumpId.insert(aHrf);
                popupContent = prodTemplate.evaluate(prod);                
                new Pintip(thumpId, {id : 'miniaturePopup', content: popupContent, maxWidth: '139', pinY: 'top', align: 'top'});                
                i += 1;
            });
            this.mouseOverMiniatureProd();
        },
        mouseOverMiniatureProd : function () {
            $$("#thumbNailsContainer .thumbBorder img").each(function (link) {              
                link.observe('mouseenter', function (evt) {        
                    link.addClassName('opacityImg');                
                });
                link.observe('mouseout', function (evt) {
                    link.removeClassName('opacityImg');
                });
            });        
        },
        bindEventsImageMap : function () {            
            var prodNo, toolTipTemplate, toolTipContent, arrLength, prodHref;
            toolTipTemplate = new Template('<div id="imageMapToolTip">' +
                '<div id="prodName" class="prodName">#{name} </div>' +
                '<div id="prodDesc" class="prodDesc"> #{type} </div>' +
                '<div id="prodPrice" class="prodPrice"> #{prices.normal.priceNormal.value} </div>' +           
                '</div>');    
            $$("#mapname area").each(function (link) {                
                prodHref = link.href.split("/");
                arrLength = prodHref.length;
                prodNo = prodHref[arrLength - 1];        
                prodDetails.each(function (pair) {
                    var prodIndex = prodDetails.get(prodNo);
                    if (prodIndex) {
                        if (prodIndex.partNumber === prodNo) {
                            toolTipContent = toolTipTemplate.evaluate(prodIndex);    
                            new Tooltip(link, {maxWidth: '639', flashHtml: 'true', content: "<div class=\"mapToolTip\">" + toolTipContent + "</div>"});
                        }
                    } 
                });
               
            });        
        }
    };
}();

document.observe('dom:loaded', function (event) {    
    if ($('flashcontent_used') !== null && $('flashcontent_used').down('.flashHtml') !== null) {
        var enableElement = false;
        com.ikea.irw.flash.flashHtml.mouseOverText.init();
    }
});


    if(!this.JSON){JSON=function(){function f(n){return n<10?'0'+n:n;}
Date.prototype.toJSON=function(){return this.getUTCFullYear()+'-'+
f(this.getUTCMonth()+1)+'-'+
f(this.getUTCDate())+'T'+
f(this.getUTCHours())+':'+
f(this.getUTCMinutes())+':'+
f(this.getUTCSeconds())+'Z';};var m={'\b':'\\b','\t':'\\t','\n':'\\n','\f':'\\f','\r':'\\r','"':'\\"','\\':'\\\\'};function stringify(value,whitelist){var a,i,k,l,r=/["\\\x00-\x1f\x7f-\x9f]/g,v;switch(typeof value){case'string':return r.test(value)?'"'+value.replace(r,function(a){var c=m[a];if(c){return c;}
c=a.charCodeAt();return'\\u00'+Math.floor(c/16).toString(16)+
(c%16).toString(16);})+'"':'"'+value+'"';case'number':return isFinite(value)?String(value):'null';case'boolean':case'null':return String(value);case'object':if(!value){return'null';}
if(typeof value.toJSON==='function'){return stringify(value.toJSON());}
a=[];if(typeof value.length==='number'&&!(value.propertyIsEnumerable('length'))){l=value.length;for(i=0;i<l;i+=1){a.push(stringify(value[i],whitelist)||'null');}
return'['+a.join(',')+']';}
if(whitelist){l=whitelist.length;for(i=0;i<l;i+=1){k=whitelist[i];if(typeof k==='string'){v=stringify(value[k],whitelist);if(v){a.push(stringify(k)+':'+v);}}}}else{for(k in value){if(typeof k==='string'){v=stringify(value[k],whitelist);if(v){a.push(stringify(k)+':'+v);}}}}
return'{'+a.join(',')+'}';}}
return{stringify:stringify,parse:function(text,filter){var j;function walk(k,v){var i,n;if(v&&typeof v==='object'){for(i in v){if(Object.prototype.hasOwnProperty.apply(v,[i])){n=walk(i,v[i]);if(n!==undefined){v[i]=n;}}}}
return filter(k,v);}
if(/^[\],:{}\s]*$/.test(text.replace(/\\./g,'@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,']').replace(/(?:^|:|,)(?:\s*\[)+/g,''))){j=eval('('+text+')');return typeof filter==='function'?walk('',j):j;}
throw new SyntaxError('parseJSON');}};}();}Prototype.cookie = function (key, value, options) {

    // key and at least value given, set cookie...
    if (arguments.length > 1 && String(value) !== "[object Object]") {
        options = Object.extend({}, options);

        if (value === null || value === undefined) {
            options.expires = -1;
        }

        if (typeof options.expires === 'number') {
            var days = options.expires, t = options.expires = new Date();
            t.setDate(t.getDate() + days);
        }

        value = String(value);

        return (document.cookie = [
            encodeURIComponent(key), '=',
            options.raw ? value : encodeURIComponent(value),
            options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
            options.path ? '; path=' + options.path : '',
            options.domain ? '; domain=' + options.domain : '',
            options.secure ? '; secure' : ''
        ].join(''));
    }

    // key and possibly options given, get cookie...
    options = value || {};
    var result, decode = options.raw ? function (s) { return s; } : decodeURIComponent;
    return (result = new RegExp('(?:^|; )' + encodeURIComponent(key) + '=([^;]*)').exec(document.cookie)) ? decode(result[1]) : null;
};// Sprockets:
//= require <sprockets/prototype>
//= require "jstorageasol.js"

// Mark the following objects as defined in www.jslint.com check:
// DI, window, self, $, $$, $F, Prototype, Hash, PeriodicalExecuter, Form, Element, Effect, Class, Draggable, Event, ActiveXObject, SWFObject, com
// XMLSerializer, DOMParser, window, ActiveXObject, Prototype
/*jslint browser: true, sloppy: true, maxerr: 50, indent: 4 */
/*global window: false, XMLSerializer: false, DOMParser: false, ActiveXObject: false, Prototype: false */
"use strict"; // JSLint pragma


(function ($) {
    var storage, storage_service, storage_size, json_encode, json_decode, backend, XMLService;

    if (!$ || !($.toJSON || Object.toJSON || window.JSON)) {
        throw new Error("Prototype needs to be loaded before jStorageAsol!");
    }

    /* This is the object, that holds the cached values */
    storage = {};
    /* Actual browser storage (localStorage or globalStorage['domain']) */
    storage_service = {
        jStorageAsol: "{}"
    };
    /* DOM element for older IE versions, holds userData behavior */
    //_storage_elm = null
    /* How much space does the storage take */
    storage_size = 0;
    /* function to encode objects to JSON strings */
    json_encode = $.toJSON || Object.toJSON || (window.JSON && (JSON.encode || JSON.stringify));
    /* function to decode objects from JSON strings */
    json_decode = $.evalJSON || (window.JSON && (JSON.decode || JSON.parse)) || function (str) {
        return String(str).evalJSON();
    };
    /* which backend is currently used */
    backend = false;

    /**
         * XML encoding and decoding as XML nodes can't be JSON'ized
         * XML nodes are encoded and decoded if the node is the value to be saved
         * but not if it's as a property of another object
         * Eg. -
         *   $.jStorageAsol.set("key", xmlNode);        // IS OK
         *   $.jStorageAsol.set("key", {xml: xmlNode}); // NOT OK
         */
    XMLService = {

        /**
             * Validates a XML node to be XML
             * based on jQuery.isXML function
             */
        isXML: function (elm) {
            var documentElement = (elm ? elm.ownerDocument || elm : 0).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false;
        },

        /**
             * Encodes a XML node to string
             * based on http://www.mercurytide.co.uk/news/article/issues-when-working-ajax/
             */
        encode: function (xmlNode) {
            if (!this.isXML(xmlNode)) {
                return false;
            }
            try {
                // Mozilla, Webkit, Opera
                return new XMLSerializer().serializeToString(xmlNode);
            } catch (E1) {
                try {
                    // IE
                    return xmlNode.xml;
                } catch (E2) {}
            }
            return false;
        },

        /**
             * Decodes a XML node from string
             * loosely based on http://outwestmedia.com/jquery-plugins/xmldom/
             */
        decode: function (xmlString) {
            var dom_parser = (window.DOMParser && (new DOMParser()).parseFromString) ||
                    (window.ActiveXObject && function (xmlString) {
                        var xml_doc = new ActiveXObject('Microsoft.XMLDOM');
                        xml_doc.async = 'false';
                        xml_doc.loadXML(xmlString);
                        return xml_doc;
                    }),
                resultXML;
            if (!dom_parser) {
                return false;
            }
            resultXML = dom_parser.call((window.DOMParser && (new DOMParser())) || window, xmlString, 'text/xml');
            return this.isXML(resultXML) ? resultXML : false;
        }
    };

    ////////////////////////// PRIVATE METHODS ////////////////////////

    function getCookie() {
        return Prototype.cookie("jstorageasol");
    }

    /**
     * Loads the data from the storage based on the supported mechanism
     * @returns undefined
     */
    function load_storage() {
        /* if jStorageAsol string is retrieved, then decode it */
        if (storage_service.jStorageAsol) {
            try {
                storage = json_decode(String(storage_service.jStorageAsol));
            } catch (E6) {
                storage_service.jStorageAsol = "{}";
            }
        } else {
            storage_service.jStorageAsol = "{}";
        }
        storage_size = storage_service.jStorageAsol ? String(storage_service.jStorageAsol).length : 0;
    }

    /**
     * Initialization function. Detects if the browser supports DOM Storage
     * or userData behavior and behaves accordingly.
     * @returns undefined
     */
    function init() {
        /* Check if browser supports localStorage */
        try {
            if (window.localStorage) {
                storage_service = window.localStorage;
                backend = "localStorage";
            }
        } catch (E3) {
            /* Firefox fails when touching localStorage and cookies are disabled */
        }
        /* Check if browser supports globalStorage */
        if (!backend) {
            try {
                if (window.globalStorage) {
                    storage_service = window.globalStorage[window.location.hostname];
                    backend = "globalStorage";
                }
            } catch (E4) {
                /* Firefox fails when touching localStorage and cookies are disabled */
            }
        }
        if (!backend) {
            storage_service.jStorageAsol = getCookie();
            backend = "cookie";
        }
        load_storage();
    }

    /**
     * This functions provides the "save" mechanism to store the jStorageAsol object
     * @returns undefined
     */
    function save() {
        var val;
        try {
            storage_service.jStorageAsol = json_encode(storage);
            // If userData is used as the storage engine, additional

            if (backend === "cookie") {
                val = storage_service.jStorageAsol;
                Prototype.cookie("jstorageasol", val, {
                    path: "/"
                });
                if(Prototype.cookie("jstorageasol") !== val) {
                    return false;
                }
            }
            storage_size = storage_service.jStorageAsol ? String(storage_service.jStorageAsol).length : 0;
        } catch (E7) {
            /* probably cache is full or storage is disabled, nothing is saved this way*/
            return false;
        }
        return true;
    }

    /**
     * Function checks if a key is set and is string or numberic
     */
    function checkKey(key) {
        if (!key || (typeof key !== "string" && typeof key !== "number")) {
            throw new TypeError('Key name must be string or numeric');
        }
        return true;
    }

    ////////////////////////// PUBLIC INTERFACE /////////////////////////

    $.jStorageAsol = {
        /* Version number */
        version: "0.1.5.0",

        /**
         * Sets a key's value.
         *
         * @param {String} key - Key to set. If this value is not set or not
         *              a string an exception is raised.
         * @param value - Value to set. This can be any value that is JSON
         *              compatible (Numbers, Strings, Objects etc.).
         * @returns true if set successfully, otherwise false.
         */
        set: function (key, value) {
            checkKey(key);
            if (XMLService.isXML(value)) {
                value = {
                    is_xml : true,
                    xml : XMLService.encode(value)
                };
            }
            storage[key] = value;
            return save();
        },

        /**
         * Looks up a key in cache
         *
         * @param {String} key - Key to look up.
         * @param {mixed} def - Default value to return, if key didn't exist.
         * @returns the key value, default value or <null>
         */
        get: function (key, def) {
            checkKey(key);
            if (storage.hasOwnProperty(key)) {
                if (typeof storage[key] === "object" && storage[key].is_xml) {
                    return XMLService.decode(storage[key].xml);
                } else {
                    return storage[key];
                }
            }
            return (typeof def === 'undefined') ? null : def;
        },

        /**
         * Deletes a key from cache.
         *
         * @param {String} key - Key to delete.
         * @returns true if key existed or false if it didn't
         */
        deleteKey: function (key) {
            checkKey(key);
            if (storage.hasOwnProperty(key)) {
                delete storage[key];
                save();
                return true;
            }
            return false;
        },

        /**
         * Deletes everything in cache.
         *
         * @returns true
         */
        flush: function () {
            storage = {};
            save();
            /*
             * Just to be sure - andris9/jStorageAsol#3
             */
            try {
                window.localStorage.clear();
            } catch (E8) {}
            return true;
        },

        /**
         * Returns a read-only copy of storage
         *
         * @returns Object
        */
        storageObj: function () {
            function F() {}
            F.prototype = storage;
            return new F();
        },

        /**
         * Returns an index of all used keys as an array
         * ['key1', 'key2',..'keyN']
         *
         * @returns Array
        */
        index: function () {
            var index = [], i;
            for (i in storage) {
                if (storage.hasOwnProperty(i)) {
                    index.push(i);
                }
            }
            return index;
        },

        /**
         * How much space in bytes does the storage take?
         *
         * @returns Number
         */
        storageSize: function () {
            return storage_size;
        },

        /**
         * Which backend is currently in use?
         *
         * @returns String
         */
        currentBackend: function () {
            return backend;
        },

        /**
         * Test if storage is available
         *
         * @returns Boolean
         */
        storageAvailable: function () {
            return !!backend;
        },

        /**
         * Reloads the data from browser storage
         *
         * @returns undefined
         */
        reInit: function () {
            //var new_storage_elm, data;
            if (backend === "cookie") {
                storage_service.jStorageAsol = getCookie();
            }
            load_storage();
        }
    };

    // Initialize jStorageAsol
    init();

}(window.$));
/**
 * Defines the DI application namespace and common/util functionality.
 *
 * @version $Id: di.js 370 2010-05-07 15:09:57Z tomas.nord $
 */

// JSLint: "The Good Parts" options plus assume Rhino
/*jslint browser: true, sloppy: true, maxerr: 50, indent: 4 */
/*global alert: false, DI: true, jQuery: false, window: true, addEventListener: false, blur: false, clearInterval: false, clearTimeout: false, close: false, closed: false, defaultStatus: false, document: false, event: false, focus: false, frames: false, getComputedStyle: false, history: false, Image: false, length: false, location: false, moveBy: false, moveTo: false, name: false, navigator: false, onblur: true, onerror: true, onfocus: true, onload: true, onresize: true, onunload: true, open: false, opener: false, Option: false, parent: false, print: false, resizeBy: false, resizeTo: false, screen: false, scroll: false, scrollBy: false, scrollTo: false, setInterval: false, setTimeout: false, status: false, top: false, XMLHttpRequest: false */
"use strict"; // JSLint pragma
/* Namespace used by Dynamic Interface to avoid cluttering the global namespace */
var DI = {
    /* Version number */
    version: "12.03.09",
    
    initialState: {},
    /* Common base prototype */
    basePrototype: {},

    /* Prototypal inheritance constructor, somewhat modified from "the Good Parts" */
    create: function (inherit) {
        var F = function () {};
        F.prototype = inherit;
        return new F();
    },
    supportedBrowsers : {
        Chrome		: 11,
        OmniWeb		: -1,
        Safari		: 5,
        Opera		: 11,
        iCab		: -1,
        Konqueror       : -1,
        Firefox		: 3,
        Camino		: -1,
        Netscape        : -1,
        Explorer        : 7,
        Mozilla		: 3
    },
    BrowserDetect : {
        init: function () {
            this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
            this.version = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || "an unknown version";
            this.OS = this.searchString(this.dataOS) || "an unknown OS";
        },
        searchString: function (data) {
            var dataString, dataProp, i;

            for (i = 0; i < data.length; i += 1) {
                dataString = data[i].string;
                dataProp = data[i].prop;
                this.versionSearchString = data[i].versionSearch || data[i].identity;
                if (dataString) {
                    if (dataString.indexOf(data[i].subString) !== -1) {
                        return data[i].identity;
                    }
                } else {
                    if (dataProp) {
                        return data[i].identity;
                    }
                }
            }
            return null;
        },
        searchVersion: function (dataString) {
            var index = dataString.indexOf(this.versionSearchString);
            if (index !== -1) {
                return parseFloat(dataString.substring(index + this.versionSearchString.length + 1));
            }
            return null;
        },
        dataBrowser : [
            {
                string: navigator.userAgent,
                subString: "Chrome",
                identity: "Chrome"
            },
            {
                string: navigator.userAgent,
                subString: "OmniWeb",
                versionSearch: "OmniWeb/",
                identity: "OmniWeb"
            },
            {
                string: navigator.vendor,
                subString: "Apple",
                identity: "Safari",
                versionSearch: "Version"
            },
            {
                prop: window.opera,
                identity: "Opera",
                versionSearch: "Version"
            },
            {
                string: navigator.vendor,
                subString: "iCab",
                identity: "iCab"
            },
            {
                string: navigator.vendor,
                subString: "KDE",
                identity: "Konqueror"
            },
            {
                string: navigator.userAgent,
                subString: "Firefox",
                identity: "Firefox"
            },
            {
                string: navigator.vendor,
                subString: "Camino",
                identity: "Camino"
            },
            { // for newer Netscapes (6+)
                string: navigator.userAgent,
                subString: "Netscape",
                identity: "Netscape"
            },
            {
                string: navigator.userAgent,
                subString: "MSIE",
                identity: "Explorer",
                versionSearch: "MSIE"
            },
            {
                string: navigator.userAgent,
                subString: "Gecko",
                identity: "Mozilla",
                versionSearch: "rv"
            },
            { // for older Netscapes (4-)
                string: navigator.userAgent,
                subString: "Mozilla",
                identity: "Netscape",
                versionSearch: "Mozilla"
            }
        ],
        dataOS : [
            {
                string: navigator.platform,
                subString: "Win",
                identity: "Windows"
            },
            {
                string: navigator.platform,
                subString: "Mac",
                identity: "Mac"
            },
            {
                string: navigator.userAgent,
                subString: "iPhone",
                identity: "iPhone/iPod"
            },
            {
                string: navigator.platform,
                subString: "Linux",
                identity: "Linux"
            }
        ]
    }
};
// Sprockets:
//= require <sprockets/prototype>
//= require "di.js"

/**
 * DI Extended View module
 *
 * @version jQueryId: di_extendedview.js 416 2010-12-21 10:48:39Z dan.trott jQuery
 */

// JSLint: "The Good Parts" options plus assume browser and Rhino
/*jslint browser: true, sloppy: true, maxerr: 50, indent: 4 */
/*global DI: true, jQuery: false, window: false */
"use strict"; // JSLint pragma

//TODO: remove debugging stuff
/*global alert: false */


DI.Extensions = {};
(function () {
    var Library = function () {
        var extensions = {};
        this.add = function (name, extension, overwrite) {
            if (overwrite || (extensions[name] === null || typeof (extensions[name]) === 'undefined')) {
                extensions[name] = extension;
            }
        };

        this.get = function (name) {
            try {
                return new extensions[name]();
            } catch (exception) {
                alert("Error creating extension '" + name + "': " + exception);
            }
        };
    };

    DI.Extensions.Library = new Library();

    DI.Extensions.add = function (name, extension, overwrite) {
        DI.Extensions.Library.add(name, extension, overwrite);
    };

    DI.Extensions.get = function (name) {
        return DI.Extensions.Library.get(name);
    };
}());
//
////context: The context ('this') that will be passed to each extension - most
//likely the DI.UI object.
//extensionObjects: An array of extension objects.
//extensionLibrary: The extension library used to retrieve extensions
//referenced by name.
DI.Extension = function (info, context, extensionObjects) {
    var extensions = {}, controllers = [];

    function getController(funcIndices, extensionObject) {
        var added = true,
            emptyFunction = function () {
                //Convert arguments to an array.
                var args = Array.prototype.slice.call(arguments);
                //Pop the callback function from the end of the args and apply the
                //context and remaining arguments.
                args.pop().apply(context, args);
            },
            controller = {
                remove: function () {
                    if (added) {
                        var funcName;
                        //Replace extension functions related to this extension
                        //with blank functions that just pass the arguments onward.
                        for (funcName in funcIndices) {
                            if (funcIndices.hasOwnProperty(funcName)) {
                                extensions[funcName][funcIndices[funcName]] = emptyFunction;
                            }
                        }
                        //If the extension defines an onRemoved callback: call it.
                        if (extensionObject.onRemoved) {
                            extensionObject.onRemoved.call(context);
                        }
                        added = false;
                    }
                },

                add: function () {
                    if (!added) {
                        var funcName;
                        //Add extension functions related to this extension into the function arrays.
                        for (funcName in funcIndices) {
                            if (funcIndices.hasOwnProperty(funcName)) {
                                extensions[funcName][funcIndices[funcName]] = extensionObject[funcName];
                            }
                        }
                        //If the extension defines an onAdded callback: call it.
                        if (extensionObject.onAdded) {
                            extensionObject.onAdded.call(context);
                        }
                    }
                    added = true;
                },

                isAdded: function () {
                    return added;
                }
            };

        controllers.push(controller);

        return controller;
    }

    function loadExtension(extensionObject) {
        var funcName, funcIndices = {};

        //If the argument is a string, lookup the extension object from the
        //extension library.
        if (typeof (extensionObject) === 'string') {
            extensionObject = DI.Extensions.Library.get(extensionObject);
        }
        for (funcName in extensionObject) {
            if (extensionObject.hasOwnProperty(funcName)) {
                //Create the array if it doesn't already exist.
                if (!extensions[funcName]) {
                    extensions[funcName] = [];
                }
                //Push the function on to the array.
                extensions[funcName].push(extensionObject[funcName]);
                funcIndices[funcName] = extensions[funcName].length - 1;
            }
        }

        return getController(funcIndices, extensionObject);
    }

    // Creates an iterator function with it's own context
    // that will recursively call each of the named extension
    // functions, passing itself as a callback. Once all extension functions
    // have been called, the original function will be called.
    // funcName: The name of the extension functions to be iterated over.
    // func: The original function.
    // args: The arguments from the original function call.
    function runExtensions(funcName, func, args) {
        var index = 0, funcs = extensions[funcName] || [], next;

        next = function () {
            var f, newArgs;
            if (index < funcs.length) {
                //Copying the arguments object as jsLint doesn't approve of modifying it directly.'
                newArgs = arguments;
                //Add the iterator callback to the end of the arguments collection
                newArgs[newArgs.length] = next;
                newArgs.length += 1;
                f = funcs[index];
                index += 1;
                return f.apply(context, newArgs);
            } else {
                return func.apply(context, arguments);
            }
        };

        return next.apply(context, args);
    }

    //Extract the methods from each extension and store in
    //individual function arrays.
    this.loadExtensions = function (extensions) {
        var i;
        for (i = 0; i < extensions.length; i += 1) {
            loadExtension(extensions[i]);
        }
    };

    this.loadExtensions.call(this, extensionObjects);

    //
    //Public Functions
    //

    this.loadExtension = function (extensionObject) {
        var extension = loadExtension(extensionObject);
        if (extensionObject.onAdded) {
            extensionObject.onAdded.call(context, info);
        }
        return extension;
    };

    //Calls the onAdded method of each extension passing in the given
    //extension context.
    this.initialize = function () {
        var inits = extensions.onAdded, i;
        if (inits) {
            for (i = 0; i < inits.length; i += 1) {
                if (inits[i] !== null) {
                    inits[i].call(context, info);
                }
            }
        }
    };


    this.extend = function (funcName, func) {
        return function () {
            return runExtensions(funcName, func, arguments);
        };
    };
};
// Sprockets:
//= require <sprockets/prototype>
//= require "di.js"

/**
 * DI Communication module
 *
 * @version $Id: di_communication.js 367 2010-05-07 14:20:59Z tomas.nord $
 */

// JSLint: "The Good Parts" options plus assume browser and Rhino
/*jslint browser: true, sloppy: true, maxerr: 50, indent: 4 */
/*global DI: true, jQuery: false, Ajax: true, Class: true, window: true, Element: true, Prototype: true */
"use strict"; // JSLint pragma
Ajax.JSONRequest = Class.create(Ajax.Base, (function () {
    var id = 0, head = document.getElementsByTagName('head')[0] || document.body;
    return {
        initialize: function ($super, url, options) {
            $super(options);
            this.options.url = url;
            this.options.callbackParamName = this.options.callbackParamName || 'callback';
            this.options.timeout = this.options.timeout || 6; // Default timeout: 10 seconds
            this.options.invokeImmediately = (!Object.isUndefined(this.options.invokeImmediately)) ? this.options.invokeImmediately : true;

            if (!Object.isUndefined(this.options.parameters) && Object.isString(this.options.parameters)) {
                this.options.parameters = this.options.parameters.toQueryParams();
            }

            if (this.options.invokeImmediately) {
                this.request();
            }
        },

        /**
     *  Ajax.JSONRequest#cleanup() -> undefined
     *  Cleans up after the request
     **/
        cleanup: function () {
            if (this.timeout) {
                clearTimeout(this.timeout);
                this.timeout = null;
            }
            if (this.transport && Object.isElement(this.transport)) {
                this.transport.remove();
                this.transport = null;
            }
        },

        /**
     *  Ajax.JSONRequest#request() -> undefined
     *  Invokes the JSON-P request lifecycle
     **/
        request: function () {

            // Define local vars
            var response = new Ajax.JSONResponse(this), url,
                key = this.options.callbackParamName,
                name = '_prototypeJSONPCallback_' + id, complete;
            id += 1;
            complete = function () {
                if (Object.isFunction(this.options.onComplete)) {
                    this.options.onComplete.call(this, response);
                }
                Ajax.Responders.dispatch('onComplete', this, response);
            }.bind(this);

            // If the callback parameter is already defined, use that
            if (this.options.parameters[key] !== undefined) {
                name = this.options.parameters[key];
            } else {
                // Otherwise, add callback as a parameter
                this.options.parameters[key] = name;
            }

            // Build request URL
            this.options.parameters[key] = name;
            url = this.options.url + ((this.options.url.include('?') ? '&' : '?') + Object.toQueryString(this.options.parameters));

            // Define callback function
            window[name] = function (json) {
                this.cleanup(); // Garbage collection
                window[name] = undefined;

                response.status = 200;
                response.statusText = "OK";
                response.setResponseContent(json);

                if (Object.isFunction(this.options.onSuccess)) {
                    this.options.onSuccess.call(this, response);
                }
                Ajax.Responders.dispatch('onSuccess', this, response);

                complete();

            }.bind(this);

            this.transport = new Element('script', {
                type: 'text/javascript',
                src: url
            });

            this.transport.observe("error", function () {
                this.cleanup();
                if (Object.isFunction(this.options.onFailure)) {
                    response.status = 500;
                    response.statusText = "Error Loading Script";
                    this.options.onFailure.call(this, response);
                }
                complete();
            }.bindAsEventListener(this));

            if (Object.isFunction(this.options.onCreate)) {
                this.options.onCreate.call(this, response);
            }
            Ajax.Responders.dispatch('onCreate', this);

            this.timeout = setTimeout(function () {
                this.cleanup();
                window[name] = Prototype.emptyFunction;
                if (Object.isFunction(this.options.onFailure)) {
                    response.status = 504;
                    response.statusText = "Gateway Timeout";
                    this.options.onFailure.call(this, response);
                }
                complete();
            }.bind(this), this.options.timeout * 1000);
            
            head.appendChild(this.transport);
        },
        toString: function () {
            return "[object Ajax.JSONRequest]";
        }
    };
}()));

Ajax.JSONResponse = Class.create({
    initialize: function (request) {
        this.request = request;
    },
    request: undefined,
    status: 0,
    statusText: '',
    responseJSON: undefined,
    responseText: undefined,
    setResponseContent: function (json) {
        this.responseJSON = json;
        this.responseText = Object.toJSON(json);
    },
    getTransport: function () {
        if (this.request) {
            return this.request.transport;
        }
    },
    toString: function () {
        return "[object Ajax.JSONResponse]";
    }
});

DI.Communication = {
    modes: {
        json: {
            dataType:	'json',
            template:	'STANDARDJSON'
        },
        jsonp: {
            dataType:	'jsonp',
            template:	'STANDARDJSONP'
        }
    },
    fallbackState: {
        mode:		'json',
        serverURL:	'/'
    },
    commands: {
        request:		'request',
        lastRequest:	'last_request',
        logout:		'logout'
    },
    dataPrototype: {
        ARTISOLCMD_TEMPLATE:	'',
        viewtype:				'',
        sessionid:				'',
        userinput:				'',
        command:				'',
        transactionid:			'1',
        currentPageUrl:			''
    },

    addParameters: function (data, parameters) {
        var key;
        if (parameters !== null) {
            for (key in parameters) {
                if (parameters.hasOwnProperty(key)) {
                    if (typeof (data[key]) === "undefined") {
                        if (typeof (parameters[key]) === "function") {
                            data[key] = parameters[key]();
                        } else {
                            data[key] = parameters[key];
                        }
                    }
                }
            }
        }
        return data;
    },

    doCommand: function (command, userInput, extraData, callback, sessionId, communicationState, localData, onFailure) {

        //IF THERE IS NO communicationstate -> return
        if (!communicationState) {
            return;
        }

        var data = DI.create(this.dataPrototype), options, request,
            mode = this.modes[communicationState.mode] || this.modes[this.fallbackState.mode];

        data.ARTISOLCMD_TEMPLATE = mode.template;
        data.viewtype = mode.template;
        data.viewname = mode.template;
        data.sessionid = sessionId;
        data.userinput = userInput;
        data.command = command;
        data.currentPageUrl = document.location.href;

        //Add the extra data that has been sent by the server.
        data = DI.Communication.addParameters(data, extraData);
        //Add the extra data that has been added via the API.
        data = DI.Communication.addParameters(data, localData);
        //Add the extra data that has been added either via config or API to
        //the communication state object.
        data = DI.Communication.addParameters(data, communicationState.extraParameters);
        data.timestamp = new Date().getTime(); //prevent caching

        options = {
            "parameters": data,
            "onSuccess": callback,
            "method": "post"
        };

        if (onFailure !== null && typeof (onFailure) === "function") {
            options.onFailure = onFailure;
        }

        if (mode.dataType === "jsonp") {
            request = new Ajax.JSONRequest(communicationState.serverURL, options);
        } else {
            request = new Ajax.Request(communicationState.serverURL, options);
        }

        return;
    },

    lastRequest: function (communicationState, onSuccess, onFailure, onComplete) {
        var data = DI.create(this.dataPrototype), options, Transport,
            mode = this.modes[communicationState.mode] || this.modes[this.fallbackState.mode];

        data.ARTISOLCMD_TEMPLATE = mode.template;
        data.viewtype = mode.template;
        data.viewname = mode.template;
        data.timestamp = new Date().getTime(); //prevent caching

        options =  {
            "onSuccess": onSuccess,
            "onFailure": onFailure,
            "onComplete": onComplete,
            "method": "post",
            "parameters": data
        };
        
        Transport = mode.dataType === "jsonp" ? Ajax.JSONRequest : Ajax.Request;
        
        return new Transport(communicationState.lastRequestURL, options);
    },

    request : function (userInput, extraData, callback, sessionId, communicationState, localData, onFailure) {
        return this.doCommand(this.commands.request, userInput, extraData, callback, sessionId, communicationState, localData, onFailure);
    },

    logout: function (onSuccess, sessionId, communicationState, localData, onFailure) {
        return this.doCommand(this.commands.logout, '', {}, onSuccess, sessionId, communicationState, localData, onFailure);
    }
};
// Sprockets:
//= require <sprockets/prototype>
//= require <sprockets/jstorageasol>
//= require "di.js"

/**
 * DI State Manager module
 *
 * @version $Id: di_statemanager.js 367 2010-05-07 14:20:59Z tomas.nord $
 */

// JSLint: "The Good Parts" options plus assume browser and Rhino
/*jslint browser: true, sloppy: true, maxerr: 50, indent: 4 */
/*global DI: true, JSON: false, escape: false, unescape: false, Ajax: false, $: false */
"use strict"; // JSLint pragma


DI.DeepClone = function (obj) {
    return DI.DeepCopy(obj, {});
};

DI.DeepCopy = function (src, dest) {
    var prop, i;
    if (typeof src !== "object") {
        return src;
    }
    for (prop in src) {
        if (src.hasOwnProperty(prop)) {
            if (typeof dest[prop] === "object" && typeof src[prop] === "object" && !Object.isElement(src[prop])) {
                if (Object.isArray(src[prop])) {
                    dest[prop] = [];
                    for (i = 0; i < src[prop].length; i += 1) {
                        dest[prop][i] = DI.DeepClone(src[prop][i]);
                    }
                } else {
                    dest[prop] = DI.DeepCopy(DI.DeepClone(src[prop]), DI.DeepClone(dest[prop]));
                }
            } else {
                dest[prop] = src[prop];
            }
        }
    }
    return dest;
};

DI.StateManager = {
    killState: function (name) {
        $.jStorageAsol.deleteKey("di_" + name);
    },
    setState : function (name, state) {
        if (state !== null) {
            //Strip out unecessary parts of the state to reduce size.
            var state_to_store = {
                ui: {
                    position: state.ui.position,
                    responseData: state.ui.responseData,
                    visible: state.ui.visible,
                    max: state.ui.max,
                    resendLastRequest: false,
                    alreadyOpened: state.ui.alreadyOpened
                },
                communication: {
                    serverURL: state.communication.serverURL,
                    lastRequestURL: state.communication.lastRequestURL                        
                }
            },
            stateString;
            if (state.session) {
                state_to_store.session = {
                    id: state.session.id,
                    transaction: state.session.transaction
                };
            }

            stateString = JSON.stringify(state_to_store);
            
            //Try to save the full state
            if (DI.StateManager.tryStore(name, stateString) === false || $.jStorageAsol.currentBackend() === "cookie")
            {
                //Try to save the partial state, last_request will get the last response when we load.
                delete state_to_store.ui.responseData;
                state_to_store.ui.resendLastRequest = true;
                stateString = JSON.stringify(state_to_store);
                
                if (DI.StateManager.tryStore(name, stateString) === false)
                {
                    //Delete the record completely.
                    $.jStorageAsol.deleteKey("di_" + name);
                }
            }
            
        } else {
            DI.StateManager.killState(name);
        }
        return state;
    },
    
    tryStore : function (name, stateString) {
        return $.jStorageAsol.set("di_" + name, stateString);
    },
    
    getState : function (name, fallback_state) {
        var stateString = $.jStorageAsol.get("di_" + name, null),
            state = DI.DeepClone(DI.initialState[name]),
            recursive_fallback,
            fallback_used = false;

        if (stateString !== null && stateString !== '') {
            state = DI.DeepCopy(JSON.parse(stateString), state);
        }

        recursive_fallback = function (augment, fallback) {
            var fallback_key;
            fallback = fallback || {};
            for (fallback_key in fallback) {
                if (fallback.hasOwnProperty(fallback_key)) {
                    if (typeof fallback_key !== 'undefined') {
                        if (augment[fallback_key] === null || typeof augment[fallback_key] === 'undefined') {
                            augment[fallback_key] = fallback[fallback_key];
                            fallback_used = true;
                        } else {
                            if (typeof augment[fallback_key] === 'object' &&
                                    typeof fallback[fallback_key] === 'object') {
                                recursive_fallback(augment[fallback_key], fallback[fallback_key]);
                            }
                        }
                    }
                }
            }
            return;
        };
        recursive_fallback(state, fallback_state);

        if (fallback_used) {
            this.setState(name, state);
        }

        return state;
    }
};
// Sprockets:
//= require <sprockets/jstorageasol>
//= require "di.js"
//= require "di_statemanager.js"
//= require "di_ui.js"
//= require "di_communication.js"

/**
 * DI Session Manager module
 *
 * @version $Id: di_sessionmanager.js 414 2010-05-22 21:33:01Z nicklas.sigurdh $
 */

// JSLint: "The Good Parts" options plus assume Rhino
/*jslint browser: true, sloppy: true, maxerr: 50, indent: 4 */
/*global DI: true, JSON: false, jQuery: false, $: false*/
"use strict"; // JSLint pragma

/*
 * The SessionManager "singleton"
 */

DI.SessionManager = {
    uiLookup : {},

    subStateKeys: {
        ui: 'ui',
        communication: 'communication',
        session: 'session',
        configPath: 'configPath'
    },

    sessionPrototype: DI.create(DI.basePrototype),

    /*
     * Gets or creates the session associated with the name
     */
    getSession : function (name, fallback_ui_state) {
        if (DI.SessionManager.uiLookup[name]) {
            return DI.SessionManager.uiLookup[name];
        } else {
            var session = DI.create(this.sessionPrototype),
                //TODO: Declare or deduct these somewhere nice...
                state,
                fallback_state = {},
                lastUserInput = '', // keep out of state to avoid huge and/or sensitive strings in cookies
                createCallbackWrapper;

            fallback_state[this.subStateKeys.configPath] = fallback_ui_state.configPath;
            fallback_state[this.subStateKeys.session] = {};
            fallback_state[this.subStateKeys.communication] = DI.Communication.fallbackState || {};
            fallback_state[this.subStateKeys.ui] = fallback_ui_state || {};

            // Get the state, passing in fallbacks
            state = DI.StateManager.getState(name, fallback_state);

            // Privileged methods
            session.getName = function () {
                return name;
            };
            session.getId = function () {
                if (state[DI.SessionManager.subStateKeys.session]) {
                    return state[DI.SessionManager.subStateKeys.session].id;
                }
                return null;
            };

            session.storageAvailable = function () {
                //if we can retrieve the state, we know we can already retrieve
                //storage.
                if (state !== null) {
                    return true;
                }
                if (!$.jStorageAsol.set("di_testcookie", "test")) {
                    return false;
                }
                var test = $.jStorageAsol.get("di_testcookie");
                $.jStorageAsol.deleteKey("di_testcookie");
                return (test === 'test');
            };

            //depricated? anvÃÂ¤nds denna?
            session.getLastUserInput = function () {
                return lastUserInput;
            };

            /* Gets the UI state */
            session.getState = function () {
                return state[DI.SessionManager.subStateKeys.ui];
            };
            /* Sets the UI state */
            session.setState = function (ui_state) {
                state[DI.SessionManager.subStateKeys.ui] = ui_state;
                return DI.StateManager.setState(name, state);
            };

            /* Helper method that creates uiCallbck wrapper functions */
            createCallbackWrapper = function (uiCallback) {
                var callbackWrapper = function (response) {
                    if (response.responseJSON) {
                        var answer = response.responseJSON, responseSession;
                        if (answer.responseData) {
                            responseSession = answer.responseData.responseSession;
                            if (responseSession) {
                                //update the state in case it has changed since the request began.
                                state = DI.StateManager.getState(name, fallback_state);
                                if (state) {
                                    state[DI.SessionManager.subStateKeys.session].id = responseSession.id;
                                    state[DI.SessionManager.subStateKeys.session].transaction = responseSession.transaction;
                                }
                            }
                            //If the server has specified an applicationUrl to redirect the requests to, update the state.
                            if (answer.responseData.applicationUrl) {
                                state[DI.SessionManager.subStateKeys.communication].serverURL = decodeURIComponent(answer.responseData.applicationUrl);
                            }
                            if (answer.responseData.applicationLastRequestUrl) {
                                state[DI.SessionManager.subStateKeys.communication].lastRequestURL = decodeURIComponent(answer.responseData.applicationLastRequestUrl);                             
                            }
                            DI.StateManager.setState(name, state);
                        }
                        uiCallback(answer.responseData);
                    }
                };
                return callbackWrapper;
            };

            session.request = function (userInput, extraData, uiCallback, localData, onFailure) {
                lastUserInput = userInput;
                DI.Communication.request(userInput, extraData, createCallbackWrapper(uiCallback), this.getId(), state[DI.SessionManager.subStateKeys.communication], localData, onFailure);
                return;
            };

            session.lastRequest = function (onSuccess, onFailure, onComplete) {
                if (typeof state[DI.SessionManager.subStateKeys.session].transaction !== "undefined") {
                    DI.Communication.lastRequest(state[DI.SessionManager.subStateKeys.communication], createCallbackWrapper(onSuccess), onFailure, onComplete);
                }
                else {
                    if (typeof onSuccess === "function") {
                        onSuccess(null);
                    }
                    if (typeof onComplete === "function") {
                        onComplete();  
                    }
                }
            };

            session.doCommand = function (command, userInput, extraData, onSuccess, onFailure) {
                DI.Communication.doCommand(command, userInput, extraData, createCallbackWrapper(onSuccess), this.getId(), state[DI.SessionManager.subStateKeys.communication], {}, onFailure);
            };

            session.close = function (optionalSuccessCallback, optionalFailureCallback) {
                var callback = function () {
                    DI.SessionManager.killSession(name);

                    DI.SessionManager.uiLookup[name] = null;

                    if (typeof this === "function") {
                        this();
                    }
                },
                    success = callback.bind(optionalSuccessCallback),
                    failure = callback.bind(optionalFailureCallback);


                DI.Communication.logout(createCallbackWrapper(success), this.getId(), state[DI.SessionManager.subStateKeys.communication], null, failure);
            };

            session.setLocale = function (locale) {
                var communication = state[DI.SessionManager.subStateKeys.communication], locale_name, locale_url;
                if (communication.serverURLs) {                    
                    locale_url = communication.serverURLs[locale];
                    
                    if (typeof locale_url === "string") {
                        //If the current serverURL is already the selected locale
                        //url, do not change it as we might overwrite the jsessionid.
                        if (!communication.serverURL || communication.serverURL.indexOf(locale_url) !== 0) {
                            communication.serverURL = locale_url;
                        }
                    } else {
                        //Get first server URL from object.
                        for (locale_name in communication.serverURLs) {
                            if (communication.serverURLs.hasOwnProperty(locale_name)) {
                                communication.serverURL = communication.serverURLs[locale_name];
                                break;
                            }
                        }
                    }
                }
            };

            // add to lookup
            this.uiLookup[name] = session;

            return session;

        }
    },

    /*
     * Kills the session associated with the name
     */
    killSession: function (name) {
        if (this.uiLookup[name]) {
            this.uiLookup[name] = null;
            DI.StateManager.killState(name);
        }
        return;
    }
};
// Sprockets:
//= require <json2>
//= require <sprockets/prototype>
//= require <sprockets/scriptaculous>
//= require "di.js"
//= require "di_sessionmanager.js"
//= require "di_extendedview.js"
//= require "di_extension.js"

/**
 * DI User Interface module
 *
 * @version $Id: di_ui.js 416 2010-05-24 07:41:39Z nicklas.sigurdh $
 */

// JSLint: "The Good Parts" options plus assume browser and Rhino
// Mark the following objects as defined in www.jslint.com check:
// DI, window, $, $$, $F, Prototype, Element, Effect, Class, Draggable, Event, ActiveXObject, SWFObject, com, confirm
/*jslint browser: true, sloppy: true, maxerr: 50, indent: 4 */
/*global DI: false, window: false, $: false, $$: false, $F: false, Prototype: false, Element: false, Effect: false, Class: false, Draggable: false, Event: false, ActiveXObject: false, SWFObject: false, com: false, confirm: false */
"use strict"; // JSLint pragma

//TODO: remove debugging stuff
/*global alert: false */

var MultiDraggable = Class.create(Draggable, {
    initialize: function ($super, element, options) {
        this.handles = null;
        // TODO: 'options' has been added as the 3rd argument.
        // Remove and access it via arguments[2]?
        // var options = arguments[2];

        if (options && options.handles && options.handles.length > 0) {
            options.handle = options.handles.shift();
            this.handles = options.handles;
        }

        $super(element, options);

        if (this.handles) {
            this.handles.each(function (h) {
                Event.observe(h, "mousedown", this.eventMouseDown);
            }, this);
        }
    },

    destroy: function ($super) {
        $super();
        this.handles.each(function (h) {
            Event.stopObserving(h, "mousedown", this.eventMouseDown);
        }, this);
    }
});

DI.UI = function (state_name, options) {

    var cookiesStorageRequiredMessage = com.ikea.irw.askAnna.Translations[options.locale].cookies_storage_required_message,
		userInputSubmittedOnCurrentPage = false,
        getDimensions,
        sendCommandInput,
        sendInput,
        onRequestError,
        getExtraParameter,
        setExtraParameter,
        getExtendedView,
        open,
        close,
        move,
        show,
        hide,
        onSubmit,
        expand,
        collapse,
        showAnswer,
        showEmotion,
        storePosition,
        setState,
        drawAnswer,
        drawLoading,
        drawOutput,
        getYouSaidText,
        showYouSaidArea,
        hideYouSaidArea,
        hasFlash,
        currentEmotion,
        localData,
        extendedViews,
        extension,
        state,
        session,
        container,
        resizeHandler,
        name;
        
    if (!cookiesStorageRequiredMessage) {
        cookiesStorageRequiredMessage = "* Anna requires cookies or local storage to be enabled in order to work.\nPlease activate it and try again.";
    }

    //Set default options where options are undefined.
    (function () {
        var optionsExt = Object.extend({
            root: "", // The context path to the root of the DI web app.
            extensions: [], // The array of DI extensions to be applied to this DI UI instance.
            callback: null
        }, options);

        options = optionsExt;
    }());

    function adjustPositionToElement(element) {
        var dims = $(element).getDimensions(),
            wH = dims.height,
            wW = dims.width,
            cP = $(container).positionedOffset(),
            cDims = getDimensions(container),
            cW = cDims.width,
            cH = cDims.height;

        //document.viewport doesn't seem to work properly in IE7 so...
        if (wH === 0 && wW === 0) {
            wW = document.body.getWidth();
            wH = document.body.getHeight();
        }

        if (cP.left < 0) {
            container.setStyle({"left": 0});
        } else {
            if (wW < cP.left + cW) {
                container.setStyle({"left": wW - cW + "px"});
            }
        }
        if (wH < cP.top + cH) {
            container.setStyle({
                "top": (parseFloat(DI.getStyle(container, "top")) + (wH - (cP.top + cH))) + "px"
            });
        }
        //Always make sure that the top is visible as this is usually where the draggable area is located.
        if (cP.top < 0) {
            container.setStyle({
                "top": (parseFloat(DI.getStyle(container, "top")) - cP.top) + "px"
            });
        }
    }


    function adjustPositionToViewport() {
        if (state.fixed) {
            adjustPositionToElement(document.viewport);
        } else {
            adjustPositionToElement(document.body);
        }
        storePosition();
    }

    //UNEXTENDED FUNCTIONS

    function sendLastRequest(callback) {
        session.lastRequest(function (responseData) {
            showAnswer(responseData);
            callback();
        }, function (t) {
            onRequestError(t);
            callback();
        });
    }


    function getFallbackSession() {
        return {
            fixed : true,
            position : {},
            parentId : 'body',
            max : true,
            visible: false,
            toggleDirection : 'down',
            isDraggable : true,
            avatar : {
                emotionPath : '',
                emotions : {},
                initialEmotion : '',
                fallbackEmotion : '',
                alternate : ''
            },
            redirect : true, //BOOLEAN is the gui going to follow links sent to it?
            responseData : null,
            extensions : [],
            extendedViews : {}
        };
    }

    function loadExtendedViews() {
        var ev = $$("#" + name + " .di_ev"), id;
        ev.each(function (view) {
            id = $(view).readAttribute("id");
            extendedViews[id] = new DI.EV(this, view, state.extendedViews[id]);
        });
    }

    // sends a question to the KB and gets an answer
    // when a responce is recived the showAnswer function is called.
    function request(user_input, session, showAnswer, onFailure) {
        drawLoading();

        //if there is a metadata parameter in the extradata, pass it back to the KB.
        var extraData = state.responseData && state.responseData.extraData.metaData ? state.responseData.extraData.metaData : '';

        session.request(user_input, extraData, showAnswer, localData, onFailure);
    }

    //fail function
    function fail() {
        // send requestt to the BE with fail information
        request("state: " + JSON.stringify(state), session, showAnswer);

        // close the gui
        $(container).fire('di:close');
    }
    
    function displayUnsupportedBrowserMessage() {
        var msg = com.ikea.irw.askAnna.Translations[options.locale].unsupported_browser_message;
        if (!msg) {
            msg = "* Your browser is not supported by Anna and some things may not work correctly.\nPlease update to Internet Explorer 7 or higher or another modern browser.";
        }
        alert(msg);
        return false;
    }
    
    function isBrowserSupported() {
        return DI.supportedBrowsers[DI.BrowserDetect.browser] !== -1 && DI.supportedBrowsers[DI.BrowserDetect.browser] <= DI.BrowserDetect.version;
    }

    //******************************************************************
    // Callbacks from diffrent functions
    //*****************************************************************//

    function onCSSLoaded(layout) {
        var x = {}, el;
        x.memo = x;
        container.update(layout);
        if (state.fixed) {
            // var fixed = new Element("div", { "style": 'position: fixed; top:0; left: 0; width: 0; height:0'});
            el = new Element("div", {
                "style": 'position: fixed; top:0; left: 0; width: 0; height:0',
                "id": 'di_anna_container'
            });
            $(container).insert({
                "after": el
            });
            el.insert(container);
        }

        loadExtendedViews();
        extension.initialize();

        $(container).fire('di:layoutCreated', x);
    }

    //callback from getLayout()
    function createLayout(layout) {
        //load the stylesheet
        onCSSLoaded(layout);
    }

    //callback from layoutCreated event
    function bindActions(container) {
        var form = $(container).select('.di_form')[0], handles = $$(".di_handle"), draggable;
        // if its draggable
        if (state.isDraggable) {
            draggable = new MultiDraggable(container, {
                handles: handles,
                onEnd: function () {
                    var ctr = $(container);
                    adjustPositionToViewport();
                    ctr.fire('di:stopDrag');
                }
            });
        }
        form.observe("submit", onSubmit);
        //ensure that the input element has the correct name attribute.
        form.select('.di_form_input').each(function (element) {
            element.writeAttribute('name', 'question');
        });

        container.select('.di_toggleButton').each(function (element) {
            element.observe("click", function () {
                $(container).fire('di:toggleBody');
            });
        });
        container.select('.di_closeButton').each(function (element) {
            element.observe("click", function () {
                $(container).fire('di:close');
            });
        });
    }


    function convertPxToNumber(x) {
        var n;
        switch (typeof x) {
        case 'string':
            n = x.length - 2;
            return Number(n > 0 && x.substring(n).toLowerCase() === 'px' ? x.substring(0, n) : x);
        case 'number':
            return x;
        }
        return NaN;
    }

    //TODO: load layout -> separate from this file?
    function getLayout() {
        if (com.ikea.irw.askAnna.Layout === '') {
            fail();
            return;
        }
        createLayout(com.ikea.irw.askAnna.Layout);
    }


    //callback from layoutCreated event
    //sett layout to be as it should be.
    this.start = function () {
        var top, left, z, xLeft, xTop, initialPositioner;
        session.setLocale(options.locale);
        if (state.position) {
            if (state.alreadyOpened) {
                z = false;
            }
            else {
                top = convertPxToNumber(state.position.top);
                if (!isFinite(top)) {
                    top = 0;
                }
                left = convertPxToNumber(state.position.left);
                if (!isFinite(left)) {
                    left = 0;
                }
                if (state.initialPositionerId) {
                    initialPositioner = $(state.initialPositionerId);
                } else {
                    initialPositioner = null;
                }
                if (initialPositioner) {
                    z = initialPositioner.cumulativeOffset();
                    xLeft = z.left;
                    xTop = z.top;
                } else {
                    xLeft = NaN;
                    xTop = NaN;
                }
                if (isFinite(xLeft) && isFinite(xTop)) {
                    z = initialPositioner.cumulativeScrollOffset();
                    if (isFinite(z.left) && z.left > 0) {
                        xLeft = (xLeft > z.left) ? xLeft - z.left : 0;
                    }
                    if (isFinite(z.top) && z.top > 0) {
                        xTop = (xTop > z.top) ? xTop - z.top : 0;
                    }
                    z = true;
                } else {
                    z = false;
                }
            }
            if (z) {
                $(container).setStyle({
                    'left' : (left + xLeft).toString() + 'px',
                    'top' : (top + xTop).toString() + 'px'
                });
            } else {
                $(container).setStyle(state.position);
            }
            state.alreadyOpened = true;
            storePosition();
        }

        if (state.visible) {
            show();
        } else {
            hide();
        }

        if (state.max) {
            $(name).removeClassName("di_body_hidden");
            $(name).removeClassName("di_body_hiding");
            container.select('.di_toggle').each(Element.show);
            container.select('.di_toggleShow').each(Element.hide);
            container.select('.di_toggleButton').each(function (element) {
                element.addClassName('minButton');
                element.removeClassName('maxButton');
            });
        } else {
            $(name).addClassName("di_body_hidden");
            $(name).addClassName("di_body_hiding");
            container.select('.di_toggle').each(Element.hide);
            container.select('.di_toggleShow').each(Element.show);
            container.select('.di_toggleButton').each(function (element) {
                element.removeClassName('minButton');
                element.addClassName('maxButton');
            });
        }

        showEmotion(state.avatar.initialEmotion);
        showAnswer(state.responseData);

        if (typeof options.callback !== "function") {
            options.callback = Prototype.emptyFunction;
        }
        
        if (state.resendLastRequest) {
            sendLastRequest(function () {
                options.callback.call(this);
            }.bindAsEventListener(this));
        } else {
            options.callback.call(this);
        }
    };

    //******************************************************************
    // DI.UI scope variables
    //******************************************************************

    name = "anna";

    // Create the DOM element which will contain the UI elements:
    container = new Element("div", {
        "id": name,
        "class": 'di_loading'
    });
    container.hide();

    // Load the extension framework:
    extension = new DI.Extension({id: name}, this, options.extensions);

    // The extended view controller:
    extendedViews = {};
    localData = {};

    hasFlash = (function () {
        var supported = false, fo;
        try {
            fo = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            if (fo) {
                supported = true;
            }
        } catch (e) {
            if (navigator.mimeTypes["application/x-shockwave-flash"] !== undefined) {
                supported = true;
            }
        }
        return supported;
    }());

    hideYouSaidArea = function () {
        $("di_you_said_container").hide();
    };

    showYouSaidArea = function () {
        if (container.down(".di_lastinput").innerHTML !== '') {
            $("di_you_said_container").show();
        }
    };

    getYouSaidText = function (text) {
        if (typeof text !== "string") {
            return '';
        }
        //For the current width and font, 28 seems to work nicely.
        var maxLength = 28, newText, index;

        if (text.length < maxLength) {
            return text;
        }

        //Try and make the cut off tidy by finding the end of a word near
        //the end of the input; Otherwise, just clip the last three chars.
        index = text.lastIndexOf(' ', maxLength - 1);

        if (index > maxLength / 1.5 && index + 3 < maxLength) {
            newText = text.substring(0, index) + "...";
        } else {
            newText = text.substring(0, maxLength - 3) + "...";
        }
        return newText;
    };

    // EXTENDED FUNCTIONS

    //******************************************************************
    // Drawing Output
    //*****************************************************************/

    drawOutput = extension.extend("drawOutput", function (html) {
        $$('#' + name + ' .di_answer').each(function (element) {
            element.update(html);
        });
    });

    //draw the loading animation.
    drawLoading = extension.extend("drawLoading", function () {
        $$('#' + name + ' .di_answer').each(function (element) {
            element.addClassName("di_loading");
        });
        drawOutput("");
    });

    //draw the answer text.
    drawAnswer = extension.extend("drawAnswer", function (text) {
        $$('#' + name + ' .di_answer').each(function (element) {
            element.removeClassName("di_loading");
        });
        drawOutput(text);
    });

    // sets the state
    setState = extension.extend("setState", function (state, session) {
        state = session.setState(state);
    });

    storePosition = function () {
        state.position = {
            top: DI.getStyle(container, "top"),
            left: DI.getStyle(container, "left")
        };
        setState(state, session);
    };

    showEmotion = extension.extend("showEmotion", function (emotion) {
        if (emotion !== null && emotion !== currentEmotion) {
            var file_name, path_name, loadImage, loadFlash, loadAlternative;
            //loadImage tests the image src to see if it exists before displaying the image.
            //If the image doesn't exist, the fallback emotion image is displayed.
            loadImage = function (path, file) {
                var theImage, displayImage = function (imgSrc) {
                    var img = new Element("img", {
                        "class": 'di_emotionImage',
                        "src": imgSrc
                    });
                    $$('#' + name + " .di_emotion").each(function (element) {
                        element.update(img);
                    });
                };

                theImage = new Image();

                Event.observe(theImage, "load", function () {
                    displayImage(path + file);
                });

                Event.observe(theImage, "error", function () {
                    displayImage(path + state.avatar.alternate);
                });

                theImage.src = path + file;
            };

            loadAlternative = function () {
                if (state.avatar.alternate) {
                    //Split the alternate string in to path and file name.
                    var end_of_path = state.avatar.alternate.lastIndexOf("/") + 1,
                        new_path = state.avatar.alternate.substring(0, end_of_path),
                        file = state.avatar.alternate.substr(end_of_path);

                    loadImage(new_path, file);
                }
            };

            loadFlash = function (path, file) {
                if (hasFlash) {
                    $$('#' + name + ' .di_emotion').each(function (element) {
                        var so = new SWFObject(path + file, "emotion_animation", 92, 133, "9", "#fff");
                        so.addParam("wmode", "transparent");

                        so.write(element);
                    });
                } else {
                    loadAlternative();
                }
            };

            //EMOTION
            //get the corrisponding file for the emotion.
            //if there is no emotion sent...

            if (emotion !== '' && state.avatar.emotions[emotion]) {
                file_name =  state.avatar.emotions[emotion] ||
                    state.avatar.emotions[state.avatar.fallbackEmotion];
            } else {
                //set default emotion.
                file_name = state.avatar.emotions[state.avatar.fallbackEmotion];
            }

            //add the emotion path to the path
            path_name = options.root + state.avatar.emotionPath;

            //is the emotion a flash movie or a img?
            if (file_name) {
                if (file_name.match('.swf' + '$')) {
                    loadFlash(path_name, file_name);
                } else {
                    loadImage(path_name, file_name);
                }
            }
        }
    });

    // displays the answer
    // emotion and redirects if ther is a link.
    showAnswer = extension.extend("showAnswer", function (responseData) {
        if (responseData === null) {
            return;
        }

        state.responseData = responseData;

        var href = decodeURIComponent(responseData.link.href),
            target,
            text = getYouSaidText(decodeURIComponent(responseData.lastinput));

        // sett changes in state.


        showEmotion(responseData.emotion);
        
        //LINK
        //Is there a link present. If so. redirect to that page.
        //we dont want to show the answer becouse if there is any answer to show
        //we let start() draw it from responseData.answer.
        if (state.redirect && href !== '' && window.location.href !== href && userInputSubmittedOnCurrentPage) {
            target = state.responseData.link.target;
            state.responseData.link.href = '';
            state.responseData.link.target = '';

            if (target === '' || target === "_self") {
                setState(state, session);
                window.location.href = href;
                return;
            } else {
                window.open(href, target);
            }
        }

        //draw question
        $(name).select('.di_lastinput').each(function (element) {
            element.update(text);
        });

        if (text === '') {
            hideYouSaidArea();
        } else {
            showYouSaidArea();
        }

        //draw the answer.
        drawAnswer(decodeURIComponent(responseData.answer));

        // save the state.
        setState(state, session);
    });

    collapse = extension.extend("collapse", function () {
        $(name).addClassName("di_body_hiding");
        container.select('.di_toggle').each(function (element) {
            Effect.SlideUp(element, {
                "afterFinish": function () {
                    $(name).addClassName("di_body_hidden");
                }
            });
        });
        container.select('.di_toggleShow').each(Element.show);
        container.select('.di_toggleButton').each(function (element) {
            element.addClassName('maxButton');
            element.removeClassName('minButton');
        });
        state.max = false;
    });

    expand = extension.extend("expand", function () {
        $(name).removeClassName("di_body_hidden");
        $(name).removeClassName("di_body_hiding");
        container.select('.di_toggle').each(function (element) {
            Effect.SlideDown(element);
        });
        container.select('.di_toggleShow').each(Element.hide);
        container.select('.di_toggleButton').each(function (element) {
            element.addClassName('minButton');
            element.removeClassName('maxButton');
        });
        state.max = true;
    });

    onSubmit = extension.extend("onSubmit", function (e) {
        $(container).fire('di:sendRequest');
        container.select('.di_form_input')[0].clear();
        e.stop();
        return false;
    });

    //******************************************************************
    // public methods
    //*****************************************************************//
    // hides the UI
    hide = extension.extend("hide", function () {
        $(container).hide();
        if (state) {
            state.visible = false;
            setState(state, session);
        }
        Event.stopObserving(window, "resize", resizeHandler);
    });

    // shows the UI
    show = extension.extend("show", function () {
        $(container).show();
        state.visible = true;
        setState(state, session);
        Event.observe(window, "resize", resizeHandler);
        var inputs = container.select('.di_form_input');
        if (inputs.length > 0) {
            try {
                inputs[0].focus();
            } catch (e) {}
        }
    });

    // moves the UI
    move = extension.extend("move", function (top, left) {
        var effect;
        if (top === null) {
            adjustPositionToViewport();
        } else {
            effect = new Effect.Move(container, {
                "x": left,
                "y": top,
                "mode": "absolute",
                "afterFinish": function () {
                    adjustPositionToViewport();
                }
            });
        }
    });

    //closes the ui
    close = extension.extend("close", function (success, failure) {
        $(container).fire('di:close', {
            "success": success,
            "failure": failure
        });
    });

    open = extension.extend("open", function () {
        $(container).fire('di:open');
    });

    getExtendedView = extension.extend("getExtendedView", function (id) {
        return extendedViews[id];
    });

    setExtraParameter = extension.extend("setExtraParameter", function (name, value, local) {
        if (local) {
            if (value === null) {
                delete localData[name];
            } else {
                localData[name] = value;
            }
        } else {
            if (state.communication) {
                if (value === null) {
                    delete state.communication.extraParameters[name];
                } else {
                    state.communication.extraParameters[name] = value;
                    setState(state, session);
                }
            }
        }
    });

    getExtraParameter = extension.extend("getExtraParameter", function (name, local) {
        var value = null;

        if (typeof (local) !== "undefined") {
            if (local) {
                value = localData[name];
            } else {
                if (state !== null && state.responseData !== null &&
                        state.responseData.extraData !== null) {
                    value = state.responseData.extraData[name];
                }
            }
        } else {
            value = this.getExtraParameter(name, true);
            if (value === null) {
                value = this.getExtraParameter(name, false);
            }
        }
        return value;
    });

    onRequestError = extension.extend("onRequestError", function (error) {
        alert("There was a problem with the request: " + error);
    });

    sendInput = extension.extend("sendInput", function (message, callback) {
        userInputSubmittedOnCurrentPage = true;
        request(message, session, function (r) {
            showAnswer(r);
            hideYouSaidArea();
            if (typeof callback === "function") {
                callback(r);
            }
        }, onRequestError);
    });

    sendCommandInput = function (command, input, callback) {
        if (typeof callback !== "function") {
            callback = Prototype.emptyFunction;
        }
        var options = {
            "userInput": input,
            "onSuccess": function (t) {

                // TODO: check with Dan. The below code
                // did not work when relfaqs were clicked,
                // it started working when t.responseJSON.responseData
                // was replaced with t:
                // showAnswer(t.responseJSON.responseData);
                showAnswer(t);

                callback();
            },
            "onFailure": function (t) {
                onRequestError(t);
                callback();
            }
        };
        if (input !== null) {
            options.userInput = input;
        }
        this.sendCommand(command, options);
    };

    getDimensions = extension.extend("getDimensions", function (element) {
        return $(element).getDimensions();
    });

    //******************************************************************
    // Initialization Part 2
    //******************************************************************

    //Attach the public functions to the object so they are publically
    //visible.
    this.show = show;
    this.hide = hide;
    this.move = move;
    this.close = close;
    this.open = open;
    this.getExtendedView = getExtendedView;
    this.loadExtension = function (ext) {
        return extension.loadExtension(ext);
    };
    this.setExtraParameter = setExtraParameter;
    this.getExtraParameter = getExtraParameter;
    this.sendInput = sendInput;
    this.sendCommandInput = sendCommandInput;

    //Extra public functions for IKEA
    this.getSession = function () {
        return session;
    };

    this.getState = function () {
        return state;
    };
    
    this.showAnswer = showAnswer;

    session = DI.SessionManager.getSession(state_name, getFallbackSession());

    state = session.getState(); // Get the config and load the init state.

    // Append the container to the document.
    this.parentElement = $(state.parentId);
    if (this.parentElement === null) {
        this.parentElement = $$('body')[0];
    }
    $(this.parentElement).insert(container);

    //Handle JSON bug in Prototype < 1.7
    if (typeof state.extensions === "string") {
        state.extensions = JSON.parse(state.extensions);
    }

    extension.loadExtensions(state.extensions); //Load extensions defined in the configuration.

    //******************************************************************
    // Bind functions to trigger on events triggerd
    //*****************************************************************//
    //function triggerd when layout is fetched from server and created.
    $(container).observe('di:layoutCreated', function () {
        bindActions(container);
        this.start.call(this);
    }.bindAsEventListener(this));

    // function triggerd when the user sends a request.
    $(container).observe('di:sendRequest', function () {
        var inputs = container.select('.di_form_input');
        if (inputs.length > 0) {
            sendInput($F(inputs[0]), function () {
                showYouSaidArea();
            });
        }
    });

    // function triggerd when a user stop dragging the container.
    $(container).observe('di:stopDrag', function () {});

    // function triggerd when a user clicks toogleButton div
    $(container).observe('di:toggleBody', function () {
        var hideVal, showVal;

        if (state.toggleDirection === 'down') {
            hideVal = {
                height: 'hide'
            };
            showVal = {
                height: 'show'
            };
        } else {
            hideVal = {
                width: 'hide'
            };
            showVal = {
                width: 'show'
            };
        }

        if ($(container.select('.di_toggle')).all(Element.visible)) {
            collapse(hideVal);
        } else {
            expand(showVal);
        }

        setState(state, session);

    });

    // function triggerd when user wants to close the gui
    $(container).observe('di:close', function (e) {
        hide();
        if (state !== null) {
            // reset the UI.
            state = null;
            //reset the session
            session.close(e.memo.success, e.memo.failure);
        }
    });

    $(container).observe('di:open', function () {
        if (isBrowserSupported() || displayUnsupportedBrowserMessage()) {
            session = DI.SessionManager.getSession(state_name, getFallbackSession());
            state = session.getState();
            session.setLocale(options.locale);
            // make it stick
            setState(state, session);
            
            
            this.closed = false;
            show();
        }
        else {
            fail();
        }
    }.bindAsEventListener(this));

    resizeHandler = adjustPositionToViewport.bindAsEventListener(this);

    //set the browser object.
    DI.BrowserDetect.init();
   
    // last but not least... get the layout and start off.. unless....
    if (!session.storageAvailable()) {
        // if the gui dont accept cookies we should fail.
        fail();
        alert(cookiesStorageRequiredMessage);
    } else {
        getLayout();
    }
};

DI.getStyle = function (element, style) {
    // Work around the opera DI.getStyle bug in 1.6.1 by copying out the
    // prototype function with the bug removed.
    if (DI.BrowserDetect.browser === "Opera") {
        var dim, properties, val, proceed = function (element, style) {
            element = $(element);
            style = style === 'float' ? 'cssFloat' : style.camelize();
            var value = element.style[style], css;
            if (!value || value === 'auto') {
                css = document.defaultView.getComputedStyle(element, null);
                value = css ? css[style] : null;
            }
            if (style === 'opacity') {
                return value ? parseFloat(value) : 1.0;
            }
            return value === 'auto' ? null : value;
        };

        switch (style) {
            // This is the bit that causes the problem in opera.
            /*case 'left': case 'top': case 'right': case 'bottom':
              if (proceed(element, 'position') === 'static') return null;*/
        case 'height':
        case 'width':
            if (!Element.visible(element)) {
                return null;
            }

            dim = parseInt(proceed(element, style), 10);
            if (dim !== element['offset' + style.capitalize()]) {
                return dim + 'px';
            }
            if (style === 'height') {
                properties = ['border-top-width', 'padding-top', 
                'padding-bottom', 'border-bottom-width'];
            }
            else {
                properties = ['border-left-width', 'padding-left',
                'padding-right', 'border-right-width'];
            }
            return properties.inject(dim, function (memo, property) {
                val = proceed(element, property);
                return val === null ? memo : memo - parseInt(val, 10);
            }) + 'px';
        default:
            return proceed(element, style);
        }
    }
    else {
        return element.getStyle(style);
    }
};
// Sprockets:
//= require <sprockets/prototype>
//= require <sprockets/scriptaculous>
//= require "di.js"
//= require "di_extension.js"

/**
 * DI Extended View module
 *
 * @version jQueryId: di_extendedview.js 416 2010-12-21 10:48:39Z dan.trott jQuery
 */

// JSLint: "The Good Parts" options plus assume browser and Rhino
/*jslint browser: true, sloppy: true, maxerr: 50, indent: 4 */
/*global DI: false, window: false, $: false, Element: false, Effect: false  */
"use strict"; // JSLint pragma


DI.EV = function (ui, view, options) {
    //Set default options where options are undefined.
    (function () {
        var optionsExt = Object.extend({
            extensions: [] // The array of DI extensions to be applied to this DI UI instance.
        }, options);

        options = optionsExt;

        //Handle JSON bug in Prototype < 1.7
        if (typeof options.extensions === "string") {
            options.extensions = JSON.parse(options.extensions);
        }
    }());

    /*
     * Construction
     */
    var body,
        frame,
        frameWidth,
        frameHeight,
        frameHidden = true,
        extension = new DI.Extension({
            id: $(view).readAttribute("id")
        }, this, options.extensions),
        //private methods


        //Show the IFRAME.
        showFrame = extension.extend("showFrame", function () {
            if (!frameHidden) {
                return;
            }
            frameHidden = false;

            body.hide();
            frame.show();
            frame.setStyle({
                "width": frameWidth,
                "height": frameHeight
            });
        }),

        //Hide the IFRAME.
        hideFrame = extension.extend("hideFrame", function (noTransition) {
            if (frameHidden) {
                return;
            }
            frameHidden = true;

            frame.hide();
            frame.setStyle({
                "height": 0,
                "width": 0
            });
            body.show();
        }),

        createFrame = extension.extend("createFrame", function () {
            frame = new Element("iframe");

            // Hide the frame inside the extended view body.
            body.insert({
                "before": frame
            });

            if (options.frame) {
                frameWidth = options.frame.width || frame.getWidth() + "px";
                frameHeight = options.frame.height || frame.getHeight() + "px";
            } else {
                frameWidth = frame.getWidth() + "px";
                frameHeight = frame.getHeight() + "px";
            }

            hideFrame(true);

            frame.setStyle({
                width: frameWidth,
                height: frameHeight
            });
        }),

        /*
         * Display functions
         */

        //Resets the extended view body.
        clear = extension.extend("clear", function () {
            hideFrame(true);
            body.update("");
            body.show();
            frame.hide();
        }),

        //Shows the extended view.
        show = extension.extend("show", function () {
            Effect.SlideDown($(view), {
                scaleX: true,
                scaleY: false
            });
        }),

        //Hides the extended view.
        hide = extension.extend("hide", function () {
            Effect.SlideUp($(view), {
                scaleX: true,
                scaleY: false
            });
        }),

        /*
         * Content functions
         */

        //Adds a BR tag to the extended view body and and calls show.
        //Show is called here as addNewLine is called by all other content functions.
        addNewLine = extension.extend("addNewLine", function () {
            body.insert("<br/>");
        }),

        //Adds the given string to the body as HTML.
        addHTML = extension.extend("addHTML", function (html) {
            body.insert(html);
            addNewLine();
        }),

        //Adds a link to the extended view.
        //url is the href value.
        //html is the innerHTML of the anchor tag.
        //target is the target value.
        //title is the title value - defaults to '_blank' i.e. a new window.
        addLink = extension.extend("addLink", function (url, html, target, title) {
            if (!url) {
                return;
            }

            var link = new Element("a",  {
                "class": 'di_ev_link'
            });
            if (title) {
                link.writeAttrute("title", title);
            }

            if (html) {
                link.update(html);
            } else {
                link.update(url);
            }

            link.writeAttrute("href", url);

            if (target) {
                link.writeAttrute("target", target);
            } else {
                link.writeAttrute("target", "_blank");
            }

            body.insert(link);
            addNewLine();
        }),

        // Add an image to the extended view body using the provided src, alt text
        // and title.
        addImage = extension.extend("addImage", function (src, alt, title) {
            if (!src) {
                return;
            }
            var img = new Element("img", {
                "class": 'di_ev_image'
            });

            if (alt) {
                img.writeAttrute("alt", alt);
            }
            if (title) {
                img.writeAttrute("title", title);
            }

            body.insert(img.writeAttrute("src", src));

            addNewLine();
        }),

        //Display the contents of a URL in an IFRAME.
        setFrameLocation = extension.extend("setFrameLocation", function (url) {
            frame.writeAttribute("src", url);
            showFrame();
        });

    /*
     * Public functions
     */
    this.hide = hide;
    this.show = show;
    this.clear = clear;
    this.addHTML = addHTML;
    this.addLink = addLink;
    this.addImage = addImage;
    this.addNewLine = addNewLine;
    this.setFrameLocation = setFrameLocation;
    this.showFrame = showFrame;
    this.hideFrame = hideFrame;
    this.loadExtension = function (ext) {
        return extension.loadExtension(ext);
    };
    this.getUI = function () {
        return ui;
    };

    extension.initialize();

    //The extended view needs a container and a body element.
    if (view === null || typeof view === "undefined") {
        throw "No extended view element found";
    }
    (function () {
        var bodies = $(view).select(".di_ev_body");
        if (bodies.length > 0) {
            body = bodies[0];
        } else {
            throw "No extended view body element found";
        }
    }());

    //If we have all the elements we need, create the IFRAME.
    createFrame();

    /*
     * Events
     */
    $(view).select(".di_ev_closeButton").each(function (element) {
        element.observe("click", function () {
            hide();
            clear();
        });
    });

    hide();
};
// Sprockets:
//= require <sprockets/prototype>
//= require <sprockets/jstorageasol>
//= require "di.js"

// Mark the following objects as defined in www.jslint.com check:
// DI, window, self, $, $$, $F, Prototype, Hash, PeriodicalExecuter, Form, Element, Effect, Class, Draggable, Event, ActiveXObject, SWFObject, com
/*jslint browser: true, sloppy: true, maxerr: 50, indent: 4 */
/*global DI: false, window: false, self: false, $: false, $$: false, $F: false, Prototype: false, Hash: false, PeriodicalExecuter: false, Form: false, Element: false, Effect: false, Class: false, Draggable: false, Event: false, ActiveXObject: false, SWFObject: false, com: false */
"use strict"; // JSLint pragma


DI.LoadAnna = function () {
    var configuration = (function () {
        var user_configuration = com.ikea.irw.askAnna.Settings,
            default_configuration = {
                root: "/bots/anna/",
                default_locale: "en",
                feedback_parameter: "feedback", //The parameter containing the feedback result.
                feedback_text_parameter: "feedback_text", //The parameter containing the feedback text.
                transaction_parameter: "transaction",
                iframe_location_param: "ev_frame", //The name of the extra parameter containing the IFRAME location.
                extended_view_html_param: "ev_html", //The name of the extra parameter containing the HTML content.
                extended_view_iframe_param: "ev_iframe",
                customer_feedback_param: "customer_feedback", //The name of the extra parameter containing the Customer Feedback JSON.
                chat_handover_param: "chat_handover", //The name of the extra parrameter containing the Chat Handover message
                chat_handover_url: "",
                custom_form_param: "custom_form",
                maximum_idle_time: 300, // The number of seconds between each time the user will be encouraged to close the interface.
                encourage_times: 3,
                keep_ev_open_param: "keep_ev_open"// The number of times that the user will be encouraged to close the interface.
            },
            enabled_modules = {
                dialog_history: false,
                dialog_history_send: false,
                info: false,
                tts: false
            },
            final_configuration = default_configuration;

        if (typeof (user_configuration) === "object") {
            final_configuration = Object.extend(default_configuration, user_configuration);
            if (typeof user_configuration.enabled_modules === "object" &&
                    typeof user_configuration.enabled_modules.each === "function") {
                user_configuration.enabled_modules.each(function (module_name) {
                    enabled_modules[module_name] = true;
                });
            }
        }

        final_configuration.enabled_modules = enabled_modules;

        return final_configuration;
    }()),

        UserData = $.jStorageAsol.get("di_anna_user_options") || {},

        setUserData = function (key, value) {
            UserData[key] = value;
            $.jStorageAsol.set("di_anna_user_options", UserData);
        },

        locales = com.ikea.irw.askAnna.Translations,

        currentView = null,
        starting_session = false,
        controls = {},
        ev,

        LocaleGenerator = function () {
            var subscribers = [], locale_key = "locale_string_id", callback_key = "locale_callback",

                doUpdate = function (element) {
                    var name = element.retrieve(locale_key), callback = element.retrieve(callback_key);
                    if (name) {
                        element.update(this.getString(name));
                        if (callback) {
                            callback(element, this.getString(name));
                        }
                    }
                },

                getFirstLocale = function () {
                    var locale_name;
                    for (locale_name in locales) {
                        if (locales.hasOwnProperty(locale_name)) {
                            return locales[locale_name];
                        }
                    }
                    return null;
                },
                
                getValidLocaleName = function (name) {
                    if (!locales.hasOwnProperty(name)) {
                        var fallbackName;
                        for (fallbackName in locales) {
                            if (locales.hasOwnProperty(fallbackName)) {
                                return fallbackName;
                            }
                        }
                    }
                    return name;
                },

                getLocaleByName = function (name) {
                    //get the matching locale
                    if (typeof locales[name] === "object") {
                        return locales[name];
                    }
                    //if no matching locale is found
                    return getFirstLocale();
                },

                current_locale_name = UserData.locale || configuration.default_locale,

                current_locale = getLocaleByName(current_locale_name);
            
            this.updateUI = function () {
                subscribers.each(doUpdate, this);
            };

            this.setLocale = function (name) {
                name = getValidLocaleName(name);
                var locale = getLocaleByName(name),
                    position,
                    start_anna_callback = function () {
                        com.ikea.irw.askAnna.anna = new DI.UI(DI.AnnaStateName, {
                            "root": configuration.root,
                            "locale": name,
                            "callback": function () {
                                if (position) {
                                    $("anna").setStyle({
                                        "top": position.top + "px",
                                        "left": position.left + "px"
                                    });
                                }
                                this.move(null, null);
                                this.show();
                            }
                        });
                    }.bind(this);

                current_locale = locale;
                current_locale_name = name;
                
                this.updateUI();

                if (typeof com.ikea.irw.askAnna.anna !== "undefined" && com.ikea.irw.askAnna.anna !== null) {
                    $("anna").fire("anna:locale_updated");
                }
                
                setUserData("locale", name);
                

                if (typeof com.ikea.irw.askAnna.anna !== "undefined" && com.ikea.irw.askAnna.anna !== null) {
                    position = $("anna").positionedOffset();

                    com.ikea.irw.askAnna.anna.command("kill_session", start_anna_callback);

                    $("anna").remove();
                } else {
                    start_anna_callback();
                }
            };

            this.getLocale = function () {
                return current_locale;
            };

            this.getLocaleName = function () {
                return current_locale_name;
            };

            this.subscribe = function (element, name, callback) {
                if (element) {
                    //If this is the first time the element is subscribed,
                    //add the element to the subscribers collection.
                    if (!element.retrieve(locale_key)) {
                        subscribers.push(element);
                    }

                    element.store(locale_key, name);
                    element.store(callback_key, callback);
                    doUpdate.call(this, element);
                }
            };

            this.getString = function (name) {
                return current_locale[name] || name;
            };
        },

        Locale = new LocaleGenerator(),

        IKEAExtensionControl = Class.create({
            initialize: function (btn_query, className, module_name, bot) {
                this.bot = bot;
                this.enabled = true;
                this.buttons = $$(btn_query);
                this.className = className;
                this.buttons.each(function (btn) {
                    btn.observe("click", function () {
                        if (currentView === this) {
                            this.close(true);
                        } else {
                            this.open();
                        }
                    }.bindAsEventListener(this));
                }, this);

                this.setup();

                if (typeof module_name === "string" && typeof configuration.enabled_modules[module_name] === "boolean" &&
                        configuration.enabled_modules[module_name] === false) {
                    this.disable();
                }
            },

            setup: function () {},

            open: function () {
                if (!this.enabled) {
                    return;
                }
                if (this.className) {
                    $("anna").addClassName(this.className);
                }
                if (this.buttons) {
                    this.buttons.each(function (btn) {
                        btn.addClassName("di_selected");
                    });
                }
                if (currentView !== this) {
                    if (currentView !== null) {
                        currentView.close();
                    }
                    currentView = this;
                    ev.clear();
                    ev.show();
                    this.afterOpen();
                } else {
                    ev.show();
                }
            },

            afterOpen: function () {

            },

            close: function (hide) {
                if (hide) {
                    if (currentView === this) {
                        ev.hide();
                        currentView = null;
                    }
                }
                if (this.className) {
                    $("anna").removeClassName(this.className);
                }
                if (this.buttons) {
                    this.buttons.each(function (btn) {
                        btn.removeClassName("di_selected");
                    });
                }
            },

            enable: function () {
                this.enabled = true;
            },

            disable: function () {
                this.enabled = false;
                this.close(true);
                if (this.buttons) {
                    this.buttons.invoke("hide");
                }
            }
        }),

        //extraviews is used to manage the visibility of all the different controls
        // that are using the extendedview.
        extraViews = (function () {
            var views = {
                feedback: false,
                form: false,
                extended: false
            },
                updating = false,
                currentExtraView, keepOpen = false,

                setCurrentView = function (view) {
                    if (view === null || typeof view === "undefined") {
                        extraViews.close(true);
                        $("di_ev_open_btn").hide();
                        if (currentView !== null) {
                            currentView.close(true);
                        }
                        currentView = null;
                    } else {
                        currentExtraView = view;
                        extraViews.open();
                    }
                },

                update = function () {
                    var view;
                    if (updating) {
                        return;
                    }
                    if (views.feedback) {
                        view = controls.feedback;
                    } else if (views.form) {
                        view = controls.form;
                    } else if (views.extended) {
                        view = controls.extended;
                    }
                    setCurrentView(view);
                },

                setButtonShow = function (show) {
                    if (show) {
                        $("di_ev_open_btn").show();
                    }
                    $("di_see_more").show();
                    $("di_close_view").hide();
                },

                setButtonHide = function () {
                    $("di_ev_open_btn").show();
                    $("di_see_more").hide();
                    $("di_close_view").show();
                },

                setViewState = function (view, state) {
                    if (keepOpen && !state) {
                        return;
                    }
                    views[view] = state;
                    update();
                },

                stateProperty = function (view, state) {
                    if (typeof state === "undefined") {
                        return views[view];
                    } else {
                        setViewState(view, state);
                    }
                };

            return {
                feedback: function (on) {
                    return stateProperty("feedback", on);
                },

                extended: function (on) {
                    return stateProperty("extended", on);
                },

                form: function (on) {
                    return stateProperty("form", on);
                },

                current: function () {
                    return currentExtraView;
                },

                open: function () {
                    if (currentExtraView) {
                        currentExtraView.open();
                        setButtonHide();
                    }
                },

                close: function (hide) {
                    if (currentExtraView) {
                        currentExtraView.close(hide);
                        this.setButtonShow(true);
                    }
                },

                setButtonShow: setButtonShow,

                startUpdate: function (open) {
                    keepOpen = open;
                    updating = true;
                },

                stopUpdate: function () {
                    keepOpen = false;
                    updating = false;
                    update();
                }
            };
        }()),

        say = function (text) {
            $("di_you_said_container").hide();
            $$(".di_answer").each(function (span) {
                span.update(text);
            });
        },

        Feedback_control = Class.create(IKEAExtensionControl, {
            initialize: function ($super, btn_query, class_name, bot) {
                $super(btn_query, class_name, "feedback", bot);
            },

            setup: function ($super) {
                $super();
                this.container = $("di_feedback_container");

                this.message = this.container.down(".di_feedback_message");
                this.options = this.container.down(".di_feedback_options");
                this.thanks = this.container.down(".di_feedback_thanks");

                this.extra_feedback = $("di_extra_feedback_form");
                this.extra_feedback_message = this.extra_feedback.down(".di_extra_feedback_message");
                this.extra_feedback_input = this.extra_feedback.down("textarea");
                this.extra_feedback_button = this.extra_feedback.down(".di_send_extra_feedback_btn");

                Locale.subscribe(this.extra_feedback_button, "send");
                //Locale.subscribe(this.thanks, "extra_feedback_thanks");

                this.extra_feedback_button.observe("click", this.onSendFeedbackClick.bindAsEventListener(this));
                this.enableSendFeedbackButton();

                $("anna").insert(this.options);

                this.hide();
                this.extra_feedback.hide();

                this.setUpOptionsEvents();
            },

            setUpOptionsEvents: function () {
                var mouseoutTimer,
                    stopTimer = function () {
                        if (mouseoutTimer) {
                            mouseoutTimer.stop();
                            mouseoutTimer = null;
                        } else {
                            this.showOptions();
                        }
                    }.bindAsEventListener(this),
                    startTimer = function (seconds) {
                        mouseoutTimer = new PeriodicalExecuter(function () {
                            this.hideOptions();
                            mouseoutTimer.stop();
                            mouseoutTimer = null;
                        }.bindAsEventListener(this), seconds);
                    }.bindAsEventListener(this);

                this.message.observe("mouseenter", stopTimer);
                this.message.observe("mouseleave", startTimer.curry(1));
                this.options.observe("mouseenter", stopTimer);
                this.options.observe("mouseleave", startTimer.curry(0.3));
            },

            showOptions: function () {
                var mvo, ovo, left, top, line_height, offset, newTop, newLeft;
                this.options.show();
                mvo = this.message.viewportOffset();
                ovo = this.options.viewportOffset();
                left = DI.getStyle(this.options, "left") || 0;
                top = DI.getStyle(this.options, "top") || 0;
                line_height = 12;
                offset = 4;
                newTop = parseFloat(top) + (mvo.top - ovo.top) - this.options.getHeight() + line_height;
                newLeft = parseFloat(left) + (mvo.left - ovo.left) + this.message.getWidth() + offset;

                this.options.setStyle({
                    "top": newTop + "px",
                    "left": newLeft + "px"
                });
            },

            hideOptions: function () {
                this.options.hide();
            },

            setMessage: function (message) {
                this.message.update(message);
            },

            hide: function () {
                this.container.hide();
                this.options.hide();

                if (this.extra_feedback.visible()) {
                    this.extra_feedback.hide();
                }
                this.thanks.hide();

            },

            hideExtraFeedback: function () {
                this.extra_feedback.hide();
                this.thanks.show();
            },

            showExtraFeedback: function () {
                this.extra_feedback.show();
                this.message.hide();
                this.options.hide();
                this.thanks.hide();
            },

            show: function () {
                this.container.show();
                this.message.show();
                this.options.hide();
                this.thanks.hide();
            },

            afterOpen: function ($super) {
                $super();
                this.showExtraFeedback();
                ev.addHTML(this.extra_feedback);
            },

            close: function ($super, hide) {
                $super(hide);
                this.hideExtraFeedback();

                $("anna").insert(this.extra_feedback);

                this.thanks.hide();
                this.message.hide();
                this.options.hide();
            },

            onSendFeedbackClick: function () {
                var data;
                if (this.extra_feedback_button_enabled) {
                    this.disableSendFeedbackButton();
                    data = {};
                    data[configuration.feedback_text_parameter] = this.extra_feedback_input.getValue();
                    data[configuration.transaction_parameter] = this.transaction;
                    data[configuration.feedback_parameter] = this.selected_option.value;

                    this.bot.sendCommand("feedback", {
                        "extraData": data,
                        "onSuccess": function (responseData) {

                            if (responseData) {
                                say(decodeURIComponent(responseData.answer));
                            }

                            extraViews.feedback(false);

                            this.message.hide();
                            this.options.hide();

                            this.extra_feedback_input.setValue('');

                            this.enableSendFeedbackButton();
                            this.logTransactionFeedback();
                        }.bindAsEventListener(this),
                        "onFailure": function () {
                            this.enableSendFeedbackButton();
                        }.bindAsEventListener(this)
                    });
                }
            },

            logTransactionFeedback: function () {
                setUserData("last_feedback_transaction", this.transaction);
            },

            transactionHasFeedback: function (id) {
                return UserData.last_feedback_transaction === id;
            },

            enableSendFeedbackButton: function () {
                this.extra_feedback_button_enabled = true;
                this.extra_feedback_button.addClassName("di_enabled");
            },

            disableSendFeedbackButton: function () {
                this.extra_feedback_button_enabled = false;
                this.extra_feedback_button.removeClassName("di_enabled");
            },

            displayExtraFeedbackForm: function () {
                if (this.selected_option.extra_feedback) {
                    extraViews.feedback(true);
                    if (this.selected_option.extra_feedback_text) {
                        this.extra_feedback_message.update(decodeURIComponent(this.selected_option.extra_feedback_text));
                    } else {
                        this.extra_feedback_message.update();
                    }
                    return true;
                }
                return false;
            },

            onOptionSelected: function (e, option) {
                var data;
                this.selected_option = option;
                this.displayExtraFeedbackForm();
                data = {};
                data[configuration.feedback_parameter] = option.value;
                data[configuration.transaction_parameter] = this.transaction;
                this.bot.sendCommand("feedback", {
                    "extraData": data,
                    "onSuccess": function (responseData) {
                        this.message.hide();
                        this.options.hide();
                        this.message.hide();
                        if (responseData) {
                            this.thanks.update(decodeURIComponent(responseData.answer));
                            this.thanks.show();
                        }
                        this.logTransactionFeedback();
                    }.bindAsEventListener(this)
                });
            },

            setOptions: function (options) {
                var option_link;
                this.options.update();
                options.each(function (option) {
                    option_link = new Element("span", {
                        "class": "di_feedback_option"
                    });
                    option_link.update(option.name);

                    option_link.observe("click", this.onOptionSelected.bindAsEventListener(this, option));

                    this.options.insert(option_link);
                }, this);
            },

            setTransaction: function (id) {
                this.transaction = id;
            }
        }),

        Dialog_control = Class.create(IKEAExtensionControl, {
            initialize: function ($super, btn_query, className, bot) {
                $super(btn_query, className, "dialog_history", bot);

                this.showDialogControls();
            },

            showDialogControls: function () {
                if (!configuration.enabled_modules.dialog_history_send) {
                    this.dialog_controls.hide();
                }
            },

            setup: function ($super) {
                $super();
                this.container = new Element("div");
                this.className = "di_dialog_control_selected";

                this.dialog_controls = $("di_dialog_controls");
                this.dialog_form = $("di_dialog_form");

                this.dialog_form.select("input").each(function (input) {
                    input.observe("change", function () {
                        this.validateForm(input);
                    }.bindAsEventListener(this));
                }, this);

                this.dialog_form.observe("submit", this.submitForm.bindAsEventListener(this));

                $("di_try_again_link").observe("click", this.submitForm.bindAsEventListener(this));
                $("di_cancel_link").observe("click", this.cancelError.bindAsEventListener(this));
            },

            reset: function () {
                if (currentView === true) {
                    ev.clear();
                }
            },

            openForm: function () {
                var ev_elem;
                this.resetForm();
                ev_elem = $$(".di_ev_body");
                this.dialog_controls.hide();
                ev_elem.each(function (elem) {
                    Effect.BlindUp(elem, {
                        "duration": 0.3,
                        "afterFinish": function () {
                            Effect.BlindDown(this.dialog_form, {
                                "duration": 0.3
                            });
                        }.bindAsEventListener(this)
                    });
                }, this);
            },

            closeForm: function () {
                var ev_elem = $$(".di_ev_body");
                ev_elem.each(function (elem) {
                    Effect.BlindUp(this.dialog_form, {
                        "duration": 0.3,
                        "afterFinish": function () {
                            this.showDialogControls();
                            Effect.BlindDown(elem, {
                                "duration": 0.3
                            });
                        }.bindAsEventListener(this)
                    });
                }, this);
            },

            validateForm: function (input) {
                var indicator;
                if (this.validateFormFields()) {
                    Form.Element.enable($("di_dialog_form_send_button"));
                } else {
                    Form.Element.disable($("di_dialog_form_send_button"));
                }
                indicator = input.next(".di_valid_indicator");
                if (indicator) {
                    indicator.show();
                }
            },

            validateFormFields: function () {
                var first_name, email, verify, email_value, verify_value, indicator, valid = true;

                if (!$F("di_dialog_form_accept_privacy")) {
                    valid = false;
                }

                first_name = $("di_dialog_form_first_name");
                indicator = first_name.next(".di_valid_indicator");
                if (!first_name.getValue()) {
                    indicator.removeClassName("di_valid");
                    valid = false;
                } else {
                    indicator.addClassName("di_valid");
                }

                email = $("di_dialog_form_email");
                email_value = email.getValue();
                indicator = email.next(".di_valid_indicator");
                if (!email) {
                    indicator.removeClassName("di_valid");
                    valid = false;
                } else {
                    indicator.addClassName("di_valid");
                }

                verify = $("di_dialog_form_verify_email");
                verify_value = verify.getValue();
                indicator = verify.next(".di_valid_indicator");
                if (!verify_value) {
                    indicator.removeClassName("di_valid");
                    valid = false;
                } else {
                    indicator.addClassName("di_valid");
                }
                if (email_value !== verify_value) {
                    indicator.removeClassName("di_valid");
                    valid = false;
                } else {
                    indicator.addClassName("di_valid");
                }

                return valid;
            },

            submitForm: function (e) {
                var form, formData;
                e.stop();
                form = this.dialog_form.down("form");
                formData = form.serialize(true);

                this.removeError();

                form.disable();

                this.bot.sendCommand("dialog_history_send", {
                    "extraData": formData,
                    "onSuccess": function (responseData) {
                        if (responseData) {
                            say(decodeURIComponent(responseData.answer));
                        }
                        this.closeForm();
                    }.bindAsEventListener(this),
                    "onFailure": function () {
                        this.displayError();
                    }.bindAsEventListener(this)
                });
            },

            cancelError: function () {
                this.removeError();
                this.dialog_form.down("form").enable();
            },

            removeError: function () {
                $("di_dialog_form_error").hide();
                this.dialog_form.removeClassName("di_fade");
            },

            displayError: function () {
                this.dialog_form.addClassName("di_fade");
                Locale.subscribe($("di_dialog_form_error").down(".di_message"), "dialog_request_error_message");

                $("di_dialog_form_error").show();
            },

            resetForm: function () {
                var form;
                $("di_dialog_form_error").hide();
                $$(".di_valid_indicator").invoke("hide");
                this.dialog_form.removeClassName("di_fade");
                form = this.dialog_form.down("form");
                form.enable();
                form.reset();
                Form.Element.disable($("di_dialog_form_send_button"));
            },

            drawDialogEntry: function (entry) {
                var html = new Element("div");
                if (entry.user) {
                    html.addClassName("di_dialog_user_text");
                    html.update(Locale.getString("you_said") + entry.text);
                } else {
                    html.addClassName("di_dialog_anna_text");
                    html.update(Locale.getString("anna_said") + entry.text);
                }
                this.container.insert(html);
                html.scrollTo();
            },

            open: function ($super) {
                $super();
                ev.clear();
                ev.addHTML(this.container);
                this.container.show();
                this.showDialogControls();
                this.dialog_form.hide();
            },

            parseDialog: function (dialog) {
                var json = [],
                    index = 0,
                    currentLine = null,
                    findNext = function (string) {
                        return dialog.indexOf(string, index + 1);
                    },
                    findNextLine = function () {
                        var nextUser = findNext("[USER]"),
                            nextAvatar = findNext("[AVATAR]");
                        if (nextUser !== -1 && nextUser < nextAvatar) {
                            return nextUser;
                        } else {
                            return nextAvatar;
                        }
                    },
                    parseNextLine = function () {
                        var end = findNextLine();

                        if (end !== -1) {
                            currentLine = dialog.substring(index, end);
                        } else {
                            currentLine = dialog.substring(index, dialog.length);
                        }
                        index = end;
                        return index !== -1;
                    };

                while (parseNextLine()) {
                    json.push({
                        "user": currentLine.startsWith("[USER]"),
                        "text": currentLine.substr(currentLine.indexOf("]") + 1)
                    });
                }

                return json;
            },

            afterOpen: function ($super) {
                extraViews.setButtonShow();
                $super();
                this.showDialogControls();
                Locale.subscribe(this.dialog_controls, "dialog_question", function (element) {
                    element.select("a").each(function (link) {
                        link.observe("click", this.openForm.bindAsEventListener(this));
                    }, this);
                }.bind(this));

                this.container.update();

                this.getDialog(function (responseData) {
                    var dialog, json;
                    if (responseData && responseData.extraData.dialog_history) {
                        dialog = decodeURIComponent(responseData.extraData.dialog_history);
                        json = this.parseDialog(dialog);
                        json.each(function (entry) {
                            this.drawDialogEntry(entry);
                        }, this);
                    }
                }.bindAsEventListener(this));
            },

            getDialog: function (success) {
                this.bot.sendCommand("dialog_history", {
                    "onSuccess": success
                });
            },

            close: function ($super, hide) {
                $super(hide);
                this.container.hide();
                $("anna").insert(this.container);
                this.dialog_controls.hide();
                this.dialog_form.hide();
            }
        }),

        Info_control = Class.create(IKEAExtensionControl, {
            content: "",

            initialize: function ($super, btn_query, class_name, bot) {
                $super(btn_query, class_name, "info", bot);
            },

            addHTML: function (html) {
                this.content = html;
                if (currentView === this) {
                    this.draw();
                }
            },

            draw: function () {
                ev.clear();
                ev.addHTML(this.content);
                if (this.content !== "") {
                    ev.show();
                }
            },

            clear: function () {
                this.content = null;
                if (this === currentView) {
                    ev.clear();
                }
            },

            open: function ($super) {
                this.bot.sendCommand("info", {
                    "onSuccess": function (responseData) {
                        var ev_content;
                        if (responseData) {
                            say(decodeURIComponent(responseData.answer));

                            ev_content = responseData.extraData[configuration.extended_view_html_param];

                            if (ev_content) {
                                this.addHTML(decodeURIComponent(ev_content));
                                $super();
                            }
                        }
                    }.bindAsEventListener(this)
                });
            },

            afterOpen: function ($super) {
                extraViews.setButtonShow();
                controls.feedback.hide();
                this.draw();
            }
        }),

        Language_control = Class.create({
            initialize: function (id) {
                this.container = null;
                this.element = $(id);
                this.showing = false;

                //Move the button to the bottom of the interface so it will have the highest z-index.
                $("anna").insert({
                    "bottom": this.element
                });

                if (!this.hasMultipleLocales()) {
                    this.element.hide();
                }

                this.element.observe("mouseleave", this.hideMenu.bind(this));

                this.element.observe("mouseenter", this.showMenu.bind(this));
            },

            hasMultipleLocales: function () {
                var locale_count = 0, locale;
                for (locale in locales) {
                    if (locales.hasOwnProperty(locale)) {
                        locale_count += 1;
                        if (locale_count > 1) {
                            return true;
                        }
                    }
                }
                return false;
            },

            updateContainerWidth: function () {
                if (this.showing) {
                    this.container.setStyle({
                        "width": this.element.getWidth() + "px"
                    });
                }
            },

            showMenu: function () {
                var locale,
                    name,
                    langLink,
                    current_locale_name,
                    liEntry,

                    langChoise = function (xLocale, sName, sCurrentLocaleName, oLiEntry) {
                        if (sName === sCurrentLocaleName) {
                            oLiEntry.addClassName("di_current_locale");
                        } else {
                            langLink.observe("click", function () {
                                if (xLocale[sName] !== Locale.getLocale()) {
                                    Locale.setLocale(sName);
                                }
                                this.hideMenu();
                            }.bind(this));
                        }
                    }.bind(this);

                if (this.showing === false) {
                    this.showing = true;

                    current_locale_name = Locale.getLocaleName();

                    this.element.addClassName("di_selected");
                    this.container = new Element("ul", {
                        "className": "di_language_container"
                    });
                    this.element.insert({
                        "bottom": this.container
                    });

                    //Ensure the list container width matches the button.
                    this.updateContainerWidth();
                    Element.observe(document, "anna:locale_updated", this.updateContainerWidth.bind(this));

                    // Add a link for each locale in the locales list.
                    for (name in locales) {
                        if (locales.hasOwnProperty(name)) {
                            locale = locales[name];
                            langLink = new Element("a").update(locale.language);

                            liEntry = new Element("li");

                            // (function () {
                            //     var theName = name;
                            //     if (name === current_locale_name) {
                            //         liEntry.addClassName("di_current_locale");
                            //     } else {
                            //         langLink.observe("click", function () {
                            //             if (locale[theName] !== Locale.getLocale()) {
                            //                 Locale.setLocale(theName);
                            //             }
                            //             this.hideMenu();
                            //         }.bind(this));
                            //     }
                            // }.bind(this)());

                            langChoise(locale, name, current_locale_name, liEntry);

                            liEntry.update(langLink);

                            this.container.appendChild(liEntry);
                        }
                    }

                    Effect.BlindDown(this.container, {
                        "duration": 0.3
                    });
                }
            },

            hideMenu: function () {
                if (this.showing === true) {
                    this.showing = false;
                    this.element.removeClassName("di_selected");
                    this.container.remove();
                    this.container = null;
                }
            }
        }),

        Form_control = Class.create(IKEAExtensionControl, {

            open: function ($super) {
                $super();
                ev.addHTML(this.form);
                this.form.show();
            },

            close: function ($super, hide) {
                //hide the form somewhere to preserve the event handlers.
                this.form.hide();
                $("anna").insert(this.form);
                $super(hide);
            },

            addInvalidNotification: function (element, message) {
                var className;
                element.addClassName("di_invalid");
                element.up(".di_custom_form_page").addClassName("di_invalid");
                if (message) {
                    className = "di_invalid_message";
                    if (element.hasAttribute("id")) {
                        className += " di_invalid_message_for_" + element.readAttribute("id");
                    }
                    element.insert({
                        "after": new Element("span", {
                            "className": className
                        }).update(decodeURIComponent(message))
                    });
                }
            },

            hideInvalidNofitication: function (element) {
                var query, next, page;
                if (typeof element === "undefined") {
                    this.form.select(".di_invalid").invoke("removeClassName", "di_invalid");
                    this.form.select(".di_invalid_message").invoke("remove");
                } else if (element.hasClassName("di_invalid")) {
                    if (element.hasAttribute("id")) {
                        query = ".di_invalid_message_for_" + element.readAttribute("id");
                        $$(query).invoke("remove");
                    } else {
                        next = element.next(".di_invalid_message");
                        next.remove();
                    }
                    element.removeClassName("di_invalid");

                    page = element.up(".di_custom_form_page");
                    if (page.select(".di_invalid").length < 1) {
                        page.removeClassName("di_invalid");
                    }
                }
            },

            validate: function () {
                return this.controls.collect(this.validateControl, this).all();
            },

            validateControl: function (control) {
                var value;
                this.hideInvalidNofitication(control.element);
                if (typeof (control.data.validation) === "undefined") {
                    return true;
                }
                value = control.element.getValue();

                //Mandatory is true by default.
                if ((typeof (value) === "undefined" || value === null || value === "")) {
                    if (typeof (control.data.validation.mandatory) === "undefined" || control.data.validation.mandatory === false) {
                        return true;
                    }
                    this.addInvalidNotification(control.element, control.data.validation.mandatory.message);
                    return false;
                } else {
                    if (typeof (value) === "string") {
                        return this.validateValue(control, value);
                    } else if (typeof (value) === "array") {
                        return value.all(this.validateValue.curry(control), this);
                    }
                }

                return true;
            },

            validateValue: function (control, value) {
                var regexp;
                if (!(typeof (control.data.validation.regexp) === "undefined" || typeof (control.data.validation.regexp.value) === "undefined")) {
                    regexp = new RegExp(control.data.validation.regexp.value);
                    if (!regexp.test(value)) {
                        this.addInvalidNotification(control.element, control.data.validation.regexp.message);
                        return false;
                    }
                }
                return true;
            },

            createForm: function (formData) {
                ev.clear();

                this.controls = [];
                this.namedElements = new Hash();

                this.form = new Element("form");

                this.pageContainer = new Element("div", {
                    "className": "di_custom_form_page_container"
                });
                this.form.insert(this.pageContainer);
                this.pages = [];

                this.form.addClassName("di_custom_form");

                if (formData.id) {
                    this.form.writeAttribute("id", formData.id);
                }

                if (formData["class"]) {
                    this.form.addClassName(formData["class"]);
                }

                if (formData.method) {
                    this.form.writeAttribute("method", formData.method);
                }

                this.addPage();
                this.addInput({
                    "type": "hidden",
                    "name": "formName",
                    "value": formData.formName || "form"
                });

                this.form.observe("submit", this.submit.bindAsEventListener(this));

                if (formData.controls) {
                    formData.controls.each(this.handleData, this);
                }

                if (typeof (this.startEllipsis) === "undefined") {
                    this.startEllipsis = this.createEllipsis();
                }

                this.pages[0].button.up().insert({
                    "after": this.startEllipsis
                });

                if (typeof (this.endEllipsis) === "undefined") {
                    this.endEllipsis = this.createEllipsis();
                }

                this.pages[this.pages.length - 1].button.up().insert({
                    "before": this.endEllipsis
                });

                this.setCurrentPage(0);
            },

            submit: function (e) {
                var formdata;
                e.stop();
                this.hideInvalidNofitication();
                if (this.validate()) {
                    formdata = this.form.serialize(true);
                    this.form.disable();
                    com.ikea.irw.askAnna.anna.sendCommand("form", {
                        "extraData": formdata,
                        "onSuccess": this.onSuccess.bindAsEventListener(this),
                        "onFailure": this.onFailure.bindAsEventListener(this)
                    });
                } else {
                    this.pages.detect(function (page) {
                        if (page.page.hasClassName("di_invalid")) {
                            this.setCurrentPage(page.number);
                            return true;
                        }
                        return false;
                    }, this);
                    this.form.enable();
                }
            },

            onSuccess: function (responseData) {
                var extraData, element;
                if (responseData !== null) {
                    extraData = responseData.extraData;
                    if (typeof (extraData.success) === "string" && extraData.success.toLowerCase() === "true") {
                        this.displayMessage(decodeURIComponent(extraData.message), function () {
                            extraViews.form(false);
                        }.bind(this));
                    } else {
                        if (typeof (extraData.errors) === "string") {
                            extraData.errors = JSON.parse(decodeURIComponent(extraData.errors));
                        }
                        if (typeof (extraData.errors) === "object") {
                            extraData.errors.each(function (error) {
                                element = this.namedElements.get(error.name);
                                this.addInvalidNotification(element, error.message);
                            }, this);
                        }
                        this.displayMessage(decodeURIComponent(extraData.message));
                    }
                } else {
                    this.displayMessage(Locale.getString("custom_form_error"));
                }
            },

            onFailure: function (t) {
                this.displayMessage(Locale.getString("custom_form_error"));
            },

            displayMessage: function (message, callback) {
                say(message);
                this.form.enable();
                if (Object.isFunction(callback)) {
                    callback();
                }
            },

            handleData: function (data) {
                switch (data.control) {
                case "input":
                    this.addInput(data);
                    break;
                case "select":
                    this.addSelectList(data);
                    break;
                case "textarea":
                    this.addTextarea(data);
                    break;
                case "label":
                    this.addLabel(data);
                    break;
                case "break":
                    this.addBreak(data);
                    break;
                case "text":
                    this.addText(data);
                    break;
                case "hidden":
                    this.addHidden(data);
                    break;
                case "page":
                    this.addPage();
                    break;
                default:
                    this.addInput(data);
                    break;
                }
            },

            setCurrentPage: function (number) {
                if (this.pages[this.currentPage]) {
                    this.pages[this.currentPage].page.removeClassName("di_current_page");
                    this.pages[this.currentPage].content.hide();
                }
                this.currentPage = number;
                this.pages[this.currentPage].page.addClassName("di_current_page");
                this.pages[this.currentPage].content.show();

                this.organiseButtons();
            },

            createEllipsis: function () {
                return new Element("div", {
                    "className": "di_ellipsis"
                }).update("...");
            },

            setStartEllipsisVisible: function (visible) {
                if (visible) {
                    this.startEllipsis.show();
                } else {
                    this.startEllipsis.hide();
                }
            },

            setEndEllipsisVisible: function (visible) {
                if (visible) {
                    this.endEllipsis.show();
                } else {
                    this.endEllipsis.hide();
                }

            },

            organiseButtons: function () {
                var maxButtons = 6, startButton, endButton, i;

                this.setStartEllipsisVisible(false);
                this.setEndEllipsisVisible(false);

                if (this.pages.length <= maxButtons) {
                    this.pages.each(this.showPageButton);
                } else {
                    this.pages.each(this.hidePageButton);

                    startButton = this.currentPage - 2 < 0 ? 0 : this.currentPage - 2;

                    endButton = startButton + maxButtons - 1;

                    if (endButton >= this.pages.length) {
                        endButton = this.pages.length - 1;
                        startButton = endButton - maxButtons + 1;
                    }

                    if (startButton < 0) {
                        startButton = 0;
                    }
                    if (endButton >= this.pages.length) {
                        endButton = this.pages.length - 1;
                    }

                    if (startButton === 1) {
                        startButton = 0;
                    } else if (startButton !== 0) {
                        startButton += 1;
                        this.showPageButton(this.pages[0]);
                        this.setStartEllipsisVisible(true);
                    }

                    if (endButton === this.pages.length - 2) {
                        endButton = this.pages.length - 1;
                    }
                    if (endButton !== this.pages.length - 1) {
                        endButton -= 1;
                        this.showPageButton(this.pages[this.pages.length - 1]);
                        this.setEndEllipsisVisible(true);
                    }
                    for (i = startButton; i <= endButton; i += 1) {
                        this.showPageButton(this.pages[i]);
                    }
                }
            },

            showPageButton: function (page) {
                page.button.show();
            },

            hidePageButton: function (page) {
                page.button.hide();
            },

            addPage: function () {
                var page = new Element("div", {
                    "className": "di_custom_form_page"
                }),
                    content = new Element("div", {
                        "className": "di_custom_form_page_content"
                    }),
                    button = new Element("div", {
                        "className": "di_custom_form_page_button"
                    }),
                    number = this.pages.length;

                this.currentPage = number;
                this.pages.push({
                    "page": page,
                    "content": content,
                    "button": button,
                    "number": number
                });

                page.insert(content);
                page.insert(button);

                content.hide();

                button.update(number + 1);

                button.observe("click", function () {
                    this.setCurrentPage(number);
                }.bindAsEventListener(this));

                this.pageContainer.insert(page);

                if (this.pages.length > 1) {
                    this.form.addClassName("di_paginated");
                }
            },

            setCommonAttributes: function (element, data) {
                if (data.id) {
                    element.writeAttribute("id", data.id);
                }
                if (data.className) {
                    element.addClassName(data.className);
                }
            },

            setCommonControlAttributes: function (element, data) {
                var control = {
                    "element": element,
                    "data": data
                };
                this.controls.push(control);
                this.setCommonAttributes(element, data);
                if (data.value) {
                    element.setValue(data.value);
                }
                if (typeof (data.disabled) !== "undefined" && data.disabled === true) {
                    element.disable();
                }
                if (data.name) {
                    this.namedElements.set(data.name, element);
                    element.writeAttribute("name", data.name);
                }

                element.observe("blur", function () {
                    this.validateControl(control);
                }.bindAsEventListener(this));
            },

            addElementToCurrentPage: function (element) {
                this.pages[this.currentPage].content.insert(element);
            },

            addLabel: function (data) {
                var element = new Element("label");

                this.setCommonAttributes(element, data);

                if (data.text) {
                    element.update(data.text);
                }
                if (data["for"]) {
                    element.writeAttribute("for", data["for"]);
                }
                this.addElementToCurrentPage(element);
            },

            addBreak: function (data) {
                var element = new Element("br");

                this.setCommonAttributes(element, data);

                this.addElementToCurrentPage(element);
            },

            addText: function (data) {
                var element = new Element("span");

                this.setCommonAttributes(element, data);

                if (data.text) {
                    element.update(data.text);
                }
                this.addElementToCurrentPage(element);
            },

            addInput: function (data) {
                var element = new Element("input");

                if (data.type) {
                    element.writeAttribute("type", data.type);
                }

                this.setCommonControlAttributes(element, data);

                this.addElementToCurrentPage(element);
            },

            addSelectList: function (data) {
                var element = new Element("select"), optElements = [], option;

                if (typeof (data.multiple) !== "undefined" && data.multiple === true) {
                    element.writeAttribute("multiple", "multiple");
                }

                if (data.options) {
                    data.options.each(function (optdata) {
                        option = new Element("option");
                        optElements.push({
                            "element": option,
                            "data": optdata
                        });
                        if (optdata.value) {
                            option.writeAttribute("value", optdata.value);
                        }
                        if (optdata.text) {
                            option.update(optdata.text);
                        }
                        element.insert(option);
                    });
                }

                this.setCommonControlAttributes(element, data);

                optElements.each(function (optData) {
                    if (typeof (optData.data.selected) !== "undefined") {
                        optData.element.selected = optData.data.selected;
                    }
                });


                this.addElementToCurrentPage(element);
            },

            addTextarea: function (data) {
                var element = new Element("textarea");

                this.setCommonControlAttributes(element, data);

                this.addElementToCurrentPage(element);
            }
        }),

        Extended_control = Class.create(IKEAExtensionControl, {
            setup: function ($super) {
                $super();
                this.content = null;
            },

            update: function (html) {
                this.content = html;
                ev.clear();
                ev.addHTML(this.content);
            },

            updateFrame: function (url) {
                if (typeof (url) === "string" && url !== "") {
                    this.url = url;
                    ev.setFrameLocation(url);
                    ev.showFrame();
                } else {
                    ev.hideFrame();
                }
            },

            afterOpen: function ($super) {
                $super();
                if (this.url) {
                    ev.setFrameLocation(this.url);
                    ev.showFrame();
                } else {
                    if (this.content) {
                        ev.addHTML(this.content);
                    }
                }
            },

            close: function ($super, hide) {
                $super(hide);
            }
        }),

        Tooltip_control = Class.create({
            initialize: function (element, tool_tip) {
                this.deltaX = 0;
                this.deltaY = 20;

                element.observe("mouseenter", this.onMouseEnter.bindAsEventListener(this));
                element.observe("mouseleave", this.onMouseLeave.bindAsEventListener(this));
                element.observe("mousemove", this.onMouseMove.bindAsEventListener(this));

                this.tool_tip = $(tool_tip);
                this.tool_tip.hide();
                this.tool_tip.addClassName("di_tooltip");

                $("anna").insert(this.tool_tip);
            },

            startTimer: function (e) {
                this.timer = new PeriodicalExecuter(this.show.bind(this, e), 1);
            },

            stopTimer: function () {
                if (this.timer !== null) {
                    this.timer.stop();
                    this.timer = null;
                }
            },

            show: function () {
                this.stopTimer();
                this.tool_tip.show();
            },

            hide: function (e) {
                this.stopTimer();
                this.tool_tip.hide();
            },

            onMouseEnter: function (e) {
                this.updatePosition(e);
                this.startTimer(e);
            },

            onMouseLeave: function (e) {
                if (this.timer !== null) {
                    this.timer.stop();
                } else {
                    this.hide();
                }
            },

            onMouseMove: function (e) {
                this.updatePosition(e);
            },

            updatePosition: function (e) {
                var so = document.viewport.getScrollOffsets(), x = e.pointerX() - so[0], y = e.pointerY() - so[1];
                this.tool_tip.setStyle({
                    "top": y + this.deltaY + "px",
                    "left": x + this.deltaX + "px"
                });
            }
        }),

        Chat_control = function (id, dialog_control) {
            var element = $(id);
            element.observe("click", function (e) {
                dialog_control.getDialog(function (responseData) {
                    var url, form;
                    if (responseData) {
                        url = configuration.chat_handover_url;
                        form = new Element("form");

                        form.writeAttribute("action", url);
                        form.writeAttribute("target", "_blank");
                        form.writeAttribute("method", "post");
                        form.insert(new Element("input", {
                            "name": "dialog",
                            "type": "hidden"
                        }).setValue(decodeURIComponent(responseData.extraData.dialog_history)));

                        form.submit();
                    }
                });
            }.bindAsEventListener(this));

            this.show = function (text) {
                element.update(text);
                element.addClassName("di_display");
            };

            this.hide = function () {
                element.removeClassName("di_display");
            };
        },

        SessionTimer = function (bot) {
            var attempts,
                encouraging = false,
                serverDown = false,
                firstCheck = true,
                outOfLicense = false,
                stopped = false,
                resetHandler,

                encourageTimer = null,

                resetState = function () {
                    encouraging = false;
                    serverDown = false;
                    outOfLicense = false;
                },

                onSessionTimeout = function (pe) {
                    pe.stop();
                    if (encouraging && !stopped && !serverDown && !outOfLicense) {
                        if (attempts === 0) {
                            bot.close(null, null);
                        } else {
                            this.encourage();
                        }
                        attempts = attempts - 1;
                    }
                };

            this.encourage = function () {
                bot.sendCommand("encourage", {
                    "onSuccess": function (responseData) {
                        say(decodeURIComponent(responseData.answer));

                        extraViews.startUpdate();
                        extraViews.extended(false);
                        extraViews.feedback(false);
                        controls.feedback.hide();
                        extraViews.form(false);
                        extraViews.stopUpdate();

                        this.startEncourageTimer();
                    }.bindAsEventListener(this)
                });
            };

            this.reset = function () {
                this.stopEncourageTimer();
                resetState();
                attempts = configuration.encourage_times;
                this.startEncourageTimer();
            };

            this.startEncourageTimer = function () {
                if (configuration.maximum_idle_time > 0) {
                    encouraging = true;
                    encourageTimer = new PeriodicalExecuter(onSessionTimeout.bindAsEventListener(this), configuration.maximum_idle_time);
                    $("anna").observe("click", resetHandler);
                    $("anna").observe("keydown", resetHandler);
                }                
            };
            
            this.stopEncourageTimer = function () {
                if (encourageTimer !== null) {
                    encourageTimer.stop();
                }
                $("anna").stopObserving("click", resetHandler);
                $("anna").stopObserving("keydown", resetHandler);
            };

            this.startOutOfLicenseTimer = function () {
                resetState();
                outOfLicense = true;
                return new PeriodicalExecuter(function (t) {
                    t.stop();
                    if (outOfLicense && !stopped) {
                        bot.command("last_request");
                    }
                }, 20);
            };

            this.startServerDownTimer = function () {
                resetState();
                serverDown = true;

                return new PeriodicalExecuter(function (t) {
                    t.stop();
                    if (serverDown && !stopped) {
                        firstCheck = false;
                        bot.command("start_session");
                    }
                }, firstCheck ? 10 : 60);
            };

            this.stop =  function () {
                this.stopEncourageTimer();
                stopped = true;
                resetState();
            };
            
            resetHandler = function () {
                if (!stopped) {
                    this.reset();
                }                
            }.bindAsEventListener(this);            
        };

    DI.Extensions.add("ikea_ui", function () {
        var customer_feedback_configuration = null,
            sessionTimer,

            checkOutOfLicense = function (error) {
                return error.status === 503;
            },

            getDisabledImagePath = function () {
                var state = com.ikea.irw.askAnna.anna.getState();
                return (state && typeof state.avatar !== "undefined" && state.avatar !== null) ? (configuration.root + state.avatar.emotionPath + "disabled.jpg") : "";
            },

            preloadImage = function (src) {
                var cacheObj = new Image();
                cacheObj.src = src;
            },

            getDisabledImage = function () {
                return new Element("img", {
                    "src": getDisabledImagePath()
                });
            },

            disableInterface = function () {
                ev.hide();

                var image = getDisabledImage(),
                    bot_elem = $("anna");

                bot_elem.addClassName("di_disabled");

                bot_elem.select(".di_blocker").each(function (blocker) {
                    blocker.update(image);
                });
            },

            enableInterface = function () {
                var bot_elem = $("anna");
                bot_elem.removeClassName("di_disabled");
            },

            showOutOfLicenseMessage = function () {
                disableInterface();
                $("anna").addClassName("di_out_of_license");
            },

            hideOutOfLicenseMessage = function () {
                enableInterface();
                $("anna").removeClassName("di_out_of_license");
            },

            checkServerDown = function (error) {
                return true;
            },

            showServerDownMessage = function () {
                disableInterface();
                $("anna").addClassName("di_server_down");
            },

            hideServerDownMessage = function () {
                enableInterface();
                $("anna").removeClassName("di_server_down");
            };

        this.sendInput = function (text, callback, base) {
            // avoid sending empty text
            if (text && (text.strip() !== "")) {
                base(text, callback);
            }
            sessionTimer.reset();
        };

        this.move = function (top, left, base) {
            if (sessionTimer) {
                sessionTimer.reset();
            }
            base(top, left);
        };

        this.getDimensions = function (element, base) {
            var dims = base(element), ev = $("anna").down(".di_ev");

            if (ev.visible()) {
                dims.height += ev.getHeight();
            }
            return dims;
        };

        this.onAdded = function () {
            var createTooltips;
            com.ikea.irw.askAnna.anna = this;

            createTooltips = function (className, tip_id) {
                $$(className).each(function (element) {
                    var tool_tip = $(tip_id), dummy = new Tooltip_control(element, tool_tip);
                    //$("anna").insert(tool_tip);
                    //new Tooltip(element.identify(), tool_tip);
                });
            };

            ev = this.getExtendedView("di_ev_primary");

            //Set up the locale strings and events for all elements that will be present
            //when the UI is first loaded.
            Locale.subscribe($("di_you_said"), "you_said");
            Locale.subscribe($("di_anna_said"), "anna_said");
            Locale.subscribe($("di_see_more"), "see_more");
            Locale.subscribe($("di_close_view"), "close_view");
            Locale.subscribe($("di_dialog_form_notice"), "dialog_notice");
            Locale.subscribe($("di_dialog_form_first_name_label"), "first_name");
            Locale.subscribe($("di_dialog_form_email_label"), "email");
            Locale.subscribe($("di_dialog_form_verify_email_label"), "verify_email");
            Locale.subscribe($("di_dialog_form_send_button"), "send");
            Locale.subscribe($("di_error_container"), "knowledge_server_down_message");

            //Paulo - Tooltip
            Locale.subscribe($("di_drag_btn_tt"), "drag_tooltip");
            Locale.subscribe($("di_close_btn_tt"), "close_tooltip");
            Locale.subscribe($("di_info_btn_tt"), "info_tooltip");
            Locale.subscribe($("di_dialog_btn_tt"), "dialog_tooltip");
            Locale.subscribe($("di_audio_btn_tt"), "audio_tooltip");
            Locale.subscribe($("di_send_button_tt"), "send_tooltip");
            Locale.subscribe($("di_ev_open_btn_tt"), "ev_open_tooltip");

            createTooltips(".di_send_button", "di_send_button_tt");
            createTooltips(".di_ev_open_btn", "di_ev_open_btn_tt");
            createTooltips(".di_drag_btn", "di_drag_btn_tt");
            createTooltips(".di_anna_closeButton", "di_close_btn_tt");
            createTooltips(".di_info_btn", "di_info_btn_tt");
            createTooltips(".di_dialog_btn", "di_dialog_btn_tt");
            createTooltips(".di_audio_btn", "di_audio_btn_tt");

            //Paulo - Tooltip
            Locale.subscribe($("di_try_again_link"), "try_again");
            Locale.subscribe($("di_cancel_link"), "cancel");
            Locale.subscribe($("di_language_text"), "change_lang");

            $("di_ev_open_btn").hide();

            $$("#anna .di_form_input").each(function (input) {
                var addPlaceholder = function () {
                    if (input.getValue() === "") {
                        input.addClassName("di_placeholder");
                        input.setValue(Locale.getString("question_text"));
                    }
                },
                    removePlaceholder = function () {
                        if (input.hasClassName("di_placeholder")) {
                            input.removeClassName("di_placeholder");
                            input.setValue("");
                        }
                    };
                input.observe("focus", removePlaceholder);
                input.observe("blur", addPlaceholder);

                addPlaceholder();
            });

            $$("#anna .di_title").each(function (element) {
                Locale.subscribe(element, "ask_anna", function () {
                    $$("#anna input.di_form_input.di_placeholder").each(function (input) {
                        input.setValue(Locale.getString("question_text"));
                    });
                });
            });

            $$("#anna .di_anna_closeButton").each(function (element) {
                element.observe("click", function () {
                    com.ikea.irw.askAnna.anna.close(null, null);
                });
            });

            $$("#anna label.di_dialog_privacy").each(function (element) {
                Locale.subscribe(element, "accept_privacy", function (elem) {
                    //Set the click event on the privacy policy link in the locale string.
                    elem.select("a").each(function (a) {
                        a.observe("click", function (e) {
                            e.stop();
                            window.open(Locale.getString("dialog_privacy_policy_url"), "privacypolicy", "menubar=0,location=0,menubar=0,status=0");
                        });
                    });
                });
            });

            //Send buttons
            $$("#anna .di_send_button").each(function (element) {
                element.observe("click", function () {
                    $$("#anna input.di_form_input").each(function (input) {
                        if (!input.hasClassName("di_placeholder")) {
                            this.sendInput(input.getValue(), function () {
                                $("di_you_said_container").show();
                            });
                            input.clear();
                            input.focus();
                        }
                    }, this);

                }.bindAsEventListener(this));
            }, this);

            // Text To Speech (TTS) Toggle Handling
            // This looks for a checkbox with the ID "ttsmode" and links the state
            // of the TTS button in the Anna UI with the state of the checkbox.
            (function () {
                var audio_buttons = $$("#anna .di_audio_btn"),
                    ttsModeInput = $("ttsmode"),
                    getCheckBoxState = function () {
                        return ttsModeInput ? ttsModeInput.getValue() !== null : null;
                    },
                    ttsMode = getCheckBoxState(),
                    setButtonState;

                //If the ttsMode checkbox doesn"t exist, hide the button.
                if (ttsMode === null) {
                    audio_buttons.invoke("hide");
                } else {
                    setButtonState = function () {
                        if (ttsMode) {
                            audio_buttons.invoke("addClassName", "di_selected");
                        } else {
                            audio_buttons.invoke("removeClassName", "di_selected");
                        }
                    };
                    setButtonState();
                    ttsModeInput.observe("change", function () {
                        ttsMode = getCheckBoxState();
                        setButtonState();
                    });
                    audio_buttons.each(function (button) {
                        button.observe("click", function () {
                            ttsMode = !ttsMode;
                            if (ttsMode) {
                                ttsModeInput.setValue("on");
                            } else {
                                ttsModeInput.setValue(null);
                            }
                            setButtonState();
                        });
                    });

                    if (!configuration.enabled_modules.tts) {
                        ttsMode = false;
                        setButtonState();
                        audio_buttons.invoke("hide");
                    }
                }
            }());



            controls.language = new Language_control("di_language_btn", null, this);
            controls.dialog = new Dialog_control(".di_dialog_btn", null, this);
            controls.info = new Info_control(".di_info_btn", null, this);
            controls.chat = new Chat_control("di_chat_handover", controls.dialog);
            controls.feedback = new Feedback_control(null, null, this);
            controls.form = new Form_control(null, null, this);
            controls.extended = new Extended_control(null, null, this);

            $("di_see_more").observe("click", function () {
                extraViews.open();
            }.bindAsEventListener(this));

            $("di_close_view").observe("click", function () {
                extraViews.close(true);
            }.bindAsEventListener(this));

            preloadImage(getDisabledImagePath());
        };

        this.onRequestError = function (error, base) {
            if (checkOutOfLicense(error)) {
                sessionTimer.startOutOfLicenseTimer();
                showOutOfLicenseMessage();
            } else {
                if (checkServerDown(error)) {
                    sessionTimer.startServerDownTimer();
                    showServerDownMessage();
                }
            }
        };

        function handleResponseParameter(responseData, parameter, defaultValue, callback) {
            var stringValue = (typeof responseData.extraData[parameter] === "string") ? decodeURIComponent(responseData.extraData[parameter]) : defaultValue;
            return callback(stringValue, responseData);
        }

        function handleExtraDataCustomerFeedback(stringValue, responseData) {
            extraViews.feedback(false);
            if (stringValue === null) {
                customer_feedback_configuration = null;
                controls.feedback.hideOptions();
            } else {
                if (!controls.feedback.transactionHasFeedback(responseData.responseSession.transaction)) {
                    customer_feedback_configuration = stringValue.evalJSON();
                    controls.feedback.setMessage(customer_feedback_configuration.message);
                    controls.feedback.setOptions(customer_feedback_configuration.options);
                    controls.feedback.setTransaction(responseData.responseSession.transaction);
                    controls.feedback.hideExtraFeedback();
                    controls.feedback.show();
                    return true;
                }
            }
            return false;
        }

        function handleExtraDataCustomForm(stringValue) {
            var formData;
            if (stringValue !== null) {
                formData = stringValue.evalJSON();
                controls.form.createForm(formData);
                extraViews.form(true);
            } else {
                extraViews.form(false);
            }
        }

        function handleExtraDataExtendedViewHTML(stringValue, responseData) {
            if (stringValue && stringValue !== "") {
                controls.extended.update(stringValue);
                return true;
            }
            return false;
        }

        function handleExtraDataExtendedViewIFRAME(stringValue, responseData) {
            controls.extended.updateFrame(stringValue);
            if (stringValue && stringValue !== "") {
                return true;
            }
            return false;
        }

        function handleExtraDataChatHandover(stringValue) {
            if (stringValue !== null) {
                controls.chat.show(stringValue);
            } else {
                controls.chat.hide();
            }
            return true;
        }

        function handleCollapsibleBoxes() {
            $("anna").select(".di_anna_collapsible").each(function (box) {
                var heads = box.select(".di_anna_collapsible_head");

                heads.each(function (head) {
                    head.observe("click", function (e) {
                        e.stop();
                        box.toggleClassName("di_expanded");
                    });
                });
            });

        }

        function handleResponse(responseData) {
            var keepOpen = typeof responseData.extraData[configuration.keep_ev_open_param] === "string",
                hasFeedback = false,
                extendedControlOpen = false;

            extraViews.startUpdate(keepOpen);

            //Customer Feedback
            hasFeedback = handleResponseParameter(responseData, configuration.customer_feedback_param, null, handleExtraDataCustomerFeedback);
            //Custom Form
            handleResponseParameter(responseData, configuration.custom_form_param, null, handleExtraDataCustomForm);
            //Extended View HTML
            if (handleResponseParameter(responseData, configuration.extended_view_html_param, "", handleExtraDataExtendedViewHTML)) {
                extendedControlOpen = true;
            }
            if (handleResponseParameter(responseData, configuration.extended_view_iframe_param, "", handleExtraDataExtendedViewIFRAME)) {
                extendedControlOpen = true;
            }
            extraViews.extended(extendedControlOpen);

            //Chat Handover
            handleResponseParameter(responseData, configuration.chat_handover_param, null, handleExtraDataChatHandover);

            extraViews.stopUpdate();

            if (hasFeedback) {
                controls.feedback.show();
            }

            if (!keepOpen) {
                if (currentView === controls.info || currentView === controls.dialog) {
                    currentView.close(true);
                }
            }
        }

        function handleResponseMarkup() {
            handleCollapsibleBoxes();
        }

        this.showAnswer = function (responseData, base) {
            if (this.closed) {
                return;
            }
            hideOutOfLicenseMessage();
            hideServerDownMessage();
            controls.feedback.hide();
            //Handle responseData here
            if (responseData && responseData.extraData) {
                try {
                    handleResponse(responseData);
                } catch (err) {
                    sessionTimer.startServerDownTimer();
                    showServerDownMessage();
                    throw err;
                }
            }
            base(responseData);
            handleResponseMarkup();
        };
        
        this.close = function (success, failure, base) {
            $("di_you_said_container").hide();
            $("di_anna_said").update();
            controls.dialog.reset();
            this.closed = true;
            base(success, failure);
        };

        this.show = function (base) {
            var state = DI.StateManager.getState(DI.AnnaStateName, {});
            if (state && state.session && typeof (state.session.transaction) === "undefined") {
                this.command("start_session");
            }
            
            if (!sessionTimer) {
                sessionTimer = new SessionTimer(this);
            }
            sessionTimer.reset();

            base();
        };
        
        this.hide = function (base) {
            if (sessionTimer) {
                sessionTimer.stop();
            }
            base();
        };
        

        DI.UI.prototype.sendCommand = function (command, userOptions) {
            var session = this.getSession(),
                options = {
                    userInput: "",
                    extraData: {},
                    onSuccess: null,
                    onFailure: null
                };

            Object.extend(options, userOptions || {});

            session.doCommand(command, options.userInput, options.extraData, options.onSuccess, options.onFailure);
        };

        function startConnecting() {
            $("anna").addClassName("di_connecting");
            $("anna").select(".di_body").each(function (container) {
                var loadingImage = new Element("div", {
                    "class": "di_loading_image"
                });
                container.insert({
                    "after": loadingImage
                });
            });
        }

        function stopConnecting() {
            $("anna").removeClassName("di_connecting");
            $("anna").select(".di_loading_image").invoke("remove");

            //Fix for IE bug where hidden elements would be displayed
            if ($("anna").hasClassName("di_disabled")) {
                $("anna").removeClassName("di_disabled");
                $("anna").addClassName("di_disabled");
            }
        }

        DI.UI.prototype.command = function (command, callback) {
            switch (command) {
            case "kill_session":
                this.close(callback, callback);
                break;
            case "start_session":
                if (!callback) {
                    callback = Prototype.emptyFunction;
                }
                if (!starting_session) {
                    starting_session = true;
                    startConnecting();
                    this.sendCommand("start_session", {
                        "onSuccess": function (responseData) {
                            controls.feedback.hide();
                            stopConnecting();
                            //put the response text in to the answer area
                            this.showAnswer(responseData);
                            //say(decodeURIComponent(responseData.answer));
                            hideServerDownMessage();
                            starting_session = false;
                            callback(responseData);
                        }.bindAsEventListener(this),
                        "onFailure": function () {
                            controls.feedback.hide();
                            starting_session = false;
                            sessionTimer.startServerDownTimer();
                            showServerDownMessage();
                            stopConnecting();
                        }
                    });
                }
                break;
            case "restart_dialogue":
                this.close(null, null);
                this.open();
                break;
            case "last_request":
                this.sendInput(this.getSession().getLastUserInput(), null);
                break;
            }
        };
    }, true);

    DI.Extensions.add("ikea_extended_view", function () {
        var view, shown = false, ready = true;

        function onAnimationEnd() {
            ready = true;
            if (!shown) {
                $("anna").removeClassName("di_ev_open");
            }
            com.ikea.irw.askAnna.anna.move(null, null);
        }

        this.onAdded = function (data) {
            view = $(data.id);
            this.toggle = function () {
                if (shown) {
                    this.hide();
                } else {
                    this.show();
                }
                return shown;
            };
        };

        // Override the show and hide functions.
        this.show = function () {
            if (shown || !ready) {
                return;
            }
            shown = true;
            $("anna").addClassName("di_ev_open");
            ready = false;
            Effect.SlideDown(view, {
                "duration": 0.4,
                "afterFinish": onAnimationEnd.bindAsEventListener(this)
            });
        };


        this.hide = function () {
            if (!shown || !ready) {
                return;
            }
            shown = false;
            ready = false;
            Effect.SlideUp(view, {
                "duration": 0.4,
                "afterFinish": onAnimationEnd.bindAsEventListener(this)
            });
        };
    }, true);

    DI.StartAnna = function (state_name, default_locale, callback) {
        //state_name is used as a unique ID when storing the session state. This allows
        //multiple Anna instances to keep states in the same browser.
        var locale;
        DI.AnnaStateName = state_name;
        locale = UserData.locale;
        if (typeof locale !== "undefined" && locale !== null) {
            Locale.setLocale(locale);
        } else {
            locale = default_locale || configuration.default_locale;
            com.ikea.irw.askAnna.anna = new DI.UI(DI.AnnaStateName, {
                "root": configuration.root,
                "locale": locale,
                "callback": function (a) {
                    callback(a);
                    Locale.updateUI();
                }
            });
        }
    };
};




/*
 * IKEA CODE
 */
/**
* General features used when opening windows.
* Position and size is calculated automatically
*/
var popup_window_features = "toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,resizable=yes";

/**
* Used in input links to VDA.
*/
function getAnswerFor(s) {
    com.ikea.irw.askAnna.anna.sendInput(s, null);
}

/**
   * @param targetName the name of a window
   * @return true if a window named targetName is one of the currently available frames.
   */
function checkTarget(targetName) {
    var i;
    for (i = 0; i < parent.frames.length; i += 1) {
        if (parent.frames[i].name === targetName) {
            return true;
        }
    }
    return false;
}

/**
 * @return true if the current browser allows pages to open in the opener window
 */
function crossDomainOpenerAccess() {
    //return true if FF and IE 6 or 7
    //otherwise false
    var ua = navigator.userAgent;
    if (ua.indexOf("Firefox") > -1) { //FF
        return true;
    }
    if (ua.indexOf("Chrome") > -1) { //Google Chrome
        return true;
    }
    if (ua.indexOf("MSIE 7") > -1 && !document.documentMode) { //IE7
        return true;
    }
    if (ua.indexOf("MSIE 6") > -1) { //IE6
        return true;
    }
    return false;
}

/**
   * opens a web page, displays an informational message with a link to open the page if it is blocked
   * @param url the web page to open
   * @param target the target name of the page to open
   * @param style attributes of the page to open
   */
function openLink(url, target, style) {
    var popup;
    if (url && crossDomainOpenerAccess() && self.opener &&  !self.opener.closed) {
        self.opener.location = url;
        self.opener.focus();
        self.focus();
        return;
    }

    if (!target || target.length < 2) {
        target = "IKEA";
    }
    target = target + "_popup";

    if (url) {
        if (target.length > 1 && checkTarget(target)) {
            parent.frames[target].location.replace(url);
        } else {
            if (!style) {
                popup = window.open(url, target, popup_window_features).focus();
            } else {
                popup = window.open(url, target, style).focus();
            }
        }
    }
    //focus VDA, unless IE8
    if (navigator.userAgent.indexOf("MSIE 8") < 0 || (navigator.userAgent.indexOf("MSIE 7") >= 0 && !document.documentMode)) {
        self.focus();
    }
}

/*
 * END IKEA CODE
 */
 

/** @namespace  */
$namespace('com.ikea.irw.askAnna');com.ikea.irw.askAnna.Settings = {
    root:"/ms/img/ask_anna/",
    enabled_modules: ["info"],
    encourage_times: 1
};

com.ikea.irw.askAnna.Layout = '<div class="container"><div class="di_title_bar"><div class="di_title di_handle">Ask Anna</div><div id="di_language_btn"><a href="javascript:void(0)" id="di_language_text">Change language</a></div><div id="di_drag_btn_tt"></div><div class="di_drag_btn di_handle"></div><div id="di_close_btn_tt"></div>        <div class="di_close_btn di_anna_closeButton"></div></div><div class="di_body"><div class="di_emotion di_handle"><img src="/ms/img/ask_anna/emotions/brunette/anna.png"/></div><div id="di_error_container"></div><div class="di_message_containers"><div class="di_answer_container"><div id="di_you_said_container"><span id="di_you_said">You said: </span><span class="di_lastinput"></span></div><span id="di_anna_said">Anna says: </span><span class="di_answer"></span></div><a id="di_chat_handover" href="javascript:void(0)"></a><div id="di_feedback_container"><span class="di_feedback_thanks"></span><a href="javascript:void(0)" class="di_feedback_message"></a><div class="di_feedback_options"></div></div></div><div class="di_input"><form class="di_form"><input class="di_form_input" /></form></div><div id="di_send_button_tt"></div>        <div class="di_send_button"></div></div><div class="di_menu"><div id="di_info_btn_tt"></div><div class="di_info_btn di_menu_btn"></div><div id="di_dialog_btn_tt"></div><div class="di_dialog_btn di_menu_btn"></div><div id="di_audio_btn_tt"></div><div class="di_audio_btn di_menu_btn"></div><div id="di_ev_open_btn" class="di_ev_open_btn"><span id="di_see_more">See more</span><span id="di_close_view" style="display:none">Close view</span></div><div id="di_ev_open_btn_tt"></div></div><div class="di_ev" id="di_ev_primary" style="display: none; max-height: 200px; height: 200px;"><div class="di_ev_body"></div><div id="di_dialog_controls" style="display: none;">Do you want us to email this dialog to you? Click <a href=\'javascript: void(0)\'>here</a>.</div><div id="di_dialog_form" style="display: none;"><form><p id="di_dialog_form_notice">Anna will send you the transcript of the actual dialog.</p><label id="di_dialog_form_first_name_label" for="di_dialog_form_first_name">First name*</label><input id="di_dialog_form_first_name" name="first_name"/><div class="di_valid_indicator" style="display: none"></div><label id="di_dialog_form_email_label" for="di_dialog_form_email">E-mail*</label><input id="di_dialog_form_email" name="email"/><div class="di_valid_indicator" style="display: none"></div><label id="di_dialog_form_verify_email_label" for="di_dialog_form_verify_email">Verify e-mail address*</label><input id="di_dialog_form_verify_email" name="verify_email"/><div class="di_valid_indicator" style="display: none"></div><input id="di_dialog_form_accept_privacy" class="di_dialog_privacy" type="checkbox" name="accept_privacy"/><label class="di_dialog_privacy" for="di_dialog_form_accept_privacy">I accept the privacy policy <a href="javascript:void(0)">here</a>.</label><button disabled="disabled" id="di_dialog_form_send_button">Send</button></form><div id="di_dialog_form_error" style="display:none;"><div class="di_message"></div><a href="javascript:void(0)" id="di_try_again_link">Try again</a><a href="javascript:void(0)" id="di_cancel_link">Cancel</a></div></div><div id="di_extra_feedback_form"><div class="di_extra_feedback_message"></div><form><textarea name="extra_feedback"></textarea></form><div class="di_send_extra_feedback_btn"></div></div><div class="di_ev_close_btn"></div></div><div class="di_blocker"></div></div>';document.observe("dom:loaded", function () {
    if(com.ikea.irw.askAnna.Settings.active === true) {
        DI.LoadAnna();
        DI.StartAnna("anna" + com.ikea.irw.askAnna.Settings.reference, com.ikea.irw.askAnna.Settings.default_locale, function() {});
    }
});/** Mobile web Link in IRW */

com.ikea.irw.mobileweb = {
	isGlobalStartPage: false,
	mobileWebBaseUrl: 'http://m.ikea.com/',
	mobLinkTempl : new Template('<div id="mobileWebLinkContainer" class="redirectToMobContainer"><a id="mobileWebLink" href="#{url}">#{label}</a></div>'),
	settings: null,
	/**
	* Checks whether request is from a mobile device
	*/
	isMobileDevice: function () {
		var deviceCookie = getCookie("device");
		if (deviceCookie !== undefined && deviceCookie !== null && deviceCookie === 'mobile') {
			return true;
		}
		return false;
	},
	readSettings: function () {
		// Path to settings
		var settingsFile = '/ms/' + irwstats_locale + '/js/mobileWebLinkSettings.json';
		// Initialize settings store
		new Ajax.Request(settingsFile,
			{
				method: 'get',
				asynchronous: false,
				contentType: 'application/json',
				onSuccess: function (transport) {
					com.ikea.irw.mobileweb.settings = transport.responseText.evalJSON();
				}.bind(this),
				onFailure: function () {
					// Do nothing
				}
			});
	},
	/**
	* Checks whether mobile web link feature is rolled out for current market
	*/
	isMobileWebLinkEnabled: function () {
		if (com.ikea.irw.mobileweb.settings.mobileWebLinkEnabled !== undefined &&
				com.ikea.irw.mobileweb.settings.mobileWebLinkEnabled !== null	&&
				com.ikea.irw.mobileweb.settings.mobileWebLinkEnabled === true) {
			return true;
		}
		return false;
	},
	/**
	* Loads after DOM is loaded and displays the mobile web link
	*/
	loadMobileWebUrl: function () {
		var mobileWebUrl, linkText, tempObj;
		// Only create mobile link in case of mobile device
		var isPaymentMethodIframe = true;
                try {
                        if(isPaymentMethodIframeFromPage == undefined) {
                                isPaymentMethodIframe = false;
                        }
                } catch(err) {
                        isPaymentMethodIframe = false;
                }
		if (com.ikea.irw.mobileweb.isMobileDevice()&& !isPaymentMethodIframe) {
			if (com.ikea.irw.mobileweb.isGlobalStartPage) {
				// Display URL on global start page
				mobileWebUrl = com.ikea.irw.mobileweb.mobileWebBaseUrl;
				// Create the link
				if (mobileWebLinkText) {
					linkText = mobileWebLinkText;
				} else {
					linkText = "Mobile Web Global Start page";
				}
				tempObj = {url: mobileWebUrl, label: linkText};
				Element.insert($(document.body), {'top': com.ikea.irw.mobileweb.mobLinkTempl.evaluate(tempObj)});
			} else {
				// Load settings first
				com.ikea.irw.mobileweb.readSettings();
				// Bypass, if settings didn't load for some reason
				if (com.ikea.irw.mobileweb.settings !== null) {
					// Check if link is already present
					if (!$('mobileWebLink')) {
						// Set the mobile web link href
						mobileWebUrl = com.ikea.irw.mobileweb.getLocalHomeUrl();
						// Create the link
						com.ikea.irw.mobileweb.updateMobileWebUrl(mobileWebUrl, false);
					}
				}
			}
		}
	},
	/**
	* Constructs national home url
	*/
	getLocalHomeUrl: function () {
		return com.ikea.irw.mobileweb.mobileWebBaseUrl + irwstats_locale.replace(/.*_/g, '').toLowerCase() +
			'/' + irwstats_locale.replace(/_.*/g, '') + '/';
	},
	/**
	* Adds Web analytics tracking vars to URL
	*/
	addWATrackingVars: function (inUrl) {
		var waStr, tempUrl;
		waStr = '';
		tempUrl = inUrl;
		if (tempUrl.indexOf("?") === -1) {
			tempUrl = tempUrl + "?";
		} else {
			tempUrl = tempUrl + "&";
		}
		// Append country code
		waStr = waStr + irwstats_locale.replace(/.*_/g, '').toLowerCase();
		waStr = waStr + '>irw>';
		waStr = waStr + s.prop2;
		return tempUrl + 'cid=' + encodeURIComponent(waStr);
	},
	/**
	* Create or update mobile web URL
	*/
	updateMobileWebUrl: function (url, forceUpdate) {
		var linkElem, tempObj, linkText, linkUrl;
		// Only display link if enabled for the market
		if (com.ikea.irw.mobileweb.isMobileWebLinkEnabled()) {
			linkElem = $('mobileWebLink');
			linkUrl = com.ikea.irw.mobileweb.addWATrackingVars(url);
			// If link hasn't been created already, create it
			if (linkElem === undefined || linkElem === null) {
				// Set Link Label
				if (com.ikea.irw.mobileweb.settings.mobileWebLinkText) {
					linkText = com.ikea.irw.mobileweb.settings.mobileWebLinkText;
				} else {
					linkText = "Mobile Web";
				}
				tempObj = {url: linkUrl, label: linkText};
				Element.insert($(document.body), {'top': com.ikea.irw.mobileweb.mobLinkTempl.evaluate(tempObj)});
			} else if (forceUpdate) { // Only update if forced
				linkElem.href = linkUrl;
			}
		}
	},
	 /**
	* Invoked from prodInfo.js to override MLS link URL to corresponding MLS PIP URL
	*/
	setPipUrl:  function (itemPartNum) {
		var itemtype;
		if (itemPartNum.startsWith("S")) {
			itemPartNum = itemPartNum.substr(1, itemPartNum.length);
			itemtype = 'spr';
		}else{
			itemtype = 'art';
		}
		var pipUrl;
		if (com.ikea.irw.mobileweb.isMobileDevice()) {
			// Form PIP url from jProduct and selectedItem and set the url value
			pipUrl = com.ikea.irw.mobileweb.getLocalHomeUrl() + 'catalog/products/' + itemtype + '/' + itemPartNum+ '/';
			// Invoke method updateMobileWebUrl() to update the URL
			com.ikea.irw.mobileweb.updateMobileWebUrl(pipUrl, true);
		}
	}
};

// Load on page startup
Event.observe(document, "dom:loaded", function () {
    com.ikea.irw.mobileweb.loadMobileWebUrl();
});
/**
* localPriceLiteBox : This name space holding a functions for showing localPrice on Litebox
* JSLint Predefined: Class, $, Event, irwStatStockCheckOnLiteBox, Litebox, AjaxRequestObject, document, irwstatGetCookie, irwStockCheckFromLiteBox, Element, window, createButtonLayout, irwstatAddLocalFlag, irwstatDeleteLocalFlag, activateShopListPopup, alert, irwStatStockCheckNotification, okButton, notifiyError,$$
**/
var localPriceLiteBox = new function () {    
    var response, partNumber, locale, countryCode, languageCode, localStoreId, cookieStoreId, urlNotification, currentStoreStatus,
	stockChkStatus = new Hash();
    return {
        stockChkFlag : "",
        widthEnabled : "",
		
		/**
		*	requestLocalPrice: AJAX request for store price 
		**/
        requestLocalPrice : function (partNumber) {
            var url, emailNotification, inputValue, ajaxParams, inputParams;
            var storeform = $('formSelectStore');
            var localStoreId = storeform.localStoreSelector.value;
			
            countryCode = irwstats_locale.replace(/^[a-z]{2}_/, '').toLowerCase();
            languageCode = irwstats_locale.replace(/_[A-Z]+$/, '');

            url = "/" + countryCode + "/" + languageCode + "/catalog/availability/" + partNumber + "?ikeaStoreNumber1=" + localStoreId;

            ajaxParams = {"url" : url, "contentType" : 'application/html', "asyncFlag" : true, "singletonFlag" : false};
            inputParams = {"handlerId" : "localPrice"};
            new AjaxRequestObject(ajaxParams, inputParams);            
        },
		/**
		*	requestJSPage: AJAX request for store data and notification 
		**/		
        requestJSPage : function (chk) {
            var partNo, url, emailNotification, inputValue, ajaxParams, inputParams;
            partNo = this.getPartNumber();    
			this.showAndHidePrice();
            if ($('notificationUrl') !== null) {
                emailNotification = $('notificationUrl').value;    
                inputValue = $('customer').value;
            }
            this.getLocale();
            var localStoreInCookie = "";
            var localStoreNameInCookie = "";
            var localStoreNameSelected ="";
            var storeNumCookieName = 'selected_store_num_'+languageCode+'_'+countryCode.toUpperCase();
            if (irwstatGetCookie(storeNumCookieName) !== null && irwstatGetCookie(storeNumCookieName) !== "") {
                localStoreInCookie = irwstatGetCookie(storeNumCookieName);
                localStoreNameInCookie = this.getLocalStoreName( localStoreInCookie ) + "/";
            } else {
                var storeCookieName = 'selected_store_'+languageCode+'_'+countryCode.toUpperCase();
                if (irwstatGetCookie(storeCookieName) !== null && irwstatGetCookie(storeCookieName) !== "") {
                    localStoreInCookie = irwstatGetCookie(storeCookieName);
                    localStoreNameInCookie = this.getLocalStoreName( localStoreInCookie ) + "/";
                }
            } 
            if ($('ikeaStoreNumber1') !== null) {
                localStoreId = $('ikeaStoreNumber1').getValue(); 
                localStoreNameSelected = this.getLocalStoreName( localStoreId );
                setCookie('selected_store_num_'+languageCode+'_'+countryCode.toUpperCase(), localStoreId, null, '/' );
            }
            if (chk === 'frmLbox') {                                
                url = "/" + countryCode + "/" + languageCode + "/catalog/availability/" + partNo + "/" + localStoreNameSelected + "/"; 
            } else if (chk === 'frmNotification') {
                url =  urlNotification;
            } else {
                url = "/" + countryCode + "/" + languageCode + "/catalog/availability/" + partNo + "/" + localStoreNameInCookie; 
            } 
            ajaxParams = {"url" : url, "contentType" : 'application/html', "asyncFlag" : true, "singletonFlag" : false};
            inputParams = {"handlerId" : "localPrice"};
            new AjaxRequestObject(ajaxParams, inputParams);            
        },
		/**
		*	retrieveStockCheckStatus: Retrieve the stock check response 
		**/
		retrieveStockCheckStatus : function () {
            var status;
            if (cookieStoreId) {
                if (stockChkStatus.get(cookieStoreId)) {
                    status = stockChkStatus.get(cookieStoreId);
                } else {
                    status = irwstatGetCookie("stockCheckStatus" + languageCode + '_' + countryCode.toUpperCase());
                    stockChkStatus.set(cookieStoreId, status);
                }
            }
            return status;
        },
		/**
		*	changeLiteBoxDimension: Changing the litebox dimension on the bais of the content 
		**/
        changeLiteBoxDimension : function () {
            if (!this.checkStoreCookie()) {
                $('localPrice').down('.lbBorderFullScrn').style.width = "530px";                
            } else {
                $('prodLocalPrice').down('.storeselectorContainer').style.width = "520px";
                $('localPrice').down('.lbBorderFullScrn').style.width = "900px";
            }
            if (localPriceLiteBox.widthEnabled === true) {                
                $('localPrice').down('.lbBorderFullScrn').style.width = "900px";                
            }
            $('localPrice').style.left = Math.round(document.viewport.getScrollOffsets().left + ((document.viewport.getWidth() - $('localPrice').getWidth())) / 2) + 'px';
        },
		/**
		*	checkStoreCookie: chekc the cookie to confirm whether store is already selected or not
		**/
        checkStoreCookie : function () {
		    var storeSelected, cookieName;
            storeSelected = false;
			cookieName = 'selected_store_num_' + languageCode + '_' + countryCode.toUpperCase();
            cookieStoreId = irwstatGetCookie(cookieName);
            if (cookieStoreId.length > 0) {
                storeSelected = true;
            }
            return storeSelected;
        },
		/**
		*	displayPriceContent: update the content to litebox
		**/
        displayPriceContent : function (ajaxResponse) {   
            response = ajaxResponse;
            var notifyValue, content;
            content = this.parseResponse();            
            $('lbContainer').update(content);
            this.injectStockCheckCSS();
            this.changeLiteBoxDimension();
            this.fixHeight();
			if ($('storeInfoContainer') !== null) {
				$('storeInfoContainer').style.paddingLeft = "0px";
			}
            if (localPriceLiteBox.widthEnabled === true) {
                $('prodLocalPrice').down('.storeselectorContainer').style.width = "520px";				
            }
            if ($('notifyType') !== null) {
                notifyValue = $('notifyType').value;
                irwStatStockCheckNotification(notifyValue); 
            }
            this.clickStoreChangeButton(); 
            this.clickSaveToListButton();
            this.clickNotificationButton();
        },
		/**
		*	parseResponse: Removing header and footer from AJAX response
		**/
        parseResponse : function () {
            var returnContent, tempDiv;
            returnContent = response;             
            tempDiv = new Element('div', {'id' : 'alphaLayer'});
            tempDiv.innerHTML = response;              
            returnContent = tempDiv.getElementsBySelector('div #localPriceMainBlock')[0];
            return returnContent;
        },
		/**
		*	getPartNumber: get the current product number 
		**/
        getPartNumber : function () {
            var currentURL, temp, tempLen;
            currentURL = window.location.href;	
            if (currentURL.charAt(currentURL.length - 1) === "#") {		
                currentURL = currentURL.substr(0, currentURL.length - 1)
            }			
            temp = currentURL.split('/');
            tempLen = temp.length;			
            if (currentURL.search("#") === -1) {
                partNumber = temp[tempLen - 2];			
            } else {
                partNumber = temp[tempLen - 1];			
            }
            return partNumber;
        },
		/**
		*	getPartNumber: get the locale 
		**/
        getLocale : function () {
            var urlForLocale, locale;
            urlForLocale = window.location.href;
            locale = urlForLocale.split('/');
            countryCode = locale[3];
            languageCode = locale[4];
        },
		/**
		*	clickStoreChangeButton: bind click events on the ok button to change the store
		**/
        clickStoreChangeButton : function () {
            if (this.checkStoreCookie() && localPriceLiteBox.stockChkFlag) {
                var partNum = partNumber;   
                if (partNum.startsWith("S")) {   
                    partNum = partNum.replace(/\D/g, "");
                }
                partNum = ";"+partNum;
				currentStoreStatus = this.retrieveStockCheckStatus();
                irwStockCheckFromLiteBox(partNum, cookieStoreId, currentStoreStatus);
            }
            $('localPriceButton').down('.buttonContainer').remove();
            var goButton = createButtonLayout(okButton, "jsButton_SelectStore", "button", "localPriceLiteBox.requestForOtherStore()");
            $('localPriceButton').insert(goButton, null); 
        },
		/**
		*	requestForOtherStore: request for other store will be triggered 
		**/
        requestForOtherStore : function () {
            var storeId, cookieName;
			storeId = "";
			cookieName = 'selected_store_num_' + languageCode + '_' + countryCode.toUpperCase();
            if (irwstatGetCookie(cookieName) !== null) {
                storeId = irwstatGetCookie(cookieName);
            }  
            if ($('ikeaStoreNumber1') !== null) {
                localStoreId = $('ikeaStoreNumber1').getValue(); 
            }			
            if (localStoreId !== "-1") {
                $('prodLocalPrice').down('.loadingIcon').style.display = "block";
                localPriceLiteBox.widthEnabled = true;
				localPriceLiteBox.requestJSPage('frmLbox');
            }
            if (storeId.length > 0 && storeId !== localStoreId) {
                irwstatAddLocalFlag('hasChangedStore');
            } else {
                irwstatDeleteLocalFlag('hasChangedStore');
            }
            localPriceLiteBox.stockChkFlag = true;
        },
		/**
		*	clickSaveToListButton: bind click events on the Save to list button
		**/
        clickSaveToListButton : function () {    
            var changeAnchor, divID, stockForm, storeId, langId;
            changeAnchor = $('popupShoppingList' + partNumber).down('a');
            divID = $('popupShoppingList' + partNumber);
            stockForm = $('stocksearch');
            if (stockForm !== null) {
                storeId = stockForm.storeId.value;
                langId = stockForm.langId.value;
            }    
            changeAnchor.href = "javascript:void(0);";
            Event.observe(changeAnchor, 'click', function (e) {    
                activateShopListPopup("add", divID, storeId, langId);                         
            });
        },
		/**
		*	clickNotificationButton: bind click events on the ph/email notification button
		**/
        clickNotificationButton : function () {
            if ($('notificationRequest').down('.buttonContainer').down('a') !== null) {
                $('notificationRequest').down('.buttonContainer').down('a').remove();
                var notificationButton = createButtonLayout(okButton, "jsButton_Notification", "button", "localPriceLiteBox.requestForNotification()");                
                $('notificationRequest').down('.buttonContainer').insert(notificationButton, null);
            }
        },
		/**
		*	clickNotificationButton: Request for email/phone notification will be triggered
		**/
        requestForNotification : function () {
            var inputValue, url;
            localPriceLiteBox.stockChkFlag = false;
            url = $('notificationUrl').value;    
            inputValue = $('customer').value;
            if ($('notificationRequest').down('.leftBox').down('input').checked) {
                if ($('ikeaStoreNumber1') !== null) {
                    localStoreId = $('ikeaStoreNumber1').getValue(); 
                }
                urlNotification =  url + '?productId=' + $('productId').value + '&ikeaStoreNumber1=' + localStoreId + '&jsView=false' + '&store=' + localStoreId + '&customer=' + inputValue + '&sc_notification_agree=true';
                localPriceLiteBox.requestJSPage('frmNotification');               
            } else {
                alert(notifiyError);
            }
        },
		/**
		*	injectStockCheckCSS: Inject stock check CSS to when find it information is available
		**/
        injectStockCheckCSS : function () {
            if ($('prodLocalPrice').down('.howToShopSection')  !== null) {
                var css = new Element('link', {'href' : '/ms/css/css_stockcheck.css', 'type' : 'text/css', 'rel' : 'stylesheet'});
                $$('head')[0].insert(css);
            }
        },
        /**
        *	fixHeight: Fixing the height of the litebox when content is more
        **/
        fixHeight : function () {
            if ($('outerContainer') !== null) {
                var dimension = $('outerContainer').getDimensions();
				 $('rightNavContainer').setStyle({paddingBottom: '0px', marginBottom: '0px', height: dimension.height + 'px'});
                if (dimension.height > 570) {
                    $('outerContainer').addClassName('fixHeight');
                    if (Prototype.Browser.IE) {
                       this.ieHandler();
				    }
                } else {
                    $('outerContainer').removeClassName('fixHeight');
                }
                $('headerOuter').addClassName('addBorder');
            } else {
                $('headerOuter').removeClassName('addBorder');
                Effect.ScrollTo( 'menu' ); 
            }
        },
		ieHandler : function () {
		    var btiTemplate, dimension, btiObject, localPriceBtiTempl, content;
		    if ($('productInfoWrapper1').hasClassName('productBtiBackWrapPadd')) { 
			    dimension = $('productInfoWrapper2').getDimensions();
			    btiObject = {
				    "BtiContent" : $('productInfoWrapper2').innerHTML,
				    "BtiWidth" : dimension.width
			    };
			    localPriceBtiTempl = new Template("<div id=\"localPriceBti\">" +
				    "<div class=\"localPriceBtiTop\" style=\"width:#{BtiWidth}\"><img src=\"/ms/img/btiblank.png\"/></div>" +
					    "<div class=\"localPriceBtiMid\"> #{BtiContent} </div>" +
				    "<div class=\"localPriceBtiBottom\" style=\"width:#{BtiWidth}\"><img src=\"/ms/img/btiblank.png\"/></div>" +
			    "</div>");
			    content = localPriceBtiTempl.evaluate(btiObject)
                $('productInfoWrapper1').removeClassName('productBtiBack');	
			    $('productInfoWrapper1').removeClassName('productbtibackpadd');	
			    $('productInfoWrapper1').removeClassName('productBtiBackWrapPadd' );				
			    $('productInfoWrapper1').update(content);              
			}	
		},
		/**
        *	getLocalStoreName: Function for fecth the local store name.
        **/
		getLocalStoreName : function ( storeIdSelected ) {
            var storeform = $( 'stocksearch' );
            var localStores ="";
            if (storeform !== null) {
                localStores = storeform.localStores.value; 
            } else {
                localStores = localStoreList;
            } 
            if (!isNaN(storeIdSelected)) {
                var localStoreName;    
                var storeArray = localStores.split( ':' );
                var storeArrayLen = storeArray.length;
                for ( i = 0; i < storeArrayLen; i ++ ) {
                    if ( storeArray[i].indexOf( storeIdSelected + "|" ) !== - 1 ) {
                        localStoreName = storeArray[i].substring( storeArray[i].indexOf( '|' ) + 1 );
                        break;
                    }
                }
                return localStoreName;
            } else {
                return storeIdSelected;
            }            
        },
	    /**
        *	hidePrice: Function to toggle price display in the prod info ssection.
        **/
	    showAndHidePrice : function () { 
	        $('priceProdInfo').style.visibility = 'hidden';  
            Event.observe($('lbCloseBtn'), 'click', function (e) {    
               $('priceProdInfo').style.visibility = 'visible';                 
            }); 
	    }
    };
}();
/**
* NeroTracking.js - This class will allow N.E.RO tracking enabled in the pages of ikea.com
*/

/**
* NERO tracking enbaled globally
*/
neroTrackingGlobalConfig = {
    /**
     * NERO tracking enbaled globally
     */
    isEnabled: true
};

var neroTracking = new function () {
    return {
        init : function () {
            this.insertScript();
        },
        insertScript : function () {
            //checking whether it is enabled globally
            if (neroTrackingGlobalConfig.isEnabled) {
            //checking whether it is enabled locally
                if (typeof neroTrackingLocal !== 'undefined' && neroTrackingLocal.isEnabled) {
                    neroTrackingLocal.labels.each(function (inObject) {
                        var tagsMatch = true, key;
						if (inObject !== null) {
							for (key in inObject) {
								if (key !== "value") {
									if (neroTracking.getMetaData(key) !== inObject[key]) {
										tagsMatch = false;
										return;
									}
								}
							}
						}
                        if (tagsMatch) {
							trackingValue = inObject.value;
                            if (typeof trackingValue !== 'undefined') {
                                var thisHead = document.getElementsByTagName('head')[0];
                                var trackImg = document.createElement('img');
                                trackImg.src = 'http://ad3.adfarm1.adition.com/tagging?network=250&amp;tag[nerop]=' + trackingValue + '&amp;tag[neroc]=109&amp;type=js&amp;hkp=1';
                                thisHead.appendChild(trackImg);
                            }
                        }
                    });
                }
            }
        },
        getMetaData : function (inType) {
			var metatags, pageType, metalength;
            //Reading the meta tags to get the values of IRWStats
            metatags = document.getElementsByTagName("meta");
            metalength = metatags.length;
            for (var cnt = 0; cnt < metalength; cnt++) {
                if(metatags[cnt].getAttribute("name") === "IRWStats."+inType) {
                    pageType = metatags[cnt].getAttribute("content");
                }
            }
            return pageType;
        }
		
    };
}();
//Call this method while loading the page
document.observe("dom:loaded", function() {
    neroTracking.init();	
});/** @namespace  */
$namespace('com.ikea.irw.shoppinglist');/*global Ajax,console,$F,$$,$,com,document,Prototype,getObject,showHidden,showHiddenGrantTotal*/

com.ikea.irw.shoppinglist.localpriceupdate = {


    getLocalStore: function () {
        return $F('localStoreSelector');
    },

    getPartNumbers: function () {

        var partNumberElements = $$('#productsContainer [name="partNumber"]'),
            partNumbers = partNumberElements.collect(function (e) {
                return e.value;
            });

        return partNumbers;
    },

    getLocalPrices: function () {

        var partNumbers = com.ikea.irw.shoppinglist.localpriceupdate.getPartNumbers(),
        localStore = com.ikea.irw.shoppinglist.localpriceupdate.getLocalStore();
        var totalPartNumbers =  partNumbers.length;
        
        if (localStore === null && localStore === '') {
            return;
        }
    
        partNumbers.each(function (partNumber) {
			com.ikea.irw.shoppinglist.localpriceupdate.getLocalPriceFor(partNumber, localStore);
        }
        .bind(com.ikea.irw.shoppinglist.localpriceupdate));
    },
    
    getLocalPriceFor: function (partNumber, storeNumber) {
        var vLocale = $('lnkIKEALogoHeader').readAttribute('href'),
        	notificationURL = vLocale + "iows/localStore/" + storeNumber + "/prices/" + partNumber;
        new Ajax.Request(notificationURL, {
            method: 'get',
            contentType: 'application/xml', 
            asynchronous: false,
            onSuccess: function (transport) {
           
               var xml = transport.responseXML;
               var familyPrice = 0;
               var familyUnformatted = "0";
               var familyTotalPrice = 0;
               var normalPrice = "0";
               var normalUnformatted = "0";
               var normalTotalPrice = "0";
               var storeform = $('formShoppingList');
               var storeupdateform = $('IrwUpdateShoppingList');
               
               var quantity = getObject('quantity_'+partNumber).value;
              
               var grantTotalNormalPrice = "0";
               var grantTotalFamilyPrice = 0;
               var currencySymbol="";
                 
                var count = xml.documentElement.childNodes[2].childNodes.length;
                
                if(count==1){
                    if(Prototype.Browser.IE){
                        normalPrice = xml.documentElement.childNodes[2].firstChild.text;
                    } else {
                        normalPrice = xml.documentElement.childNodes[2].firstChild.textContent;
                    }
                    normalUnformatted = xml.documentElement.childNodes[2].childNodes[0].attributes[1].value;
                } else {
                    if(Prototype.Browser.IE){
                        normalPrice = xml.documentElement.childNodes[2].firstChild.text;
            } else {
            normalPrice = xml.documentElement.childNodes[2].firstChild.textContent;
                    }
                    normalUnformatted = xml.documentElement.childNodes[2].childNodes[0].attributes[1].value;
                    if(Prototype.Browser.IE){
                        familyPrice = xml.documentElement.childNodes[2].lastChild.text;
            } else {
            familyPrice = xml.documentElement.childNodes[2].lastChild.textContent;
                    }
                    
                    familyUnformatted = xml.documentElement.childNodes[2].childNodes[1].attributes[1].value;
               }
                    
                   
                    
                    
               
               
                function updatePrice(partNumber, priceType, price) {
                    var el = $(priceType + '_' + partNumber);
                    
                    if (el !== null) {
                        el.update(price);
                      
                    }
                }
                 
               currencySymbol = normalPrice.toString().replace(/[0-9-.,]/g, '');
               
               updatePrice(partNumber, 'price', normalPrice);
               
               normalTotalPrice = parseFloat(normalUnformatted) * parseFloat(quantity);
               familyTotalPrice = parseFloat(familyUnformatted) * parseFloat(quantity);
               
                updatePrice(partNumber, 'totalPrice', normalTotalPrice.formatMoney(2, currencySymbol, ".", ","));
                 if(parseInt(familyPrice)>0){
             grantTotalFamilyPrice = parseFloat(storeform.grandFamilyTotal.value) + parseFloat(familyTotalPrice);
             storeform.grandFamilyTotal.value = grantTotalFamilyPrice;
             updatePrice(partNumber, 'familyPrice', familyPrice);
             updatePrice(partNumber, 'totalFamilyPrice', familyTotalPrice.formatMoney(2, currencySymbol, ".", ","));
             
                 } else {
                    grantTotalFamilyPrice = parseFloat(storeform.grandFamilyTotal.value) + parseFloat(normalTotalPrice);
            storeform.grandFamilyTotal.value = grantTotalFamilyPrice;
            
                 }
                    
                   showHidden(familyPrice,partNumber);
                   
                   grantTotalNormalPrice = parseFloat(storeform.grandTotal.value) + parseFloat(normalTotalPrice);
                   
                   storeform.grandTotal.value = grantTotalNormalPrice;
                   showHiddenGrantTotal(grantTotalNormalPrice, grantTotalFamilyPrice, currencySymbol);
                   
            }
        });
    }
    
    
    
   
};

 function showHidden(familyPrice,partNumber) {
 
            $('colInStockName').show();
              
                $('colTotalPriceName').show();
                if( $( 'noPrice_'+partNumber ) != null ) {
                    $('noPrice_'+partNumber).hide();
                }
              
                if(parseInt(familyPrice)>0){
                    $('family').show();
                    $('familyTotal').show();
                }
               
    }
    
    function showHiddenGrantTotal(grantTotalNormalPrice, grantTotalFamilyPrice, currencySymbol) {
   
                    
        $('grandTotalFooterDivider').show();
        $('grandTotalFooter').show();
        var el = $('totalPrice');
        el.update(grantTotalNormalPrice.formatMoney(2, currencySymbol, ".", ","));
        if(parseInt(grantTotalFamilyPrice)>0 && grantTotalFamilyPrice != grantTotalNormalPrice){

        var elFamily = $('totalFamilyPrice');
        elFamily.update(grantTotalFamilyPrice.formatMoney(2, currencySymbol, ".", ","));

        var elFamilyTotal = $('totalFamilyPriceText');
        elFamilyTotal.update('IKEA FAMILY');
       }
       
                   
             
    }
 


Number.prototype.formatMoney = function(places, symbol, thousand, decimal) {
    places = !isNaN(places = Math.abs(places)) ? places : 2;
    symbol = symbol !== undefined ? symbol : "$";
    thousand = thousand || ",";
    decimal = decimal || ".";
    var number = this,
        negative = number < 0 ? "-" : "",
        i = parseInt(number = Math.abs(+number || 0).toFixed(places), 10) + "",
        j = (j = i.length) > 3 ? j % 3 : 0;
    return symbol + negative + (j ? i.substr(0, j) + thousand : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousand) + (places ? decimal + Math.abs(number - i).toFixed(places).slice(2) : "");
}/**
* document.observe() -> void
* - 
* 
* Changes images to a carousel of images
**/
document.observe('dom:loaded', function () {
    var i, elem, count, arrowElements;
    count = $$("div.replaceFlashContainer").length;

    arrowElements = $$("div.replaceFlashLeftArrow");
    // Show arrows when more than one image
    if (arrowElements.length >= 2) {
        arrowElements.each(function (elem) {
            elem.setStyle({
                display: 'block'
            });
        });
        $$("div.replaceFlashRightArrow").each(function (elem) {
            elem.setStyle({
                display: 'block'
            });
        });
    }

    /* Hide all but the first */
    for (i = 1; i < count; i += 1) {
        elem = $("replaceFlash" + i);
        elem.hide();
    }
});


//com, ikea, irw, flash, CarouselReplacesFlash
/**
 * 
 * When flash can't be displayed and images are displayed instead, this makes a carousel with the images
 * 
 * @classDescription This class contains carousel functionality when flash can't be displayed
 * @constructor
 * @version 1.0.0
 * 
 */
com.ikea.irw.flash.CarouselReplacesFlash = {

	/**
     * Switch to next image in a carousel
     * 
     */
    nextImage : function () {
        var i, count, elem;
        count = $$("div.replaceFlashContainer").length;
        for (i = 0; i < count; i += 1) {
            elem = $("replaceFlash" + i);
            if (elem.visible()) {
                elem.hide();
                if (i === (count - 1)) {
                    $("replaceFlash0").show();
                } else {
                    elem.next().show();
                }
                break;
            }
        }
    },

    /**
     * Switch to previous image in a carousel
     *
     */
    prevImage : function () {
        var i, count, elem;
        count = $$("div.replaceFlashContainer").length;
        for (i = 0; i < count; i += 1) {
            elem = $("replaceFlash" + i);
            if (elem.visible()) {
                elem.hide();
                if (i === 0) {
                    $("replaceFlash" + (count - 1)).show();
                } else {
                    elem.previous().show();
                }
                break;
            }
        }
    }
};
// script.aculo.us slider.js v1.6.5, Wed Nov 08 14:17:49 CET 2006

// Copyright (c) 2005, 2006 Marty Haught, Thomas Fuchs 
//
// script.aculo.us is freely distributable under the terms of an MIT-style license.
// For details, see the script.aculo.us web site: http://script.aculo.us/

if(!Control) var Control = {};
Control.Slider = Class.create();

// options:
//  axis: 'vertical', or 'horizontal' (default)
//
// callbacks:
//  onChange(value)
//  onSlide(value)
Control.Slider.prototype = {
  initialize: function(handle, track, options) {
    var slider = this;
    
    if(handle instanceof Array) {
      this.handles = handle.collect( function(e) { return $(e) });
    } else {
      this.handles = [$(handle)];
    }
    
    this.track   = $(track);
    this.options = options || {};

    this.axis      = this.options.axis || 'horizontal';
    this.increment = this.options.increment || 1;
    this.step      = parseInt(this.options.step || '1');
    this.range     = this.options.range || $R(0,1);
    
    this.value     = 0; // assure backwards compat
    this.values    = this.handles.map( function() { return 0 });
    this.spans     = this.options.spans ? this.options.spans.map(function(s){ return $(s) }) : false;
    this.options.startSpan = $(this.options.startSpan || null);
    this.options.endSpan   = $(this.options.endSpan || null);

    this.restricted = this.options.restricted || false;

    this.maximum   = this.options.maximum || this.range.end;
    this.minimum   = this.options.minimum || this.range.start;

    // Will be used to align the handle onto the track, if necessary
    this.alignX = parseInt(this.options.alignX || '0');
    this.alignY = parseInt(this.options.alignY || '0');
    
    this.trackLength = this.maximumOffset() - this.minimumOffset();

    this.handleLength = this.isVertical() ? 
      (this.handles[0].offsetHeight != 0 ? 
        this.handles[0].offsetHeight : this.handles[0].style.height.replace(/px$/,"")) : 
      (this.handles[0].offsetWidth != 0 ? this.handles[0].offsetWidth : 
        this.handles[0].style.width.replace(/px$/,""));

    this.active   = false;
    this.dragging = false;
    this.disabled = false;

    if(this.options.disabled) this.setDisabled();

    // Allowed values array
    this.allowedValues = this.options.values ? this.options.values.sortBy(Prototype.K) : false;
    if(this.allowedValues) {
      this.minimum = this.allowedValues.min();
      this.maximum = this.allowedValues.max();
    }

    this.eventMouseDown = this.startDrag.bindAsEventListener(this);
    this.eventMouseUp   = this.endDrag.bindAsEventListener(this);
    this.eventMouseMove = this.update.bindAsEventListener(this);

    // Initialize handles in reverse (make sure first handle is active)
    this.handles.each( function(h,i) {
      i = slider.handles.length-1-i;
      slider.setValue(parseFloat(
        (slider.options.sliderValue instanceof Array ? 
          slider.options.sliderValue[i] : slider.options.sliderValue) || 
         slider.range.start), i);
      Element.makePositioned(h); // fix IE
      Event.observe(h, "mousedown", slider.eventMouseDown);
    });
    
    Event.observe(this.track, "mousedown", this.eventMouseDown);
    Event.observe(document, "mouseup", this.eventMouseUp);
    Event.observe(document, "mousemove", this.eventMouseMove);
    
    this.initialized = true;
  },
  dispose: function() {
    var slider = this;    
    Event.stopObserving(this.track, "mousedown", this.eventMouseDown);
    Event.stopObserving(document, "mouseup", this.eventMouseUp);
    Event.stopObserving(document, "mousemove", this.eventMouseMove);
    this.handles.each( function(h) {
      Event.stopObserving(h, "mousedown", slider.eventMouseDown);
    });
  },
  setDisabled: function(){
    this.disabled = true;
  },
  setEnabled: function(){
    this.disabled = false;
  },  
  getNearestValue: function(value){
    if(this.allowedValues){
      if(value >= this.allowedValues.max()) return(this.allowedValues.max());
      if(value <= this.allowedValues.min()) return(this.allowedValues.min());
      
      var offset = Math.abs(this.allowedValues[0] - value);
      var newValue = this.allowedValues[0];
      this.allowedValues.each( function(v) {
        var currentOffset = Math.abs(v - value);
        if(currentOffset <= offset){
          newValue = v;
          offset = currentOffset;
        } 
      });
      return newValue;
    }
    if(value > this.range.end) return this.range.end;
    if(value < this.range.start) return this.range.start;
    return value;
  },
  setValue: function(sliderValue, handleIdx){
    if(!this.active) {
      this.activeHandleIdx = handleIdx || 0;
      this.activeHandle    = this.handles[this.activeHandleIdx];
      this.updateStyles();
    }
    handleIdx = handleIdx || this.activeHandleIdx || 0;
    if(this.initialized && this.restricted) {
      if((handleIdx>0) && (sliderValue<this.values[handleIdx-1]))
        sliderValue = this.values[handleIdx-1];
      if((handleIdx < (this.handles.length-1)) && (sliderValue>this.values[handleIdx+1]))
        sliderValue = this.values[handleIdx+1];
    }
    sliderValue = this.getNearestValue(sliderValue);
    this.values[handleIdx] = sliderValue;
    this.value = this.values[0]; // assure backwards compat
    
    this.handles[handleIdx].style[this.isVertical() ? 'top' : 'left'] = 
      this.translateToPx(sliderValue);
    
    this.drawSpans();
    if(!this.dragging || !this.event) this.updateFinished();
  },
  setValueBy: function(delta, handleIdx) {
    this.setValue(this.values[handleIdx || this.activeHandleIdx || 0] + delta, 
      handleIdx || this.activeHandleIdx || 0);
  },
  translateToPx: function(value) {
    return Math.round(
      ((this.trackLength-this.handleLength)/(this.range.end-this.range.start)) * 
      (value - this.range.start)) + "px";
  },
  translateToValue: function(offset) {
    return ((offset/(this.trackLength-this.handleLength) * 
      (this.range.end-this.range.start)) + this.range.start);
  },
  getRange: function(range) {
    var v = this.values.sortBy(Prototype.K); 
    range = range || 0;
    return $R(v[range],v[range+1]);
  },
  minimumOffset: function(){
    return(this.isVertical() ? this.alignY : this.alignX);
  },
  maximumOffset: function(){
    return(this.isVertical() ? 
      (this.track.offsetHeight != 0 ? this.track.offsetHeight :
        this.track.style.height.replace(/px$/,"")) - this.alignY : 
      (this.track.offsetWidth != 0 ? this.track.offsetWidth : 
        this.track.style.width.replace(/px$/,"")) - this.alignY);
  },  
  isVertical:  function(){
    return (this.axis == 'vertical');
  },
  drawSpans: function() {
    var slider = this;
    if(this.spans)
      $R(0, this.spans.length-1).each(function(r) { slider.setSpan(slider.spans[r], slider.getRange(r)) });
    if(this.options.startSpan)
      this.setSpan(this.options.startSpan,
        $R(0, this.values.length>1 ? this.getRange(0).min() : this.value ));
    if(this.options.endSpan)
      this.setSpan(this.options.endSpan, 
        $R(this.values.length>1 ? this.getRange(this.spans.length-1).max() : this.value, this.maximum));
  },
  setSpan: function(span, range) {
    if(this.isVertical()) {
      span.style.top = this.translateToPx(range.start);
      span.style.height = this.translateToPx(range.end - range.start + this.range.start);
    } else {
      span.style.left = this.translateToPx(range.start);
      span.style.width = this.translateToPx(range.end - range.start + this.range.start);
    }
  },
  updateStyles: function() {
    this.handles.each( function(h){ Element.removeClassName(h, 'selected') });
    Element.addClassName(this.activeHandle, 'selected');
  },
  startDrag: function(event) {
    if(Event.isLeftClick(event)) {
      if(!this.disabled){
        this.active = true;
        
        var handle = Event.element(event);
        var pointer  = [Event.pointerX(event), Event.pointerY(event)];
        var track = handle;
        if(track==this.track) {
          var offsets  = Position.cumulativeOffset(this.track); 
          this.event = event;
          this.setValue(this.translateToValue( 
           (this.isVertical() ? pointer[1]-offsets[1] : pointer[0]-offsets[0])-(this.handleLength/2)
          ));
          var offsets  = Position.cumulativeOffset(this.activeHandle);
          this.offsetX = (pointer[0] - offsets[0]);
          this.offsetY = (pointer[1] - offsets[1]);
        } else {
          // find the handle (prevents issues with Safari)
          while((this.handles.indexOf(handle) == -1) && handle.parentNode) 
            handle = handle.parentNode;
            
          if(this.handles.indexOf(handle)!=-1) {
            this.activeHandle    = handle;
            this.activeHandleIdx = this.handles.indexOf(this.activeHandle);
            this.updateStyles();
            
            var offsets  = Position.cumulativeOffset(this.activeHandle);
            this.offsetX = (pointer[0] - offsets[0]);
            this.offsetY = (pointer[1] - offsets[1]);
          }
        }
      }
      Event.stop(event);
    }
  },
  update: function(event) {
   if(this.active) {
      if(!this.dragging) this.dragging = true;
      this.draw(event);
      // fix AppleWebKit rendering
      if(navigator.appVersion.indexOf('AppleWebKit')>0) window.scrollBy(0,0);
      Event.stop(event);
   }
  },
  draw: function(event) {
    var pointer = [Event.pointerX(event), Event.pointerY(event)];
    var offsets = Position.cumulativeOffset(this.track);
    pointer[0] -= this.offsetX + offsets[0];
    pointer[1] -= this.offsetY + offsets[1];
    this.event = event;
    this.setValue(this.translateToValue( this.isVertical() ? pointer[1] : pointer[0] ));
    if(this.initialized && this.options.onSlide)
      this.options.onSlide(this.values.length>1 ? this.values : this.value, this);
  },
  endDrag: function(event) {
    if(this.active && this.dragging) {
      this.finishDrag(event, true);
      Event.stop(event);
    }
    this.active = false;
    this.dragging = false;
  },  
  finishDrag: function(event, success) {
    this.active = false;
    this.dragging = false;
    this.updateFinished();
  },
  updateFinished: function() {
    if(this.initialized && this.options.onChange) 
      this.options.onChange(this.values.length>1 ? this.values : this.value, this);
    this.event = null;
  }
}/**
* JavaScript session.js - Enables Flash to consume functionality on IRW.
*
**/
$namespace("com.ikea.irw.session");
com.ikea.irw.session = {


    /* global window, alert, document, ActiveXObject, XMLHttpRequest, checkCurrentUser */

    // setHeaders: This function set the values that we later will pass in
    //     request headers. Setting the values in window makes them global
    //     so we can use them at a later time.
    // We also try to set the cookie that following http requests will use.
    // 
    // The planner calls this function on startup.
    setHeaders: function ($accept, $consumer, $contract, $token, $domain) {
        "use strict";
        window.acceptHeader = $accept;
        window.consumerHeader = $consumer;
        window.contractHeader = $contract;
        window.tokenHeader = $token;
	window.domainHeader = $domain;
	document.cookie = "token=" + window.tokenHeader + ";domain=" + window.domainHeader + ";path=/";
        return "ok";
    }


};

$namespace('com.ikea.irw.elements');
com.ikea.irw.elements.select = {
    toIrwDropDown : {
        localStore : {
            subContainer : new Element('div', {'class' : 'subContainer', 'id' : 'subContainer'}),
            dropDownElement: new Element('div'),
            selectedStoreUrl : "",
            selectedStoreNum : "",
            storeNumCookieName : "",
            initialize : function (thisElement) {
                this.dropDownElement = thisElement;
                var cookieFlag = false, firstAsDefault = true, localStoreNameInCookie = "", dropDownContent = "", dropDownPopupContent = new Element('div', {'class' : 'listContainer'}), defaultStore, tmpLocale, storeCounter = 0;
                $$("meta").each(function (thisMeta) {
                    if (thisMeta.name === "language") {
                        tmpLocale = thisMeta.content.split("-");
                    }
                });
                this.storeNumCookieName = 'selected_store_num_' + tmpLocale[0] + '_' + tmpLocale[1];
                defaultStore = getCookie(this.storeNumCookieName);
                //Check if there is a set store in the cookie
                if (defaultStore !== null && defaultStore !== "") {
                    cookieFlag = true;
                    firstAsDefault = false;
                }
                //Fetch and iterate all child anchor tags to the given element 
                $$("#" + thisElement.id + " a").each(function (anchorElement) {
                    storeCounter++;
                    var className = "items", item, tmpStore;
                    //Prepare store ID
                    tmpStore = (anchorElement.id !== null && anchorElement.id !== "") ? (anchorElement.id.split("_").length === 2 ? anchorElement.id.split("_")[1] : "") : "";
                    //Check if the current iterated store is in the cookie, if so set as selected
                    if (firstAsDefault || (cookieFlag && tmpStore === defaultStore)) {
                        //Create content using the anchors text
                        dropDownContent += '<div id="localStoreAdDropdown" class="irwDropDown">' +
                            '<div class="boxLeft"></div>' +
                            '<div class="boxText">' + anchorElement.innerHTML + '</div>' +
                            '<div class="boxButton"></div>' +
                            '</div>';
                        //Set the defalt flag to indicate we have allready shown the wanted value
                        firstAsDefault = false;
                        className = "activeLink";
                        this.selectedStoreUrl = (anchorElement.href !== "" && anchorElement.href !== document.location.href) ? anchorElement.href : "";
                        this.selectedStoreNum = tmpStore;
                    }
                    if (anchorElement.href !== "" && anchorElement.href !== document.location.href) {
                        item = new Element('a', {'href' : anchorElement.href, 'id' : anchorElement.id, 'class' : className, onclick : "return false;"}).update(anchorElement.innerHTML);
                        Event.observe(item, 'mousedown', function (e) {
                            com.ikea.irw.elements.select.toIrwDropDown.localStore.selectStore(this);
                        });
                        dropDownPopupContent.insert(item);
                    }
                });
                if (storeCounter > 5) {
                    this.subContainer.className = "subContainer fixedHeight";
                }
                //Remove non-JavaScript link
                if ($$('.storesLink')[0]) {
                    $$('.storesLink')[0].remove();
                }
                thisElement.update(dropDownContent);
                this.subContainer.update(dropDownPopupContent);
                this.subContainer.setStyle({ display: 'none'});
                $(document.body).insert({top: this.subContainer});
                this.bindMouseEvent(this);
                Event.observe(document, "click", function () {
                    com.ikea.irw.elements.select.toIrwDropDown.localStore.hideDropDown.apply(this, arguments);
                });
            },
            selectStore : function (inStore) {
                //Update the dropdown button
                this.selectedStoreUrl = inStore.href;
                this.selectedStoreNum = (inStore.id !== null && inStore.id !== "") ? (inStore.id.split("_").length === 2 ? inStore.id.split("_")[1] : "") : "";
                var dropDownContent = '<div id="localStoreAdDropdown" class="irwDropDown">' +
                    '<div class="boxLeft"></div>' +
                    '<div class="boxText">' + inStore.innerHTML + '</div>' +
                    '<div class="boxButton"></div>' +
                    '</div>';
                this.dropDownElement.update(dropDownContent);
                com.ikea.irw.elements.select.toIrwDropDown.localStore.hideDropDown.apply(this, arguments);
                //Update dropdown values and mark selection
                $$("#subContainer a").each(function (anchorElement) {
                    if (anchorElement.id === inStore.id) {
                        anchorElement.className = "activeLink";
                    }
                    else {
                        anchorElement.className = "items";
                    }
                });
                return false;
            },
            bindMouseEvent: function () {
                var checkDisplay, subEl;
                Event.observe(this.dropDownElement, 'mousedown', function (e) {
                    subEl = $('subContainer');
                    checkDisplay = subEl.getStyle('display');
                    if (checkDisplay === 'block') {
                        subEl.setStyle({ display: 'none'});
                    } else {
                        subEl.setStyle({ display: 'block'});
                        com.ikea.irw.elements.select.toIrwDropDown.localStore.positionDropDown();
                    }
                });
            },
            positionDropDown : function () {
                var dropDownBar, dropDown, dropDownHeight, pos, dropDownWidth;
                dropDownBar = this.dropDownElement;
                dropDown = $('subContainer');
                dropDownHeight = dropDownBar.getHeight();
                dropDownWidth = dropDownBar.getWidth();
                pos = dropDownBar.cumulativeOffset();
                dropDown.setStyle({
                    left: pos.left + 1 + "px",
                    top:  pos.top + dropDownHeight - 2 + "px",
                    width: dropDownWidth - 4 + "px"
                });
            },
            hideDropDown : function () {
                var isFilter = function (ele) {
                    if (ele !== null) {
                        if (ele.className) {
                            if (ele.className.indexOf("subContainer") >= 0 || ele.className.indexOf("irwDropDown") >= 0) {
                                return true;
                            }
                        }
                        if (ele.tagName) {
                            if (ele.tagName.toLowerCase() !== "body") {
                                return isFilter(ele.parentNode);
                            }
                        }
                    }
                    return false;
                };
                if (isFilter(arguments[0].target)) {
                    return;
                }
                $('subContainer').setStyle({ display: 'none'});
            },
            submit : function () {
                if (this.selectedStoreUrl !== "") {
                    setCookie(this.storeNumCookieName, this.selectedStoreNum, null, "/");
                    irwstatSetTrailingTag("IRWStats.pageFunctionality", "modules>local store");
                    irwstatSetTrailingTag("IRWStats.sitenavigation", "local store module");
                    document.location = this.selectedStoreUrl;
                }
            }
        }
    }
};/** @namespace  */
$namespace('com.ikea.irw.helper');com.ikea.irw.helper.touchdevices = {
    isTouchdevice : function () {
        if (document.body.ontouchstart !== undefined) {
            return true;
        }
        return false;
    }
};/** @namespace  */
$namespace('com.ikea.irw.GUI');
com.ikea.irw.GUI.background = {
    changeBackground: function (backgroundImage1) {
        var metaTags, metaCount, item, itemName;
        metaTags = document.getElementsByTagName("META");
        for (metaCount = 0; metaCount < metaTags.length; metaCount += 1) {
            item = metaTags[metaCount];
            itemName = item.getAttribute("NAME");
            if (itemName !== null) {
                if (itemName === "category") {
                    if (item.getAttribute("CONTENT") === "Home Page") {
                        document.body.style.backgroundImage = backgroundImage1;
                        break;
                    }
                }
            }
        }
    }
};/*global document, console, $, Effect, $$, Element, $A */

/*

This script creates a simple tooltip which uses the elements REL attribute.
If the element has no REL attribute - or if the REL attribute value is empty - the script will not produce a tooltip for that element.

This script also hide all containers on the page with the class "formTooltip", which is the tooltip for CSS.

*/

var com = com || {};
com.ikea = com.ikea || {};
com.ikea.irw = com.ikea.irw || {};
com.ikea.irw.GUI = com.ikea.irw.GUI || {};

com.ikea.irw.GUI.tooltip = {
    /*
        Changes to "settings" affect all pages that uses tooltip.
    */
    settings: {
        elements: ["input", "textarea"],        // Should be a comma separated array containing the HTML elements that you wish to apply tooltip on
        bgColor: "#fefef2",                     // Hex code including hash, e.g. "#fafafa"
        border: "1px solid #ccc",               // normal CSS
        padding: "10px",                        // Padding inside the tooltip, in pixels, e.g. "10px"
        width: "205px"                          // Width of the tooltip, in pixels, e.g. "200px"
    },
    init: function () {
        var elemArray = com.ikea.irw.GUI.tooltip.settings.elements,
            relAttrValue,
            addFocus = com.ikea.irw.GUI.tooltip.addFocus,
            addMouseover = com.ikea.irw.GUI.tooltip.addMouseover,
            getElemArray = com.ikea.irw.GUI.tooltip.getElemArray,
            elem,
            elemId,
            elementType,
            returnArr = [],
            csstip = $$(".formTooltip"),
            cssArr = [];
        if (csstip !== null) {
            cssArr = $A(csstip);
            cssArr.each(function (el) {
                el.remove();
            });
        }
        elemArray.each(function (el) {
            elem = document.getElementsByTagName(el);
            returnArr = getElemArray(elem);
            returnArr.each(function (single) {
                elementType = single.tagName.toString().toLowerCase();
                if (elementType === "input" || elementType === "textarea") {
                    if (undefined !== single.hasAttribute && single.hasAttribute("rel") === true && single.readAttribute("rel") !== "") {
                        elemId = $(single.id);
                        relAttrValue = elemId.readAttribute("rel");
                        addFocus(elemId, relAttrValue);
                    }
                }
            });
        });
    },
    getElemArray: function (elem) {
        var elemArray = [],
            elemLength = elem.length,
            i = 0;
        for (i; i < elemLength; i += 1) {
            elemArray.push(elem[i]);
        }
        return elemArray;
    },
    addFocus: function (elem, text) {
        var tooltip,
            tooltipFrag,
            placeholder,
            createTooltip = com.ikea.irw.GUI.tooltip.createTooltip,
            appendTooltip = com.ikea.irw.GUI.tooltip.appendTooltip,
            setup = com.ikea.irw.GUI.tooltip.settings;
        elem.observe("focus", function () {
            tooltip = createTooltip(text);
            appendTooltip(elem, tooltip);
        });
        elem.observe("blur", function () {
            placeholder = $("xczv9876");
            placeholder.remove();
        });
    },
    createTooltip: function (text) {
        var frag = document.createDocumentFragment(),
            container = new Element("div", { "id": "ftip4567" }),
            tooltip = new Element("div", { "id": "ftip7654" }).update(text),
            pintip = new Element("div", { "id": "ftip4321" }),
            pintipOuterBorder = new Element("div", { "id": "ftip4321_pintipOuterBorder" }),
            pintipInnerBorder = new Element("div", { "id": "ftip4321_pintipInnerBorder" }),
            setup = com.ikea.irw.GUI.tooltip.settings;
        container.setStyle({ position: "absolute", zIndex: 1000, width: setup.width });
        tooltip.setStyle({ backgroundColor: setup.bgColor, border: setup.border, padding: setup.padding, textAlign: "left" });
        pintip.setStyle({ height: "10px" });
        pintipOuterBorder.setStyle({ position: "relative", margin: "0 0 0 30px", width: 0, zIndex: 1001, height: 0, borderLeft: "7px solid transparent", borderRight: "7px solid transparent", borderTop: "7px solid #ccc", borderBottom: 0 });
        pintipInnerBorder.setStyle({ position: "absolute", top: "-8px", left: "-7px", width: 0, zIndex: 1002, height: 0, borderLeft: "7px solid transparent", borderRight: "7px solid transparent", borderTop: "7px solid #fefef2", borderBottom: 0 });
        container.setStyle({ display: "none" });
        container.appendChild(tooltip);
        pintipOuterBorder.appendChild(pintipInnerBorder);
        pintip.appendChild(pintipOuterBorder);
        container.appendChild(pintip);
        frag.appendChild(container);
        return frag;
    },
    appendTooltip: function (elem, tooltip) {
        var tooltipId,
            tooltipHeight,
            placeholder,
            appendPlaceholder = com.ikea.irw.GUI.tooltip.appendPlaceholder;
        placeholder = appendPlaceholder(elem);
        $$("body")[0].insert(placeholder);
        placeholder.appendChild(tooltip);
        tooltipId = $("ftip4567");
        tooltipHeight = $("ftip4567").getHeight();
        tooltipId.style.top = "-" + (tooltipHeight + 1) + "px";
        Effect.Appear("ftip4567", { duration: 0.2 });
        Effect.Grow("ftip4567", { duration: 0.2, direction: "bottom-left" });
    },
    appendPlaceholder: function (elem) {
        var placeholder = new Element("div", { "id": "xczv9876" }),
            scroll;
        scroll = elem.cumulativeOffset();
        placeholder.setStyle({ position: "absolute", height: "0px", zIndex: "5000", top: (scroll.top + 1) + "px", left: (scroll.left + 10) + "px" });
        return placeholder;
    }
};

document.observe("dom:loaded", function () {
    var initTooltip = new com.ikea.irw.GUI.tooltip.init();
});com.ikea.irw.GUI.LandPage = {
    backbutton: null,
    backhover: null,
    buttonhide : function () {
        com.ikea.irw.GUI.LandPage.removeButton();
        com.ikea.irw.GUI.LandPage.removeHover();
    },
    buttonshow : function () {
        com.ikea.irw.GUI.LandPage.removeHover();
        com.ikea.irw.GUI.LandPage.addButton();
    },
    hovershow : function () {
        com.ikea.irw.GUI.LandPage.removeButton();
        com.ikea.irw.GUI.LandPage.addHover();
    },
    init : function () {
        var calltouch, top1, top2;
        if (($("allContent") !== null) && ($("footer") !== null)) {
            calltouch = com.ikea.irw.helper.touchdevices.isTouchdevice();
            if (calltouch === false) {
                top1 = document.documentElement.scrollTop;
                top2 = document.body.scrollTop;

                com.ikea.irw.GUI.LandPage.createPlaceholder();
                com.ikea.irw.GUI.LandPage.createButton();
                com.ikea.irw.GUI.LandPage.createHover();
                com.ikea.irw.GUI.LandPage.setMargin();
                Event.observe(window, "scroll", function () {
                    top1 = document.documentElement.scrollTop;
                    top2 = document.body.scrollTop;
                    if (top1 > 200 || top2 > 200) {
                        com.ikea.irw.GUI.LandPage.buttonshow();
                    } else {
                        com.ikea.irw.GUI.LandPage.buttonhide();
                    }

                    if (com.ikea.irw.GUI.LandPage.withinViewport($("footer"))) {
                        $("backtotop_wrapper").style.position = "absolute";
                        $("backtotop_wrapper").style.bottom = "auto";
                    } else {
                        $("backtotop_wrapper").style.position = "fixed";
                        $("backtotop_wrapper").style.bottom = "60px";
                    }
                });
            }
        }
    },
    withinViewport: function (el) {
        var elOffset = el.cumulativeOffset(),
            vpOffset = document.viewport.getScrollOffsets(),
            elDim = el.getDimensions(),
            vpDim = document.viewport.getDimensions();
        if (elOffset[1] + elDim.height < vpOffset[1] || elOffset[1] > vpOffset[1] + vpDim.height ||
                elOffset[0] + elDim.width < vpOffset[0]  || elOffset[0] > vpOffset[0] + vpDim.width) {
            return false;
        }
        return true;
    },
    /**
    * Set leftmargin on back-top and back-hov elements. Also fix width on back-hov since that will change size on narrow windows
    */
    setMargin : function () {
        var windowWidth = document.viewport.getWidth();

        if (windowWidth < 1226) {
            $("backtotop_wrapper").style.width = "1080px";
        }
    },
    createPlaceholder : function () {
        var backtotop_wrapper = document.createElement('div');
        backtotop_wrapper.setAttribute('id', "backtotop_wrapper");

        $("allContent").insertBefore(backtotop_wrapper, $("footer"));
    },
    createButton : function () {
        if (this.backbutton === null) {
            this.backbutton = document.createElement('div');
            this.backbutton.setAttribute('id', "back-top");

            var newdiv1 = document.createElement('div'),
                newimg = document.createElement('img'),
                altText = "";

            newdiv1.setAttribute('id', "back-top-image");
            try {
                if (typeof com.ikea.irw.GUI.Tran.altText === 'string') {
                    altText = com.ikea.irw.GUI.Tran.altText;
                }
            } catch (e) {}

            newimg.setAttribute('src', "/ms/img/footer/BackToTopArrow.png");
            newimg.setAttribute('alt', altText);

            this.backbutton.appendChild(newdiv1);
            newdiv1.appendChild(newimg);

            $("backtotop_wrapper").appendChild(this.backbutton);
            $("back-top").observe("mouseover", function () {
                com.ikea.irw.GUI.LandPage.hovershow();
            });
            $("back-top").observe("mousedown", function () {
                com.ikea.irw.GUI.LandPage.hovershow();
            });
            $("backtotop_wrapper").removeChild(this.backbutton);
        }
    },
    createHover : function () {
        if (this.backhover === null) {
            this.backhover = document.createElement('div');
            this.backhover.setAttribute('id', "back-hov");
            this.backhover.setAttribute('style', "cursor:pointer;cursor:hand");

            var newdiv1 = document.createElement('div'),
                newA = document.createElement('a'),
                newP = document.createElement('p'),
                newdiv2 = document.createElement('div'),
                newimg = document.createElement('img'),
                altText = "",
                linkText = "";

            try {
                if (typeof com.ikea.irw.GUI.Tran.altText === 'string') {
                    altText = com.ikea.irw.GUI.Tran.altText;
                }
                altText = com.ikea.irw.GUI.Tran.altText;
            } catch (e) {}
            try {
                if (typeof com.ikea.irw.GUI.Tran.linkText === 'string') {
                    linkText = com.ikea.irw.GUI.Tran.altText;
                }
                linkText = com.ikea.irw.GUI.Tran.linkText;
            } catch (s) {}

            newdiv1.setAttribute('id', "back-text");

            newA.setAttribute('id', "back-hov-link");

            newP.setAttribute('id', "changetext");
            newP.innerHTML = linkText;

            newdiv2.setAttribute('id', "back-image");

            newimg.setAttribute('id', "back-hov-img");
            newimg.setAttribute('src', "/ms/img/footer/BackToTopArrow.png");
            newimg.setAttribute('alt', altText);

            this.backhover.appendChild(newdiv1);
            newdiv1.appendChild(newA);
            newA.appendChild(newP);
            this.backhover.appendChild(newdiv2);
            newdiv2.appendChild(newimg);

            $("backtotop_wrapper").appendChild(this.backhover);
            $("back-hov").style.width = $("back-text").offsetWidth + $("back-image").offsetWidth;
            $("back-hov").observe("mouseover", function () {
                com.ikea.irw.GUI.LandPage.hovershow();
            });
            $("back-hov").observe("mouseout", function (e) {
                var toElement = e.relatedTarget;
                if ((toElement.id !== "back-hov-img") && (toElement.id !== "back-hov-link") && (toElement.id !== "back-hov") && (toElement.id !== "back-image") && (toElement.id !== "back-text") && (toElement.id !== "changetext")) {
                    com.ikea.irw.GUI.LandPage.buttonshow();
                }
            });
            $("back-hov").observe("click", function () {
                irwStatPageFunctionality('function>back to top', 'back to top');
                document.documentElement.scrollTop = 0;
                document.body.scrollTop = 0;
                com.ikea.irw.GUI.LandPage.buttonhide();
            });
            $("back-hov-link").observe("click", function () {
                irwStatPageFunctionality('function>back to top', 'back to top');
                document.documentElement.scrollTop = 0;
                document.body.scrollTop = 0;
                com.ikea.irw.GUI.LandPage.buttonhide();
            });
            $("backtotop_wrapper").removeChild(this.backhover);
        }
    },
    addButton : function () {
        if ($("back-top") === null) {
            $("backtotop_wrapper").appendChild(this.backbutton);
        }
    },
    addHover : function () {
        if ($("back-hov") === null) {
            $("backtotop_wrapper").appendChild(this.backhover);
        }
    },
    removeButton : function () {
        if ($("back-top")) {
            $("backtotop_wrapper").removeChild(this.backbutton);
        }
    },
    removeHover : function () {
        if ($("back-hov")) {
            $("backtotop_wrapper").removeChild(this.backhover);
        }
    }
};

document.observe("dom:loaded", function () {
    com.ikea.irw.GUI.LandPage.init();
}); 

