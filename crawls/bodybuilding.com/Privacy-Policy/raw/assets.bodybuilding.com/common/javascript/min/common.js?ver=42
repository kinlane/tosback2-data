/* global jQuery */
/*jslint evil: true */
/* buildtarget: libs-lite.js */

/*
 * jquery.watermark.js
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 */
 
// NOTE: Edit for BB.com is instead of "watermark" attribute, to conform to HTML5 specs we use "data-watermark"
 
(function($) {

    $.extend($,{
        clearwatermarks : function() {
            $("[wmwrap='true']").find("input,textarea").watermark({
                remove:true
            });
        },
        addwatermarks : function() {
            $("[data-watermark]").each(function(num, el) {
                $(el).watermark($(el).attr("data-watermark"));
            });
        },
        watermark : function(o) {
            var focus, blur, click, x, l;
            o.el = $(o.el);
            if(o.remove) {
                if(o.el.parent().attr("wmwrap") === 'true') {
                    o.el.parent().replaceWith(o.el);
                }
            } else {
                if(o.el.parent().attr("wmwrap") !== 'true') {
                    o.el = o.el.wrap("<span class='wmwrap' wmwrap='true' style='position:relative;display:block;'/>");
                    l = $("<label class='watermark' />");
					
                    if(o.html) {
                        l.html(o.html);
                    }
                    if(o.cls) {
                        l.addClass(o.cls);
                    }
                    if(o.css) {
                        l.css(o.css);
                    }
					
                    l.css({
                        position:"absolute",
                        left:"3px",
                        top : parseInt(o.el.css("paddingTop"), 10),
                        display:"inline",
                        cursor:"text"
                    });
					
                    if(o.el.is("TEXTAREA")) {
                        if($.browser.msie) {
                            l.css("width",o.el.width());
                        }
                        if($.browser.mozilla || $.browser.safari) {
                            l.css("top","");
                        }
                    }
					
                    if(!o.cls && !o.css) {
                        l.css("color","#bbb");
                    }
					
                    focus = function() {
                        l.hide();
                    };
					
                    blur = function() {
                        if(!o.el.val()) {
                            l.show();
                        } else {
                            l.hide();
                        }
                    };
					
                    click = function() {
                        o.el.focus();
                    };
					
                    if(o.inherit) {
                        if(typeof o.inherit === "string") {
                            l.css(o.inherit,o.el.css(o.inherit));
                        } else {							
                            for(x=0;x<o.inherit.length;x++) {
                                l.css(o.inherit[x],o.el.css(o.inherit[x]));
                            }							
                        }
                    }
					
                    o.el.focus(focus).blur(blur);
                    l.click(click);
                    o.el.before(l);
                    if(o.el.val()) {
                        l.hide();
                    }
                }
            }
            return o.el;
        }
    });
	
    $.fn.watermark = function(o) {
        return this.each(function() {
            if(typeof(o) === "string") {
                try {
                    o = eval("(" + o + ")");
                } catch(ex) {
                    o = {
                        html:o
                    };
                
            }
        }
        o.el = this;
        return $.watermark(o);
        });
};
}(jQuery));
 /*
 * jQuery UI selectmenu
 *
 * Copyright (c) 2009 AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT (MIT-LICENSE.txt)
 * and GPL (GPL-LICENSE.txt) licenses.
 *
 * http://docs.jquery.com/UI
 */

(function($) {
    /**
     * As part of the jQuery UI removal initiative, we need to check it UI exists
     * before instantiating the select menu since not all wrappers have moved to
     * the non-UI dropdown. Once the UI select menu dropdown is replaced in all
     * wrappers with the JBDD, we can safely remove this file and jQuery UI across
     * the board.
     */
if ($.ui) {
$.widget("ui.selectmenu", {
	getter: "value",
	version: "1.8",
	eventPrefix: "selectmenu",
	options: {
		transferClasses: true,
		style: 'dropdown',
		positionOptions: {
			my: "left top",
			at: "left bottom",
			offset: null
		},
		width: null,
		menuWidth: null,
		handleWidth: 26,
		maxHeight: null,
		icons: null,
		format: null,
		bgImage: function() {},
		wrapperElement: ""
	},

	_create: function() {
		var self = this, o = this.options;

		// set a default id value
		var selectmenuId = this.element.attr('id') || 'ui-selectmenu-' +  Math.random().toString(16).slice(2, 10);

		//quick array of button and menu id's
		this.ids = [selectmenuId + '-' + 'button', selectmenuId + '-' + 'menu'];

		//define safe mouseup for future toggling
		this._safemouseup = true;

		//create menu button wrapper
		this.newelement = $('<a class="'+ this.widgetBaseClass +' ui-widget ui-state-default ui-corner-all" id="'+this.ids[0]+'" role="button" href="#" tabindex="0" aria-haspopup="true" aria-owns="'+this.ids[1]+'"></a>')
			.insertAfter(this.element);
		//
		this.newelement.wrap(o.wrapperElement);
		//transfer tabindex
		var tabindex = this.element.attr('tabindex');
		if(tabindex){ this.newelement.attr('tabindex', tabindex); }

		//save reference to select in data for ease in calling methods
		this.newelement.data('selectelement', this.element);

		//menu icon
		this.selectmenuIcon = $('<span class="'+ this.widgetBaseClass +'-icon ui-icon"></span>')
			.prependTo(this.newelement)
			.addClass( (o.style == "popup")? 'ui-icon-triangle-2-n-s' : 'ui-icon-triangle-1-s' );


		//make associated form label trigger focus
		$('label[for='+this.element.attr('id')+']')
			.attr('for', this.ids[0])
			.bind('click', function(){
				self.newelement[0].focus();
				return false;
			});

		//click toggle for menu visibility
		this.newelement
			.bind('mousedown', function(event){
				self._toggle(event, true);
				//make sure a click won't open/close instantly
				if(o.style == "popup"){
					self._safemouseup = false;
					setTimeout(function(){self._safemouseup = true;}, 300);
				}
				return false;
			})
			.bind('click',function(){
				return false;
			})
			.keydown(function(event){
				var ret = true;
				switch (event.keyCode) {
					case $.ui.keyCode.ENTER:
						ret = true;
						break;
					case $.ui.keyCode.SPACE:
						ret = false;
						self._toggle(event);
						break;
					case $.ui.keyCode.UP:
					case $.ui.keyCode.LEFT:
						ret = false;
						self._moveSelection(-1);
						break;
					case $.ui.keyCode.DOWN:
					case $.ui.keyCode.RIGHT:
						ret = false;
						self._moveSelection(1);
						break;
					case $.ui.keyCode.TAB:
						ret = true;
						break;
					default:
						ret = true;
						self._typeAhead(event.keyCode, 'mouseup');
						break;
				}
				return ret;
			})
			.bind('mouseover focus', function(){
				if (!o.disabled) $(this).addClass(self.widgetBaseClass+'-focus ui-state-hover');
			})
			.bind('mouseout blur', function(){
				if (!o.disabled) $(this).removeClass(self.widgetBaseClass+'-focus ui-state-hover');
			});

		//document click closes menu
		$(document).mousedown(function(event){
			self.close(event);
		});

		//change event on original selectmenu
		this.element
			.click(function(){ this._refreshValue(); })
            // newelement can be null under unclear circumstances in IE8
			.focus(function () { if (this.newelement) { this.newelement[0].focus(); } });

		//create menu portion, append to body
		var cornerClass = (o.style == "dropdown")? " ui-corner-bottom" : " ui-corner-all";
		this.list = $('<ul class="' + self.widgetBaseClass + '-menu ui-widget ui-widget-content'+cornerClass+'" aria-hidden="true" role="listbox" aria-labelledby="'+this.ids[0]+'" id="'+this.ids[1]+'"></ul>').appendTo('body');
		this.list.wrap(o.wrapperElement);

		//serialize selectmenu element options
		var selectOptionData = [];
		this.element
			.find('option')
			.each(function(){
				selectOptionData.push({
					value: $(this).attr('value'),
					text: self._formatText(jQuery(this).text()),
					selected: $(this).attr('selected'),
					classes: $(this).attr('class'),
					parentOptGroup: $(this).parent('optgroup').attr('label'),
					bgImage: o.bgImage.call($(this))
				});
			});

		//active state class is only used in popup style
		var activeClass = (self.options.style == "popup") ? " ui-state-active" : "";

		//write li's
		for (var i = 0; i < selectOptionData.length; i++) {
			var thisLi = $('<li role="presentation"><a href="#" tabindex="-1" role="option" aria-selected="false">'+ selectOptionData[i].text +'</a></li>')
				.data('index',i)
				.addClass(selectOptionData[i].classes)
				.data('optionClasses', selectOptionData[i].classes|| '')
				.mouseup(function(event){
						if(self._safemouseup){
							var changed = $(this).data('index') != self._selectedIndex();
							self.index($(this).data('index'));
							self.select(event);
							if(changed){ self.change(event); }
							self.close(event,true);
						}
					return false;
				})
				.click(function(){
					return false;
				})
				.bind('mouseover focus', function(){
					self._selectedOptionLi().addClass(activeClass);
					self._focusedOptionLi().removeClass(self.widgetBaseClass+'-item-focus ui-state-hover');
					$(this).removeClass('ui-state-active').addClass(self.widgetBaseClass + '-item-focus ui-state-hover');
				})
				.bind('mouseout blur', function(){
					if ($(this).is( self._selectedOptionLi().selector )){ $(this).addClass(activeClass); }
					$(this).removeClass(self.widgetBaseClass + '-item-focus ui-state-hover');
				});

			//optgroup or not...
			if(selectOptionData[i].parentOptGroup){
				// whitespace in the optgroupname must be replaced, otherwise the li of existing optgroups are never found
				var optGroupName = self.widgetBaseClass + '-group-' + selectOptionData[i].parentOptGroup.replace(/[^a-zA-Z0-9]/g, "");
				if(this.list.find('li.' + optGroupName).size()){
					this.list.find('li.' + optGroupName + ':last ul').append(thisLi);
				}
				else{
					$('<li role="presentation" class="'+self.widgetBaseClass+'-group '+optGroupName+'"><span class="'+self.widgetBaseClass+'-group-label">'+selectOptionData[i].parentOptGroup+'</span><ul></ul></li>')
						.appendTo(this.list)
						.find('ul')
						.append(thisLi);
				}
			}
			else{
				thisLi.appendTo(this.list);
			}

			//this allows for using the scrollbar in an overflowed list
			this.list.bind('mousedown mouseup', function(){return false;});

			//append icon if option is specified
			if(o.icons){
				for(var j in o.icons){
					if(thisLi.is(o.icons[j].find)){
						thisLi
							.data('optionClasses', selectOptionData[i].classes + ' ' + self.widgetBaseClass + '-hasIcon')
							.addClass(self.widgetBaseClass + '-hasIcon');
						var iconClass = o.icons[j].icon || "";
						thisLi
							.find('a:eq(0)')
							.prepend('<span class="'+self.widgetBaseClass+'-item-icon ui-icon ' +iconClass + '"></span>');
						if (selectOptionData[i].bgImage) {
							thisLi.find('span').css('background-image', selectOptionData[i].bgImage);
						}
					}
				}
			}
		}

		//add corners to top and bottom menu items
		this.list.find('li:last').addClass("ui-corner-bottom");
		if(o.style == 'popup'){ this.list.find('li:first').addClass("ui-corner-top"); }

		//transfer classes to selectmenu and list
		if(o.transferClasses){
			var transferClasses = this.element.attr('class') || '';
			this.newelement.add(this.list).addClass(transferClasses);
		}

		//original selectmenu width
		var selectWidth = this.element.width();

		//set menu button width
		this.newelement.width( (o.width) ? o.width : selectWidth);

		//set menu width to either menuWidth option value, width option value, or select width
		if(o.style == 'dropdown'){ this.list.width( (o.menuWidth) ? o.menuWidth : ((o.width) ? o.width : selectWidth)); }
		else { this.list.width( (o.menuWidth) ? o.menuWidth : ((o.width) ? o.width - o.handleWidth : selectWidth - o.handleWidth)); }

		// calculate default max height
		if(o.maxHeight) {
			//set max height from option
			 if (o.maxHeight < this.list.height()){ this.list.height(o.maxHeight); }
		} else {
			if (!o.format && ($(window).height() / 3) < this.list.height()) {
				o.maxHeight = $(window).height() / 3;
				this.list.height(o.maxHeight);
			}
		}
		//save reference to actionable li's (not group label li's)
		this._optionLis = this.list.find('li:not(.'+ self.widgetBaseClass +'-group)');

		//transfer menu click to menu button
		this.list
			.keydown(function(event){
				var ret = true;
				switch (event.keyCode) {
					case $.ui.keyCode.UP:
					case $.ui.keyCode.LEFT:
						ret = false;
						self._moveFocus(-1);
						break;
					case $.ui.keyCode.DOWN:
					case $.ui.keyCode.RIGHT:
						ret = false;
						self._moveFocus(1);
						break;
					case $.ui.keyCode.HOME:
						ret = false;
						self._moveFocus(':first');
						break;
					case $.ui.keyCode.PAGE_UP:
						ret = false;
						self._scrollPage('up');
						break;
					case $.ui.keyCode.PAGE_DOWN:
						ret = false;
						self._scrollPage('down');
						break;
					case $.ui.keyCode.END:
						ret = false;
						self._moveFocus(':last');
						break;
					case $.ui.keyCode.ENTER:
					case $.ui.keyCode.SPACE:
						ret = false;
						self.close(event,true);
						$(event.target).parents('li:eq(0)').trigger('mouseup');
						break;
					case $.ui.keyCode.TAB:
						ret = true;
						self.close(event,true);
						break;
					case $.ui.keyCode.ESCAPE:
						ret = false;
						self.close(event,true);
						break;
				}
				return ret;
			});

		//selectmenu style
		if(o.style == 'dropdown'){
			this.newelement
				.addClass(self.widgetBaseClass+"-dropdown");
			this.list
				.addClass(self.widgetBaseClass+"-menu-dropdown");
		}
		else {
			this.newelement
				.addClass(self.widgetBaseClass+"-popup");
			this.list
				.addClass(self.widgetBaseClass+"-menu-popup");
		}

		//hide original selectmenu element
		this.element.hide();

		//transfer disabled state
		if(this.element.attr('disabled') == true){ this.disable(); }

		//update value
		this.index(this._selectedIndex());

		//append status span to button
		if (o.waterMark) {
			//waterMark added by tlb
			this.newelement.prepend('<span class="'+self.widgetBaseClass+'-status">'+o.waterMark+'</span>');
		} else {
			this.newelement.prepend('<span class="'+self.widgetBaseClass+'-status">'+ selectOptionData[this._selectedIndex()].text +'</span>');
		}

		// needed when selectmenu is placed at the very bottom / top of the page
        window.setTimeout(function() {
            self._refreshPosition();
        }, 200);

		// needed when window is resized
		$(window).resize(function(){
			self._refreshPosition();
		});
	},
	destroy: function() {
		this.element.removeData(this.widgetName)
			.removeClass(this.widgetBaseClass + '-disabled' + ' ' + this.namespace + '-state-disabled')
			.removeAttr('aria-disabled')
			.unbind("click");

		//unbind click on label, reset its for attr
		$('label[for='+this.newelement.attr('id')+']')
			.attr('for',this.element.attr('id'))
			.unbind('click');
		this.newelement.remove();
		// FIXME option.wrapper needs
		this.list.remove();
		this.element.show();

		// call widget destroy function
		$.Widget.prototype.destroy.apply(this, arguments);
	},
	_typeAhead: function(code, eventType){
		var self = this;
		//define self._prevChar if needed
		if(!self._prevChar){ self._prevChar = ['',0]; }
		var C = String.fromCharCode(code);
		c = C.toLowerCase();
		var focusFound = false;
		function focusOpt(elem, ind){
			focusFound = true;
			$(elem).trigger(eventType);
			self._prevChar[1] = ind;
		}
		this.list.find('li a').each(function(i){
			if(!focusFound){
				var thisText = $(this).text();
				if( thisText.indexOf(C) == 0 || thisText.indexOf(c) == 0){
						if(self._prevChar[0] == C){
							if(self._prevChar[1] < i){ focusOpt(this,i); }
						}
						else{ focusOpt(this,i); }
				}
			}
		});
		this._prevChar[0] = C;
	},
	_uiHash: function(){
		var index = this.index();
		return {
			index: index,
			option: $("option", this.element).get(index),
			value: this.element[0].value
		};
	},
	open: function(event){
		var self = this;
		var disabledStatus = this.newelement.attr("aria-disabled");
		if(disabledStatus != 'true'){
			this._refreshPosition();
			this._closeOthers(event);
			this.newelement
				.addClass('ui-state-active');
			if (self.options.wrapperElement) {
				this.list.parent().appendTo('body');
			} else {
				this.list.appendTo('body');
			}
			this.list.addClass(self.widgetBaseClass + '-open')
				.attr('aria-hidden', false)
				.find('li:not(.'+ self.widgetBaseClass +'-group):eq('+ this._selectedIndex() +') a')[0].focus();
			if(this.options.style == "dropdown"){ this.newelement.removeClass('ui-corner-all').addClass('ui-corner-top'); }
			this._refreshPosition();
			this._trigger("open", event, this._uiHash());
		}
	},
	close: function(event, retainFocus){
		if(this.newelement.is('.ui-state-active')){
			this.newelement
				.removeClass('ui-state-active');
			this.list
				.attr('aria-hidden', true)
				.removeClass(this.widgetBaseClass+'-open');
			if(this.options.style == "dropdown"){ this.newelement.removeClass('ui-corner-top').addClass('ui-corner-all'); }
			if(retainFocus){this.newelement.focus();}
			this._trigger("close", event, this._uiHash());
		}
	},
	change: function(event) {
		this.element.trigger('change');
		this._trigger("change", event, this._uiHash());
	},
	select: function(event) {
		this._trigger("select", event, this._uiHash());
	},
	_closeOthers: function(event){
		$('.'+ this.widgetBaseClass +'.ui-state-active').not(this.newelement).each(function(){
			$(this).data('selectelement').selectmenu('close',event);
		});
		$('.'+ this.widgetBaseClass +'.ui-state-hover').trigger('mouseout');
	},
	_toggle: function(event,retainFocus){
		if(this.list.is('.'+ this.widgetBaseClass +'-open')){ this.close(event,retainFocus); }
		else { this.open(event); }
	},
	_formatText: function(text){
		return this.options.format ? this.options.format(text) : text;
	},
	_selectedIndex: function(){
		return this.element[0].selectedIndex;
	},
	_selectedOptionLi: function(){
		return this._optionLis.eq(this._selectedIndex());
	},
	_focusedOptionLi: function(){
		return this.list.find('.'+ this.widgetBaseClass +'-item-focus');
	},
	_moveSelection: function(amt){
		var currIndex = parseInt(this._selectedOptionLi().data('index'), 10);
		var newIndex = currIndex + amt;
		return this._optionLis.eq(newIndex).trigger('mouseup');
	},
	_moveFocus: function(amt){
		if(!isNaN(amt)){
			var currIndex = parseInt(this._focusedOptionLi().data('index') || 0, 10);
			var newIndex = currIndex + amt;
		}
		else { var newIndex = parseInt(this._optionLis.filter(amt).data('index'), 10); }

		if(newIndex < 0){ newIndex = 0; }
		if(newIndex > this._optionLis.size()-1){
			newIndex =  this._optionLis.size()-1;
		}
		var activeID = this.widgetBaseClass + '-item-' + Math.round(Math.random() * 1000);

		this._focusedOptionLi().find('a:eq(0)').attr('id','');
		this._optionLis.eq(newIndex).find('a:eq(0)').attr('id',activeID).focus();
		this.list.attr('aria-activedescendant', activeID);
	},
	_scrollPage: function(direction){
		var numPerPage = Math.floor(this.list.outerHeight() / this.list.find('li:first').outerHeight());
		numPerPage = (direction == 'up') ? -numPerPage : numPerPage;
		this._moveFocus(numPerPage);
	},
	_setOption: function(key, value) {
		this.options[key] = value;
		if (key == 'disabled') {
			this.close();
			this.element
				.add(this.newelement)
				.add(this.list)
					[value ? 'addClass' : 'removeClass'](
						this.widgetBaseClass + '-disabled' + ' ' +
						this.namespace + '-state-disabled')
					.attr("aria-disabled", value);
		}
	},
	index: function(newValue) {
		if (arguments.length) {
			this.element[0].selectedIndex = newValue;
			this._refreshValue();
		} else {
			return this._selectedIndex();
		}
	},
	value: function(newValue) {
		if (arguments.length) {
			// FIXME test for number is a kind of legacy support, could be removed at any time (Dez. 2010)
			if (typeof newValue == "number") {
					this.index(newValue);
			} else if (typeof newValue == "string") {
				this.element[0].value = newValue;
				this._refreshValue();
			}
		} else {
			return this.element[0].value;
		}
	},
	_refreshValue: function() {
		var activeClass = (this.options.style == "popup") ? " ui-state-active" : "";
		var activeID = this.widgetBaseClass + '-item-' + Math.round(Math.random() * 1000);
		//deselect previous
		this.list
			.find('.'+ this.widgetBaseClass +'-item-selected')
			.removeClass(this.widgetBaseClass + "-item-selected" + activeClass)
			.find('a')
			.attr('aria-selected', 'false')
			.attr('id', '');
		//select new
		this._selectedOptionLi()
			.addClass(this.widgetBaseClass + "-item-selected"+activeClass)
			.find('a')
			.attr('aria-selected', 'true')
			.attr('id', activeID);

		//toggle any class brought in from option
		var currentOptionClasses = this.newelement.data('optionClasses') ? this.newelement.data('optionClasses') : "";
		var newOptionClasses = this._selectedOptionLi().data('optionClasses') ? this._selectedOptionLi().data('optionClasses') : "";
		this.newelement
			.removeClass(currentOptionClasses)
			.data('optionClasses', newOptionClasses)
			.addClass( newOptionClasses )
			.find('.'+this.widgetBaseClass+'-status')
			.html(
				this._selectedOptionLi()
					.find('a:eq(0)')
					.html()
			);

		this.list.attr('aria-activedescendant', activeID);
	},
	_refreshPosition: function(){
		var o = this.options;
		// if its a native pop-up we need to calculate the position of the selected li
		if (o.style == "popup" && !o.positionOptions.offset) {
			var selected = this.list.find('li:not(.ui-selectmenu-group):eq('+this._selectedIndex()+')');
			// var _offset = "0 -" + (selected.outerHeight() + selected.offset().top - this.list.offset().top);
			var _offset = "0 -" + (selected.outerHeight() + selected.offset().top - this.list.offset().top);
		}
		this.list
			.css({
				zIndex: this.element.zIndex()
			})
			.position({
				// set options for position plugin
				of: o.positionOptions.of || this.newelement,
				my: o.positionOptions.my,
				at: o.positionOptions.at,
				offset: o.positionOptions.offset || _offset
			});
	}
});
}
if (!$.ui) {
    setTimeout(function () {
        $("div#searchCon").css('overflow', 'visible');
    }, 1000);
}
})(jQuery);
// jQuery ie6/ie7-quirks :hover to .hover plugin

(function ($) {
    $(document).ready(function () {
        $.single=function(a){return function(b){a[0]=b;return a;};}($([1]));
        /*@cc_on
            if ($.browser.msie && (!$.boxModel || $.browser.version < 7)) {
                $('.hoverable').each(function () {
                    this.attachEvent('onmouseenter', function (evt) { $.single(evt.srcElement).addClass('hover'); });
                    this.attachEvent('onmouseleave', function (evt) { $.single(evt.srcElement).removeClass('hover'); });
                });
            }
        @*/
    });
}(jQuery));
/**!
 * @preserve Color animation jQuery-plugin
 * http://www.bitstorm.org/jquery/color-animation/
 * Copyright 2011 Edwin Martin <edwin@bitstorm.org>
 * Released under the MIT and GPL licenses.
 */

(function($) {
    /**
	 * Check whether the browser supports RGBA color mode.
	 *
	 * Author Mehdi Kabab <http://pioupioum.fr>
	 * @return {boolean} True if the browser support RGBA. False otherwise.
	 */
    function isRGBACapable() {
        var $script = $('script:first'),
        color = $script.css('color'),
        result = false;
        if (/^rgba/.test(color)) {
            result = true;
        } else {
            try {
                result = ( color != $script.css('color', 'rgba(0, 0, 0, 0.5)').css('color') );
                $script.css('color', color);
            } catch (e) {
            }
        }

        return result;
    }

    $.extend(true, $, {
        support: {
            'rgba': isRGBACapable()
        }
    });

    var properties = ['color', 'backgroundColor', 'borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor', 'outlineColor'];
    $.each(properties, function(i, property) {
        $.fx.step[property] = function(fx) {
            if (!fx.init) {
                fx.begin = parseColor($(fx.elem).css(property));
                fx.end = parseColor(fx.end);
                fx.init = true;
            }

            fx.elem.style[property] = calculateColor(fx.begin, fx.end, fx.pos);
        }
    });

    // borderColor doesn't fit in standard fx.step above.
    $.fx.step.borderColor = function(fx) {
        if (!fx.init) {
            fx.end = parseColor(fx.end);
        }
        var borders = properties.slice(2, 6); // All four border properties
        $.each(borders, function(i, property) {
            if (!fx.init) {
                fx[property] = {
                    begin: parseColor($(fx.elem).css(property))
                    };
            }

            fx.elem.style[property] = calculateColor(fx[property].begin, fx.end, fx.pos);
        });
        fx.init = true;
    }

    // Calculate an in-between color. Returns "#aabbcc"-like string.
    function calculateColor(begin, end, pos) {
        var color = 'rgb' + ($.support['rgba'] ? 'a' : '') + '('
        + parseInt((begin[0] + pos * (end[0] - begin[0])), 10) + ','
        + parseInt((begin[1] + pos * (end[1] - begin[1])), 10) + ','
        + parseInt((begin[2] + pos * (end[2] - begin[2])), 10);
        if ($.support['rgba']) {
            color += ',' + (begin && end ? parseFloat(begin[3] + pos * (end[3] - begin[3])) : 1);
        }
        color += ')';
        return color;
    }

    // Parse an CSS-syntax color. Outputs an array [r, g, b]
    function parseColor(color) {
        var match, triplet;

        // Match #aabbcc
        if (match = /#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})/.exec(color)) {
            triplet = [parseInt(match[1], 16), parseInt(match[2], 16), parseInt(match[3], 16), 1];

        // Match #abc
        } else if (match = /#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])/.exec(color)) {
            triplet = [parseInt(match[1], 16) * 17, parseInt(match[2], 16) * 17, parseInt(match[3], 16) * 17, 1];

        // Match rgb(n, n, n)
        } else if (match = /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(color)) {
            triplet = [parseInt(match[1]), parseInt(match[2]), parseInt(match[3]), 1];

        } else if (match = /rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9\.]*)\s*\)/.exec(color)) {
            triplet = [parseInt(match[1], 10), parseInt(match[2], 10), parseInt(match[3], 10),parseFloat(match[4])];

        // No browser returns rgb(n%, n%, n%), so little reason to support this format.
        }
        return triplet;
    }
}(jQuery));
if (!BB.Instances.tooltipData) {
    BB.Instances.tooltipData = {};
}
$.extend(BB.Instances.tooltipData, {
    "REF_GOALS": "Narrow your choices by clicking a goal.  Only products that support the selected goal will be displayed.",
    "REF_CATEGORY": "Narrow your choices by clicking a category.  Only products within the selected category will be displayed.",
    "REF_BRAND": "Narrow your choices by selecting a brand.  Click View All Brands to see more choices.  Only products within the selected brand will be displayed.",
    "REF_RATING": "Narrow your choices by clicking a rating.  Only products with the selected rating or higher will be displayed.",
    "REF_PRICE": "Drag either end of the slider to view only those products that are within the selected price range.",
    "REF_SERVINGS": "Drag either end of the slider to view only those products that are within the selected servings range.",
    "REF_DAYS_SUPPLY": "Drag either end of the slider to view only those products that are within the day's supply range.",
    "REF_PRICE_PER_GRAM": "Drag either end of the slider to view only those products that are within the selected price per gram range.",
    "REF_CALORIES": "Drag either end of the slider to view only those products that are within the selected calorie range.",
    "REF_PROTEIN": "Drag either end of the slider to view only those products that are within the selected range.",
    "REF_CARBS": "Drag either end of the slider to view only those products that are within the selected range.",
    "REF_FAT": "Drag either end of the slider to view only those products that are within the selected range.",
    "REF_TYPE": "Select either Pure or Blend to view products that contain only one ingredient (pure) or a combination of ingredients (blend).",
    "REF_INGREDIENTS": "Narrow your choices by selecting an ingredient that the products must contain.  You can drag either end of the slider to view only those products that contain ingredient amounts within the selected range.",
    "REF_INGREDIENTS_NOT": "Narrow your choices by selecting an ingredient(s) that the products must not contain.",
    "REF_UNIQ_OPTS": "Narrow your choices by clicking a unique option.  Only products that have that option will be displayed.",
    "REF_FLAVOR": "Narrow your choices by clicking a flavor.  Only products that have that flavor will be displayed.",
    "REF_FORM_FACTOR": "Narrow your choices by clicking a product form.  Only products that have the selected product form will be displayed.",
    "REF_PURE_BLEND": "Select either Pure or Blend to view products that contain only one ingredient (pure) or a combination of ingredients (blend).",
    "REF_BLEND": "This product contains a combination of ingredients (blend). Information about the quantity of ingredient present per serving is unavailable.",
    "REF_COLOR": "Narrow your choices by clicking a color.  Only products that are that color will be displayed.",
    "availability-in-stock": "Product is in stock and ready to ship to you!",
    "availability-low-stock": "Our supply of this product is getting low.",
    "availability-backordered": "Product is out of stock and we are waiting on shipments from the supplier.",
    "availability-pre-sale": "We will be offering this product very soon.  You can order the product early and we will ship it to you as soon as we receive it.",
    "availability-shipped-by-supplier": "Product is shipped directly from the supplier and not by BodyBuilding.com.  Please note that there may be locations the supplier cannot ship to.",
    "availability-discontinued": "Product is or soon will be no longer carried by BodyBuilding.com.",
    "ORDER-HISTORY-SHIPPED": "Your order has been shipped and should arrive shortly! You are on your way to achieving your health, fitness, and appearance goals.",
    "ORDER-HISTORY-ONHOLD": "For your protection, additional verification is required before we can ship your order. Please check your e-mail or <a href=http://www.bodybuilding.com/store/email.htm>contact us</a> at your earliest convenience.",
    "ORDER-HISTORY-PARTIAL": "Partial Shipment - One or more items on your order are out of stock. We have shipped the in-stock items, and will ship the remaining products the moment we receive them from the manufacturer.",
    "ORDER-HISTORY-CANCELLED": "Notice: Your order has been cancelled. If you believe this is an error, please <a href=http://www.bodybuilding.com/store/email.htm>contact us</a>.",
    "ORDER-HISTORY-SUBMITTED": "Your order is successful! We will work on this end to ensure it is delivered as quickly as possible.",
    "ORDER-HISTORY-SPLIT": "To get your order to you as quickly as possible, your items were sent from more than one warehouse. Please review your tracking information. Some boxes may arrive earlier than others.",
    "ORDER-HISTORY-BACK": "We were unable to ship your order due to out-of-stock items. We apologize for the delay! We will send you an e-mail and ship your order out as soon as we have your products from the manufacturer.",
    "ORDER-HISTORY-WAITING": "Order not shipped - awaiting payment. Please send a check or money order to 2026 Silverstone Way, Meridian, ID. 83642. To process immediately, pay with an <a href=http://www.bodybuilding.com/store/help/onlinecheck.htm>on-line check</a>.",
    "ORDER-HISTORY-NOTFOUND": "Status Not Found",
    "ORDER-HISTORY-MULTIPLETRACKING": "Your order was split into multiple shipments. The packages could have been shipped from multiple warehouses or were too large to ship in one package.",
    "ORDER-HISTORY-RESHIP": "Part of order REFNUMBER has been reshipped and is on its way to you. We will continue to work on this end to ensure it arrives as quickly as possible!",
    "ORDER-HISTORY-ITEMCANCELLED": "Upon request, this item has been cancelled from your order. If you believe this is an error, please <a href=http://www.bodybuilding.com/store/email.htm>contact us</a>.",
    "NO_PRODUCTS_PRESENT_COMPARISON_MSG": "One or more products must be selected before viewing comparisons.",
    "CANNOT_ADD_MORE_COMPARISON_MSG": "Only 3 products can be compared at a time. To compare this product, you must remove one from the boxes in the sort bar."
});
(function() {
    if (typeof BB === 'undefined') { BB = {}; }
    if (typeof BB.Util === 'undefined') { BB.Util = {}; }

    BB.Util.md5 = (function() {
        var md5 = function() {
            var hexcase = 0;
            var b64pad = "";
            var chrsz = 8;
    
            var hex_md5 = function(s) {
                return binl2hex(core_md5(str2binl(s), s.length * chrsz));
            };
    
            var b64_md5 = function(s) {
                return binl2b64(core_md5(str2binl(s), s.length * chrsz));
            };
    
            var str_md5 = function(s) {
                return binl2str(core_md5(str2binl(s), s.length * chrsz));
            };
    
            var hex_hmac_md5 = function(key, data) {
                return binl2hex(core_hmac_md5(key, data));
            };
    
            var b64_hmac_md5 = function(key, data) {
                return binl2b64(core_hmac_md5(key, data));
            };
    
            var str_hmac_md5 = function(key, data) {
                return binl2str(core_hmac_md5(key, data));
            };
    
            var core_md5 = function(x, len) {
                x[len >> 5] |= 0x80 << ((len) % 32);
                x[(((len + 64) >>> 9) << 4) + 14] = len;
                var a = 1732584193;
                var b = -271733879;
                var c = -1732584194;
                var d = 271733878;
                var i;
                for (i = 0; i < x.length; i += 16) {
                    var olda = a;
                    var oldb = b;
                    var oldc = c;
                    var oldd = d;
                    a = md5_ff(a, b, c, d, x[i], 7, -680876936);
                    d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
                    c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
                    b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
                    a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
                    d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
                    c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
                    b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
                    a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
                    d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
                    c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
                    b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
                    a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
                    d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
                    c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
                    b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
                    a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
                    d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
                    c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
                    b = md5_gg(b, c, d, a, x[i], 20, -373897302);
                    a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
                    d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
                    c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
                    b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
                    a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
                    d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
                    c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
                    b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
                    a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
                    d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
                    c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
                    b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
                    a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
                    d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
                    c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
                    b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
                    a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
                    d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
                    c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
                    b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
                    a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
                    d = md5_hh(d, a, b, c, x[i], 11, -358537222);
                    c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
                    b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
                    a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
                    d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
                    c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
                    b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
                    a = md5_ii(a, b, c, d, x[i], 6, -198630844);
                    d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
                    c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
                    b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
                    a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
                    d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
                    c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
                    b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
                    a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
                    d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
                    c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
                    b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
                    a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
                    d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
                    c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
                    b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
                    a = safe_add(a, olda);
                    b = safe_add(b, oldb);
                    c = safe_add(c, oldc);
                    d = safe_add(d, oldd);
                }
                return new Array(a, b, c, d);
            };
    
            var md5_cmn = function(q, a, b, x, s, t) {
                return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
            };
    
            var md5_ff = function(a, b, c, d, x, s, t) {
                return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
            };
    
            var md5_gg = function(a, b, c, d, x, s, t) {
                return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
            };
    
            var md5_hh = function(a, b, c, d, x, s, t) {
                return md5_cmn(b ^ c ^ d, a, b, x, s, t);
            };
    
            var md5_ii = function(a, b, c, d, x, s, t) {
                return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
            };
    
            var core_hmac_md5 = function(key, data) {
                var i;
                var bkey = str2binl(key);
                if (bkey.length > 16) {
                    bkey = core_md5(bkey, key.length * chrsz);
                }
                var ipad = new Array(16), opad = new Array(16);
                for (i = 0; i < 16; i++) {
                    ipad[i] = bkey[i] ^ 0x36363636;
                    opad[i] = bkey[i] ^ 0x5C5C5C5C;
                }
                var hash = core_md5(ipad.concat(str2binl(data)), 512 + data.length * chrsz);
                return core_md5(opad.concat(hash), 512 + 128);
            };
    
            var safe_add = function(x, y) {
                var lsw = (x & 0xFFFF) + (y & 0xFFFF);
                var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
                return (msw << 16) | (lsw & 0xFFFF);
            };
    
            var bit_rol = function(num, cnt) {
                return (num << cnt) | (num >>> (32 - cnt));
            };
    
            var str2binl = function(str) {
                var bin = [];
                var i;
                var mask = (1 << chrsz) - 1;
                for (i = 0; i < str.length * chrsz; i += chrsz) {
                    bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (i % 32);
                }
                return bin;
            };
    
            var binl2str = function(bin) {
                var str = "";
                var mask = (1 << chrsz) - 1;
                var i;
                for (i = 0; i < bin.length * 32; i += chrsz) {
                    str += String.fromCharCode((bin[i >> 5] >>> (i % 32)) & mask);
                }
                return str;
            };
    
            var binl2hex = function(binarray) {
                var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
                var str = "";
                var i;
                for (i = 0; i < binarray.length * 4; i++) {
                    str += hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8 + 4)) & 0xF) + hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8)) & 0xF);
                }
                return str;
            };
    
            var binl2b64 = function(binarray) {
                var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                var str = "";
                var i;
                for (i = 0; i < binarray.length * 4; i += 3) {
                    var triplet = (((binarray[i >> 2] >> 8 * (i % 4)) & 0xFF) << 16) | (((binarray[i + 1 >> 2] >> 8 * ((i + 1) % 4)) & 0xFF) << 8) | ((binarray[i + 2 >> 2] >> 8 * ((i + 2) % 4)) & 0xFF);
                    var j;
                    for (j = 0; j < 4; j++) {
                        if (i * 8 + j * 6 > binarray.length * 32) {
                            str += b64pad;
                        } else {
                            str += tab.charAt((triplet >> 6 * (3 - j)) & 0x3F);
                        }
                    }
                }
                return str;
            };
    
            var str_to_ent = function(str) {
                var result = '';
                var i;
                for (i = 0; i < str.length; i++) {
                    var c = str.charCodeAt(i);
                    var tmp = '';
                    if (c > 255) {
                        while (c >= 1) {
                            tmp = "0123456789".charAt(c % 10) + tmp;
                            c = c / 10;
                        }
                        if (tmp === '') {
                            tmp = "0";
                        }
                        tmp = "#" + tmp;
                        tmp = "&" + tmp;
                        tmp = tmp + ";";
                        result += tmp;
                    } else {
                        result += str.charAt(i);
                    }
                }
                return result;
            };
    
            var trim = function(s) {
                while (s.substring(0, 1) === ' ') {
                    s = s.substring(1, s.length);
                }
                while (s.substring(s.length - 1, s.length) === ' ') {
                    s = s.substring(0, s.length - 1);
                }
                return s;
            };
    
            this.md5hashAuto = function(input, output_html, output_utf, skip_empty) {
                if (parseInt(navigator.appVersion, 10) >= 4) {
                    var md5string = hex_md5(str_to_ent(trim(input.value)));
                    output_html.value = md5string;
                    if (output_utf) {
                        md5string = hex_md5(trim(input.value));
                        output_utf.value = md5string;
                    }
                    if (!skip_empty) {
                        input.value = '';
                    }
                }
                return true;
            };
    
            this.md5hash = function(input, utf) {
                if (typeof utf === 'undefined') {
                    utf = false;
                }
                var result = '';
                if (parseInt(navigator.appVersion, 10) >= 4) {
                    if (utf) {
                        result = hex_md5(trim(input.value));
                        output_utf.value = md5string;
                    } else {
                        result = hex_md5(str_to_ent(trim(input)));
                    }
                }
                return result;
            };
        };
    
        return new md5();
    }());

}());
var BB = BB || {};
if (typeof BB.Languages === 'undefined') {
    BB.Languages = {};
}

if (typeof BB.Languages.EN === 'undefined') {
    BB.Languages.EN = {};
}

BB.Languages.EN.passwordValid = 'Password is valid.';
BB.Languages.EN.passwordInvalidShort = 'Password must be 6 characters or more.';
BB.Languages.EN.passwordInValidAlphaNum = 'Password must contain both letters and numbers.';

BB.Validation = {};
BB.Validation.validatorBase = function() {
    this.validate = function(value) {
        throw new Error('Please define a validate method');
    };
};

BB.Validation.isAlpha = (function() {
    var V = function(){};
    V.prototype = new BB.Validation.validatorBase();
    V.prototype.validate = function(value) {
        return (/^[a-zA-Z]+$/).test(value);
    };
    return new V();
}());

BB.Validation.isNumeric = (function() {
    var V = function(){};
    V.prototype = new BB.Validation.validatorBase();
    V.prototype.validate = function(value) {
        return (/^[0-9]+$/).test(value);
    };
    return new V();
}());

BB.Validation.isAlphaOrNumeric = (function() {
    var V = function(){};
    V.prototype = new BB.Validation.validatorBase();
    V.prototype.validate = function(value) {
        return (/^[0-9a-zA-Z]*$/).test(value);
    };
    return new V();
}());

BB.Validation.isAnything = (function() {
    var V = function(){};
    V.prototype = new BB.Validation.validatorBase();
    V.prototype.validate = function(value) {
        return (/^.*$/).test(value);
    };
    return new V();
}());

BB.Validation.isAlphaAndNumeric = (function() {
    var V = function(){};
    V.prototype = new BB.Validation.validatorBase();
    V.prototype.validate = function(value) {
        return (/^((?=.*[a-zA-Z])(?=.*[0-9]).*)*$/).test(value);
    };
    return new V();
}());

BB.Validation.isFullName = (function() {
    var V = function(){};
    V.prototype = new BB.Validation.validatorBase();
    V.prototype.validate = function(value) {
        return (/^([a-zA-Z'\-\.]+\s*)*$/).test(value);
    };
    return new V();
}());

BB.Validation.isRequired = (function() {
    var V = function(){};
    V.prototype = new BB.Validation.validatorBase();
    V.prototype.validate = function(value) {
        if (value !== '') {
            return true;
        }
        return false;
    };
    return new V();
}());
BB.Validation.isEmail = (function() {
    var V = function(){};
    V.prototype = new BB.Validation.validatorBase();
    V.prototype.validate = function(value) {
        return (/^([0-9a-zA-Z]([\+\-\.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][\-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})*$/).test(value);
    };
    return new V();
}());

BB.Validation.isZipCode = (function() {
    var V = function(){};
    V.prototype = new BB.Validation.validatorBase();
    V.prototype.validate = function(value) {
        //return (/^\d{5}$|^\d{5}-\d{4}$/).test(value);
        return (/^[0-9\-]*$/).test(value);
    };
    return new V();
}());

BB.Validation.isPositiveFloat = (function() {
    var V = function(){};
    V.prototype = new BB.Validation.validatorBase();
    V.prototype.validate = function(value) {
        if (!isNaN(value) && value >= 0) {
            return true;
        }
        return false;
    };
    return new V();
}());

BB.Validation.isRequired = (function() {
    var V = function(){};
    V.prototype = new BB.Validation.validatorBase();
    V.prototype.validate = function(value) {
        if (value !== '') {
            return true;
        }
        return false;
    };
    return new V();
}());

BB.Validation.isOccupationCityState = (function() {
    var V = function(){};
    V.prototype = new BB.Validation.validatorBase();
    V.prototype.validate = function(value) {
        return (/^[a-zA-Z\-\.\s]*$/).test(value);
    };
    return new V();
}());

BB.Validation.dates = {
    // Source: http://stackoverflow.com/questions/497790
    convert:function(d) {
        // Converts the date in d to a date-object. The input can be:
        //   a date object: returned without modification
        //  an array      : Interpreted as [year,month,day]. NOTE: month is 0-11.
        //   a number     : Interpreted as number of milliseconds
        //                  since 1 Jan 1970 (a timestamp) 
        //   a string     : Any format supported by the javascript engine, like
        //                  "YYYY/MM/DD", "MM/DD/YYYY", "Jan 31 2009" etc.
        //  an object     : Interpreted as an object with year, month and date
        //                  attributes.  **NOTE** month is 0-11.
        return (
            d.constructor === Date ? d :
            d.constructor === Array ? new Date(d[0],d[1],d[2]) :
            d.constructor === Number ? new Date(d) :
            d.constructor === String ? new Date(d) :
            typeof d === "object" ? new Date(d.year,d.month,d.date) :
            NaN
        );
    },
    compare:function(a,b) {
        // Compare two dates (could be of any type supported by the convert
        // function above) and returns:
        //  -1 : if a < b
        //   0 : if a = b
        //   1 : if a > b
        // NaN : if a or b is an illegal date
        // NOTE: The code inside isFinite does an assignment (=).
        return (
            isFinite(a=this.convert(a).valueOf()) &&
            isFinite(b=this.convert(b).valueOf()) ?
            (a>b)-(a<b) :
            NaN
        );
    },
    inRange:function(d,start,end) {
        // Checks if date in d is between dates in start and end.
        // Returns a boolean or NaN:
        //    true  : if d is between start and end (inclusive)
        //    false : if d is before start or after end
        //    NaN   : if one or more of the dates is illegal.
        // NOTE: The code inside isFinite does an assignment (=).
       return ( 
           (isFinite(d=this.convert(d).valueOf()) && 
           isFinite(start=this.convert(start).valueOf()) && 
           isFinite(end=this.convert(end).valueOf())) ? 
           start <= d && d <= end : NaN );
    }
};

BB.Validation.isPrintingChars = (function() {
    var V = function(){};
    V.prototype = new BB.Validation.validatorBase();
    V.prototype.validate = function(value) {
        return (/[a-zA-Z0-9\~\!\@\#\$\%\^\&\*\(\)\-\s_=\]\[\'\"\;\:\<\>\.\,\\\/\}\{]+/).test(value);
    };
    return new V();
}());

/**
 * Checks a value for a valid password. Use the validate method to 
 * 
 * @param String value The value to check agains
 * @param Function validCallback Callback function to run if the checked value is a valid password
 * @param Function invalidCallback Callback function to run if the checked value is an invalid password
 */
BB.Validation.validPassword = (function() {
    var V = function(){};
    V.prototype = new BB.Validation.validatorBase();
    V.prototype.validate = function(value, validCallback, invalidCallback) {
        if (value && value.length > 5) {
            if ((/\d/).test(value) && (/[a-z]/i).test(value)) {
                if (typeof validCallback === 'function') {
                    validCallback(BB.Languages.EN.passwordValid);
                }
                return true;
            } else {
                if (typeof invalidCallback === 'function') {
                    invalidCallback(BB.Languages.EN.passwordInValidAlphaNum);
                }
            }
        } else {
            if (typeof invalidCallback === 'function') {
                invalidCallback(BB.Languages.EN.passwordInvalidShort);
            }
        }
        return false;
    };
    return new V();
}());
/** 
 * Checks for a valid weight. Use the validate method to check.
 * 
 * @param Value to check
 * @returns Boolean
 * 
 * Conditions for valid weight in lbs:
 * Not greater than 999.99 *
 * Only numeric chars and one decimal allowed *
 * Decimal cannot be at the beginning of the value (greater than or equal to 1) *
 * 
 * Conditions for valid weight in kgs:
 * Not greater than 454.5
 * 
 *
 * Uses Math.prototype.js Range function or the duplicate included in libs-store.js
 * (All rounding is handled back end by the API)
 *
 */
BB.Validation.validPersonalWeight = (function () {
    var V = function () {};
        
    V.prototype = new BB.Validation.validatorBase();
    
    V.prototype.validate = function (value, maxValues, minValues) {
        var allowedChars = /^\d{1,4}(?:\.|(?:\.\d+)){0,1}$/;
        
        if(allowedChars.test(value)) {
            value = parseFloat(value);
            if(Math.inRange(minValues, maxValues, value)) {
                return true;
            }
        }
        return false;
    };
    
    return new V(); 
}());
/* Valid decimal number
 *
 * Tests to see if there are between 0 - 1 decimals and all other chars are numeric
 */
 
BB.Validation.decimalNumeric = (function () {
    var V = function () {},
    allowedChars = /^((?:\d)*(?:\.|(?:\.\d+)){0,1})*$/;
        
    V.prototype = new BB.Validation.validatorBase();
    
    V.prototype.validate = function (value) {
        return (allowedChars.test(value));
    };
    
    return new V(); 
}());
/* 
 * For what ever reason, IE destroys on page flash elements before flash get a chance to clean up it's
 * object. And Adobe was not smart enough to test if instance was undefined. Therefore we have to use
 * the onbefore unload event to re-write the flash cleanup function to test for undefined values passed
 * into it. 
 */
(function() {
    var setBeforeUnload = function() {
        if (__flash__removeCallback) {
            document.body.onbeforeunload = function() {
                __flash__removeCallback = function(instance, name) {
                    if (instance && instance !== null) {
                        instance[name] = null;
                    }
                };
            };
        }      
    };
    
    if (document) {
        var f = (document.onload) ? document.onload : function(){};
        document.onload = function() {
            f(); setBeforeUnload();
        };
    }
}());
/**
 * Rotate through a set of elements
 * @version 1.0
 * @author Scott Byrns
 */

(function($) {

	$.fn.htmlRotater = function(sel, prefix, orientation) {

		/* Reference to self */
		var $this = this;

		this.prefix = prefix || 'div.rotater_';

		this.oritentation = 'horizontal' || orientation;

		if (this.oritentation === 'horizontal') {
			/* Width of the parent container */
			this._dimension = $(this).outerWidth();
			this._positionProperty = 'left';
		} else {
			/* Height of the parent container */
			this._dimension = $(this).outerHeight();
			this._positionProperty = 'top';
		}

		/* Array of elements to be rotated through */
		this._elements = [];

		/* Current index of displayed element */
		this._current = 0;

		/* Child Slector */
		this._selector = (typeof sel !== 'undefined' ? sel : 'div');

		/* Find child divs and push references to them into the elements array */
		$(this).find(this._selector).each(function() {
			$this._elements.push($(this));
			$(this).css($this._positionProperty, $this._dimension);
		});

		/* Position first element in focus */
		this._elements[0].css(this._positionProperty, 0);

		/**
		 * Move to the next element in the rotater
		 * @returns void
		 */
		this.next = function() {
			/* Hide the current element */
			if ($this._positionProperty === 'left') {
				$this._elements[$this._current].animate( {
					'left' : '-' + $this._dimension
				});
			} else {
				$this._elements[$this._current].animate( {
					'top' : '-' + $this._dimension
				});
			}

			$($this.prefix + $this._current).removeClass('sel');

			/* Move to first element if current element is the last */
			if ($this._current === $this._elements.length - 1) {
				$this._current = 0;
			} else {
				$this._current += 1;
			}

			$($this.prefix + $this._current).addClass('sel');

			/* Show the next element */
			if ($this._positionProperty === 'left') {
				$this._elements[$this._current].css($this._positionProperty,
						$this._dimension).animate( {
					'left' : 0
				});
			} else {
				$this._elements[$this._current].css($this._positionProperty,
						$this._dimension).animate( {
					'top' : 0
				});
			}

			return $this;

		};

		/**
		 * Move to the previous element in the rotater
		 * @returns void
		 */
		this.previous = function() {

			/* Hide the current element */
			if ($this._positionProperty === 'left') {
				$this._elements[$this._current].animate( {
					'left' : $this._dimension
				});
			} else {
				$this._elements[$this._current].animate( {
					'top' : $this._dimension
				});
			}

			$($this.prefix + $this._current).removeClass('sel');

			/* Move to last element if current element is the first */
			if ($this._current === 0) {
				$this._current = $this._elements.length - 1;
			} else {
				$this._current -= 1;
			}

			$($this.prefix + $this._current).addClass('sel');

			/* Show the previous element */
			if ($this._positionProperty === 'left') {
				$this._elements[$this._current].css($this._positionProperty,
						$this._dimension * -1).animate( {
					'left' : 0
				});
			} else {
				$this._elements[$this._current].css($this._positionProperty,
						$this._dimension * -1).animate( {
					'top' : 0
				});
			}

			return $this;

		};

		/**
		 * Move to a specified index
		 * @returns void
		 */
		this.moveTo = function(index) {

			if (index !== $this._current) {

				var position = (index > $this._current);

				/* Hide the current element */
				if ($this._positionProperty === 'left') {
					$this._elements[$this._current].animate( {
						'left' : (position ? (-$this._dimension)
								: $this._dimension)
					});
				} else {
					$this._elements[$this._current].animate( {
						'top' : (position ? (-$this._dimension)
								: $this._dimension)
					});
				}

				/* Move to index */
				$this._current = index;

				/* Show the element at the specified index */
				if ($this._positionProperty === 'left') {
					$this._elements[$this._current]
							.css(
									$this._positionProperty,
									(position ? $this._dimension
											: (-$this._dimension))).animate( {
								'left' : 0
							});
				} else {
					$this._elements[$this._current]
							.css(
									$this._positionProperty,
									(position ? $this._dimension
											: (-$this._dimension))).animate( {
								'top' : 0
							});
				}

			}

			return $this;
		};

		/* Return a reference to it's self for jQuery chaining */
		return this;
	};
}(jQuery));
(function($) {
    jQuery.fn.tertiaryNav = function(options) {
        var defaults = {
            messagingName: 'tertiary-nav',
            dataUrl: '',
            onLoadCallback: undefined
        };
        this.settings = $.extend(defaults, options);

        var that = this;
        this.data = undefined;
        this.current = undefined;
        this.msgLayer = undefined;
        this.container = undefined;
        this.showTimer = undefined;
        this.checkInterval = undefined;
        this.dims = undefined;
        this.containerDefaultHeight = 0;
        this.shown = false;
        this.cursor = undefined;
        this.quirksMode = (document.compatMode && (BB.Util.getBrowser() === "IE7" || BB.Util.getBrowser() === "IE8" || BB.Util.getBrowser() === "IE6")) ? true : false;
        this.domain = function() {
            var match = document.location.href.match(/^https?:\/\/([^\/]+)/i);
            return (match) ? match[1].toLowerCase() : false;
        };

        /**
         * Initialize the plugin.
         * @param data JSON data object containing navigation markup.
         * @return null
         */
        this.initialize = function(data) {
            /* Build out the containing div and append it to the document */
            this.data = data;

            /* Bind events to the require locations */
            $('ul.navSections li', this).each(function() {
                /* Removing the appropriate styles so show an arrow where necessary */
                $('a', this).each(function() {
                    if (that.domain) {
                        $(this).attr("href", that.modifyDomain($(this).attr("href").replace()));
                    }
                    try {
                        if (that.data[that.getElementText(this)]) {
                            $(this).removeClass("normal");
                        }
                    } catch (ex) {
                        try {
                            console.log('error getting "' + that.getElementText(this) + '" from data'); 
                        } catch (x) {}
                    }
                });
                $(this).bind('mouseenter', that.handleMouseEnter);
            });
            $(window).bind('resize', this.handleResize);

            /* Setup messaging layer to receive messages */
            BB.Controller.Messenger.registerListener('modal-' + this.settings.messagingName, Math.floor(Math.random() * new Date()), that.handleMessage);

            $(document).ready(function() {
                /* Creating the menu container and positioning it based on the secNav */
                that.container = $('<div class="tertiary-nav-container">').css({
                    'display': 'none'
                });
                $('body').append(this.container);
                this.containerDefaultHeight = $(this.container).height();
                that.handleResize();
            }.bind(this));
        };

        this.handleResize = function(event) {
            if (that.container) {
                that.setDims(false);
                $(that.container).css({
                    'left': that.dims.left,
                    'top': (that.dims.top + $(that).height())
                });
                that.setDims(true);
            }
        };

        this.doResize = function() {
            $(that.container).css({
                'left': that.dims.left,
                'top': (that.dims.top + $(that).height())
            });
        };

        /**
         * Simple method to get the element text. Used as a key usually.
         */
        this.getElementText = function(element) {
            return $.trim($(element).text().toLowerCase());
        };

        /**
         * Event handler for when the mouse enters a secNav item
         * @param evt Event object
         * @return
         */
        this.handleMouseEnter = function(evt) {

            $(that.current).removeClass('hover');
            $(this).addClass('hover');

            that.current = this;

            var current = that.getElementText(that.current);
            if (!that.data[current]) {
                that.hideMenu();
                $(that.current).removeClass('hover');
                return;
            } else {
                that.showMenu();
                $(this).addClass('hover');
            }
        };

        /** Setup the timers, intervals, and events needed to show and monitor the menu and mouse location */
        this.showMenu = function() {
            if (!that.showTimer && !that.shown) {
                that.showTimer = window.setTimeout(that.doShowMenu, 500);
                that.checkInterval = window.setInterval(that.checkMouseLoc, 100);
                $('body').bind('mousemove', that.logCursor);
            } else {
                that.changeMenu();
            }
        };

        /**
         * Shows the menu and sets the appropriate settings
         * @return null
         */
        this.doShowMenu = function() {
            if (that.container && !that.shown) {
                that.shown = true;
                that.changeMenu();
                $(that.container).stop(true).show();
                that.setDims(true);
                that.doResize();
            }
        };

        /**
         * Hides the menu if shown, or clears the showTimer if it is not shown yet.
         * @return null
         */
        this.hideMenu = function() {
            if (that.container) {
                that.shown = false;
                $(that.container).stop(true).hide();
                that.resetAfterClose();
            }
        };

        /**
         * Need to reset some values on close.
         * @return {undefined}
         */
        this.resetAfterClose = function() {
            that.setDims(false);
            window.clearTimeout(that.showTimer);
            window.clearInterval(that.checkInterval);
            that.checkInterval = that.showTimer = that.cursor = undefined;
            $('body').unbind('mousemove', that.logCursor);
        };

        /**
         * Handles messages from the messaging layer.
         * @param message
         * @param channel
         * @return
         */
        this.handleMessage = function(message, channel) {
        };

        /**
         * Set the dimensions of the menu. If the menu is shown it includes the height of the menu container. If
         * if is not shown yet, it only includes the dimensions of the secNav bar, 
         * @return null
         */
        this.setDims = function(addMenuHeight) {
            var mod = 20;
            mod = (addMenuHeight) ? (that.containerDefaultHeight + mod) : mod;
            this.dims = {
                'left': $(that).offset().left,
                'top': $(that).offset().top,
                'right': $(that).offset().left + $(that).width(),
                'bottom': $(that).offset().top + $(that).height() + mod
            };
        };

        /**
         * Starts logging the cursor location to ensure the menu closes properly.
         * @param evt Event object
         * @return null
         */
        this.logCursor = function(evt) {
            var e = (evt) ? evt : window.event;
            var x = (e.pageX) ? e.pageX : (e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft);
            var y = (e.pageY) ? e.pageY : (e.clientY + document.body.scrollTop + document.documentElement.scrollLeft);
            that.cursor = {
                'x': x,
                'y': y
            };
        };

        /**
         * Checked the mouse position against current bounds and hides the menu if required. 
         * @param evt
         * @return null;
         */
        this.checkMouseLoc = function() {
            if (!that.cursor || !that.dims) {
                return;
            }
            if (that.cursor.x < that.dims.left || that.cursor.x > that.dims.right || that.cursor.y < that.dims.top || that.cursor.y > that.dims.bottom) {
                that.hideMenu();
                $(that.current).removeClass('hover');
            }
        };

        /**
         * Change the menu contents based on the unique identifier
         * @return
         */
        this.changeMenu = function() {
            if (that.container) {
                var html = that.buildHTML(that.getElementText(that.current));
                $(that.container).html(html);
            }
        };

        /**
         * Replace the domain in the text as needed
         */
        this.modifyDomain = function(text) {
            return (that.domain === 'www.bodybuilding.com') ? text : text.replace(/www\.bodybuilding\.com/ig, that.domain);
        };

        /**
         * Build the modal content for an identifyer.
         * @param {String} identifyer Named identifyer for the selected tab. 
         * @returns {String} HTML content for target identifyer.
         */
        this.buildHTML = function(identifyer) {
            if (!that.data[identifyer]) {
                return false;
            }
            var html = "";
            var columns = that.data[identifyer].length;
            try {
                if (identifyer === 'find a supplement plan') {
                    html += "<table style=\"width:100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" class=\"tertiary-nav\"><tr><td class=\"no-padding\">";
                } else if (identifyer === 'ingredients' || identifyer === 'categories') {
                    html += "<table style=\"width:100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" class=\"tertiary-nav\"><tr><td>";
                } else {
                    html += "<table style=\"width:100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" class=\"tertiary-nav\"><tr><td class=\"twoColumn\">";
                }

                /* This replaces the strings for dev purposes. It should probably be removed before this goes live. */
                html += that.modifyDomain(that.data[identifyer][0]);

                html += "</td>";
                if (columns === 2 && identifyer === 'ingredients') {
                    html += '<td class="twoColumn">';
                } else {
                    html += '<td>';
                }
                html += that.modifyDomain(that.data[identifyer][1]);

                if (columns === 3) {
                    html += '<td>';
                    html += that.modifyDomain(that.data[identifyer][2]);
                }

                html += '<td class="last">';
                html += '<div class="large strong happy-block">' + '   <span class="font-dark-grey">' + '       LOWEST PRICES' + '   </span>' + '   <br />' + '   <span class="font-grey">' + '       ON 12,000+ PRODUCTS!' + '   </span>' + '   <hr class="thin" />' + '   <span class="font-dark-grey">' + '       FASTEST SHIPPING' + '   </span>' + '   <br />' + '   <span class="font-grey">' + '       WORLDWIDE!' + '   </span>' + '   <hr class="thin" />' + '   <span class="font-dark-grey">' + '       AWARD-WINNING 24/7' + '   </span>' + '   <br />' + '   <span class="font-grey">' + '      CUSTOMER SERVICE!' + '   </span>' + '   <a href="/store/whyshop.htm" id="nav-why-shop">Why Shop at Bodybuilding.com?</a>' + '</div>';
                html += "</td></tr></table>";
            } catch (e) {
                BB.Log.error(e);
                return "Error occured";
            }
            return html;
        };

        if (this.settings.onLoadCallback !== 'undefined' && typeof this.settings.onLoadCallback === 'function') {
            this.settings.onLoadCallback(this);
        }
        return this;
    };
}(jQuery));
/**
 * Show hide plugin
 * 
 * Apply this plugin to an anchor tag, or anyother element you want a click event on, and set a data-child-id attribute
 * on the element. This plugin will attach a click handler to the target and will show/hide the element with the child-id
 * in the document.
 * 
 * @param data-child-id <String> id attribute of the element to show/hide
 * @param data-fixed-height <Boolean> Whether or not to set height: auto at the end of the show animation
 */
(function($) {
    
    var methods = {};

    methods.initialize = function() {
        try {
            return this.each(function() {
                if ($(this).data('child-id')) {
                    if (!$(this).data('fixed-height')) { $(this).data('fixed-height', false); }
                    $(this).data('state', $("#" + $(this).data('child-id')).css('display'));
                    $(this).data('height', $("#" + $(this).data('child-id')).height());
                    $("#" + $(this).data('child-id')).height(0);
                } else {
                    return false;
                }
                $(this).bind('click', methods.handleClick.bind(this));

            });
        } catch (ex) {
            return false;
        }
    };

    methods.handleClick = function(evt) {
        var e = (evt) ? evt : window.event;
        e.preventDefault();
        var idt = '#' + $(this).data('child-id'); 
        if ($(this).data('state') !== 'none') {
            $(this).data('height', $("#" + $(this).data('child-id')).height());
            $(this).showHide('doAnimation', {'height': 0}, idt);
        } else {
            $(idt).css('display', 'block');
            $(this).showHide('doAnimation', {'height': $(this).data('height')}, idt);
        }
        return false;
    };

    methods.doAnimation = function(anim, idt) {
        $(idt).stop(true).animate(anim, 'fast', function() {
            if (anim.height === 0) {
                $(idt).css('display', 'none');
            } else {
                if ($(this).data('fixed-height') === false) {
                    $(idt).height('auto'); /* Making sure to make the displayed  */
                }
            }
            $(this).data('state', $(idt).css('display'));
            $(this).showHide('updateState', $(this).data('state'));
        }.bind(this));

    };

    methods.updateState = function(state) {
        if (state === 'block' && !$(this).hasClass("opened")) {
            $(this).addClass("opened");
        } else {
            $(this).removeClass("opened");
        }
    };
    

    $.fn.showHide = function(method) {
        // Method calling logic
        if ( methods[method] ) {
           return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));
        } else if ( typeof method === 'object' || ! method ) {
            return methods.initialize.apply(this, arguments);
        } else {
            $.error( 'Method ' +  method + ' does not exist on BBCOM jQuery.showHide' );
        } 
    };

}(jQuery));
/**
 * Event trigger plugin to send messages to linked controls
*/
(function ($) {
        $.fn.eventTrigger = function(){
            return this.each(function() {
                var $this = this;
                this.initialize = function() {
                    if ($($this).data('link') && $($this).data('message')) {
                        $($this).bind('click', this.sendMessage.bind(this));
                    }
                    return $this;
                };
                
                this.sendMessage = function(evt) {
                    var e = evt || window.event;
                    e.preventDefault();
                    BB.Controller.Messenger.sendMessage($($this).data('link'), $($this).data('message'));
                    return false;
                };
                
                return this.initialize();
            });
        };
}(jQuery));

//TODO: To handle JS removed from the wrapper
function checkform(formobj)
{
    if (formobj.username.value == '')
    {
        alert('Please enter your Username or Email Address.');
        return false;
    }
    else if (formobj.password.value == '')
    {
        alert('Please enter your Password.');
        return false;
    }
    else
    {
        var junk_output;
	BB.Util.md5.md5hashAuto(formobj.password, formobj.password_md5, junk_output, 0);	
        return true;
    }
    
}
/**
 * FDA Disclaimer for the store and reviews.
 *
 */
(function($) {
    
    $.fn.FDAWarning = function() {};
    
    var BB_AGREE = 'bbfdawarning', BB_ORIGIN = 'bbfdaorigin';
    
    
    var messages = {
        areas: {
            reviews: {
                site_from: "Reviews",
                site_from_long: "Bodybuilding.com Reviews",
                site_to: "the Store",
                site_to_long: "the Bodybuilding.com Store",
                extra_line: ""
            },
            content: {
                site_from: "the SuperSite",
                site_from_long: "the Bodybuilding.com Supersite",
                site_to: "the Store",
                site_to_long: "the Bodybuilding.com Store",
                extra_line: "The information provided on the SuperSite is intended for educational purposes only. "
            },
            store: {
                site_from: "the Store",
                site_from_long: "the Bodybuilding.com Store",
                site_to: "Reviews",
                site_to_long: "BodyBuilding.com Reviews",
                extra_line: ""
            }
        },
        general: '<div id="fda-warning"><div class="fda-warning-content"><div class="fda-warning-header">' +
            '<span>FDA Disclaimer</span></div>' +
            '<div class="fda-warning-message">You are now leaving <?=site_from_long?> and entering <?=site_to_long?>. ' +
            'Products sold in the Store are not intended to diagnose, treat, cure, or prevent any disease. <?=extra_line?>' +
            'To return to <?=site_from?>, please click NO below.  ' +
            'Click YES below to show your agreement and to enter <?=site_to_long?>.</div>' +
            '<div class="fda-buttons"><div class="fda-accept-message">Accept and continue?</div>' +
            '<button class="fda-continue">Yes</button><button class="fda-remain">No</button></div></div></div>'
    };
    
    

    BB.Util.FDADisclaimer = (function() {
        function FDADisclaimer() {
            this.t = new BB.TemplateCore();
            this.messageContent = {};
        }

        /**
         * Hide select boxes. This is a workaround for older browsers that will let the select boxes bleed through.
         */
        FDADisclaimer.prototype.hideSelectBoxes = function() {
            this.selectBoxes = $('select:visible');
            $('select:visible').css('visibility', 'hidden');
        };

        /**
         * Show select boxes. This is a workaround for older browsers that will let the select boxes bleed through.
         */
        FDADisclaimer.prototype.showSelectBoxes = function() {
            $(this.selectBoxes).css('display', 'block');
            this.selectBoxes = [];
        };
        
        /**
         * This method is meant to get the A domain from the url. 
         * 
         * If you on www.bdoybuilding.com it will return 'bodybuilding.com', 
         * and 'www.teenbodybuilding.com' will return 'teenbodybuilding.com'. Defaults
         * to 'bodybuilding.com' if there is an error of any type.
         */
        FDADisclaimer.prototype.getCookieDomain = function() {
            var m = window.location.href.match(/^http:\/\/([^\/]+)\//i)[1];
            var dom;
            try {
                if ((dom = m.split('.')).length > 1) {
                    dom = dom.slice(-2).join('.');
                } else {
                    dom = 'bodybuilding.com';
                }
            } catch (e) {
                dom = 'bodybuilding.com';
            }
            return dom;
        };
        
        FDADisclaimer.prototype.getAgreeCookies = function() {
            BB.Log.debug('getting cookie');
            var c = this._readCookie(BB_AGREE);
            try {
                var x = c.split(',');
                return x;
            } catch (e) {
                BB.Log.error(e);
            }
            return [];
        };
        
        FDADisclaimer.prototype.getOriginCookie = function() {
            BB.Log.debug('getting cookie');
            return this._readCookie(BB_ORIGIN);
        };
        
        FDADisclaimer.prototype._readCookie = function(name) {
            var nameEQ = name + "=";
            var ca = document.cookie.split(';');
            var i = 0;
            for(i = 0;i < ca.length;i++) {
                var c = ca[i];
                while (c.charAt(0)===' ') { c = c.substring(1,c.length); }
                if (c.indexOf(nameEQ) === 0) { return c.substring(nameEQ.length,c.length); }
            }
            return '';
        };
        
        /**
         * Set the cookie that user has read the disclaimer for this domain.
         */
        FDADisclaimer.prototype.saveCookie = function(name, value, days) {
            var cstring, d = days || 1;
            if (value instanceof Array) {
                cstring = name + '=' + value.join(',');
            } else {
                cstring = name + '=' + value.toString();
            }
            var date = new Date();
            date.setTime(date.getTime() + (d*24*60*60*1000));
            document.cookie = cstring + '; domain=.' + this.getCookieDomain() + '; path=/; expires=' + date.toGMTString();
        };

        /**
         * Show the FDA warning to the user if necessary
         */
        FDADisclaimer.prototype.shouldShowWarning = function() {
            var agreeCookies = this.getAgreeCookies();
            var origin = this.getOriginCookie();
            var referrer = this.getLocation(document.referrer);
            var current = this.getLocation(document.location.href);
            if (origin === '' || current === '' || referrer === 'referrer' || origin === current || agreeCookies.indexOf(referrer) !== -1) {
                this.saveCookie(BB_ORIGIN, current);
                return false;
            } else {
                var data;
                switch (referrer) {
                    case 'store':
                        data = messages.areas.store;
                        break;
                    case 'content':
                        data = messages.areas.content;
                        break;
                    case 'reviews':
                        data = messages.areas.reviews;
                        break;
                }
                
                if (data === undefined) {
                    return false;
                }
                this.displayWarning(data, referrer, agreeCookies);
            }
            return true;
        };

        /**
         * Test whether or not the user should see the FDA warning popup. Taks into account the
         * domain the user is going to and whether or not a previous cookie has been set.
         */
        FDADisclaimer.prototype.getLocation = function(locString) {
            site = '';
            if (locString.indexOf('reviews.bodybuilding.com/') !== -1) {
                site = 'reviews';
            } else if (locString.indexOf('bodybuilding.com/fun/') !== -1) {
                site = 'content';
            } else if (locString.indexOf('bodybuilding.com/store/') !== -1) {
                site = 'store';
            }
            return site;
        };

        /**
         * Display the FDA warning dialog.
         */
        FDADisclaimer.prototype.displayWarning = function(msg, referrer, cookieArray) {
            var markup = this.t(messages.general, msg);
            var current = this.getLocation(document.location.href);
            TINY.box.onShown = function() {
                $('#tinycontent .fda-continue').live('click', function(e) {
                    cookieArray.push(referrer);
                    this.saveCookie(BB_ORIGIN, current);
                    this.saveCookie(BB_AGREE, cookieArray, 365);
                    TINY.box.hide();
                    this.showSelectBoxes();
                }.bind(this));
                $('#tinycontent .fda-remain').live('click', function(e) {
                    window.location.href = document.referrer;
                }.bind(this));
            }.bind(this);
            this.hideSelectBoxes();
            TINY.box.show(markup, 0, 0, 0, 1, false);
        };
        
        FDADisclaimer.prototype.doCheck = function() {
            this.shouldShowWarning();
        };

        return new FDADisclaimer();
    }());
}(jQuery));
/**
 * Generic image viewer for the sit. Uses Tinybox.
 */
(function($) {
    $.fn.imageViewer = function(options) {
        return this.each(function() {
            var $this = this
                animate = (BB.Util.currentBrowser.substring(0, 2) === "IE") ? 0 : 1;

            this.initialize = function() {
                $(this).unbind('click').bind('click', this.viewImage.bind(this));
            };
            
            this.viewImage = function(evt) {
                BB.Helpers.hideInputModal.hideControls(['embed', 'object']);
                var e = (evt) ? evt : window.event;
                e.preventDefault();
                var imageUrl = $(this).attr('href') || $(this).attr('src');
                if (typeof imageUrl !== 'undefined' && imageUrl) {
                    TINY.box.show('<img src="http://assets.bodybuilding.com/common/images/loading-icon-transparent.gif" />', 0, 0, 0, animate);
                    try {
                        var img = new Image();
                        img.onload = function() {
                            try {
                                TINY.box.show($this.buildTemplate(imageUrl, this.width, this.height), 0, 0, 0, animate);
                            } catch (e) {
                                TINY.box.hide();
                            }
                        };
                        img.onerror = function() {
                            TINY.box.hide();
                        };
                        img.src = imageUrl;
                    } catch (ex) {
                        TINY.box.hide();
                    }
                }
            };

            TINY.box.onClosed = function() {
                BB.Helpers.hideInputModal.showControls();
            };

            this.buildTemplate = function(url, imgWidth, imgHeight) {
                var html = '<div class="bb-image-modal" style="width: ' + imgWidth + '; height: ' + (imgHeight + 20) + ';">';
                if (!options || options.showClose) {
                    html += '<div class="modal-close"><a class="font-red event-trigger" onclick="javascript: TINY.box.hide(); return false;"><span class="close-text">Close</span> <span class="close-button">X</span></a></div>';
                }
                html += '<div class="clearFloatNoHeight"></div>';
                html += '<img src="' + url + '" /><br />';
                html += '</div>';
                return html;
            };
            
            this.initialize();
        });
    };
}(jQuery));
(function($) {
    $.fn.bbVideoModal = function() {
        return this.each(function() {
            this.buildScript = function(DOC, key) {
                var head = DOC.getElementsByTagName('head')[0],
                    script = DOC.createElement('script');
                script.src = 'http://videos.bodybuilding.com/bbcomUtil/ajax.php?action=getVideoInfoForEmbedWidget&vKey=' + key;
                script.type = 'text/javascript';
                head.appendChild(script);
            };
            this.appendEmbedScript = function(DOC) {
                var div = DOC.getElementsByTagName('div')[0],
                    script = DOC.createElement('script');
                script.src = 'http://assets.bodybuilding.com/videos/javascript/min/external-video-embed.js';
                script.type = 'text/javascript';
                div.appendChild(script);
            };
            this.TINYCallBack = function(div, script) {
                var f = document.getElementById('video-frame');
                f = (f.contentWindow) ? f.contentWindow : (f.contentDocument.document) ? f.contentDocument.document : f.contentDocument;
                f.document.open();
                f.document.write(div);
                f.document.close();
                this.appendEmbedScript(f.document);
                if ($.browser.mozilla) {
                    this.buildScript(f.document, $(this).data('vid-key'));
                }
            };
            this.handleClick = function(evt) {
                var e = (evt) ? evt : window.event;
                e.preventDefault();
                var vdiv = '<div style="clear:both;float:right;margin:-5px 0 5px;width:100px;"><a style="float:right;font-size:11px;font-family:Arial,sans-serif;line-height:1;margin-right:5px;width:45px;color:#A71930;text-decoration:none;" onclick="parent.window.TINY.box.hide();" onmouseover="this.style.textDecoration=\'underline\';this.style.cursor=\'pointer\'" onmouseout="this.style.textDecoration=\'none\'"><span style="float:left;width:33px;">Close</span><span style="background-image:url(http://assets.bodybuilding.com/store/images/common/store-sprite.png);background-position:0 0;display:block;float:right;height:12px;text-indent:-9999px;width:12px;">X</span></a></div><div style="clear:both;display:block;font-size:0;height:0;line-height:0;overflow:hidden;width:0;"></div><div class="BBCOMVideoEmbed" style="width:452px;height:361px;margin:0 0 0 6px;" data-video-key="' + $(this).data('vid-key') + '" data-autoplay="true" data-thumbnail-url="' + $(this).data('vid-thumb') + '"></div>';
                var vscript = '\x3Cscript type="text/javascript" src="http://assets.bodybuilding.com/videos/javascript/min/external-video-embed.js">\x3C/script>';
                TINY.box.onShown = function() {
                    this.TINYCallBack.call(this, vdiv, vscript);
                }.bind(this);
                $('#tinymask').live('click', function() {
                    $('#video-frame').contents().find('html').html('');
                });
                TINY.box.show('<iframe id="video-frame" style="width: 480px; height: 400px;" scrolling="no" frameborder="0" border="0" src="about:blank"></iframe>', 0, 0, 0, 1);
            };
            this.initialize = function() {
                if (typeof TINY === 'undefined') {
                    return false;
                }
                $(this).bind('click', this.handleClick.bind(this));
                $(this).data('vid-key', $(this).attr('data-vid-key'));
                $(this).data('vid-thumb', $(this).attr('data-vid-thumb'));
                return this;
            };
            return this.initialize();
        });
    };
}(jQuery));
/* Searchbox Autocomplete */
(function($) {
	$.fn.bbWrapperSearch = function (opts) {
		var options = {
			defaultSearch: 'http://search3.bodybuilding.com/other/index',
			storeSearch: 'http://www.bodybuilding.com/store/catalog/search-results.jsp',
			videoSearch: 'http://videos.bodybuilding.com/search',
            funSearch: 'http://search.bodybuilding.com/search/supersite/?'
		};
		$.extend(options, opts);
		if (options.storeSearch.indexOf('http://localhost') === 0) {
			options.storeSearch = options.storeSearch.substring(0, 16) + ':8080' + options.storeSearch.substring(16);
		}
		return this.each(function () {
			this.initialize = function () {
				$(this).bind('submit.searchform', this.validateSubmit.bind(this));
                this.searchSwitchSubmit();
			};
			this.validateSubmit = function (evt) {
				if (this.site.value === 'store') {
					this.action = options.storeSearch;
				} else if (this.site.value === 'videos') {
					this.action = options.videoSearch;
				} else if (this.site.value === 'fun') {
					this.action = options.funSearch;
				} else {
					this.action = options.defaultSearch;
				}
				return true;
			};
            this.searchSwitchSubmit = function (evt) {
                var siteSections = $('.search-submit-button'),
                    searchForm = $('#siteSearchForm'),
                    searchFormScope = $('#siteSearchVal'),
                    searchTerm = searchForm.find('input[name="q"]').val();
                siteSections.each(function () {
                    $(this).bind('click', function (evt) {
                        evt.preventDefault();
                        var searchSection = $(this).data('search-section');
                        if (searchSection && searchFormScope) {
                            searchFormScope.val(searchSection);
                            var searchFormVal = searchFormScope.val();
                            if (searchFormVal === searchSection) {
                                if (searchSection === 'fun') {
                                    searchForm.attr('action', options.funSearch + searchTerm);
                                } else if (searchSection === 'store') {
                                    searchForm.attr('action', options.storeSearch);
                                } else if (searchSection === 'videos') {
                                    searchForm.attr('action', options.videoSearch);
                                } else {
                                    searchForm.attr('action', options.defaultSearch);
                                }
                                searchForm.submit();
                            }
                        }
                    });
                });
            };
			this.initialize();
		});
    };
} (jQuery));
(function($) {
    $.fn.bbSearch = function() {
        return this.each(function(index, value) {
            var $this = this;
            this.initialize = function() {
                $this.attachAutocomplete();
            };
            this.fetchData = function(aRequest, aResponse) {
                $.ajax({
                    type: "GET",
                    url: "/store/common/ajax/search/autoComplete.jsp",
                    data: "sort=descending&sortOrder=value&language=english&q=" + escape($('#search').val()),
                    dataType: 'text',
                    async: true,
                    success: function(data, stat, req) {
                        var vals = data.unescapeHTML().split(',');
                        vals = vals.clean('');
                        if (vals.length > 8) {
                            vals = vals.slice(0, 8);
                        }
                        if (vals && vals.length && vals.length > 0) {
                            aResponse(vals);
                        } else {
                            $("#search").autocomplete("close");
                        }
                    }
                });
            };
            this.attachAutocomplete = function() {
                $("#search").autocomplete({
                    disabled: false,
                    source: $this.fetchData,
                    minLength: 3,
                    selectFirst: false,
                    select: function(event, ui) {
                        $(this).val(ui.item.value).parents('form').submit();
                    }
                }).keyup(function(e) {
                    var kc = (e) ? e.keyCode : event.which;
                    if (kc === 13) {
                        $(this).parents('form').submit();
                    }
                });
            };
            this.initialize();
        });
    };
    $(".ui-autocomplete-input").live("autocompleteopen", function() {
        var autocomplete = $(this).data("autocomplete"),
        menu = autocomplete.menu;
        if (!autocomplete.options.selectFirst) {
            return;
        }
        menu.activate($.Event({
            type: "mouseenter"
        }), menu.element.children().first());
    });
} (jQuery));
BB.Helpers.hideInputModal = (function() {
	var inputs = '', obj = [];
	this.hideControls = function (objects) {
	    inputs = $.merge(['select:visible'], $.map(objects, function (n, i) {
	        return n + ':visible';
	    })).join(', ');
	    obj = $(inputs).css('display', 'none');		
	};
	this.showControls = function () {
	    $.each(obj, function (i, v) {
	        $(v).css('display', 'block');
	    });
	};
	return this;
}());
(function($) {
    $.fn.liveChatLink = function(opts) {
        var defaults = {
            url : 'https://cschat.bodybuilding.com/chat/chatstart.aspx?domain=www.bodybuilding.com',
            options : 'width=600,height=440,scrollbars=0'
        };
        var o = $.extend(defaults,opts);
        return this.each(function() {
            var pid = Math.floor(Math.random() * new Date());
            this.handleClickEvent = function(event) {
                event.preventDefault();
                var url = $(this).data('help-url') || o.url,
                    options = $(this).data('options') || o.options;
                window.open(url, pid, options);
            };
            $(this).bind('click', this.handleClickEvent.bind(this));
        });
    };
}(jQuery));
/* 
        BB Rotator Plugin:
            Create an HTML rotator with or without tabs
        
        Author:
            justin.podzimek@bodybuilding.com
            
        Markup:
            <div id='bb-rotator'>
                <ul>
                    <li>
                        [Markup Here...]
                    </li>
                    <li>
                        [Markup Here...]
                    </li>
                    <li>
                        [Markup Here...]
                    </li>
                 </ul>
            </div>
          
        Instantiation:
            <script type="text/javascript">
            $('div#bb-rotator').bbRotator({ OPTIONS HERE });
            </script>
 */
(function ($) {
    
    $.fn.bbRotator = function (opts) {
        
        var defaults = {
            horizontal: true,
            delay: 5,
            speed: 'fast',
            width: null,
            controls: true,
            controlsLocation: 'inside',
            forwardBtn: true,
            reverseBtn: true,
            playBtn: true,
            tabs: []
        };
        
        var options = $.extend ({}, defaults , opts || {});
        
        return this.each (function () {
            var base = this,
            o = options,
            timer = 0,
            count = 0,
            banners = $(base).find('> ul > li').length,
            override = false,
            animating = false,
            current = 0;
            
            this.init = function () {
                base.buildStyles ();
                base.beginTimer ();
                if (o.controls) {
                    base.addControls ();
                }
                base.handleEvents ();
            };
            
            /**
             * Add the controls to the page if option true
            **/
            this.addControls = function () {
                var controls = $('<div />', {
                    id: 'bb-rotator-controls',
                    html: function() {
                        var _markup = '<ul>';
                        _markup += (o.reverseBtn) ? '<li class="default"><span id="bb-rotator-reverse"></span></li>' : '';
                        _markup += (o.playBtn) ? '<li class="default"><span id="bb-rotator-pause"></span></li>' : '';
                        _markup += (o.forwardBtn) ? '<li class="default"><span id="bb-rotator-forward"></span></li>' : '';
                        _markup += '</ul>';
                        return _markup;
                    },
                    css: {
                        '-moz-user-select': 'none'
                    },
                    onselectstart: function() {
                        return false;
                    }
                });
                if (o.tabs.length > 0) {
                    base.addTabs();
                }
                if (o.controlsLocation === 'outside') {
                    controls.addClass('bb-controls-outside');
                    $(base).after(controls);
                } else {
                    $(base).append(controls);
                }
                
            };
            
            /**
             * Add tabs
            **/
            this.addTabs = function() {
                var tabs = $('<div />', {
                    id: 'bb-rotator-tabs',
                    html: function() {
                        var _markup = '<ul>';
                        var _class = 'default';
                        $.each(o.tabs, function(i, v){
                            _class = (i === 0) ? 'active' : 'default';
                            _markup += '<li class="' + _class + '" data-tab="' + i + '"><span>' + v + '</span></li>';
                        });
                        _markup += '</ul>';
                        return _markup;
                    }
                });
                $(base).after(tabs);
            };
            
            /**
             * Handle hover and click events
            **/
            this.handleEvents = function() {
                $('div#bb-rotator-wrap').bind('mouseenter', function() {
                    if (!override) {
                        base.pauseTimer();
                    }
                }).bind('mouseleave', function() {
                    if (!override) {
                        base.beginTimer();
                    }
                });
                $('div#bb-rotator-wrap')
                .find('div#bb-rotator-controls ul li')
                .live('mouseenter', function() {
                    $(this).removeClass('default').addClass('hover');
                })
                .live('mouseleave', function() {
                    $(this).removeClass('hover').addClass('default');
                }).end()
                .find('div#bb-rotator-controls ul li:has("span#bb-rotator-pause")')
                .live('click', function() {
                    base.pauseTimer();
                    override = true;
                    $('span', this).attr('id', 'bb-rotator-play');
                    $('div#bb-rotator-wrap').find('div#bb-rotator-tabs ul li').removeClass('hover').addClass('default');
                }).end()
                .find('div#bb-rotator-controls ul li:has("span#bb-rotator-play")')
                .live('click', function() {
                    override = false;
                    $('span', this).attr('id', 'bb-rotator-pause');
                    $('div#bb-rotator-wrap').find('div#bb-rotator-tabs ul li').removeClass('hover').addClass('default');
                }).end()
                .find('div#bb-rotator-controls ul li:has("span#bb-rotator-forward")')
                .live('click', function() {
                    $.fn.bbRotator.forward();
                    $('div#bb-rotator-wrap').find('div#bb-rotator-tabs ul li').removeClass('hover').addClass('default');
                }).end()
                .find('div#bb-rotator-controls ul li:has("span#bb-rotator-reverse")')
                .live('click', function() {
                    $.fn.bbRotator.reverse();
                    $('div#bb-rotator-wrap').find('div#bb-rotator-tabs ul li').removeClass('hover').addClass('default');
                }).end()
                .find('div#bb-rotator-tabs ul li:not(.active)')
                .live('mouseenter', function() {
                    $(this).removeClass('default').addClass('hover');
                })
                .live('mouseleave', function() {
                    $(this).removeClass('hover').addClass('default');
                })
                .live('click', function() {
                    var slide = $(this).attr('data-tab');
                    $(this).addClass('active').siblings().removeClass('active hover').addClass('default');
                    base.slideTo(slide);
                });
            };
            
            /**
             * Pause the timer for the rotation
            **/
            this.pauseTimer = function () {
                clearInterval (timer);
            };
            
            /**
             * Start the timer for the rotation
            **/
            this.beginTimer = function () {
                timer = setInterval ($.fn.bbRotator.forward, (o.delay * 1000));
            };
            
            /**
             * Move to the next slide, start over if at last
            **/
            $.fn.bbRotator.forward = function (_mult) {                
                if (!animating) {
                    animating = true;
                    _mult = _mult || 1;
				
                    if ($(base).find(' > ul > li:last').offset().left <= $(base).offset().left) {
				    
                        if (o.tabs.length > 0) {
                            $(base).find(' > ul').stop().animate({
                                'margin-left': '0'
                            },
                            o.speed, function() {
                                animating = false;
                            });
    				    
                        } else {
                            var _first = $(base).find (' > ul > li:first');
                            _first.appendTo ($(' > ul', base));
                            $(' > ul', base).css ({
                                'width' : $(' > ul', base).width() + _first.width(),
                                'margin-left' : -((banners - 2) * _first.width())
                            });
                            $(base).find(' > ul').stop().animate({
                                'margin-left': '-=' + ($(base).width() * _mult)
                            },
                            o.speed, function() {
                                animating = false;
                            });
                        }
				    
                    } else {
                        $(base).find(' > ul').stop().animate({
                            'margin-left': '-=' + ($(base).width() * _mult)
                        },
                        o.speed, function() {
                            animating = false;
                        });
                    }
                    if (current >= 2) {
                        current = parseFloat(-1);
                    }
                    current = parseFloat(current) + parseFloat(_mult);
                    base.switchTab();
                }                
            };
            
            /**
             * Move to the previous slide, start over if at last
            **/
            $.fn.bbRotator.reverse = function (_mult) {
                if (!animating) {
                    animating = true;
                    _mult = _mult || 1;
                    if ($(base).find(' > ul > li:first').offset().left >= $(base).offset().left) {
                        if (o.tabs.length > 0) {
                            $(base).find(' > ul').stop().animate({
                                'margin-left': -($(base).width() * ($(base).find(' > ul > li').length - 1))
                            },
                            o.speed, function() {
                                animating = false;
                            });
                        } else {
                            if ($(base).find (' > ul > li:first').offset().left >= $(base).offset().left) {
                                var _last = $(base).find (' > ul > li:last');
                                _last.prependTo ($(' > ul', base));
                                $(' > ul', base).css ({
                                    'margin-left' : -_last.width()
                                });
                                $(base).find(' > ul').stop().animate({
                                    'margin-left': '+=' + ($(base).width() * _mult)
                                },
                                o.speed, function() {
                                    animating = false;
                                });
                            }
                        }
                    } else {
                        $(base).find(' > ul').stop().animate({
                            'margin-left': '+=' + ($(base).width() * _mult)
                        },
                        o.speed, function() {
                            animating = false;
                        });
                    }
				
                    if (current <= 0) {
                        current = parseFloat(3);
                    }
                    current = parseFloat(current) - parseFloat(_mult);
                    base.switchTab();
                }
            };
            
            /**
             * Go to specific slide, used if tabs are present
            **/
            this.slideTo = function(n) {
                if (current != n) {
                    var _distance = Math.abs((n - current) * 1);
                    if (n > current) {
                        $.fn.bbRotator.forward(_distance);
                    } else if (n < current) {
                        $.fn.bbRotator.reverse(_distance);
                    }
                }
                current = n;
            };
			
            /**
             * Switch tab styles, if tabs are present
            **/
            this.switchTab = function() {
                if (o.tabs.length > 0) {
                    $('div#bb-rotator-wrap').find('div#bb-rotator-tabs ul li:nth-child(' + (current + 1) + ')').addClass('active').siblings().removeClass('active');
                }
            };
            
            /**
             * Build styles for the rotator
            **/
            this.buildStyles = function() {
                var _width = o.width || $(base).width(),
                _banners = $(base).find('> ul > li').length,
                _containerWidth = _width * _banners,
                _float = (o.horizontal) ? 'left' : 'none';
                $(' > ul', base).css({
                    'width': _containerWidth
                });
                $(' > ul > li', base).css({
                    'width': _width,
                    'float': _float
                }).each(function(i, v) {
                    $(this).attr('data-slide', i);
                });
                $(base).wrap('<div id="bb-rotator-wrap" />').after('<div class="clearFloatNoHeight"></div>');
                if (o.tabs.length > 0 || o.controlsLocation === 'outside') {
                    $('div#bb-rotator-wrap').css({
                        'margin-bottom' : '40px'
                    });
                }
            };
            this.init();
        });
    };
}(jQuery));
(function($){
    $.fn.maxCharacters = function(opt) {
        var options = {
            maxChar: 2500,
            overflow: false,
            countdown: undefined
        };
        $.extend(options, opt);
        
        return this.each(function() {
            var isDel = false, isCtrl = false;
            $(this).bind('keypress', function(event) {
                if (!isDel && !this.checkIfSelection() && !isCtrl && options.overflow === false) {
                    return this.value.length < options.maxChar;
                }
            }.bind(this));
            
            $(this).bind('keyup paste', function(event) {
                if (this.value.length > options.maxChar && options.overflow === false) {
                    this.value = this.value.substring(0, options.maxChar);
                }
                if (options.countdown !== undefined && typeof options.countdown === 'function') {
                    options.countdown(options.maxChar - this.value.length);
                }
            }.bind(this));
            
            $(this).bind('keydown', function(event) {
                var code = event.charCode || event.keyCode;
                isDel = code === 8 || code === 46;
                isCtrl = event.ctrlKey;
            }.bind(this));
            
            if (options.countdown !== undefined && typeof options.countdown === 'function') {
                options.countdown(options.maxChar - this.value.length);
            }
            
            this.checkIfSelection = function() {
                try {
                    if (BB.Util.currentBrowser.indexOf('IE') !== -1) {
                        return document.selection.type === 'Text'; /** IE */
                    } else { 
                        return this.selectionStart !== this.selectionEnd; /** Modern Browsers */
                    }
                } catch (ex) {
                    return false;
                }
            };
            
        });
    };
}(jQuery));
/* 
 * This script was devleoped as a stop gap measure to get a quick fix out for enforcing
 * a strong password policy. We need to re-examine when there is more time so we can
 * refactor this into something more usable.
 */

/*jslint browser: true, sloppy: true, white: true, nomen: true, maxerr: 50, indent: 4 */


(function ($) {
    
    /**
     * Utility methods that handle actions based on the form styles.
     */
    var methods = {
        canSubmitForm: false
    };
    
    methods.validPassword = function (msg) {
        $('#invalid-password-message').remove();
        methods.canSubmitForm = true;
    };
    
    methods.storeInvalid = function (msg) {
        var errorMsg = '<div id="invalid-password-message" class="username-check taken">' + msg + '</div>';
        if ($('#invalid-password-message').length === 0) {
            $('#password').after(errorMsg);
        } else {
            $('#invalid-password-message').replaceWith(errorMsg);
        }
        methods.canSubmitForm = false;
    };

    methods.myInvalid = function (msg) {
        var errorMsg = '<div id="invalid-password-message"><strong>' + msg + '</strong></div>';
        if ($('#invalid-password-message').length === 0) {
            $('form[name=register]').find('input[name=password]').after(errorMsg); /* needed the additional find to get tot he element */
        } else {
            $('#invalid-password-message').replaceWith(errorMsg);
        }
        methods.canSubmitForm = false;
    };

    methods.changeInvalid = function (msg) {
        var errorMsg = '<div id="invalid-password-message" style="height: 26px; line-height: 24px; color: red;"><strong>' + msg + '</strong></div>';
        if ($('#invalid-password-message').length === 0) {
            $('fieldset[name=password]').after(errorMsg);
        } else {
            $('#invalid-password-message').replaceWith(errorMsg);
        }
        methods.canSubmitForm = false;
    };
    
    /**
     * If we're in the store on the user registration page, this will apply itself to the registration
     * form and the input element itself. This should prevent the user from submitting the form if
     * their password is too weak.
     */
    $(document).ready(function () {
        if ($('#shippingForm').length > 0 && $('#username').length > 0) {
            $('#shippingForm').bind('submit', function () {
                if ($('#username').val() !== '') {
                    return methods.canSubmitForm;
                }
                return true;
            });
			
            $('#password').bind('blur', function () {
                BB.Validation.validPassword.validate($(this).val(), methods.validPassword, methods.storeInvalid);
            });
            
            if ($('#password').val() !== '') {
                BB.Validation.validPassword.validate($('#password').val(), methods.validPassword, methods.storeInvalid);
            }
        }
    });
    
    /**
     * If we're in my on the user registration page, this will apply itself to the registration
     * form and the input element itself. This should prevent the user from submitting the form if
     * their password is too weak.
     */
    $(document).ready(function () {
        if ($('form[name=register]').length > 0) {

            $('form[name=register]').bind('submit', function () {
                return methods.canSubmitForm;
            });

            $('input[name=password]').bind('blur', function () {
                BB.Validation.validPassword.validate(
                    $(this).val(), 
                    methods.validPassword,
                    methods.myInvalid
                );
            });

        }
        
        /**
         * If we're in my on the password change page, this will apply itself to the password change
         * form and the input element itself. This should prevent the user from submitting the form if
         * their password is too weak.
         */
        if ($('form[name=profile]').length > 0 && $('input[name=new_password]').length > 0) {
            $('form[name=profile]').bind('submit', function () {
                return methods.canSubmitForm;
            });

            $('input[name=new_password]').bind('blur', function () {
                BB.Validation.validPassword.validate(
                    $(this).val(), 
                    methods.validPassword,
                    methods.changeInvalid
                );
            });
        }
    });
}(jQuery));
/*global alert, jQuery */

/*
 * Build Security Seal Markup.
 * 
 */
(function ($) { 
    /**
     * Building out default methods for building default parts of the wrapper
     */
    var BB = window.BB || {'new': true};
    BB.Instances = BB.Instances || {};
    
    BB.Instances.wrapperInsertData = {
        mcafee: function (parentElem) {
            var markup = '<a target="_blank" href="https://www.mcafeesecure.com/RatingVerify?ref=www.bodybuilding.com">' + 
                '<img class="mcafee-image" width="115" height="32" border="0" src="//images.scanalert.com/meter/www.bodybuilding.com/12.gif" ' +
                'alt="McAfee SECURE sites help keep you safe from identity theft, credit card fraud, spyware, spam, viruses and online scams" oncontextmenu=""></a>';
            
            $(parentElem).append(markup).bind('contextmenu', function () {
                alert("Copying Prohibited by Law - McAfee SECURE is a Trademark of McAfee, Inc."); 
                return false;                
            });
        },
        facebook: function (parentElem) {
            if (!document.getElementById("fb-root")) {
                $('body').append('<div id="fb-root"></div>');
            }
            
            (function(d, s, id) {
                var js, fjs = d.getElementsByTagName(s)[0];
                if (d.getElementById(id)) {return;}
                js = d.createElement(s); js.id = id;
                js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=188264197909016";
                fjs.parentNode.insertBefore(js, fjs);
            }(document, 'script', 'facebook-jssdk'));
            
        },
        facebookOld: function (parentElem) {
            $(parentElem).append($('<div />', {
                'id': 'facebook-header-likes',
                'class': 'fb-like',
                'data-href': 'http://facebook.com/Bodybuildingcom',
                'data-send': 'false',
                'data-width': '450',
                'data-show-faces': 'false'
            }));
            $('body').append($('<div />', {
                'id': 'fb-root'
            }));
            (function(d, s, id) {
              var js, fjs = d.getElementsByTagName(s)[0];
              if (d.getElementById(id)) { return; }
              js = d.createElement(s); js.id = id;
              js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=188264197909016";
              fjs.parentNode.insertBefore(js, fjs);
            }(document, 'script', 'facebook-jssdk'));
        },
        
        addThis: function (parentElem, config) {
            if (typeof window.addthis_config === 'undefined') { window.addthis_config = {}; }
            $.extend(window.addthis_config, config);
        }
        /*
        <a class="addthis_button_google_plusone_badge" g:plusone:size="small" g:plusone:name="AddThis" g:plusone:href="https://plus.google.com/102383601500147943541/"></a>
        */
        /*
        <div class="addthis_toolbox addthis_default_style ">
        <a class="addthis_button_facebook_like" fb:like:layout="button_count"></a>
        <a class="addthis_button_tweet"></a>
        <a class="addthis_button_pinterest_pinit"></a>
        <a class="addthis_counter addthis_pill_style"></a>
        </div>
        <script type="text/javascript">var addthis_config = {"data_track_addressbar":true};</script>
        <script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=bodybuilding"></script>
        
        */
        
        /*
        <!-- AddThis Button BEGIN -->
        <div class="addthis_toolbox addthis_default_style ">
        <a class="addthis_button_preferred_1"></a>
        <a class="addthis_button_preferred_2"></a>
        <a class="addthis_button_preferred_3"></a>
        <a class="addthis_button_preferred_4"></a>
        <a class="addthis_button_compact"></a>
        <a class="addthis_counter addthis_bubble_style"></a>
        </div>
        <script type="text/javascript">var addthis_config = {"data_track_addressbar":true};</script>
        <script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=bodybuilding"></script>
        <!-- AddThis Button END -->
        */
    };

    $.fn.wrapperInsert = function (insertItem) {
        return this.each(function () {
            if (insertItem && typeof insertItem === 'function') {
                return insertItem(this);
            } else {
                switch (insertItem) {
                    case 'mcafee':
                        BB.Instances.wrapperInsertData.mcafee(this);
                        break;

                    case 'facebook':
                        BB.Instances.wrapperInsertData.facebook(this);
                        break;
                        
                    case 'facebooklike':
                        BB.Instances.wrapperInsertData.facebookOld(this);
                        break;
                }
            }
            return this;
        });
    };

}(jQuery));
(function ($) {
	
	$.fn.faspWizard = function() {
	
		return this.each(function(index, value) {
            $this = this;
			
            this.nextSlide = function (obj) {
                $(obj).closest('li').animate({width : '30'}, 250).removeAttr("id");
                $(obj).closest('li').next().animate({width : '340'}, 245).attr("id", "wizard-open-handle");
				$(obj).closest('li').addClass('clicked-wizard');
				$(obj).closest('li').next().find('div.fap-hidden-content').css('display', 'none');
            };
			
			this.previous = function (evt) {
                var e = (evt) ? evt : window.event;
                e.preventDefault();
				var anchor = (e.target) ? e.target : e.srcElement;
	            var thisIndex = $('ul.wizard-steps-holder').index($('#wizard-open-handle'));
                if ($(anchor).closest('li').hasClass('clicked-wizard')) {
					$('#wizard-open-handle').closest('li').animate({width : '30'}, 250).removeAttr("id");
                    $(anchor).closest('li').animate({width : '340'}, 245).attr("id", "wizard-open-handle");
                    $(anchor).closest('ul').find($('li').slice(thisIndex)).find('.fap-hidden-content').css('display', 'none');
					$(anchor).closest('li').removeClass('clicked-wizard');
					var clickedIndex = $('ul.wizard-steps-holder').index($(anchor).closest('li'));
                    $('ul.wizard-steps-holder').find($('li').slice(thisIndex - 1)).removeClass('clicked-wizard');
				}
			};
			
			this.handleMouseOver = function() {
               // var thisIndex = $(this).closest('li').index();
               // var currentIndex = $('#wizard-open-handle').index();
                if ($(this).closest('li').hasClass('clicked-wizard')) {
                    $(this).closest('li').css('cursor', 'pointer');
                } else {
                    $(this).closest('li').css('cursor', 'default');
                }
			};
			
			this.forward = function(evt) {
				var e = (evt) ? evt : window.event;
                e.preventDefault();
				var anchor = (e.target) ? e.target : e.srcElement;
                var clickedLink = ($(anchor).data('category')) ? $(anchor).data('category') : $(anchor).attr("href");
				this.nextSlide(anchor);
                $('div[id*=' + clickedLink + ']').css('display', 'block');
			};
			
			this.setCookieAndGo = function(evt) {
				var e = (evt) ? evt : window.event;
				var anchor = (e.target) ? e.target : e.srcElement;
				var cookie = $(anchor).attr("data-profile");
				document.cookie = "FAP=" + cookie + ";";
			};

		    $(".wizard-steps-link a[class!=fap-plan-link]", this).bind('click', this.forward.bind(this));
			$(".wizard-steps-link a[class=fap-plan-link]", this).bind('click', this.setCookieAndGo.bind(this));
		    $(".wizard-steps-handle-title", this).bind('click', this.previous.bind(this)).bind('mouseover', this.handleMouseOver.bind(this));
		
		});
	};
	
}(jQuery));
(function() {
    var BB = window.BB || (function() {
        window.BB = {
            UI: {Wicket: {}}
        };
        return window.BB;
    }());
    
    if (BB.UI) { BB.UI.Wicket = {}; } else { BB.UI = {Wicket: {}}; }
    
    /**
     * Seting up some a parameter area for this control
     */
    BB.UI.Wicket.params = {
        formMonitorFirstRun: true,
        tinyBoxCloseTip: {}
    };
    
    /**
     * Gets the contents of a wicket genreated div to show in a TINY.box.modal
     */
    BB.UI.Wicket.getModalContents = function(modalId) {
        var contents = $('#' + modalId).wrap('<div>').parent().html();
        $('#' + modalId).remove();
        return contents;
    };
    
    BB.UI.Wicket.setupFormMonitoring = function (formId, message) {
        var otherEvents;
        
        BB.Log.debug("Setting up for monitoring");
        /* PUll any existing events off of the close button and store them awat for later use */
        otherEvents = $('#tbox-close').attr('onclick') || function () {TINY.box.hide(); };
        $('#tbox-close').attr('onclick', '');
        
        /**
         * Setup the tipswift tool tip on the TINY.box markup. We only want this to run once because
         * TINY.box resuses the same wrapper markup everytime.
         */
        if (BB.UI.Wicket.params.formMonitorFirstRun) {
            BB.UI.Wicket.params.formMonitorFirstRun = false;

            $('#tbox-close').bbcomTipDialog({
                text: message,
                trigger: function (methd) {
                    BB.UI.Wicket.params.tinyBoxCloseTip = methd;
                },
                buttons: {
                    yes: {
                        label: 'Yes',
                        action: function (e) {
                            if (otherEvents !== undefined && otherEvents !== null) {
                                otherEvents();
                            }
                        }
                    },
                    no: {
                        label: 'No'
                    }
                }
            });
        }
        
        /* Adding event handler on TINY.box */
        TINY.box.closed = function() { BB.UI.Wicket.params.tinyBoxCloseTip(false); };
        
        /**
         * Everytime we load a new form we need to re-wire up the monitoring. This control is safe to bind to the 
         * same control over and over again, so there is nothing to worry about here.
         */
        $('#tbox-close').formChangedMonitor({
            formSelector: formId,
            failure: function (evt) {
                evt.preventDefault();
                BB.Log.debug("Setting up for monitoring");
                BB.UI.Wicket.params.tinyBoxCloseTip(true);
            },
            success: function () {
                BB.UI.Wicket.params.tinyBoxCloseTip(false);
                if (otherEvents !== undefined && otherEvents !== null) {
                    otherEvents();
                }
            }
        });
        
        BB.Log.debug("Finished setting up form monitoring");
    };
}());
(function($) {
    $.fn.bodyspaceComment = function(opts) {
        var defaults = {
            focusWidth: 407,
            focusHeight: 0, 
            elementsToHide: ''
        },
        options = $.extend(defaults, opts);
        
        return this.each(function() {
            var base = this,
                $base = $(this),
                origWidth = 0;
            
            this.init = function() {
                origWidth = $base.width();
                origHeight = $base.height();
                base.removeDisplay();
                $base
                    .bind('focus.bodyspaceComment', base.addDisplay)
                    .bind('blur.bodyspaceComment', base.removeDisplay);
            };
            
            this.removeDisplay = function() {
                if ($base.val() !== '') {
                    return;
                }
                $base
                    .css('width', origWidth + 'px')
                    .css('height', origHeight + 'px')
                    .parents('div.user-feed-comment')
                    .find('div.bodyspace-comment-submit-button, div.feed-comment-image'+options.elementsToHide).css('display', 'none');
            };
            
            this.addDisplay = function() {
                $base
                    .css('width', options.focusWidth + 'px')
                    .css('height', (options.focusHeight === 0 ? origHeight : options.focusHeight) + 'px')
                    .parents('div.user-feed-comment')
                    .find('div.bodyspace-comment-submit-button, div.feed-comment-image'+options.elementsToHide).css('display', 'block');
            };
            
            base.init();            
            
        });
    };
}(jQuery));
/**
*   Title: bbVideoReplacement plugin
*   Author: Dave Quintana
*   Description: The plugin was created to speed up store page load time. The plugin will display the video thumbnail with a
*   controls sprite png ovelay. The plugin pulls in the video script tag when the user clicks the thumbnail preview
*/

(function( $ ) { 
    $.fn.bbVideoReplacement = function(options) {
        var opts = {
            'overlayURL': '//assets.bodybuilding.com/store/images/common/controls-overlay.png',
            'width': '390px',
            'height': '27px'
        };
        $.extend(opts, options);		
        return this.each(function() {
            if ($(this).find('embed, script').length > 0) {
                return;
            }
            var that = this, buildElement, buildURL, b;			
			
            buildElement = function(elementType, attributes) {
                var element = document.createElement(elementType), attr = this;
                for (attr in attributes) {
                    if (attributes.hasOwnProperty(attr)) {
                        element.setAttribute(attr, attributes[attr]);
                    }
                }
                return element;
            };	
			
            buildURL = function(url) {
                var proto = ($.trim(location.protocol) === "https:");
                //do stuff if it's https
                return (proto) ? url.replace('http:', 'https:') : url;
            };
			
            b = buildElement('script', {
                'type': 'text/javascript',
                'src': buildURL('//assets.bodybuilding.com/videos/javascript/min/external-video-embed.js')
            });
                        
            $(this).css({
                'background-image': 'url("'+ $(this).data('thumbnail-url') + '")',
                'background-position' : 'center center',
                'background-repeat' : 'no-repeat', 
                'background-color' : '#000',
                'width'	:	$(this).data('dimensions').split('x')[0],
                'height'	:	$(this).data('dimensions').split('x')[1],
                'overflow'	:	'hidden',
                'cursor'	:	'pointer',
                'position'  : 'relative'
            });
            $('<div>').css({
                'background' : buildURL('url("//assets.bodybuilding.com/store/images/common/controls-overlay.png") no-repeat 0 -28px'), 
                'position' : 'absolute', 
                'height' : '70px', 
                'width' : '70px', 
                'left' : '165px',
                'top' : '135px'
            }).appendTo(this);			
            $('<div class="controls-overlay">').css({
                'background-image' : 'url("' + buildURL(opts.overlayURL) + '")',
                'width'	:	opts.width,
                'height'	: opts.height,
                'bottom'	: '0',
                'position'	: 'absolute'
            }).appendTo(this);
            $(document).ready(function() {
                $(that).click(function() {
                    $(that).attr('data-autoplay', 'true');
                    $(that).attr('data-video-built','false');
                    $(that).children().remove();
                    $(that).append(b);
                    $(that).unbind('click');
                });
            });
        });
    };	
}(jQuery));
/** New and Improved select menu dropdown
 *  @author: Grant Mills
 *  @params: options (Object)
 *  subclass: Pass in an optional subclass to be placed on the element
 *      easing: Name of the jQuery easing function to use in animating the dropdown (Please use a non-jQueryUI function)
 *      speed: Pass in duration of animation in number of milliseconds (Optional use of 'slow' or 'fast')
 *      onGetDown: Pass in callback function to run on this event
 *      onGetOnUp: Pass in callback function to run on this event
 *      onSelect: Pass in callback function to run on this event
 *  @events:
 *      onGetDown: This event fires after the dropdown animation has completed to drop down the list
 *      onGetOnUp: This event fires after the dropdown has been closed
 *      onSelect: This event fires upon selecting a value from the dropdown
 *
 *  Please view http://confluence:8090/pages/viewpage.action?pageId=7900987
 **/
 (function($) {
    $.fn.jamesBrownDropdown = function(options) {
        //Extendable default options
        var settings = $.extend({
            'subclass': '',
            'easing': 'linear',
            'speed': 'fast',
            'onGetDown': $.noop,
            'onGetOnUp': $.noop,
            'onSelect': $.noop
        },
        options);

        //Maintaining chainability
        return this.each(function() {
            //$this gets the element, this refers to the plugin
            var base = this,
            $this = $(this),
            _shown = false;

            this.JamesBDD = '';
            this.JamesBDDHead = '';
            this.sequinCape = '';

            /**
             *  This function sets up the flow that the program follows
             **/
            this.init = function() {
                this.hideSelect();
                this.createJamesBDD();
                this.setEvents();
            };

            /**
             *  This function hides the targetted select dropdown
             **/
            this.hideSelect = function() {
                $this.hide();
            };

            /**
             *  This function creates the elements used in James Brown Dropdown
             **/
            this.createJamesBDD = function() {
                //Store parts of this.JamesBDD in accesible places
                base.sequinCape = $('<ul>').addClass('sequin-cape').css({
                    'display': 'none'
                });
                base.JamesBDD = $('<div>').addClass('JamesBDD').css({
                    'visibility': 'hidden',
                    'display': 'inline-block'
                });
                base.JamesBDDHead = $('<div>').addClass('james-head').css('display', 'block');

                //needed to make it accesible to the TAB key
                base.JamesBDD.attr("tabindex","0");
				
                //Sets optional subclass for more specific selecting
                if (settings.subclass !== '') {
                    base.JamesBDD.addClass(settings.subclass);
                }

                //Create UL from select options
                $this.children('option').each(function(index, element) {
                    base.sequinCape.append('<li class="capeLi' + index + '"><a href="' + $(element).val() + '">' + $(element).text() + '</a></li>');
                });

                //Set text in the head div
                base.JamesBDDHead.html($this.children('option:selected').text());

                //Attach elements together and to the page
                base.JamesBDD.append(base.JamesBDDHead);
                base.JamesBDD.append(base.sequinCape);
                $this.after(base.JamesBDD);

                //Display
                base.JamesBDD.css({
                    'visibility': 'visible'
                });
            };

            /**
                *  This function creates the callback events for the dropdown
                **/
            this.setEvents = function() {
                //needed to pass in context to the click function without it overwritting this as the HTML Element
                //$that = base;
                this.JamesBDDHead.click(function(e) {
                    e.stopPropagation();
                    //console.log($that);
                    if (_shown === false) {
                        base.showSequinCape();
                    } else {
                        base.hideSequinCape();
                    }
                });

                //executed once you have focus on the JB Dropdown and pressed any key
                base.JamesBDD.keydown(function(e) {
                    var JBElements = base.sequinCape.children('li').find("a");
					
                    //key UP pressed
                    if ( e.which === 38 ) {
                        e.preventDefault();
                        $this.children('option').each(function(index, element) {
                            if (base.JamesBDDHead.html() === $(element).text()){
                                if (index!==0){
                                    base.catchClick.call(JBElements[index-1]);
                                }
                                return false;
                            }
                        });
                    }
					
                    //key DOWN pressed
                    if ( e.which === 40 ) {
                        e.preventDefault();
                        $this.children('option').each(function(index, element) {
                            if (base.JamesBDDHead.html() === $(element).text()){
                                if (index!==JBElements.length-1){
                                    base.catchClick.call(JBElements[index+1]);
                                }
                                return false;
                            }
                        });
                    }
                });
				
                $this.bind('onChange',
                function() {
                    base.JamesBDDHead.html($this.val());
                });

                $(document).bind('click.jamesbrown',
                function(e) {
                    if ($(this) !== base.JamesBDDHead) {
                        base.hideSequinCape();
                    }
                });
                this.sequinCape.children('li').find('a').bind('click', function(e) {
                    e.preventDefault();
                    base.catchClick.call(this);
                });
            };
            
            /**
             * Catch the click event of the list item and return values back
             * to the onSelect event
             */
            this.catchClick = function (e) {
                var _text = $(this).text(),
                    _value = $(this).attr('href'),
                    _index = $(this).parent('li').index(),
                    _base = this;
                base.JamesBDDHead.html(_text);
                base.hideSequinCape();
                settings.onSelect({
                    selText: _text,
                    selValue: _value,
                    selIndex: _index
                });
                
				// Removes the selected attribute from the hidden Select dropdownbox
				// and adds the 'selected' attribute to the one the user picked
				// This has to be set for Wicket
                $(base).find("option").removeAttr("selected");
				$(base).children('option').each(function(){
                    if ($(this).attr("value")===$(_base).attr('href')) {
                        $(this).attr("selected","selected");
                    }
                });
            };

            //Functions for hiding and displaying the ul that dropsdown
            this.showSequinCape = function() {
                base.sequinCape.slideDown(settings.speed, settings.easing, settings.onGetDown);
                _shown = true;
            };
            this.hideSequinCape = function() {
                base.sequinCape.slideUp(settings.speed, settings.easing, settings.onGetOnUp);
                _shown = false;
            };

            //Call the init method to self-instantiate
            this.init();

        });
    };
    /**
     * The following snippet is needed to prevent the search dropdown
     * from being hidden when the page still contains jQuery UI. Once
     * we finalize getting jQuery UI out of all the wrappers, this
     * piece can be removed.
     */
    $(function () {
        if (!$.widget) {
            $('div#searchCon').css('overflow', 'visible');
        }
    });
} (jQuery));
/**
 * A library in the BB.Util namespace for browser cookie management.
 *
 * @Usage:
 *
 *      BB.Util.cookie.set ({
 *          name: '', // name of cookie - required
 *          value: '', // value of cookie - required
 *          expires: '', // days until expire - optional
 *          path: '', // path of cookie - optional
 *          domain: '', // domain of cookie - optional
 *          secure: '' // cookie is secure - optional
 *      });
 *
 *      BB.Util.cookie.get ('name of cookie');
 *
 *      BB.Util.cookie.remove ('name of cookie');
 */
/*buildtarget: libs-util.js*/


var BB = window.BB || {};
BB.Util = BB.Util || {};

BB.Util.cookie = (function () {
    var _set = function (cookie) {
        cookie = cookie || {};
        try {
            if (cookie.name === undefined || cookie.value === undefined) {
                throw "You must define an object when setting a cookie with at least a name and value parameter";
            }
        } catch (ex) {
            BB.Log.debug(ex);
            return null;
        }
        var date = new Date(),
            days = (cookie.expires !== undefined) ? (date.setTime(date.getTime())) + (parseFloat(cookie.expires) * 24 * 60 * 60 * 1000) : '',
            expires = (cookie.expires !== undefined) ? '; expires=' + new Date(days).toGMTString() : '',
            path = (cookie.path !== undefined) ? '; path=' + cookie.path : '',
            domain = (cookie.domain !== undefined) ? '; domain=' + cookie.domain : '',
            secure = (cookie.secure !== undefined) ? '; secure=' + cookie.secure : '',
            cookieString = cookie.name + '=' + cookie.value,
            cookieAppend = expires + path + domain + secure + ';',
            overwrite = (cookie.overwrite === false) ? false : true,
            exists = _get(cookie.name);
        
        if (exists === null) {
            document.cookie = cookieString + cookieAppend;
            return cookieString + cookieAppend;
        } else {
            if (overwrite === true) {
                document.cookie = cookieString + cookieAppend;
                return cookieString + cookieAppend;
            }
        }
        
        return exists;
    },
    _get = function (name) {
        try {
            if (name === undefined || typeof name !== 'string') {
                throw "You must define a name as a string when searching for a cookie";
            }
        } catch (ex) {
            BB.Log.debug(ex);
            return null;
        }
        var cookies = document.cookie.split(';'),
            i,
            len = cookies.length,
            foundCookie = {},
            cookieArray,
            cookieName;
        for (i = 0; i < len; i++) {
            cookieArray = cookies[i].split('=');
            cookieName = cookieArray[0].replace(/^\s+|\s+$/g, '');

            if (cookieName === name) {
                foundCookie.name = cookieName;
                foundCookie.value = cookieArray[1].replace(/^\s+|\s+$/g, '');
                break;
            }
        }
        return foundCookie;
    },
    _remove = function (name) {
        try {
            if (name === undefined || typeof name !== 'string') {
                throw "You must define a name as a string when removing a cookie";
            }
        } catch (ex) {
            BB.Log.debug(ex);
            return null;
        }
        
        return _set({name: name, value: '', expires: -1});
    };
    return {
        set: function (cookie) {
           return _set(cookie);
        },
        get: function (name) {
            return _get(name);
        },
        remove: function (name) {
            return _remove(name);
        }
    };
}());
/* Remove this after cookie.js is moved above bb.uuid.js in the store 07-12-12 */
var BB = window.BB || {};
BB.Util = BB.Util || {};

BB.Util.cookie = (function () {
    var _set = function (cookie) {
        cookie = cookie || {};
        try {
            if (cookie.name === undefined || cookie.value === undefined) {
                throw "You must define an object when setting a cookie with at least a name and value parameter";
            }
        } catch (ex) {
            console.log(ex);
            return null;
        }
        var date = new Date(),
            days = (cookie.expires !== undefined) ? (date.setTime(date.getTime())) + (parseFloat(cookie.expires) * 24 * 60 * 60 * 1000) : '',
            expires = (cookie.expires !== undefined) ? '; expires=' + new Date(days).toGMTString() : '',
            path = (cookie.path !== undefined) ? '; path=' + cookie.path : '',
            domain = (cookie.domain !== undefined) ? '; domain=' + cookie.domain : '',
            secure = (cookie.secure !== undefined) ? '; secure=' + cookie.secure : '',
            cookieString = cookie.name + '=' + cookie.value,
            cookieAppend = expires + path + domain + secure + ';',
            overwrite = (cookie.overwrite === false) ? false : true,
            exists = _get(cookie.name);

        if (exists === null) {
            document.cookie = cookieString + cookieAppend;
            return cookieString + cookieAppend;
        } else {
            if (overwrite === true) {
                document.cookie = cookieString + cookieAppend;
                return cookieString + cookieAppend;
            }
        }

        return exists;
    },
        _get = function (name) {
            try {
                if (name === undefined || typeof name !== 'string') {
                    throw "You must define a name as a string when searching for a cookie";
                }
            } catch (ex) {
                console.log(ex);
                return null;
            }
            var cookies = document.cookie.split(';'),
                i,
                len = cookies.length,
                foundCookie = {};
            for (i = 0; i < len; i++) {
                var cookieArray = cookies[i].split('='),
                    cookieName = cookieArray[0].trim();
                if (cookieName === name) {
                    foundCookie.name = cookieName;
                    foundCookie.value = cookieArray[1].trim();
                }
            }
            return foundCookie;
        },
        _remove = function (name) {
            try {
                if (name === undefined || typeof name !== 'string') {
                    throw "You must define a name as a string when removing a cookie";
                }
            } catch (ex) {
                console.log(ex);
                return null;
            }

            return _set({name: name, value: '', expires: -1});
        };
    return {
        set: function (cookie) {
            return _set(cookie);
        },
        get: function (name) {
            return _get(name);
        },
        remove: function (name) {
            return _remove(name);
        }
    };
}());
(function () {

    BB = window.BB || {};
    BB.Util = BB.Util || {};
    var s, o, cookie = BB.Util.cookie,
        uuidGenerator,
        uuid,
        // 5 years
        expireYears = '1825';
    
    try {
        /**
        * UUID generating function. Use to generate the uuid if it isn't there yet.
        */
        uuidGenerator = function () {
                for(s=o=''; o++<36; s+=o*51&52?(o^15?8^Math.random()*(o^20?16:4):4).toString(16):'-');return s;
        }

        uuid = (cookie.get('m').value === undefined) ? uuidGenerator() : cookie.get('m').value;

        /**
        * Only generate the cookie if it hasn't already been set before
        */
        if (cookie.get('m').value === undefined) {
            cookie.set({
                name: 'm',
                value: uuid,
                expires: expireYears,
                domain: 'bodybuilding.com', // domain set to bodybuilding.com so it can be ready by *.bodybuilding.com
                path: '/'
            });
        } else {

        }
        /**
        * Keep the BB.Util.cookieMonster in place until commerce removes
        * their inline code
        */
        BB.Util.uuid = BB.Util.cookieMonster = function () {
            return uuid;
        };
    } catch (ex) {
        BB.Log.debug(ex.message)
    }
}());
var _month_names = [
        "JAN",
        "FEB",
        "MAR",
        "APR",
        "MAY",
        "JUN",
        "JUL",
        "AUG",
        "SEP",
        "OCT",
        "NOV",
        "DEC"   ],
    Cool = Cool || { };

Cool.RESTClient =
    /*
    /*
     * This is the unique asynch access point with the server ajax jquery call
     */
    (function () {
        var _server_domain = "/workouts/rest",
            _ajax_call =
                /*
                 * perform ajax request
                 */
                function (type_str, data_id, parameters, callback, error_callback, isAsync) {
                    var restURL = _server_domain + "/" + data_id;
                    $.ajax({
                        url:restURL,
                        type:type_str,
                        dataType:'json',
                        data:parameters,
                        async:isAsync,
                        success:callback,
                        error:error_callback,
                        xhrFields:{
                            withCredentials:true
                        }
                    });
                };
        return {
            "setup":/*
             * configure data retrieval parameters
             */
                function (url) {
                    _server_domain = url;
                },
            "get":/*
             * Stub to access GET HTTP method
             */
                function (data_id, params, success_callback, fail_callback, isAsync) {
                    _ajax_call('GET', data_id, params, success_callback, fail_callback, isAsync);
                },
            "post":/*
             * Stub to access POST HTTP method
             */
                function (data_id, params, success_callback, fail_callback, isAsync) {
                    _ajax_call('POST', data_id, params, success_callback, fail_callback, isAsync);
                },
            "put":/*
             * Stub to access PUT HTTP method
             */
                function (data_id, params, success_callback, fail_callback, isAsync) {
                    _ajax_call('PUT', data_id, params, success_callback, fail_callback, isAsync);
                },
            "delete":/*
             * Stub to access DELETE HTTP method
             */
                function (data_id, params, success_callback, fail_callback, isAsync) {
                    _ajax_call('DELETE', data_id, params, success_callback, fail_callback, isAsync);
                }
        };
    }());

Cool.RESTAsynchClient =
    /*
     * This is the unique asynch access point with the server ajax jquery call
     */
    (function () {
        return {
            "get":/*
             * Stub to access GET HTTP method
             */
                function (data_id, params, success_callback, fail_callback) {
                    Cool.RESTClient.get(data_id, params, success_callback, fail_callback, true);
                },
            "post":/*
             * Stub to access POST HTTP method
             */
                function (data_id, params, success_callback, fail_callback) {
                    Cool.RESTClient.post(data_id, params, success_callback, fail_callback, true);
                },
            "put":/*
             * Stub to access PUT HTTP method
             */
                function (data_id, params, success_callback, fail_callback) {
                    Cool.RESTClient.put(data_id, params, success_callback, fail_callback, true);
                },
            "delete":/*
             * Stub to access DELETE HTTP method
             */
                function (data_id, params, success_callback, fail_callback) {
                    Cool.RESTClient["delete"](data_id, params, success_callback, fail_callback, true);
                }
        };
    }());

Cool.Trigger =
    /*
     * Set of delegate dynamic triggers to be launched from seed events
     */
    (function () {
        var _dialog_page = $('#_dialog-page'),
            _deep_dialog_page = $('#_deep-dialog-page'),
            _topic_page = $('#_topic-page'),
            _fake_caller = function (action) {
                return {
                    'data':function () {
                        return action;
                    }
                };
            },
            _synch_post = function (url, inputs) {
                $("<form/>", {method:"POST", action:url}).submit();
            };

        return{
            //This is not the design we want for search but help as stub for the back end
            'search':function (trigger) {
                Cool.RESTAsynchClient.get('template', { "search":"workout" },
                    function (data) {
                    }, function (error) {
                    });
            },
            'update-field':function (trigger) {
                var action = trigger.data("action"),
                    target = action.target,
                    fake_trigger = $("<div/>", {
                        "data-desktop-id":trigger.data("desktop-id")
                    }), i, size = action.actions.length, trigger_action, triggered_action;
                for (i = 0; i < size; i++) {
                    fake_trigger.attr("data-action", JSON.stringify(action.actions[i]));
                    Cool.Trigger[action.actions[i].behavior](fake_trigger, trigger);
                }

                trigger_action = $.parseJSON(action.params.value);  //We only accept one param in this action called value
                if (trigger_action !== undefined && trigger_action !== null &&
                    trigger_action.action !== undefined && trigger_action.action !== null) { //It could be another action (resolve from a get service or similar actions having return value)
                    triggered_action = trigger_action.action;
                    $(target).val(Cool.Trigger[triggered_action.behavior]({data:function () {
                        return triggered_action; //TODO: extend this functionality to allow the services to return a value and use a selector to get the value from a returning json
                    }}));
                } else {  //Or it can be a fixed value
                    $(target).val(action.params.value);
                }
            },
            'get-field-value':function (trigger) {
                var action = trigger.data("action"),
                    target = action.target;

                Cool.Helper.call_sub_actions(action.actions);

                return $(target).val();
            },
            'get-field-attribute':function (trigger) {
                var action = trigger.data("action"),
                    target = action.target;

                Cool.Helper.call_sub_actions(action.actions);

                return $(target).attr(action.params.attr); //The action requires the attr field to be defined in the params
            },
            'get':function (trigger) {
                var action = trigger.data("action"), result;

                Cool.Helper.call_sub_actions(action.actions);

                //Check if any params is a resolve action and resolve them
                if (action && action.params) {
                    Object.keys(action.params).forEach(function (key) {
                        if (action.params.hasOwnProperty(key)) {
                            try {
                                var param = $.parseJSON(action.params[key]);
                                if (param && param.behavior) { //If the param has a json as value and the value is an action

                                    action.params[key] = Cool.Trigger[param.behavior]({data:function () {
                                        return param;
                                    }});
                                }
                            } catch (e) {
                                //do nothing the json is no valid it should be interpreted as a value
                            }
                        }
                    });
                }

                //Call the get service and return whatever the service returns
                Cool.RESTClient.get(action.target, action.params, function (data) {
                    result = data;
                }, function (data) {
                }, false);
                return result;
            },
            'post':function (trigger) {
                var action = trigger.data("action"), input_elements = [],
                    form = $("form"), viewArr = $(this).serializeArray(),
                    view = {}, i, size = viewArr.length;

                for (i = 0; i < size; i++) {
                    view[viewArr[i].name] = viewArr[i].value;
                }

                //Get the data and submit it to the action
                //trigger.data

                //TODO: Collect input elements:$("input"
                //
                //form.appendChild(hiddenField); // appen
                //TODO: data_id?
                //TODO: page to be sent out after post
                //TODO: Is it a synchronous or asynchronous call we need to perform?
                //TODO:If sycnhronous, do not use the Cool.RESTAsynchClient:

                //_synch_post(action.target, input_elements);
                //TODO:Else:
                Cool.RESTAsynchClient.post(action.target, {'data':view});
            },
            'delete':function (trigger) {
                var action = trigger.data("action"),
                    confirm_message = action.target,
                    linkElement = action.linkElement,
                    result, action2;
                if (linkElement !== undefined && linkElement !== null) {
                    result = window.confirm(confirm_message);
                    if (result) {
                        action2 = linkElement.action;
                        //ok, how to remove this guy?  Trigger with a fake trigger the linkElement Action
                        //this give us the flexibility to define synh or Asynch process without affecting this generic code
                        Cool.Trigger[action2.behavior](_fake_caller(action2));
                    }
                }


            },
            'tooltip':function (trigger) {
                var action = trigger.data("action"),
                    tooltip_selector = action.target;
                Cool.Helper.set_body_flag();
                Cool.Helper.bring_tooltip(trigger, tooltip_selector);
            },
            'persistent-close':function (trigger) {
                var action = trigger.data("action"),
                    key = action.target;
                document.cookie = key + '=bbcool';
                $(key).slideUp();
            },
            'jquery-action':function (trigger, original_trigger) {
                var action = trigger.data("action"),
                    jquery_action = action.target,
                    desktop_selector = trigger.data("desktop-id"),
                    desktops = desktop_selector.split(":"),
                    jquery_actions = jquery_action.split(":"),
                    i, size = jquery_actions.length, jquery_call, param, proc_selector;
                original_trigger = original_trigger || trigger;
                for (i = 0; i < size; i++) {
                    jquery_call = desktops[i].split("(");
                    if (jquery_call.length > 1) {
                        param = jquery_call[1];
                    }
                    if (jquery_call[0] === '_trigger') {
                        if (original_trigger !== undefined && original_trigger !== null) {
                            $(original_trigger)[jquery_actions[i]](param);
                        }
                    } else {
                        if (/^_trigger_children_/.test(jquery_call[0])) {
                            proc_selector = jquery_call[0].replace('_trigger_children_', '');
                            $(original_trigger).find(proc_selector)[jquery_actions[i]](param);
                        } else {
                            if (/^_trigger_parent_/.test(jquery_call[0])) {
                                proc_selector = jquery_call[0].replace('_trigger_parent_', '');
                                $(original_trigger).parent().find(proc_selector)[jquery_actions[i]](param);
                            } else {
                                $(jquery_call[0])[jquery_actions[i]](param);
                            }
                        }
                    }
                }
            },
            'exclusive-toggle':function (trigger) {
                var action = trigger.data("action"),
                    target = "._exclusive-toggle", state_objective = true, tab_selector = target + "-tab", desk_selector = target + "-desk";
                if (trigger.hasClass("selected")) {
                    state_objective = false;
                }
                //clear status across classes
                $(tab_selector + ", " + desk_selector).removeClass("selected");

                //set target status
                if (state_objective) {
                    Cool.Helper.set_body_flag();
                    trigger.parent().find(tab_selector).addClass("selected");
                    trigger.parent().find(desk_selector).addClass("selected");
                } else {
                    Cool.Helper.clear_body_flag();
                    trigger.parent().find(tab_selector).removeClass("selected");
                    trigger.parent().find(desk_selector).removeClass("selected");
                }
            },
            'toggle':function (trigger) {
                var central_manager = $("#" + trigger.data("central-id")),
                    action = trigger.data("action"),
                    this_type = trigger.data("type"),
                    before_after = action.target.split("/"),
                    desktop_id = trigger.data("desktop-id"),
                    desktop = $("#" + desktop_id),
                    task_queue = central_manager.attr("data-task-queue"),
                    queued_trigger;

                if (this_type === "tab" && task_queue === trigger.attr("id")) {
                    return;
                } else {
                    central_manager.attr("data-task-queue", '');
                    if (typeof(task_queue) === 'string' && task_queue.length > 0 &&
                        task_queue !== trigger.attr("id")) {
                        queued_trigger = $("#" + task_queue);
                        Cool.Trigger[queued_trigger.data("action").behavior](queued_trigger);
                    }
                    desktop[before_after[1]]();
                }

                if (trigger.hasClass("active")) { //going to not_active
                    trigger.removeClass("active");
                } else { //going to active
                    central_manager.attr("data-task-queue", trigger.attr("id"));
                    trigger.addClass("active");
                }

                action.target = before_after[1] + "/" + before_after[0];
                trigger.attr("data-action", JSON.stringify(action));
            },
            'selected':function (trigger) {
                var action = trigger.data("action"),
                    field_element = $("#" + action.target),
                    stamp_fields = trigger.data('value'), text = stamp_fields.value,
                    element, date_fields, date;
                switch (stamp_fields.type) {
                    case 'id':
                        field_element.html(text);
                        break;
                    case 'html':
                        switch (text) {
                            case 'parent':
                                element = trigger.parent().clone();
                                element.find(".cool-action").remove();
                                field_element.html(element);
                                break;
                        }
                        break;
                    case 'date':
                        date_fields = stamp_fields.value.split(".");
                        date = new Date(date_fields[0], date_fields[1], date_fields[2]);
                        text = Cool.Helper.format_date(date);
                        field_element.attr("data-value", date_fields[0] + "-" + (parseInt(date_fields[1], 10) + 1) + "-" + date_fields[2]);
                        Cool.Helper.call_sub_actions(action.actions); //Call the sub actions after the field has been updated
                        field_element.html(text);
                        break;
                    case 'string':
                        field_element.html(text);
                        break;
                    default:
                        field_element.html(text);
                        break;
                }
                _dialog_page.slideUp(function () {
                    _topic_page.slideDown();
                    _deep_dialog_page.html("");
                    _dialog_page.html("");
                    if (action.linkElement !== undefined && action.linkElement !== null) {
                        var action2 = action.linkElement.action;
                        Cool.Trigger[action2.behavior](_fake_caller(action2));
                    }
                });
            },
            'link':function (trigger) {
                window.location = trigger.data("action").target;
            },
            "link-new-page":function (trigger) {
                window.open(trigger.data("action").target, '_blank');
            },
            'workflow':function (trigger) {
                var action = trigger.data("action"), actions = action.actions, i, size, fake_trigger,
                    before_after = action.target.split("/"), desktop, step, steps,
                    control_before, control_after;
                if ($.isArray(actions) && actions.length > 0) {
                    size = actions.length;
                    for (i = 0; i < size; i++) {
                        fake_trigger = $(trigger.clone());
                        fake_trigger.removeAttr('data-action');
                        fake_trigger.data('action', actions[i]);
                        Cool.Trigger[actions[i].behavior](fake_trigger);
                        fake_trigger = null;
                    }
                }

                //TODO:verify data?
                if (before_after.length === 1) {
                    desktop = $("#" + trigger.data("desktop-id"));
                    steps = desktop.data("steps");
                    for (step in steps) {
                        if (steps[step].id === before_after[0]) {
                            $("#" + steps[step].id).slideDown();
                            $("#control-" + steps[step].id).children(".workflow-steps-control-legend").removeClass("workflow-steps-control-legend-no-current").addClass("workflow-steps-control-legend-current");
                        } else {
                            $("#" + steps[step].id).slideUp();
                            $("#control-" + steps[step].id).children(".workflow-steps-control-legend").removeClass("workflow-steps-control-legend-current").addClass("workflow-steps-control-legend-no-current");
                        }
                    }
                } else {
                    control_before = $("#control-" + before_after[0]);
                    control_after = $("#control-" + before_after[1]);
                    desktop = $("#" + control_before.data("desktop-id"));
                    if (control_before.hasClass("workflow-steps-control-current")) {
                        control_before.removeClass("workflow-steps-control-current").addClass("workflow-steps-control-done");
                        Cool.Helper.action_binder(control_before);
                        control_after.removeClass("workflow-steps-control-pending").addClass("workflow-steps-control-current");
                        Cool.Helper.action_binder(control_after);
                    }

                    control_before.children(".workflow-steps-control-legend").removeClass("workflow-steps-control-legend-current").addClass("workflow-steps-control-legend-no-current");
                    control_after.children(".workflow-steps-control-legend").removeClass("workflow-steps-control-legend-no-current").addClass("workflow-steps-control-legend-current");

                    $("#" + before_after[0]).slideUp();
                    $("#" + before_after[1]).slideDown();
                }
            },
            'calendar':function (trigger) {
                var action = trigger.data("action"), new_action = $.extend(true, {}, action), date_prompt;
                switch (action.target) {
                    case 'landing':
                        if (trigger.hasClass("month-cell-with-workouts")) {
                            window.location = '/workouts/workout-logs/trackworkout';
                        } else {
                            window.location = '/workouts/track-workout';
                        }
                        break;
                    default:
                        date_prompt = $('<div/>').appendTo(_dialog_page);

                        $('<div/>', {
                            'class':"section-header-5-text",
                            'html':"WORKOUT DATE"
                        }).appendTo($("<div/>", {'class':"bb-background-gray8"}).addClass("section-header-5").appendTo(date_prompt));

                        new_action.behavior = "selected";

                        var calendar = new Cool.View.Calendar.Mobile(date_prompt, new_action, false);
                        calendar.initialize();
                        _dialog_page.slideDown(function () {
                            _topic_page.slideUp();
                        });
                }
            },
            'template':function (trigger) {
                //TODO: TO BE REPLACED_launch_lazy_list('exercise', action);
            },
            'exercise':function (trigger) {
                var action = trigger.data("action");
                switch (action.target) {
                    case 'add':
                        //TODO: TO BE REPLACED_launch_lazy_list('exercise', action);
                        break;
                }
            },
            'forced_login':function (trigger) {
                $('body').animate({'scrollTop':0}, function () {
                    var login_icon = $("#mobile-dashboard");
                    if (!login_icon.hasClass("active")) {
                        Cool.Trigger.toggle(login_icon);
                    }
                });
            },
            'scroll':function (trigger) {
                var action = trigger.data("action"),
                    target = action.target;
                if (target === "/top") {
                    $('body').animate({'scrollTop':0});
                } else {
                    $('body').animate({'scrollTop':$("#" + target).offset().top});
                }
            },
            'value-roller':function (trigger_id, roller_set) {
                var trigger = roller_set[trigger_id], roll_value = trigger.data("roll-value"), new_value,
                    entered_value = trigger.val(),
                    next_item = $(roller_set[(parseInt(trigger_id, 10) + 1).toString()]),
                    next_item_old_value,
                    next_item_value;

                if (next_item !== undefined && next_item !== null && entered_value >= roll_value) {
                    next_item_old_value = next_item.val();
                    if (!(next_item_old_value > 0)) {
                        next_item_old_value = 0;
                    }
                    next_item_value = parseInt(entered_value / roll_value, 10) + parseInt(next_item_old_value, 10);
                    new_value = entered_value % roll_value;
                    trigger.val(new_value.toString());
                    next_item.val(next_item_value.toString());
                    next_item.trigger('change');
                }
            },
            'data':function (trigger) {
                var action = trigger.data("action"),
                    target = action.target;
                //resource_controller = Cool.ViewResource.Pool.get(trigger.data("resource-id").toString());
                $(trigger).addClass("hide");
                $(resource_controller.progress).removeClass("hide");
                Cool.DataModel.get(resource_controller, resource_controller.data_index, resource_controller.data_request, target.sortKey, target.searchTerm);
            },
            'delegate':function (trigger) {
                var action = trigger.data("action"),
                    target = action.target,
                    behavior = $("#" + target).data("action").behavior;
                Cool.Trigger[behavior]($("#" + target));
            }
        };
    }());

Cool.Helper =
    /*
     * Generic module to support all modules on day ot day tasks
     */
    (function () {
        var _body_flag = false, _exclusive_call = false,
            _local_binder = function () {
                var items = {}, caller0 = $(this),
                    action = caller0.data("action");
                if (action !== undefined && action !== null && typeof(action.behavior) === 'string' &&
                    action.behavior.length > 0) {
                    switch (action.behavior) {
                        case 'value-roller':
                            caller0.find("._value-roller-item").each(function (index, this_item) {
                                items[$(this_item).data("roll-order")] = $(this_item);
                            });

                            for (var item_order in items) {
                                var roll_value = items[item_order].data("roll-value");
                                if (roll_value > 0) {
                                    items[item_order].unbind("blur");
                                    items[item_order].bind("blur", null, function () {
                                        Cool.Trigger['value-roller']($(this).data("roll-order"), items);
                                    });
                                }
                            }
                            break;
                        case 'dynamic-async-update-modal':
                            caller0.unbind("click");
                            caller0.attr('data-update-key', action.target);
                            if (BB.UI && BB.UI.RightSidebar) {
                                BB.UI.RightSidebar.bindModal(caller0);
                            }
                            break;
                        case 'persistent-close':
                            if (new RegExp(action.target + "=bbcool;").test(document.cookie)) {
                                $(action.target).slideUp();
                                return;
                            } else {
                                $(action.target).slideDown();
                            }//Do not break, continue with default action
                        default:
                            caller0.unbind("click");
                            caller0.bind("click", null, function () {
                                var caller = $(this);
                                Cool.Trigger[caller.data("action").behavior](caller);
                            });
                            caller0.each(function (index, item) {
                                var onload = $(item).data("onload");
                                if (typeof(onload) === 'object' && onload !== null) {
                                    Cool.Trigger.delegate({ data:function () {
                                        return onload;
                                    } });
                                }
                            });
                    }
                }
            };

        return {
            stamp_month:function (date_item) {
                return date_item.getFullYear() + "." + date_item.getMonth();
            },
            stamp_day:function (date_item) {
                return Cool.Helper.stamp_month(date_item) + "." + date_item.getDate();
            },
            parse_date://
            /*
             *  Parse an EPHOC time and create a Date JavaScript instance
             */
                function (input) {
                    var d = new Date(0); // The 0 there is the key, which sets the date to the epoch
                    d.setUTCSeconds(input);
                    return d;
                },
            format_date://
            /*
             * Provides the standard format date
             */
                function (date) {
                    return (_month_names[date.getMonth()] + " " + date.getDate() + ", " + date.getFullYear());
                },
            self_update_on_browser://
            /*
             * perform changes on data that needs to be dynamically populated ont the client
             */
                function (element) {
                    var action = element.data("self-update");
                    switch (action.behavior) {
                        case 'calendar':
                            switch (action.target) {
                                case 'now':
                                    var date = new Date();
                                    element.html(Cool.Helper.format_date(date));
                                    break;
                            }
                            break;
                        case 'max-lines-wrap':
                            var lines = parseInt(action.target), overrun_marker, buffer, marker_size,
                                char_counter = 1, content = element.html(), size = content.length, new_substring,
                                domelement = element[0], max_height = domelement.clientHeight + 10;
                            if (lines > 1 && domelement.scrollHeight > max_height) {
                                overrun_marker = element.data("limit-string");
                                marker_size = overrun_marker.length;
                                buffer = content.substr(0, 1);
                                element.html(buffer);

                                while (char_counter < size) {
                                    //TODO:delta can be improved based on the learning from the first line pass
                                    new_substring = buffer + content.substr(char_counter, marker_size);
                                    element.html(new_substring);
                                    if (domelement.scrollHeight > max_height) {
                                        new_substring = buffer.substr(0, char_counter - marker_size) + overrun_marker;
                                        element.html(new_substring);
                                        break;
                                    } else {
                                        buffer = new_substring;
                                        char_counter += marker_size;
                                    }
                                }
                                //line_height = parseInt(element.css('lineHeight').replace("px", ""));
                                //if (line_height > 0) {
                                //max_height = line_height * lines;
                                //element.css('max-height', max_height + "px");
                                //}                   //max-height: 295px;
                                //"14px"
                                //$($0).css('height')
                                //"28px"
                            }
                            break;
                    }
                },
            setup_body:function () {
                var bodyref = $("body");
                bodyref.bind("click", null, function () {
                    if (_body_flag && !_exclusive_call) {
                        $("._exclusive-toggle").removeClass("selected");
                        _body_flag = false;
                    }
                    _exclusive_call = false;
                });
            },
            bring_tooltip:function (element_to_point, tooltip_selector) {
                var tooltip = $(tooltip_selector);
                if (typeof(tooltip) === 'object' && tooltip !== null &&
                    typeof(element_to_point) === 'object' && element_to_point !== null) {
                    tooltip.addClass("selected");
                    _body_flag = true;
                    tooltip.offset({top:$(element_to_point).position().top - tooltip.data("y-offset"),
                        left:$(element_to_point).position().left - tooltip.data("x-offset")});
                }
            },
            set_body_flag:function () {
                _body_flag = true;
                _exclusive_call = true;
            },
            clear_body_flag:function () {
                _body_flag = false;
                _exclusive_call = false;
            },
            action_binder://
            /*
             * Automate the event association for elements requested based on data-action JSON attribute
             */
                function (element) {
                    $(element).each(_local_binder);
                },
            call_sub_actions://
            /*
             * Helper method to iterate over the linked actions and call those
             */
                function (actions) {
                    if (actions && actions.length > 0) {
                        for (var i = 0; i < actions.length; i++) {
                            var item = actions[i];
                            if (typeof(item) === 'object' && item.behavior) {
                                Cool.Trigger[item.behavior]({data:function () {
                                    return item;
                                }});
                            }
                        }
                    }
                }
        };
    }());
