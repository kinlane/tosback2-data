$.storeWidgets('8581a45b|a2bad5ef');if (typeof PagingWidget == "undefined") {		var PagingWidget = BaseWidget.extend({		create: function(selector, settings) {			var jQ = this.base(selector, settings);			if (jQ.widgetState().enabled != undefined && !jQ.widgetState().enabled) {				this.hide(selector);			};			if (jQ.widgetState().triggerPageChanged) {				this.calculateValues(jQ, 0, settings.totalItems);				this.assignEvents(selector);			}			return jQ;		},			hide: function(selector) {			$(selector).hide();		},			show: function(selector) {			$(selector).show();		},			getWidgetClassName: function() {			return "PagingWidget";		},			setPage: function(selector, event, pageNumber) {			updatePagingLinks(selector, pageNumber, $(selector).widgetState("totalPages"));		},			setPageSize: function(selector, event, pageSize) {			$(selector).widgetState("pageSize", pageSize);		},			setIndex: function(selector, event, index, pageSize, totalItems) {			var s = $(selector).widgetState();			if (pageSize) s.pageSize = pageSize;			if (totalItems) s.totalItems = totalItems;			if (!s.defaultTotalItems) s.defaultTotalItems = totalItems;			this.calculateValues(selector, index, s.totalItems);			this.updatePageNumbers(selector);			this.assignEvents(selector);			this.selectPage(selector, s.currentPage);		},		 		assignEvents: function(selector) {			var jQ = $(selector);			var self = this;			var s = jQ.widgetState();					$(".previous", jQ).click(function(event) {				self.onPageChanged(selector, s.previousIndex);			});					jQ.find(".page-number").click(function(event) {				$(".current-page", jQ).removeClass("current-page");				$(this).addClass("current-page");				var pIdx = parseInt($(this).text()) - 1;				var startIndex = pIdx * s.pageSize;				self.onPageChanged(selector, startIndex);			});					$(".next", jQ).click(function(event) {				self.onPageChanged(selector, s.nextIndex);			});			$(".viewall", jQ).click(function(event) {				s.pageSize = s.totalItems;				s.totalPages = 1;				s.currentPage = 1;				s.mode = "all";				self.updatePageNumbers(selector);				self.onPageChanged(selector, 0);				self.assignEvents(selector);				$(this).css("display", "none");				$(".viewbypage", jQ).css("display", "block");				EventTracker.track("AllItems");			});			$(".viewbypage", jQ).click(function(event) {				s.pageSize = s.defaultPageSize;				s.mode = "page";				self.calculateValues(selector, 0, s.totalItems);				self.updatePageNumbers(selector);				self.onPageChanged(selector, 0);				self.assignEvents(selector);				$(this).css("display", "none");				$(".viewall", jQ).css("display", "block");				EventTracker.track("ByPage");			});		},			onPageChanged: function(selector, pageStartIndex) {			var jQ = $(selector);			var s = jQ.widgetState();			var self = this;						s.nextIndex = Number(pageStartIndex) + s.pageSize;			s.previousIndex = Number(pageStartIndex) - s.pageSize;			s.currentIndex = Number(pageStartIndex);			var currentPage = Math.floor((pageStartIndex + s.pageSize) / s.pageSize);			self.calculateValues(selector, s.currentIndex, s.totalItems);			self.selectPage(selector, currentPage);			EventTracker.track("ToPage", "Page: " + currentPage);						if (s.triggerPageChanged) {				if (!s.restoringState) {					PersistentStorage.savePersistent({"browse": {"currentindex": s.currentIndex, "totalitems": s.totalItems, "pagesize" : s.pageSize, "mode" : s.mode}});				} else {					s.restoringState = false;				}				jQ.widgetTrigger("pagechanged", [pageStartIndex, s.pageSize, s.totalItems]);			}		},			drawPagingWidget: function(selector, event, totalCount, activeCount) {			var jQ = $(selector);			var self = this;			var s = jQ.widgetState();						this.show(selector);			if (totalCount != s.totalItems) {				s.currentIndex = 0;				if (!s.defaultTotalItems) s.defaultTotalItems = totalCount;				s.totalItems = totalCount;				self.calculateValues(selector, s.currentIndex, totalCount);				self.updatePageNumbers(selector);				self.selectPage(jQ, s.currentPage);				self.assignEvents(jQ);			}		},			calculateValues: function(selector, currentIndex, totalCount) {			var s = $(selector).widgetState();			s.totalItems = totalCount;			s.totalPages = Math.floor((totalCount + s.pageSize - 1) / s.pageSize);			s.currentIndex = currentIndex;			s.currentPage = Math.floor((currentIndex + s.pageSize) / s.pageSize);			if (currentIndex > s.pageSize) {				s.previousIndex = Number(currentIndex) - s.pageSize;			}			if (currentIndex < (totalCount - s.pageSize)) {				s.nextIndex = currentIndex + s.pageSize;			}		},			selectPage: function(selector, currentPage) {			var jQ = $(selector);			var s = jQ.widgetState();			if (currentPage > s.totalPages) {				currentPage = s.totalPages;			}			if (currentPage == s.totalPages) {				jQ.find(".next").css("display", "none");			} else {				jQ.find(".next").css("display", "block");			}			jQ.find(".current-page").removeClass("current-page");			$(jQ.find(".page-number").get(currentPage - 1)).addClass("current-page");			if (currentPage <= 1) {				jQ.find(".previous").css("display", "none");			} else {				jQ.find(".previous").css("display", "block");			}         var endIndex = s.currentIndex + s.pageSize > s.totalItems ? s.totalItems : s.currentIndex + s.pageSize;			if (s.currentIndex + 1 == endIndex) {				jQ.find(".viewall .xofy").html((s.currentIndex + 1) + ' of ' + s.totalItems);			} else {				jQ.find(".viewall .xofy").html((s.currentIndex + 1) + ' - ' + (endIndex) + ' of ' + s.totalItems);			}		},			updatePageNumbers: function(selector) {			var jQ = $(selector);			var self = this;			var s = jQ.widgetState();         var pgs = jQ.html("");			if (s.viewModeBeforePages) {				this.generateViewModeDiv(selector);			}						pgs.append('<div class="page-numbers"></div>').children(".page-numbers");			pgs.append('<div class="previous"><span class="text">' + s.paging_previous + '</span></div>');			if (s.totalPages > 1 || s.showSinglePage) {				for (i = 1; i <= s.totalPages; i++) {					var startIndex = (i - 1) * s.pageSize;					if (i == s.currentPage) {						pgs.append('<div class="page-number current-page">' + i + '</div>');					} else {						pgs.append('<div class="page-number">' + i + '</div>');					}				}			}			pgs.append('<div class="next"><span class="text">' + s.paging_next + '</span></div>');			if (s.currentPage <= 1) {				jQ.find(".previous").css("display", "none");			}			if (s.currentPage >= s.totalPages) {				jQ.find(".next").css("display", "none");			}			if (!s.viewModeBeforePages) {				this.generateViewModeDiv(selector);			}		},		generateViewModeDiv: function(selector) {			var jQ = $(selector);			var s = jQ.widgetState();						var vm = jQ.append('<div class="viewmode"></div>').children(".viewmode");			var endIndex = s.currentIndex + s.pageSize > s.totalItems ? s.totalItems : s.currentIndex + s.pageSize;			var xofy = null;			if (s.currentIndex + 1 == endIndex) {				xofy = s.showXofYLabel ? '<span class="xofy">' + (s.currentIndex + 1) + ' of ' + s.totalItems + '</span>' : '';			}else {				xofy = s.showXofYLabel ? '<span class="xofy">' + (s.currentIndex + 1) + ' - ' + endIndex  + ' of ' + s.totalItems + '</span>' : '';			}			if (s.totalPages > 1) {				vm.append('<div class="viewall">' + xofy + '<span class="text">' + s.paging_view_all + '</span></div>');			} else {				vm.append('<div class="viewall" style="display:none">' + xofy + '<span class="text">' + s.paging_view_all + '</span></div>');			}			$(".itemcount", vm).html(s.totalItems);			if (s.totalItems == s.pageSize) {				vm.append('<div class="viewbypage"><span class="text">' + s.paging_view_by_page + '</span></div>');			} else {				vm.append('<div class="viewbypage" style="display:none"><span class="text">' + s.paging_view_by_page + '</span></div>');			}		},			restoreState: function(state, selector) {			var browse = state["browse"];			var jQ = $(selector);			var s = jQ.widgetState();			if (s.triggerPageChanged) {				if (browse && browse.currentindex) {					if (browse.currentindex != s.currentIndex) {						s.restoringState = true;						s.totalItems = browse.totalitems;						s.pageSize = browse.pagesize;						s.mode = browse.mode;						s.currentIndex = browse.currentindex;						s.currentPage = Math.floor((s.currentIndex + s.pageSize) / s.pageSize);						this.calculateValues(selector, s.currentIndex, s.totalItems);						this.updatePageNumbers(selector);						this.selectPage(jQ, s.currentPage);						this.assignEvents(selector);					}				} else {									s.restoringState = true;					s.totalItems = s.defaultTotalItems;					s.pageSize = s.defaultPageSize;					s.currentPage = 1;					s.mode = "page";					this.calculateValues(selector, 0, s.totalItems);					this.updatePageNumbers(selector);					this.selectPage(jQ, s.currentPage);					this.assignEvents(selector);					$(".viewall", jQ).css("display", "block");					$(".viewbypage", jQ).css("display", "none");				}			}		}	});};                                                	if (typeof CollapsingPagingWidget == "undefined") {			var CollapsingPagingWidget = PagingWidget.extend({			create: function(selector, settings) {				var jQ = this.base(selector, settings);				var s = jQ.widgetState();				if (jQ.widgetState().triggerPageChanged) {					this.calculateValues(jQ, settings.currentIndex, settings.totalItems);					this.updatePageNumbers(selector);					this.assignEvents(jQ);				}				return jQ;			},								getWidgetClassName: function() {				return "CollapsingPagingWidget";			},					updatePageNumbers: function(selector) {				var jQ = $(selector);				var self = this;				var s = jQ.widgetState();				var inactiveBuffer = s.inactiveBuffer;				var activeBuffer = s.activeBuffer;				var minPages = (2 * activeBuffer) + 1 + (2 * inactiveBuffer);				if (s.totalPages <= minPages) {										this.base(selector);				} else {					var startEllipsis = false;					var endEllipsis = false;					if ((s.currentPage + activeBuffer) < (s.totalPages - (inactiveBuffer))) {						endEllipsis = true;					}					if ((s.currentPage - (activeBuffer + 1)) > inactiveBuffer) {						startEllipsis = true;					}					jQ.html("");					if (s.viewModeBeforePages) {						this.generateViewModeDiv(selector);					}					var pgs = jQ.append('<div class="page-numbers">').children(".page-numbers");					if (s.currentPage > 1) {						pgs.append('<div class="previous"><span class="text">' + s.paging_previous + '</span></div>');					}										for (var i = 1; i <= s.totalPages; i++) {												if ((i <= inactiveBuffer) || (i > inactiveBuffer && (s.currentPage <= inactiveBuffer+1) && (i <= (activeBuffer * 2 + 1)))) {							self.printPage(pgs, i);												} else if ((i > (s.totalPages - inactiveBuffer)) || (i <= (s.totalPages - inactiveBuffer) && (s.currentPage >= s.totalPages - inactiveBuffer) && (i > (s.totalPages - (activeBuffer * 2 + 1))))) {						   self.printPage(pgs, i);												} else if (i > inactiveBuffer && i < (s.currentPage - activeBuffer)) {							if (startEllipsis) {																pgs.append('<div class="page-number ellipsis start">&hellip;</div>');								startEllipsis = false;							}												} else if (i >= (s.currentPage - activeBuffer) && i <= (s.currentPage + activeBuffer)) {                  	self.printPage(pgs, i);												} else if (i > (s.currentPage + activeBuffer) && (i <= (s.totalPages - inactiveBuffer))) {							if (endEllipsis) {																pgs.append('<div class="page-number ellipsis end">&hellip;</div>');								endEllipsis = false;							}						} else {													}					}				if (s.currentPage < s.totalPages) {					pgs.append('<div class="next"><span class="text">' + s.paging_next + '</span></div>');				}				if (!s.viewModeBeforePages) {					this.generateViewModeDiv(selector);				}			}		},		onPageChanged: function(selector, pageStartIndex) {			var jQ = $(selector);			var s = jQ.widgetState();						s.nextIndex = pageStartIndex + s.pageSize;			s.previousIndex = pageStartIndex - s.pageSize;			s.currentIndex = pageStartIndex;			var currentPage = Math.floor((pageStartIndex + s.pageSize) / s.pageSize);			s.currentPage = currentPage;			this.calculateValues(selector, s.currentIndex, s.totalItems);			this.updatePageNumbers(selector);						this.assignEvents($(selector));			EventTracker.track("ToPage", "Page: " + currentPage);						if (!s.restoringState) {				PersistentStorage.savePersistent({"browse": {"currentindex": s.currentIndex, "totalitems": s.totalItems, "pagesize" : s.pageSize, "mode" : s.mode}});			} else {				s.restoringState = false;			}			jQ.widgetTrigger("pagechanged", [pageStartIndex, s.pageSize, s.totalItems]);		},		printPage: function(jQ, p) {			if (p == jQ.widgetState().currentPage) {				jQ.append('<div class="page-number current-page">' + p + '</div>');			} else {				jQ.append('<div class="page-number">' + p + '</div>');			}		}	});};