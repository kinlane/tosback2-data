var mboxCopyright = "Copyright 1996-2009. Adobe Systems Incorporated. All rights reserved"; mboxUrlBuilder = function(a, b) { this.a = a; this.b = b; this.c = new Array(); this.d = function(e) { return e; }; this.f = null; }; mboxUrlBuilder.prototype.addParameter = function(g, h) { var i = new RegExp('(\'|")'); if (i.exec(g)) { throw "Parameter '" + g + "' contains invalid characters"; } for (var j = 0; j < this.c.length; j++) { var k = this.c[j]; if (k.name == g) { k.value = h; return this; } } var l = new Object(); l.name = g; l.value = h; this.c[this.c.length] = l; return this; }; mboxUrlBuilder.prototype.addParameters = function(c) { if (!c) { return this; } for (var j = 0; j < c.length; j++) { var m = c[j].indexOf('='); if (m == -1 || m == 0) { continue; } this.addParameter(c[j].substring(0, m), c[j].substring(m + 1, c[j].length)); } return this; }; mboxUrlBuilder.prototype.setServerType = function(n) { this.o = n; }; mboxUrlBuilder.prototype.setBasePath = function(f) { this.f = f; }; mboxUrlBuilder.prototype.setUrlProcessAction = function(p) { this.d = p; }; mboxUrlBuilder.prototype.buildUrl = function() { var q = this.f ? this.f : '/m2/' + this.b + '/mbox/' + this.o; var r = document.location.protocol == 'file:' ? 'http:' : document.location.protocol; var e = r + "//" + this.a + q; var s = e.indexOf('?') != -1 ? '&' : '?'; for (var j = 0; j < this.c.length; j++) { var k = this.c[j]; e += s + encodeURIComponent(k.name) + '=' + encodeURIComponent(k.value); s = '&'; } return this.t(this.d(e)); }; mboxUrlBuilder.prototype.getParameters = function() { return this.c; }; mboxUrlBuilder.prototype.setParameters = function(c) { this.c = c; }; mboxUrlBuilder.prototype.clone = function() { var u = new mboxUrlBuilder(this.a, this.b); u.setServerType(this.o); u.setBasePath(this.f); u.setUrlProcessAction(this.d); for (var j = 0; j < this.c.length; j++) { u.addParameter(this.c[j].name, this.c[j].value); } return u; }; mboxUrlBuilder.prototype.t = function(v) { return v.replace(/\"/g, '&quot;').replace(/>/g, '&gt;'); }; mboxStandardFetcher = function() { }; mboxStandardFetcher.prototype.getType = function() { return 'standard'; }; mboxStandardFetcher.prototype.fetch = function(w) { w.setServerType(this.getType()); document.write('<' + 'scr' + 'ipt src="' + w.buildUrl() + '" language="JavaScript"><' + '\/scr' + 'ipt>'); }; mboxStandardFetcher.prototype.cancel = function() { }; mboxAjaxFetcher = function() { }; mboxAjaxFetcher.prototype.getType = function() { return 'ajax'; }; mboxAjaxFetcher.prototype.fetch = function(w) { w.setServerType(this.getType()); var e = w.buildUrl(); this.x = document.createElement('script'); this.x.src = e; document.body.appendChild(this.x); }; mboxAjaxFetcher.prototype.cancel = function() { }; mboxMap = function() { this.y = new Object(); this.z = new Array(); }; mboxMap.prototype.put = function(A, h) { if (!this.y[A]) { this.z[this.z.length] = A; } this.y[A] = h; }; mboxMap.prototype.get = function(A) { return this.y[A]; }; mboxMap.prototype.remove = function(A) { this.y[A] = undefined; }; mboxMap.prototype.each = function(p) { for (var j = 0; j < this.z.length; j++) { var A = this.z[j]; var h = this.y[A]; if (h) { p(A, h); } } }; mboxFactory = function(B, b, C) { this.D = false; this.B = B; this.C = C; this.E = new mboxList(); mboxFactories.put(C, this); this.F = typeof document.createElement('div').replaceChild != 'undefined' && (function() { return true; })() && typeof document.getElementById != 'undefined' && typeof (window.attachEvent || document.addEventListener || window.addEventListener) != 'undefined' && typeof encodeURIComponent != 'undefined'; this.G = this.F && mboxGetPageParameter('mboxDisable') == null; var H = C == 'default'; this.I = new mboxCookieManager('mbox' + (H ? '' : ('-' + C)), (function() { return mboxCookiePageDomain(); })()); this.G = this.G && this.I.isEnabled() && (this.I.getCookie('disable') == null); if (this.isAdmin()) { this.enable(); } this.J = mboxGenerateId(); this.K = mboxScreenHeight(); this.L = mboxScreenWidth(); this.M = mboxBrowserWidth(); this.N = mboxBrowserHeight(); this.O = mboxScreenColorDepth(); this.P = mboxBrowserTimeOffset(); this.Q = new mboxSession(this.J, 'mboxSession', 'session', 31 * 60, this.I); this.R = new mboxPC('PC', 7776000, this.I); this.w = new mboxUrlBuilder(B, b); this.S(this.w, H); this.T = new Date().getTime(); this.U = this.T; var V = this; this.addOnLoad(function() { V.U = new Date().getTime(); }); if (this.F) { this.addOnLoad(function() { V.D = true; V.getMboxes().each(function(W) { W.setFetcher(new mboxAjaxFetcher()); W.finalize(); }); }); this.limitTraffic(100, 10368000); if (this.G) { this.X(); this.Y = new mboxSignaler(function(Z, c) { return V.create(Z, c); }, this.I); } } }; mboxFactory.prototype.forcePCId = function(_) { if (this.R.forceId(_)) { this.Q.forceId(mboxGenerateId()); } }; mboxFactory.prototype.forceSessionId = function(_) { this.Q.forceId(_); }; mboxFactory.prototype.isEnabled = function() { return this.G; }; mboxFactory.prototype.getDisableReason = function() { return this.I.getCookie('disable'); }; mboxFactory.prototype.isSupported = function() { return this.F; }; mboxFactory.prototype.disable = function(ab, bb) { if (typeof ab == 'undefined') { ab = 60 * 60; } if (typeof bb == 'undefined') { bb = 'unspecified'; } if (!this.isAdmin()) { this.G = false; this.I.setCookie('disable', bb, ab); } }; mboxFactory.prototype.enable = function() { this.G = true; this.I.deleteCookie('disable'); }; mboxFactory.prototype.isAdmin = function() { return document.location.href.indexOf('mboxEnv') != -1; }; mboxFactory.prototype.limitTraffic = function(cb, ab) { }; mboxFactory.prototype.addOnLoad = function(p) { if (window.addEventListener) { window.addEventListener('load', p, false); } else if (document.addEventListener) { document.addEventListener('load', p, false); } else if (document.attachEvent) { window.attachEvent('onload', p); } }; mboxFactory.prototype.getEllapsedTime = function() { return this.U - this.T; }; mboxFactory.prototype.getEllapsedTimeUntil = function(db) { return db - this.T; }; mboxFactory.prototype.getMboxes = function() { return this.E; }; mboxFactory.prototype.get = function(Z, eb) { return this.E.get(Z).getById(eb || 0); }; mboxFactory.prototype.update = function(Z, c) { if (!this.isEnabled()) { return; } if (this.E.get(Z).length() == 0) { throw "Mbox " + Z + " is not defined"; } this.E.get(Z).each(function(W) { W.getUrlBuilder().addParameter('mboxPage', mboxGenerateId()); W.load(c); }); }; mboxFactory.prototype.create = function(Z, c, fb) { if (!this.isSupported()) { return null; } var e = this.w.clone(); e.addParameter('mboxCount', this.E.length() + 1); e.addParameters(c); var eb = this.E.get(Z).length(); var gb = this.C + '-' + Z + '-' + eb; var hb; if (fb) { hb = new mboxLocatorNode(fb); } else { if (this.D) { throw 'The page has already been loaded, can\'t write marker'; } hb = new mboxLocatorDefault(gb); } try { var V = this; var ib = 'mboxImported-' + gb; var W = new mbox(Z, eb, e, hb, ib); if (this.G) { W.setFetcher(this.D ? new mboxAjaxFetcher() : new mboxStandardFetcher()); } W.setOnError(function(jb, n) { W.setMessage(jb); W.activate(); if (!W.isActivated()) { V.disable(60 * 60, jb); window.location.reload(false); } }); this.E.add(W); } catch (kb) { this.disable(); throw 'Failed creating mbox "' + Z + '", the error was: ' + kb; } var lb = new Date(); e.addParameter('mboxTime', lb.getTime() - (lb.getTimezoneOffset() * 60000)); return W; }; mboxFactory.prototype.getCookieManager = function() { return this.I; }; mboxFactory.prototype.getPageId = function() { return this.J; }; mboxFactory.prototype.getPCId = function() { return this.R; }; mboxFactory.prototype.getSessionId = function() { return this.Q; }; mboxFactory.prototype.getSignaler = function() { return this.Y; }; mboxFactory.prototype.getUrlBuilder = function() { return this.w; }; mboxFactory.prototype.S = function(e, H) { e.addParameter('mboxHost', document.location.hostname).addParameter('mboxSession', this.Q.getId()); if (!H) { e.addParameter('mboxFactoryId', this.C); } if (this.R.getId() != null) { e.addParameter('mboxPC', this.R.getId()); } e.addParameter('mboxPage', this.J); e.addParameter('screenHeight', this.K); e.addParameter('screenWidth', this.L); e.addParameter('browserWidth', this.M); e.addParameter('browserHeight', this.N); e.addParameter('browserTimeOffset', this.P); e.addParameter('colorDepth', this.O); e.setUrlProcessAction(function(e) { e += '&mboxURL=' + encodeURIComponent(document.location); var mb = encodeURIComponent(document.referrer); if (e.length + mb.length < 2000) { e += '&mboxReferrer=' + mb; } e += '&mboxVersion=' + mboxVersion; return e; }); }; mboxFactory.prototype.nb = function() { return ""; }; mboxFactory.prototype.X = function() { document.write('<style>.' + 'mboxDefault' + ' { visibility:hidden; }</style>'); }; mboxFactory.prototype.isDomLoaded = function() { return this.D; }; mboxSignaler = function(ob, I) { this.I = I; var pb = I.getCookieNames('signal-'); for (var j = 0; j < pb.length; j++) { var qb = pb[j]; var rb = I.getCookie(qb).split('&'); var W = ob(rb[0], rb); W.load(); I.deleteCookie(qb); } }; mboxSignaler.prototype.signal = function(sb, Z) { this.I.setCookie('signal-' + sb, mboxShiftArray(arguments).join('&'), 45 * 60); }; mboxList = function() { this.E = new Array(); }; mboxList.prototype.add = function(W) { if (W != null) { this.E[this.E.length] = W; } }; mboxList.prototype.get = function(Z) { var tb = new mboxList(); for (var j = 0; j < this.E.length; j++) { var W = this.E[j]; if (W.getName() == Z) { tb.add(W); } } return tb; }; mboxList.prototype.getById = function(ub) { return this.E[ub]; }; mboxList.prototype.length = function() { return this.E.length; }; mboxList.prototype.each = function(p) { if (typeof p != 'function') { throw 'Action must be a function, was: ' + typeof (p); } for (var j = 0; j < this.E.length; j++) { p(this.E[j]); } }; mboxLocatorDefault = function(g) { this.g = 'mboxMarker-' + g; document.write('<div id="' + this.g + '" style="visibility:hidden;display:none">&nbsp;</div>'); }; mboxLocatorDefault.prototype.locate = function() { var vb = document.getElementById(this.g); while (vb != null) { if (vb.nodeType == 1) { if (vb.className == 'mboxDefault') { return vb; } } vb = vb.previousSibling; } return null; }; mboxLocatorDefault.prototype.force = function() { var wb = document.createElement('div'); wb.className = 'mboxDefault'; var xb = document.getElementById(this.g); xb.parentNode.insertBefore(wb, xb); return wb; }; mboxLocatorNode = function(yb) { this.vb = yb; }; mboxLocatorNode.prototype.locate = function() { return typeof this.vb == 'string' ? document.getElementById(this.vb) : this.vb; }; mboxLocatorNode.prototype.force = function() { return null; }; mboxCreate = function(Z) { var W = mboxFactoryDefault.create(Z, mboxShiftArray(arguments)); if (W) { W.load(); } return W; }; mboxDefine = function(fb, Z) { var W = mboxFactoryDefault.create(Z, mboxShiftArray(mboxShiftArray(arguments)), fb); return W; }; mboxUpdate = function(Z) { mboxFactoryDefault.update(Z, mboxShiftArray(arguments)); }; mbox = function(g, zb, w, Ab, ib) { this.Bb = null; this.Cb = 0; this.hb = Ab; this.ib = ib; this.Db = null; this.Eb = new mboxOfferContent(); this.wb = null; this.w = w; this.message = ''; this.Fb = new Object(); this.Gb = 0; this.zb = zb; this.g = g; this.Hb(); w.addParameter('mbox', g).addParameter('mboxId', zb); this.Ib = function() { }; this.Jb = function() { }; this.Kb = null; }; mbox.prototype.getId = function() { return this.zb; }; mbox.prototype.Hb = function() { if (this.g.length > 250) { throw "Mbox Name " + this.g + " exceeds max length of " + "250 characters."; } else if (this.g.match(/^\s+|\s+$/g)) { throw "Mbox Name " + this.g + " has leading/trailing whitespace(s)."; } }; mbox.prototype.getName = function() { return this.g; }; mbox.prototype.getParameters = function() { var c = this.w.getParameters(); var tb = new Array(); for (var j = 0; j < c.length; j++) { if (c[j].name.indexOf('mbox') != 0) { tb[tb.length] = c[j].name + '=' + c[j].value; } } return tb; }; mbox.prototype.setOnLoad = function(p) { this.Jb = p; return this; }; mbox.prototype.setMessage = function(jb) { this.message = jb; return this; }; mbox.prototype.setOnError = function(Ib) { this.Ib = Ib; return this; }; mbox.prototype.setFetcher = function(Lb) { if (this.Db) { this.Db.cancel(); } this.Db = Lb; return this; }; mbox.prototype.getFetcher = function() { return this.Db; }; mbox.prototype.load = function(c) { if (this.Db == null) { return this; } this.setEventTime("load.start"); this.cancelTimeout(); this.Cb = 0; var w = (c && c.length > 0) ? this.w.clone().addParameters(c) : this.w; this.Db.fetch(w); var V = this; this.Mb = setTimeout(function() { V.Ib('browser timeout', V.Db.getType()); }, 15000); this.setEventTime("load.end"); return this; }; mbox.prototype.loaded = function() { this.cancelTimeout(); if (!this.activate()) { var V = this; setTimeout(function() { V.loaded(); }, 100); } }; mbox.prototype.activate = function() { if (this.Cb) { return this.Cb; } this.setEventTime('activate' + ++this.Gb + '.start'); if (this.show()) { this.cancelTimeout(); this.Cb = 1; } this.setEventTime('activate' + this.Gb + '.end'); return this.Cb; }; mbox.prototype.isActivated = function() { return this.Cb; }; mbox.prototype.setOffer = function(Eb) { if (Eb && Eb.show && Eb.setOnLoad) { this.Eb = Eb; } else { throw 'Invalid offer'; } return this; }; mbox.prototype.getOffer = function() { return this.Eb; }; mbox.prototype.show = function() { this.setEventTime('show.start'); var tb = this.Eb.show(this); this.setEventTime(tb == 1 ? "show.end.ok" : "show.end"); return tb; }; mbox.prototype.showContent = function(Nb) { if (Nb == null) { return 0; } if (this.wb == null || !this.wb.parentNode) { this.wb = this.getDefaultDiv(); if (this.wb == null) { return 0; } } if (this.wb != Nb) { this.Ob(this.wb); this.wb.parentNode.replaceChild(Nb, this.wb); this.wb = Nb; } this.Pb(Nb); this.Jb(); return 1; }; mbox.prototype.hide = function() { this.setEventTime('hide.start'); var tb = this.showContent(this.getDefaultDiv()); this.setEventTime(tb == 1 ? 'hide.end.ok' : 'hide.end.fail'); return tb; }; mbox.prototype.finalize = function() { this.setEventTime('finalize.start'); this.cancelTimeout(); if (this.getDefaultDiv() == null) { if (this.hb.force() != null) { this.setMessage('No default content, an empty one has been added'); } else { this.setMessage('Unable to locate mbox'); } } if (!this.activate()) { this.hide(); this.setEventTime('finalize.end.hide'); } this.setEventTime('finalize.end.ok'); }; mbox.prototype.cancelTimeout = function() { if (this.Mb) { clearTimeout(this.Mb); } if (this.Db != null) { this.Db.cancel(); } }; mbox.prototype.getDiv = function() { return this.wb; }; mbox.prototype.getDefaultDiv = function() { if (this.Kb == null) { this.Kb = this.hb.locate(); } return this.Kb; }; mbox.prototype.setEventTime = function(Qb) { this.Fb[Qb] = (new Date()).getTime(); }; mbox.prototype.getEventTimes = function() { return this.Fb; }; mbox.prototype.getImportName = function() { return this.ib; }; mbox.prototype.getURL = function() { return this.w.buildUrl(); }; mbox.prototype.getUrlBuilder = function() { return this.w; }; mbox.prototype.Rb = function(wb) { return wb.style.display != 'none'; }; mbox.prototype.Pb = function(wb) { this.Sb(wb, true); }; mbox.prototype.Ob = function(wb) { this.Sb(wb, false); }; mbox.prototype.Sb = function(wb, Tb) { wb.style.visibility = Tb ? "visible" : "hidden"; wb.style.display = Tb ? "block" : "none"; }; mboxOfferContent = function() { this.Jb = function() { }; }; mboxOfferContent.prototype.show = function(W) { var tb = W.showContent(document.getElementById(W.getImportName())); if (tb == 1) { this.Jb(); } return tb; }; mboxOfferContent.prototype.setOnLoad = function(Jb) { this.Jb = Jb; }; mboxOfferAjax = function(Nb) { this.Nb = Nb; this.Jb = function() { }; }; mboxOfferAjax.prototype.setOnLoad = function(Jb) { this.Jb = Jb; }; mboxOfferAjax.prototype.show = function(W) { var Ub = document.createElement('div'); Ub.id = W.getImportName(); Ub.innerHTML = this.Nb; var tb = W.showContent(Ub); if (tb == 1) { this.Jb(); } return tb; }; mboxOfferDefault = function() { this.Jb = function() { }; }; mboxOfferDefault.prototype.setOnLoad = function(Jb) { this.Jb = Jb; }; mboxOfferDefault.prototype.show = function(W) { var tb = W.hide(); if (tb == 1) { this.Jb(); } return tb; }; mboxCookieManager = function mboxCookieManager(g, Vb) { this.g = g; this.Vb = Vb == '' || Vb.indexOf('.') == -1 ? '' : '; domain=' + Vb; this.Wb = new mboxMap(); this.loadCookies(); }; mboxCookieManager.prototype.isEnabled = function() { this.setCookie('check', 'true', 60); this.loadCookies(); return this.getCookie('check') == 'true'; }; mboxCookieManager.prototype.setCookie = function(g, h, ab) { if (typeof g != 'undefined' && typeof h != 'undefined' && typeof ab != 'undefined') { var Xb = new Object(); Xb.name = g; Xb.value = escape(h); Xb.expireOn = Math.ceil(ab + new Date().getTime() / 1000); this.Wb.put(g, Xb); this.saveCookies(); } }; mboxCookieManager.prototype.getCookie = function(g) { var Xb = this.Wb.get(g); return Xb ? unescape(Xb.value) : null; }; mboxCookieManager.prototype.deleteCookie = function(g) { this.Wb.remove(g); this.saveCookies(); }; mboxCookieManager.prototype.getCookieNames = function(Yb) { var Zb = new Array(); this.Wb.each(function(g, Xb) { if (g.indexOf(Yb) == 0) { Zb[Zb.length] = g; } }); return Zb; }; mboxCookieManager.prototype.saveCookies = function() { var _b = new Array(); var ac = 0; this.Wb.each(function(g, Xb) { _b[_b.length] = g + '#' + Xb.value + '#' + Xb.expireOn; if (ac < Xb.expireOn) { ac = Xb.expireOn; } }); var bc = new Date(ac * 1000); document.cookie = this.g + '=' + _b.join('|') + '; expires=' + bc.toGMTString() + '; path=/' + this.Vb; }; mboxCookieManager.prototype.loadCookies = function() { this.Wb = new mboxMap(); var cc = document.cookie.indexOf(this.g + '='); if (cc != -1) { var dc = document.cookie.indexOf(';', cc); if (dc == -1) { dc = document.cookie.indexOf(',', cc); if (dc == -1) { dc = document.cookie.length; } } var ec = document.cookie.substring(cc + this.g.length + 1, dc).split('|'); var fc = Math.ceil(new Date().getTime() / 1000); for (var j = 0; j < ec.length; j++) { var Xb = ec[j].split('#'); if (fc <= Xb[2]) { var gc = new Object(); gc.name = Xb[0]; gc.value = Xb[1]; gc.expireOn = Xb[2]; this.Wb.put(gc.name, gc); } } } }; mboxSession = function(hc, ic, qb, jc, I) { this.ic = ic; this.qb = qb; this.jc = jc; this.I = I; this.kc = false; this.zb = typeof mboxForceSessionId != 'undefined' ? mboxForceSessionId : mboxGetPageParameter(this.ic); if (this.zb == null || this.zb.length == 0) { this.zb = I.getCookie(qb); if (this.zb == null || this.zb.length == 0) { this.zb = hc; this.kc = true; } } I.setCookie(qb, this.zb, jc); }; mboxSession.prototype.getId = function() { return this.zb; }; mboxSession.prototype.forceId = function(_) { this.zb = _; this.I.setCookie(this.qb, this.zb, this.jc); }; mboxPC = function(qb, jc, I) { this.qb = qb; this.jc = jc; this.I = I; this.zb = typeof mboxForcePCId != 'undefined' ? mboxForcePCId : I.getCookie(qb); if (this.zb != null) { I.setCookie(qb, this.zb, jc); } }; mboxPC.prototype.getId = function() { return this.zb; }; mboxPC.prototype.forceId = function(_) { if (this.zb != _) { this.zb = _; this.I.setCookie(this.qb, this.zb, this.jc); return true; } return false; }; mboxGetPageParameter = function(g) { var tb = null; var lc = new RegExp(g + "=([^\&]*)"); var mc = lc.exec(document.location); if (mc != null && mc.length >= 2) { tb = mc[1]; } return tb; }; mboxSetCookie = function(g, h, ab) { return mboxFactoryDefault.getCookieManager().setCookie(g, h, ab); }; mboxGetCookie = function(g) { return mboxFactoryDefault.getCookieManager().getCookie(g); }; mboxCookiePageDomain = function() { var Vb = (/([^:]*)(:[0-9]{0,5})?/).exec(document.location.host)[1]; var nc = /[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/; if (!nc.exec(Vb)) { var oc = (/([^\.]+\.[^\.]{3}|[^\.]+\.[^\.]+\.[^\.]{2})$/).exec(Vb); if (oc) { Vb = oc[0]; } } return Vb ? Vb : ""; }; mboxShiftArray = function(pc) { var tb = new Array(); for (var j = 1; j < pc.length; j++) { tb[tb.length] = pc[j]; } return tb; }; mboxGenerateId = function() { return (new Date()).getTime() + "-" + Math.floor(Math.random() * 999999); }; mboxScreenHeight = function() { return screen.height; }; mboxScreenWidth = function() { return screen.width; }; mboxBrowserWidth = function() { return (window.innerWidth) ? window.innerWidth : document.documentElement ? document.documentElement.clientWidth : document.body.clientWidth; }; mboxBrowserHeight = function() { return (window.innerHeight) ? window.innerHeight : document.documentElement ? document.documentElement.clientHeight : document.body.clientHeight; }; mboxBrowserTimeOffset = function() { return -new Date().getTimezoneOffset(); }; mboxScreenColorDepth = function() { return screen.pixelDepth; }; if (typeof mboxVersion == 'undefined') { var mboxVersion = 39; var mboxFactories = new mboxMap(); var mboxFactoryDefault = new mboxFactory('carbonite.tt.omtrdc.net', 'carbonite', 'default'); }; if (mboxGetPageParameter("mboxDebug") != null || mboxFactoryDefault.getCookieManager().getCookie("debug") != null) { setTimeout(function() { if (typeof mboxDebugLoaded == 'undefined') { alert('Could not load the remote debug.\nPlease check your connection' + ' to Test&amp;Target servers'); } }, 60 * 60); document.write('<' + 'scr' + 'ipt language="Javascript1.2" src=' + '"http://admin9.testandtarget.omniture.com/admin/mbox/mbox_debug.jsp?mboxServerHost=carbonite.tt.omtrdc.net' + '&clientCode=carbonite"><' + '\/scr' + 'ipt>'); }; mboxScPluginFetcher = function(b, qc) { this.b = b; this.qc = qc; }; mboxScPluginFetcher.prototype.rc = function(w) { w.setBasePath('/m2/' + this.b + '/sc/standard'); this.sc(w); var e = w.buildUrl(); e += '&scPluginVersion=1'; return e; }; mboxScPluginFetcher.prototype.sc = function(w) { var tc = ["dynamicVariablePrefix", "visitorID", "vmk", "ppu", "charSet", "visitorNamespace", "cookieDomainPeriods", "cookieLifetime", "pageName", "currencyCode", "variableProvider", "channel", "server", "pageType", "transactionID", "purchaseID", "campaign", "state", "zip", "events", "products", "linkName", "linkType", "resolution", "colorDepth", "javascriptVersion", "javaEnabled", "cookiesEnabled", "browserWidth", "browserHeight", "connectionType", "homepage", "pe", "pev1", "pev2", "pev3", "visitorSampling", "visitorSamplingGroup", "dynamicAccountSelection", "dynamicAccountList", "dynamicAccountMatch", "trackDownloadLinks", "trackExternalLinks", "trackInlineStats", "linkLeaveQueryString", "linkDownloadFileTypes", "linkExternalFilters", "linkInternalFilters", "linkTrackVars", "linkTrackEvents", "linkNames", "lnk", "eo"]; for (var j = 0; j < tc.length; j++) { this.uc(tc[j], w); } for (var j = 1; j <= 50; j++) { this.uc('prop' + j, w); this.uc('eVar' + j, w); this.uc('hier' + j, w); } }; mboxScPluginFetcher.prototype.uc = function(g, w) { var h = this.qc[g]; if (typeof (h) === 'undefined' || h === null || h === '') { return; } w.addParameter(g, h); }; mboxScPluginFetcher.prototype.cancel = function() { }; mboxStandardScPluginFetcher = function(b, qc) { mboxScPluginFetcher.call(this, b, qc); }; mboxStandardScPluginFetcher.prototype = new mboxScPluginFetcher; mboxStandardScPluginFetcher.prototype.getType = function() { return 'standard'; }; mboxStandardScPluginFetcher.prototype.fetch = function(w) { w.setServerType(this.getType()); var e = this.rc(w); document.write('<' + 'scr' + 'ipt src="' + e + '" language="JavaScript"><' + '\/scr' + 'ipt>'); }; mboxAjaxScPluginFetcher = function(b, qc) { mboxScPluginFetcher.call(this, b, qc); }; mboxAjaxScPluginFetcher.prototype = new mboxScPluginFetcher; mboxAjaxScPluginFetcher.prototype.fetch = function(w) { w.setServerType(this.getType()); var e = this.rc(w); this.x = document.createElement('script'); this.x.src = e; document.body.appendChild(this.x); }; mboxAjaxScPluginFetcher.prototype.getType = function() { return 'ajax'; }; function mboxLoadSCPlugin(qc) { if (!qc) { return null; } qc.m_tt = function(qc) { var vc = qc.m_i('tt'); vc.G = true; vc.b = 'carbonite'; vc['_t'] = function() { if (!this.isEnabled()) { return; } var W = this.xc(); if (W) { var Lb = mboxFactoryDefault.isDomLoaded() ? new mboxAjaxScPluginFetcher(this.b, this.s) : new mboxStandardScPluginFetcher(this.b, this.s); W.setFetcher(Lb); W.load(); } }; vc.isEnabled = function() { return this.G && mboxFactoryDefault.isEnabled(); }; vc.xc = function() { var Z = this.yc(); var wb = document.createElement('DIV'); return mboxFactoryDefault.create(Z, new Array(), wb); }; vc.yc = function() { var zc = this.s.events && this.s.events.indexOf('purchase') != -1; return 'SiteCatalyst: ' + (zc ? 'purchase' : 'event'); }; }; return qc.loadModule('tt'); }; var mboxSessionKeyword = "OFM";
function mboxAppendAnchorTags() {
    var anchorTags = document.getElementsByTagName('a');
    for (i = 0; i < anchorTags.length; i++) {
        if (anchorTags[i].href.indexOf(mboxSessionKeyword) != -1) {
            anchorTags[i].href = anchorTags[i].href.replace(
 mboxSessionKeyword, "mboxSession=" + mboxFactoryDefault.getSessionId().getId());
        }
    }
}

function mboxAppendSession() {
    mboxAppendAnchorTags();
}

var mboxTimeImage = new Image();

mboxFactoryDefault.addOnLoad(mboxAppendSession);