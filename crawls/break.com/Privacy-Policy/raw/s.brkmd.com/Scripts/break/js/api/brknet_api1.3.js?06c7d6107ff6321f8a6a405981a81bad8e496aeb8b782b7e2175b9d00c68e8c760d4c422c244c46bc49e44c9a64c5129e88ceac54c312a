

(function () {
    /* ================================================================================
    Helper classes and functions
    ================================================================================ */
    // String builder
    /* Creates a string
    ex.
    var longStr = new Sb();
    longStr.append('long').append('string').toStr() == 'longstring';
    */
    function Sb() {
        var strs = [];

        this.append = function (val) {
            strs.push(val);
            return this;
        };

        this.toStr = function () {
            return strs.join('');
        };
    }

    // Querystring Params
    /* Gets the query string param by key
    ex. 
    var url = 'http://break.com?id=343'
    var id = new Qp(url).get('id');
    */
    function Qp(url) {

        url = url.replace(/&amp;/g, '&');
        var pairs = [];

        function init() {
            var s = url.split('?');
            if (s.length != 2) {
                return;
            }
            pairs = s[1].split('&');
        }
        init();

        this.length = function () {
            return pairs.length;
        };

        this.get = function (key) {

            var key = key.toLowerCase();

            for (var i = 0, l = pairs.length; i < l; i++) {
                var pair = pairs[i].split('=');

                if (pair[0].toLowerCase() === key) {
                    return pair[1];
                }
            }

            return undefined;
        };
    }

    // Cookie helper function to create/modify/delete cookie
    var Cookie = {

        get: function (key) {
            var cKey = key + '=', ca = document.cookie.split(';');

            for (var i = 0, l = ca.length; i < l; i++) {
                var c = ca[i];

                while (c.charAt(0) === ' ') {
                    c = c.substring(1, c.length);
                }

                if (c.indexOf(cKey) === 0) {
                    return c.substring(cKey.length, c.length);
                }
            }

            return undefined;
        },

        set: function (key, val, days) {
            var expires = '';

            if (days) {
                var date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = '; expires=' + date.toGMTString();
            }

            document.cookie = key + "=" + val + expires + "; path=/;domain=.break.com";
        },

        remove: function (key) {
            this.set(key, '', -1);
        }
    };


    function load(src, remove, cb) {
        var d = document, h = d.getElementsByTagName('head')[0], s = d.createElement('script');
        s.type = 'text/javascript';
        s.src = src;
        s.async = true;

        s.onreadystatechange = s.onload = function () {

            var r = s.readyState;

            if (!r || /loaded|complete/.test(r)) {

                if (typeof (cb) === 'function') {
                    cb();
                }

                if (remove) {
                    // help give browsers a chance to cache script
                    var wait = setTimeout(function () {
                        h.removeChild(s);
                        clearTimeout(wait);
                    }, 1);
                }

                s.onreadystatechange = s.onload = null;
            }
        };

        h.appendChild(s);
    };


    /* ================================================================================
    Create BRK api object
    ================================================================================ */
    window.BRK = {
        AuthServer: (navigator.userAgent.toLowerCase().indexOf('iphone') > -1 || navigator.userAgent.toLowerCase().indexOf('ipad') > -1 || navigator.userAgent.toLowerCase().indexOf('ipod') > -1) ? 'http://auth.break.com' : 'http://auth.break.com', // TODO: switch to https
        RecaptchaKey: '6LeUsL0SAAAAAHbDdYn-j8xSPvu0uJAJBUyh1lGk',

        // try to bypass 3rd party cookie restriction
        _prepSessionLoaded: false,
        _prepSession: function () {
            //prepSession is no longer needed since we post to auth.break.com. Doing a temporary return for now.
            if (/Trident\/5./i.test(navigator.userAgent)) {
                return;
            }
            var d = document, body = d.getElementsByTagName('body')[0];

            var form = d.createElement('form');
            form.id = form.name = '__brk_sessionform';
            form.enctype = 'application/x-www-form-urlencoded';
            form.action = BRK.AuthServer + '/auth/prepsession?' + parseInt(Math.random() * 99999999999);
            form.method = 'GET';
            form.target = '__brk_sessionframe';
            body.appendChild(form);

            var frame = d.createElement('iframe');
            frame.id = frame.name = '__brk_sessionframe';
            frame.src = BRK.AuthServer + '/blank.html';
            frame.style.display = 'none';
            frame.onload = function () {

                if (!BRK._prepSessionLoaded) {
                    BRK._prepSessionLoaded = true;
                    d.__brk_sessionform.submit();
                }

            };
            body.appendChild(frame);
        }
    };


    // Boot strapper. Loads up needed dependencies.
    function boot(cb) {
        var d = document, scripts = d.getElementsByTagName('script'), head = d.getElementsByTagName('head')[0];
        if (window.location.href.toLowerCase().indexOf('break.com') > -1) { //inline the api settings, for use with combres
            BRK.siteId = 13;
            BRK.fbAppId = 376604520810;
        }
        else {      //get api settings from the JS declaration via querystring, if js is defined inpage without combres
            var params = new Qp(scripts[scripts.length - 1].src);
            if (params.length() != 2) {
                var script = null;
                for (var i = 0; i < scripts.length; i++) {
                    var str = scripts[i].src;

                    var patt1 = /brknet_api/gi;
                    if (str.match(patt1)) {
                        script = scripts[i];
                    }
                }
                params = new Qp(script.src);
                if (params.length() != 2) {
                    return;
                }
            }
            // set the rest of the api settings
            BRK.siteId = params.get('id');
            BRK.fbAppId = params.get('fbapi');
        }

        BRK._prepSession();
        // load up assets
        var hatCss = d.createElement('link');
        hatCss.href = 'http://s.brkmd.com/Content/break/css/api/brknet1.1.css';
        hatCss.rel = 'stylesheet';
        head.appendChild(hatCss);

        // bootstrap facebook
        var fbRoot = d.createElement('div');
        fbRoot.setAttribute('id', 'fb-root');
        d.getElementsByTagName('body')[0].appendChild(fbRoot);

        if (typeof FB === 'undefined') {
            var fb = d.createElement('script');
            fb.async = true;
            fb.src = d.location.protocol + '//connect.facebook.net/en_US/all.js';
            fbRoot.appendChild(fb);

            window.fbAsyncInit = function () {
                //BRK.fbAppId = params.get('fbapi');
                FB.init({ appId: BRK.fbAppId, status: true, cookie: true, xfbml: true, oauth: true });
                if (typeof brknetFBReady === 'function') {
                    window.brknetFBReady();
                }
            };
        }
        else {
            window.brknetFBReady();
        }


        // bootstrap json2
        var jsonLoaded, xdm;
        if (typeof JSON === 'undefined') {
            load('//media1.break.com/break/js/json2.js', false, function () {
                jsonLoaded = true;
            });
        }
        else {
            jsonLoaded = true;
        }

        if (typeof easyXDM === 'undefined') {
            load('//media1.break.com/break/js/api/easyXDM/easyXDM.min.js', true, function () {
                xdm = easyXDM.noConflict("BRKNET");
            });
        }
        else {
            xdm = easyXDM.noConflict("BRKNET");
        }

        // bootstrap jquery
        if (typeof jQuery === 'undefined') {
            load('//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js', true, function () {
                var wait = setInterval(function () {
                    if (jsonLoaded && typeof (xdm) != 'undefined') {
                        //BRK.siteId = params.get('id');
                        //BRK.fbAppId = params.get('fbapi');
                        cb(xdm, jQuery.noConflict(true));
                        clearInterval(wait);
                    }
                }, 10);

            });
        }
        else {
            var wait = setInterval(function () {
                if (jsonLoaded && typeof (xdm) != 'undefined') {
                    //BRK.siteId = params.get('id');
                    //BRK.fbAppId = params.get('fbapi');
                    cb(xdm, jQuery);
                    clearInterval(wait);
                }
            }, 10);
        }
    }

    // Execute boot strapper and setup api environment
    boot(function (xdm, $) {

        BRK.overlay = {

            timeout: undefined,

            reposition: function (modal) {
                var win = $(window);
                var width = modal.overlay.find('#bmn-overlay-inner > div').outerWidth();
                if (width == 0 || width == null) {
                    width = 695;
                    modal.overlay.find('#bmn-overlay-inner').addClass('no-style');
                }
                var left = parseInt((win.width() * .5) - (width * .5));

                if (left < 0) {
                    left = 0;
                }
                modal.overlay.css({ width: width, top: win.scrollTop() + 100, left: left });

                // set size of mask
                var height = win.height(), doc = $(document), width = win.width();
                var modalHeight = modal.overlay.outerHeight() + 150, modalWidth = modal.overlay.outerWidth() + 80;

                if (height < doc.height()) {
                    height = doc.height();
                }

                if (height < modalHeight) {
                    height = modalHeight;
                }

                if (width < modalWidth) {
                    width = modalWidth;
                }

                modal.mask.height(height).width(width);
            },

            onResize: function () {
                var modal = this.modal();
                if (!modal.overlay.is(':visible')) {
                    return;
                }

                this.reposition(modal);
            },

            // TODO: this is a temp solution, people should rely on the events once thats figured out...
            _onClose: undefined,
            onClose: function () {
                window.modalActive = false;
                if ($.isFunction(this._onClose)) {
                    this._onClose();
                }
            },

            modal: function () {
                var mask = $('#bmn-overlay-mask');
                if (mask.length == 0) {
                    mask = $('<div id="bmn-overlay-mask"></div>').appendTo('body')
                        .hide()
                        .css('opacity', 0.5)
                        .click(function () {
                            BRK.overlay.hide();
                        });

                    $(window).resize(function () {
                        clearTimeout(BRK.overlay.timeout);
                        BRK.overlay.timeout = setTimeout(function () {
                            BRK.overlay.onResize();
                        }, 50);
                    });
                }

                var overlay = $('#bmn-overlay');
                if (overlay.length == 0) {

                    var html = '<div id="bmn-overlay"><div id="bmn-overlay-inner" class="bmn-cr-account-form hml-portal-wrap"></div><span class="bmn-spr hml-overlay-close">X</span></div>';

                    overlay = $(html).appendTo('body')
                        .find('.hml-overlay-close').click(function () {
                            BRK.overlay.hide();
                            return false;
                        }).end();
                }

                return { overlay: overlay, mask: mask }
            },

            show: function (elm, onClose) {
                window.modalActive = true;
                if (typeof swfobject != 'undefined'
						&& swfobject.getObjectById('video-player-content') != null
						&& typeof swfobject.getObjectById('video-player-content').brPlayerPause === 'function') {
                    swfobject.getObjectById('video-player-content').brPlayerPause();
                }
                // TODO: this is a temp solution, people should rely on the events once thats figured out...
                this._onClose = onClose;

                var modal = this.modal(), content = modal.overlay.find('#bmn-overlay-inner');

                var elmType = typeof (elm);
                if (elmType === 'string') {
                    content.html(elm);
                } else if (elmType !== 'undefined') {
                    content.empty().append(elm);
                }

                //BRK.trigger('before-show-modal');
                // Firing off host site modal elem handlers for now, 1 of 2
                if ($.isFunction(window.__trkBeforeShow)) {
                    $('embed,object,select,canvas').css('visibility', 'hidden');
                    window.__trkBeforeShow();
                }

                this.reposition(modal);
                modal.mask.fadeIn();
                modal.overlay.fadeIn();
                $(document).scrollTop($('#bmn-overlay').offset().top - 100);
                if ($(window).width() <= 960) {
                    $(document).scrollLeft($('#bmn-overlay').offset().left - 20);
                }
                //BRK.trigger('show-modal');
            },

            hide: function () {
                if (typeof swfobject != 'undefined'
						&& swfobject.getObjectById('video-player-content') != null
						&& typeof swfobject.getObjectById('video-player-content').brPlayerPlay === 'function') {
                    swfobject.getObjectById('video-player-content').brPlayerPlay();
                }
                var modal = this.modal();

                this.onClose();
                // TODO: trigger hide-modal event

                // Firing off host site modal elem handlers for now, 2 of 2
                if ($.isFunction(window.__trkBeforeHide)) {
                    $('embed,object,select,canvas').css('visibility', 'visible');
                    window.__trkBeforeHide();
                }

                modal.overlay.fadeOut(400, function () {
                    var elem = BRK.overlay.modal().overlay;
                    if (elem.hasClass('captcha')) {
                        elem.removeClass('captcha');
                    }
                    $(this).find('#bmn-overlay-inner').removeClass('no-style');
                });
                modal.mask.fadeOut(400);
                $('#myytplayer').css('visibility', 'visible');
            }
        };


        /* ================================================================================

        ================================================================================ */
        BRK.comm = {
            response: function (response) {
                if ($.isFunction(this._cb)) {
                    this._cb(JSON.parse(response));
                }
            },

            _cb: undefined,
            submit: function (message, cb) {
                this._cb = cb;
                this.socket.postMessage(JSON.stringify(message));
            },
            getSubmit: function (message, cb) {
                $.get(message.action, cb);
            },

            socket: undefined,
            init: function (initCb) {
                if (typeof (BRK.AuthServer) === 'undefined') {
                    BRK.AuthServer = (navigator.userAgent.toLowerCase().indexOf('iphone') > -1 || navigator.userAgent.toLowerCase().indexOf('ipad') > -1 || navigator.userAgent.toLowerCase().indexOf('ipod') > -1) ? 'http://auth.break.com' : 'http://auth.break.com';
                }
                this.socket = new xdm.Socket({
                    remote: BRK.AuthServer.concat((navigator.userAgent.toLowerCase().indexOf('iphone') > -1 || navigator.userAgent.toLowerCase().indexOf('ipad') > -1 || navigator.userAgent.toLowerCase().indexOf('ipod') > -1) ? '/provider.html' : '/provider2.html'), //Check if we need to post to https or not.
                    onMessage: function (message, origin) {
                        BRK.comm.response(message);
                    },
                    onReady: function (message, origin) {
                        BRK.api.getSession(initCb);
                    }
                });
            }
        };

        /* ================================================================================
           
        ================================================================================ */
        BRK.api = {

            openPixel: function (trackViewSrc) {

                if ($("#__brk_tracking").length == 0) {
                    var trackingDiv = document.createElement('div');
                    trackingDiv.id = '__brk_tracking';
                    trackingDiv.width = 0;
                    trackingDiv.height = 0;
                    trackingDiv.style.display = "none";
                    document.body.appendChild(trackingDiv);
                }

                var trackPage = document.createElement('img');
                trackPage.id = 'brk_track_' + Math.random() * 111;
                trackPage.src = trackViewSrc + '&rndmn=' + Math.random() * 111;
                trackPage.width = 0;
                trackPage.height = 0;
                trackPage.style.display = "none";
                document.getElementById('__brk_tracking').appendChild(trackPage);
            },

            fbLogout: function () {
                try {
                    // Call FB logout
                    FB.logout();

                } catch (e) {

                }
            },

            fbSilentLogon: function () {
                var newsLetterOptInOffered = true;
                if ($('#bmn-register-breakdown-modal').html() == null) {
                    newsLetterOptInOffered = false;
                }
                var newsLetter = false;
                if (typeof $('#bmn-register-breakdown-modal')[0] != 'undefined') {
                    newsLetter = $('#bmn-register-breakdown-modal')[0].checked;
                }

                FB.api('/me?fields=id,name,first_name,last_name,picture,email,birthday,gender,location', function (apiResp) {
                    FB.api('/me/friends', function (apiFriendsResp) {
                        var avatarUrl = '';
                        if (typeof apiResp.picture === 'undefined') {
                            return;
                        }
                        else if (typeof apiResp.picture.url != 'undefined') {
                            avatarUrl = apiResp.picture.url;
                        }
                        else if (typeof apiResp.picture.data.url != 'undefined') {
                            avatarUrl = apiResp.picture.data.url;
                        }
                        else if (typeof apiResp.picture === "string") {
                            avatarUrl = apiResp.picture;
                        }
                        var fbLocationName = '';
                        if (typeof apiResp.location != 'undefined' && typeof apiResp.location.name != 'undefined') {
                            fbLocationName = apiResp.location.name;
                        }
                        var numberOfFriends = 0;
                        if (typeof apiFriendsResp.data != 'undefined') {
                            numberOfFriends = apiFriendsResp.data.length;
                        }
                        //Handle case where user is FB Connected but does not share email. Prompt user for email permission once every 30 days if not registered.
                        if (apiResp.email === 'undefined' || apiResp.email == null) {
                            if (!Cookie.get('brk_nr')) {
                                Cookie.set('brk_nr', 'true', 30);
                                BRK.api.fbLogon();
                            }
                        }
                        else {
                            Cookie.remove('brk_nr')
                            var user = {
                                FacebookId: apiResp.id,
                                Email: apiResp.email,
                                FirstName: apiResp.first_name,
                                LastName: apiResp.last_name,
                                BornDate: new Date(Date.parse(apiResp.birthday)),
                                AvatarUrl: avatarUrl,
                                OccasionalOffers: false, // hardcoded for now
                                NewsLetter: newsLetter,
                                AppId: BRK.siteId,
                                Gender: apiResp.gender,
                                City: fbLocationName,
                                NumberOfFriends: numberOfFriends,
                                NewsLetterOptInOffered: newsLetterOptInOffered
                            };

                            var message = { method: 'post', payload: { response: JSON.stringify({ User: user }) }, action: BRK.AuthServer + '/auth/fblogon' };

                            BRK.comm.submit(message, function (response) {
                                if (response.Status === "success") {
                                    if (response.User != null && response.User.Id > 0) {
                                        if ($.isFunction(window.brknetPostFbLogon) && window.location.toString().indexOf('info.break.com') == -1) {
                                            window.brknetPostFbLogon(response.User);
                                            BRK.api.setauthcookie(response.User);
                                        }
                                        if (response.User.NewsLetterOptInOffered) {
                                            BRK.hat.showNewsletterModal();
                                        }
                                        //$.get('http://apex-ad.com/www/delivery/lg.php?bannerid=1612&cat_id=4260'); // fb login success tracker
                                    }
                                    else if (response.User != null && response.User.Id == 0) {
                                        //ON A FAILURE from backend do not refresh the screen, since this might end up in continuous refresh loop for user.

                                    }
                                    else {
                                        BRK.api.reload();

                                        //$.get('http://apex-ad.com/www/delivery/lg.php?bannerid=1612&cat_id=4261'); // fb login error tracker
                                    }
                                }
                                else {
                                    BRK.overlay.show("<h4>" + response.Status + "</h4>" + "<p>" + response.Message + "</p>");
                                    BRK.api.fbLogout();
                                }
                            });
                        }

                    });

                }, { scope: 'user_birthday,email,publish_actions' });
            },
            fbLogon: function () {
                FB.login(function (fbResp) {
                    if (!fbResp.authResponse || fbResp.status === 'unkown') {
                        return;
                    }
                    BRK.api.fbSilentLogon();
                }, { scope: 'user_birthday,email,publish_actions' });
            },
            logon: function (email, password, rememberMe, cb) {
                BRK.comm.submit({ method: 'post', payload: { email: email, password: password }, action: BRK.AuthServer + '/auth/logon' }, function (response) {
                    if ($.isFunction(cb)) {
                        cb(response);
                    }

                    if (response.Status && response.Status === 'success') {
                        // set or delete 'remember me' cookie
                        if (rememberMe === 'checked') {
                            Cookie.set('brk_hostsite_RM', response.User.Email, 365);
                        }
                        else {
                            Cookie.remove('brk_hostsite_RM');
                        }

                        if ($.isFunction(window.brknetLoginExecuted) && window.location.toString().indexOf('info.break.com') == -1) {
                            BRK.api.setSession(response.User);
                            window.brknetLoginExecuted(response.User);
                            BRK.api.setauthcookie(response.User);
                        }
                        else {
                            BRK.api.reload();
                        }
                    }
                });
            },
            setauthcookie: function (responseUser) {
                var requestMethod = (navigator.userAgent.toLowerCase().indexOf('safari') > -1) ? "get" : "post";
                // set brk_auth cookie?
                if (responseUser) {
                    // check if authorization cookie exists, if not create it
                    if (!Cookie.get("brk_auth")) {
                        BRK.comm.submit({ method: requestMethod, payload: {}, action: BRK.AuthServer + '/auth/GetAuthorizationToken' }, function (authResponse) {
                            if (authResponse) {
                                //alert(response.encryptedAccessToken);
                                Cookie.set("brk_auth", authResponse.encryptedAccessToken, 0);
                            }
                        });
                    }
                }
                else {
                    Cookie.remove("brk_auth");
                }
            },
            logout: function () {

                BRK.api.fbLogout();

                BRK.comm.submit({ method: 'post', payload: {}, action: BRK.AuthServer + '/auth/logout' }, function (response) {

                    if ($.isFunction(window.brknetPostLogout)) {
                        window.brknetPostLogout(response);
                    }
                    else {
                        var wait = setTimeout(function () {
                            BRK.api.reload();
                        }, 500);
                    }
                });
            },

            register: function (user, successCb, errorCb, hasCaptcha) {
                var CptResponse = '', CptChallenge = '';
                if (hasCaptcha) {
                    CptResponse = Recaptcha.get_response();
                    CptChallenge = Recaptcha.get_challenge();
                }
                var message = { method: 'post', payload: { response: JSON.stringify({ User: user, CptResponse: CptResponse, CptChallenge: CptChallenge }) }, action: BRK.AuthServer + '/auth/register' };

                BRK.comm.submit(message, function (response) {
                    if (response.Status && response.Status === 'error') {

                        if ($.isFunction(errorCb)) {
                            errorCb(response);
                        }

                        return;
                    }

                    if ($.isFunction(successCb)) {
                        successCb(response);
                    }
                });
            },

            verifyUser: function (username, regcode, cb) {
                BRK.comm.submit({ method: 'post', payload: { username: username, regcode: regcode, siteid: BRK.siteId }, action: BRK.AuthServer + '/auth/verify' }, function (response) {
                    if ($.isFunction(cb)) {
                        cb(response);
                    }
                });
            },

            getSession: function (cb) {
                var requestMethod = (navigator.userAgent.toLowerCase().indexOf('safari') > -1) ? "get" : "post";

                BRK.comm.submit({ method: requestMethod, payload: {}, action: BRK.AuthServer + '/auth/isloggedin' }, function (response) {
                    BRK.api.setSession(response.User);

                    if ($.isFunction(cb)) {
                        cb(response);
                    }

                    if ($.isFunction(window.brknetPostSession)) {
                        window.brknetPostSession(response);
                    }
                    BRK.api.setauthcookie(response.User);
                });
            },

            isLoggedIn: function () {

                // session obj got cleared out for some reason so we need to get it from the cookie
                if (!this.session) {
                    try {
                        this.session = JSON.parse(Cookie.get(this.sessionKey));
                    } catch (e) { }
                }

                if (this.session) {
                    return true;
                }

                return false;
            },

            sessionKey: 'brk_net_' + BRK.siteId,

            // will set or clear currently logged in user 
            setSession: function (user) {
                this.session = user;

                if (user) {
                    Cookie.set(this.sessionKey, JSON.stringify(user), 90); // set for 3 months
                } else {
                    Cookie.remove(this.sessionKey);
                    if ($.isFunction(window.brknetClearSession)) {
                        window.brknetClearSession();
                    }
                }
            },

            session: undefined,

            reload: function () {
                var currUrl = window.location.toString();
                var splitUrl = currUrl.split('#');
                window.location = splitUrl[0];
            }
        };


        /* ================================================================================

        ================================================================================ */
        BRK.hat = {
            usernameRegEx: /^[\w\-_]{7,20}$/i,
            emailRegEx: /^[a-zA-Z0-9]+([_\.-]?[a-zA-Z0-9]+)*@[a-zA-Z0-9]+([\.-]?[a-zA-Z0-9]+)*(\.[a-zA-Z]{2,4})+$/i,
            slidesshowTimer: "featuredlist",
            fadeSpeed: 1000,
            clickFadeSpeed: 250,

            globalVars: {
                slideshowDelay: 10000,
                pageNum: 1,
                activeLI: 0,
                totalLI: 0,
                endOfList: false
            },

            fbConnect: function () {
                if (typeof BRK.api.session != "undefined" && BRK.api.session != null) {
                    var num = parseInt(BRK.api.session.Id);
                    if (num > 0) {
                        return;
                    }
                }

                BRK.api.fbSilentLogon();

            },

            setupLogin: function () {

                if (BRK.api.isLoggedIn()) {
                    if (FB.getLoginStatus) {
                    }

                    var sess = BRK.api.session;

                    if ($.isFunction(window.brknetIsLoggedIn)) {
                        window.brknetIsLoggedIn(sess);
                    }
                    else {
                        $.getJSON(BRK.AuthServer + '/auth/log?callback=?&type=brknetIsLoggedIn-undefined&url=' + window.location + '__username' + sess.Username);
                    }

                    return;
                }

                if ($.isFunction(window.brknetNotLoggedIn)) {
                    window.brknetNotLoggedIn();
                }

            },

            verifyRegistration: function () {
                var params = new Qp(window.location.toString()), user = params.get('user'), verify = params.get('verify');
                if (user && verify) {
                    BRK.api.verifyUser(user, verify, function (resp) {
                        if (resp.Status && resp.Status === 'error') {
                            alert("We were unable to verify your account, please try again");
                        } else {
                            if (!resp.User)  //if user is null but verified show modal dialog
                            {
                                BRK.hat.showConfirmedModal();
                            }
                            else if (resp.User != null) {
                                if ($.isFunction(window.brknetPostVerify)) {
                                    window.brknetPostVerify(resp.User);
                                }
                            }
                        }
                    });
                }
            },

            checkFieldHasData: function (elem) {
                var elem = $(elem), valid = $.trim(elem.val()) !== '';
                return valid;
            },

            showRegModal: function () {
                var registrationReturnUrl = window.location.href;
                var html = ' <div class="modal-box modal-login modal-reg"> \
								<div class="modal-content clearfix"> \
									<hgroup> \
										<h1>Sign up with Break</h1> \
									</hgroup> \
									<p class="txt">Reasons to sign up:</p> \
									<ul> \
										<li>Share awesome with your friends</li> \
										<li>Upload your videos</li> \
										<li>Be the first to spot trending videos and photos</li> \
										<li>Add Break to your Facebook Timeline</li> \
									</ul> \
									<div class="log-fb-button"><a id="bmn-fb-login-lb">Sign up using Facebook</a></div> \
									<p class="link"><a href="http://www.break.com/user/register?registrationReturnUrl=' + registrationReturnUrl + '">Or, continue signing up without Facebook »</a></p> \
								</div> \
							</div>';

                var reg = $(html);
                BRK.hat.bindRegEvents(BRK.overlay.modal().overlay);
                BRK.overlay.show(reg, function () {
                    $('.modal-box').html('');
                });

            },

            showAfterRegModal: function () {
                var html = '<div class="modal-box modal-forgot-password modal-forgot-password-ok"><div class="modal-content clearfix"><hgroup><h1>Check your email</h1><h2>We\'ve sent a confirmation email to the address you provided.</h2><h2>Please check your email and click on the link provided to confirm you\'re human.</h2></hgroup></div></div>'
                BRK.overlay.show(html, function () {
                    var params = new Qp(window.location.href);
                    var registrationReturnUrl = params.get('registrationReturnUrl');
                    if (typeof registrationReturnUrl == "undefined" || registrationReturnUrl == null || registrationReturnUrl == "") {
                        registrationReturnUrl = "http://www.break.com/";
                    }
                    window.location = registrationReturnUrl;
                });
            },

            showConfirmedModal: function () {
                var html = '<div class="modal-box modal-forgot-password modal-forgot-password-ok"><div class="modal-content clearfix"><hgroup><h1>Congratulations, you\'re human!</h1><h2>Your Break Media account has been confirmed!</h2></hgroup></div></div>'

                BRK.overlay.show(html, function () {
                    window.location = 'http://www.break.com/';
                });
            },

            showCaptchaModal: function (user) {

                var html = ' <div class="modal-box modal-login modal-reg modal-captcha"> \
								<form id="bmn-captcha-form" class="s-clear">\
									<div class="modal-content clearfix"> \
										<hgroup> \
											<h1>Sign up with Break</h1> \
										</hgroup> \
										<p><span style="color:#2a2a2a;">Loading...</span></p> \
										<ul class="s-clear" style="visibility:hidden;"> \
											<li id="hml-captcha-wrap"> \
												<div id="brk_captcha_img"><!--captcha--></div> \
											</li> \
											<li><div class="bmn-form-validation bmn-form-val-thin error bmn-val" id="bmn-create-captcha-validation"> \
												<span class="bmn-spr-y bmn-validation-icon"></span> \
												<span class="bmn-form-validation-msg">Incorrect Captcha</span> \
											</div></li> \
											<li> \
												<span class="bmn-btn-wrap"><button id="bmn-captcha-sign-in-btn" class="bmn-btn-lrg form-item-submit-button" type="button">Sign In!</button></span> \
											</li> \
										</ul> \
									</div> \
								</form> \
							</div>';

                BRK.overlay.modal().overlay.addClass('captcha'); // may need to provide for removing this if the other modals can be invoked *after* this one

                BRK.overlay.show(html, function () {
                    // fired on click of the close sequence, not at end
                });

                load('http://www.google.com/recaptcha/api/js/recaptcha_ajax.js', false, function () {

                    // Create captcha
                    Recaptcha.create(BRK.RecaptchaKey, 'brk_captcha_img', { theme: 'white', callback: function () {
                        $('#bmn-captcha-form').find('p').addClass('callout').html('Prove you\'re human and fill this out').next().css('visibility', 'visible');
                    }
                    });

                });

            },

            showLoginModal: function () {
                var emailVal = (Cookie.get('brk_hostsite_RM') !== undefined) ? Cookie.get('brk_hostsite_RM') : '', checkboxVal = (emailVal !== '') ? ' checked="checked"' : '';
                var $css;
                if (emailVal) {
                    $css = ' style="display:none;" '
                } else {
                    $css = '';
                }
                var html = ' <div class="modal-box modal-login"> \
								<div class="modal-content clearfix"> \
									<form class="s-clear" id="bmn-create-account-form"> \
										<section class="left"> \
											<hgroup> \
												<h1>Log In with Facebook</h1> \
												<h2>Recommended for instant log in</h2> \
											</hgroup> \
											<div class="log-fb-button"><a id="bmn-sigin-fb-login-lb">Log In with Facebook</a></div> \
											<ul> \
												<li>Share awesome with your friends</li> \
												<li>Upload your videos</li> \
												<li>Be the first to spot trending videos and photos</li> \
												<li>Add Break to your Facebook Timeline</li> \
											</ul> \
										</section> \
										<section class="right"> \
											<hgroup> \
												<h1>Log In with Break</h1> \
												<h2>Login without using Facebook</h2> \
											</hgroup> \
											<div class="form-item-box form-item-mail" id="login-email"> \
												<label for="bmn-signin-email" class="form-item-label">email</label><div class="form-item bmn-spr form-field-wrap"><label for="bmn-signin-email" class="form-item-input"><input type="text" value="' + emailVal + '" name="bmn-signin-email" id="bmn-signin-email"><i ' + $css + '>Enter your e-mail</i></label><span class="form-item-icon">&nbsp;</span></div> \
												<div class="bmn-form-validation bmn-val error" id="bmn-signin-email-validation"><span class="bmn-form-validation-msg error-info">Ok, that\'s a real email address.</span></div> \
											</div> \
											<div class="form-item-box form-item-password" id="login-password"> \
												<label for="bmn-signin-password" class="form-item-label">password</label><div class="form-item bmn-spr form-field-wrap"><label for="bmn-signin-password" class="form-item-input"><input type="password" value="" name="bmn-signin-password" id="bmn-signin-password" class="bmn-spr bmn-form-field"><i>Enter your password</i></label><span class="form-item-icon">&nbsp;</span></div> \
												<div class="bmn-form-validation bmn-val error" id="bmn-signin-password-validation"><span class="bmn-form-validation-msg error-info">&nbsp;</span></div> \
											</div> \
											<div id="signin-chkbx-fieldwrap" class="forgot-password"><a class="signin-form-toggle" href="">Forgot your password/email?</a></div> \
											<div class="form-item-submit"> \
												<span class="bmn-btn-wrap"><button id="bmn-sign-in-btn" class="bmn-btn-lrg form-item-submit-button" type="submit">Sign In!</button></span> \
											</div> \
										</section> \
									</form> \
								</div> \
							</div>';

                BRK.hat.bindLoginEvents(BRK.overlay.modal().overlay); // event registration for this version of modal
                BRK.overlay.show(html);

            },

            showForgotPassModal: function () {
                var html = ' <div class="modal-box modal-forgot-password"> \
								<div class="modal-content form-length-300 clearfix"> \
									<form class="s-clear" id="bmn-forgot-pass-modal"> \
										<hgroup> \
											<h1>Forgot Password</h1> \
											<h2>Please enter your email and we\'ll send you a new temporary password.</h2> \
										</hgroup> \
										<div class="form-item-box form-item-mail"> \
											<label for="bmn-forgotpass-modal-email" class="form-item-label">email</label><div class="bmn-spr form-field-wrap form-item"><label for="bmn-forgotpass-modal-email" class="form-item-input"><input type="text" value="" name="bmn-forgotpass-modal-email" id="bmn-forgotpass-modal-email"><i>Enter your email</i></label><span class="form-item-icon">&nbsp;</span></div> \
											<div class="bmn-form-validation bmn-val" id="bmn-forgotpass-email-val"><span class="bmn-form-validation-msg error-info">Ok</span></div> \
										</div> \
										<div class="bmn-state-switch"><a class="signin-form-toggle" href="">&laquo; Back to sign in</a></div> \
										<div class="form-item-submit"> \
											<span class="bmn-btn-wrap"><button id="bmn-modal-reset-btn" class="bmn-btn-lrg form-item-submit-button" type="button">Reset Password</button></span> \
										</div> \
									</form> \
								</div> \
							</div>';

                BRK.hat.bindForgotPassEvents(BRK.overlay.modal().overlay);
                BRK.overlay.show(html);
            },
            showNewsletterModal: function () {
                var html = ' <div class="modal-box modal-newsletter"> \
								<div class="modal-content form-length-300 clearfix"> \
									<form class="s-clear" id="bmn-create-account-form"> \
										<hgroup> \
											<h1>Don\'t forget!</h1> \
											<h2> \
                                                To get the most out of your Break experience, sign up for our newsletter, \
                                                the Breakdown. We\'ll send you a weekly wrap of the most compelling and awesome \
                                                content found online. Interested? \
											</h2> \
										</hgroup> \
										<div class="form-item-newsletter form-item-box-checkbox clearfix" id="register-newsletter"> \
											<div class="form-item-box-radio checked"> \
                                                <div class="form-item-radio"> \
												<input checked="checked" type="radio" name="bmn-register-newsletter" value="yes">\
											    </div> \
												<label for="bmn-register-newsletter" class="form-item-label">ROCK ON! Send me the newsletter.</label>\
											</div>\
                                            <div class="form-item-box-radio"> \
                                                <div class="form-item-radio"> \
												<input type="radio" name="bmn-register-newsletter" value="no">\
											    </div> \
												<label for="bmn-register-newsletter" class="form-item-label">Not yet. Thanks!</label>\
											</div>\
										</div>\
										<div class="form-item-submit"> \
											<span class="bmn-btn-wrap"><button id="bmn-modal-newsletter-btn" class="bmn-btn-lrg form-item-submit-button" type="button">I\'m Done</button></span> \
										</div> \
									</form> \
									<p class="disclaimer">* Reminder: You can always change this setting by visiting your profile section</p>\
								</div> \
							</div>';
                BRK.hat.bindNewsletterEvents(BRK.overlay.modal().overlay);
                BRK.overlay.show(html, function () {
                    var params = new Qp(window.location.href);
                    var registrationReturnUrl = params.get('registrationReturnUrl');
                    if (typeof registrationReturnUrl != "undefined" && registrationReturnUrl != null && registrationReturnUrl != "") {
                        window.location = registrationReturnUrl;
                    }
                });
            },
            validateRegUserName: function ($this, $errorInfoDom, callback) {
                var val = $this.val();
                if (!BRK.hat.usernameRegEx.test(val)) {
                    msg = '<strong>Username is invalid</strong>Username taken or not 7-20 characters';
                    BRK.hat.valMsg($errorInfoDom, msg, true);
                    return false;
                } else {
                    $($errorInfoDom).addClass('success');
                    $.getJSON(BRK.AuthServer + '/Auth/IsValidUserName.js/?callback=?', { username: val }, function (data) {
                        if (data.isOk) {
                            $($errorInfoDom).removeClass('error').addClass('success');
                            BRK.hat.valMsg($errorInfoDom, 'OK', false);
                        } else {
                            errMsg = '<strong>Username taken</strong>Please use a different username';
                            BRK.hat.valMsg($errorInfoDom, errMsg, true);
                        };
                        if (typeof (callback) == 'function') {
                            eval(callback(data.isOk));
                        }
                    });
                }
            },
            validateRegEmail: function ($this, $errorInfoDom, callback) {
                var val = $this.val();
                if (!BRK.hat.emailRegEx.test(val)) {
                    errMsg = '<strong>Email is invalid</strong>Please check the Email format';
                    BRK.hat.valMsg($errorInfoDom, errMsg, true);
                    return true;
                } else {
                    $.getJSON(BRK.AuthServer + '/Auth/IsValidEmail.js/?callback=?', { email: val }, function (result) {
                        if (result.isOk) {
                            $($errorInfoDom).removeClass('error').addClass('success');
                            BRK.hat.valMsg($errorInfoDom, 'OK', false);
                        } else {
                            BRK.hat.valMsg($errorInfoDom, '<strong>Email is already registered</strong>Please login', true);
                        }
                        if (typeof (callback) == 'function') {
                            eval(callback(result.isOk));
                        }
                    });
                }
            },
            validateRegPassword: function ($this, $errorInfoDom) {
                var val = $this.val()
                if (val.length < 7) {
                    BRK.hat.valMsg($errorInfoDom, '<strong>Password is too short</strong>Password should be longer than 7 characters', true);
                    return true;
                } else {
                    $($errorInfoDom).removeClass('error').addClass('success');
                    BRK.hat.valMsg($errorInfoDom, 'OK', false);
                    return false;
                }
            },
            validateRegPasswordConfirm: function ($this, $password, $errorInfoDom) {
                if ($.trim($this) === '') {
                    msg = '<strong>Confirm password is blank</strong>Please retype your password'
                    BRK.hat.valMsg($errorInfoDom, msg, true);
                    return true;
                }
                else if ($.trim($this) !== $.trim($password)) {
                    msg = '<strong>Passwords don\'t match</strong>Please retype your password';
                    BRK.hat.valMsg($errorInfoDom, msg, true);
                    return true;
                }
                else {
                    $($errorInfoDom).removeClass('error').addClass('success');
                    BRK.hat.valMsg($errorInfoDom, '', false);
                    return false;
                }
            },
            // bind validation and submit events
            bindRegEvents: function (modal) {
                modal
                    .undelegate()
                    .delegate('#bmn-fb-login-lb', 'click', function (e) {
                        BRK.api.fbLogon();
                    })
                    .delegate('.form-item-checkbox', 'click', function (e) {
                        var $this = $(this), $input = $this.find('input');
                        if (!$input.is(":checked")) {
                            $this.addClass('checked');
                            $input.attr('checked', 'checked');
                        } else {
                            $this.removeClass('checked')
                            $input.attr('checked', false);
                        }
                    });
                //Retention...
            },

            bindLoginEvents: function (modal) {

                modal
                    .undelegate()
                    .delegate('#bmn-signin-create-account', 'click', function (e) {
                        e.preventDefault();
                        BRK.hat.showRegModal();
                    })
                    .delegate('.form-item-input', 'focus', function () {
                        $(this).find('i').animate({ opacity: 0.6 }, 100);
                    })
                    .delegate('.form-item-input', 'blur', function () {
                        $(this).find('i').animate({ opacity: 1 }, 100);
                    })
                    .delegate('.form-item-input input', 'keyup', function () {
                        if ($(this).val()) {
                            $(this).next('i').hide();
                        } else {
                            $(this).next('i').show();
                        }
                    })
                    .delegate('#bmn-sigin-fb-login-lb', 'click', function (e) {
                        e.preventDefault();
                        BRK.api.openPixel('http://apex-ad.com/www/delivery/lg.php?bannerid=1612&cat_id=4259');
                        BRK.api.fbLogon();
                    })
                    .delegate('#bmn-signin-forget-link', 'click', BRK.hat.showForgotPassModal)
					.delegate('.signin-form-toggle', 'click', function (e) {
					    e.preventDefault();
					    BRK.hat.showForgotPassModal();
					})
                    .delegate('#bmn-sign-in-btn', 'click', function (e) {
                        e.preventDefault();
                        BRK.api.openPixel('http://apex-ad.com/www/delivery/lg.php?bannerid=2030&cat_id=4265');
                        var val = $.trim($('#bmn-signin-email').val());
                        if (!BRK.hat.emailRegEx.test(val)) {
                            errMsg = '<strong>Email is invalid</strong>Please check the Email format';
                            BRK.hat.valMsg('#login-email', errMsg, true);
                            return true;
                        } else {
                            $.getJSON(BRK.AuthServer + '/Auth/IsValidEmail.js/?callback=?', { email: val }, function (result) {
                                if (!result.isOk) {
                                    BRK.hat.valMsg('#login-email', '', false);
                                    return false;
                                } else {
                                    errMsg = '<strong>Email does\'t exist</strong>Please check email address';
                                    BRK.hat.valMsg('#login-email', errMsg, true);
                                    return true;
                                }
                            });
                        }
                        // Check password field
                        var errors = 0;
                        if (!BRK.hat.valLoginModalPassword()) {
                            errors++;
                        }
                        // don't submit if not valid
                        if (errors > 0) {
                            return;
                        }
                        var email = $.trim($('#bmn-signin-email').val()),
							    password = $.trim($('#bmn-signin-password').val()),
								rememberMe = $('#bmn-signin-remember').attr('checked');
                        BRK.api.logon(email, password, rememberMe, function (resp) {
                            if (resp.Status && resp.Status === 'error') {
                                $('.form-item-password').removeClass('success');
                                BRK.hat.valMsg('#bmn-signin-password-validation', '<strong>Wrong Password</strong> The password is incorrect', true);
                                BRK.api.openPixel('http://apex-ad.com/www/delivery/lg.php?bannerid=2030&cat_id=4267'); // sign in error tracker
                            }
                            if (resp.Status && resp.Status === 'success') {
                                var btn = $('#bmn-sign-in-btn'), msg = '<span id="bmn-login-btn-msg">Succesful Sign In!</span>', t = null;

                                btn.parent().css('position', 'relative');
                                btn.css('visibility', 'hidden').parent().append(msg);

                                BRK.api.openPixel('http://apex-ad.com/www/delivery/lg.php?bannerid=2030&cat_id=4266'); // sign in success tracker

                                t = setTimeout(function () {
                                    BRK.overlay.hide();

                                    // test version: remove the coupling to BUI next
                                    if (jQuery.isFunction(window.BUI.controls.user.renderAccountUI)) {
                                        BUI.controls.user.renderAccountUI(BRK.api.session);
                                    }
                                }, 2000);
                            }
                        });


                    });
                setTimeout(function () {
                    $('#bmn-signin-email').focus()
                }, 0);
            },

            valLoginModalPassword: function () {
                var valid = $.trim($('#bmn-signin-password').val()) !== '';
                BRK.hat.valMsg('#bmn-signin-password-validation', valid ? 'Ok' : '<strong>Password is blank</strong>Enter your password', !valid);
                var dom = $('#bmn-signin-password').closest(".form-item-box");
                return valid;
            },
            bindNewsletterEvents: function (modal) {
                modal
                    .undelegate()
                    .delegate('.form-item-box-radio', 'click', function (e) {
                        var $this = $(this);
                        if (!$this.hasClass('checked')) { // clicking unchecked item
                            $this.siblings().removeClass('checked').find('input').attr('checked', false);
                            $this.addClass('checked').find('input').attr('checked', 'checked');
                        }
                    })
                    .delegate('#bmn-modal-newsletter-btn', 'click', function (e) {
                        var enabled = ($('#register-newsletter input:checked').val() === "yes") ? true : false;
                        $.getJSON(BRK.AuthServer + "/auth/UpdateBreakDownNewsLetter?callback=?", { enableNewsLetter: enabled }, function (result) {
                            //for now leave this empty
                            BRK.overlay.hide();
                        });
                    })
            },
            bindForgotPassEvents: function (modal) {
                modal
                    .undelegate()
                    .delegate('.signin-form-toggle', 'click', function (e) {
                        e.preventDefault();
                        BRK.hat.showLoginModal();
                    })
                    .delegate('.form-item-input', 'focus', function () {
                        $(this).find('i').animate({ opacity: 0.6 }, 100);
                    })
					.delegate('#bmn-forgotpass-modal-email', 'blur', function () {
					    $(this).next('i').animate({ opacity: 1 }, 100);

					})
                    .delegate('#bmn-forgotpass-modal-email', 'keyup', function () {
                        if ($(this).val()) {
                            $(this).next('i').hide();
                        } else {
                            $(this).next('i').show();
                        }
                    })
					.delegate('#bmn-modal-reset-btn', 'click', function (e) {
					    e.preventDefault();
					    var em = $('#bmn-forgotpass-modal-email').val();
					    if ($.trim(em) === '') {
					        BRK.hat.valMsg('#bmn-forgotpass-email-val', '<strong>Email is blank</strong>Enter your email', true);
					        return false;
					    }
					    if (!BRK.hat.emailRegEx.test(em)) {
					        errMsg = '<strong>Email is invalid</strong>Please check the Email format';
					        BRK.hat.valMsg('#bmn-forgotpass-email-val', errMsg, true);
					        return false;
					    }
					    $.getJSON(BRK.AuthServer + "/Profile/ResetPassword.js?callback=?", { email: em, client_id: BRK.siteId }, function (result) {
					        if (result.success) { // confirmation
					            BRK.overlay.show('<div class="modal-box modal-forgot-password modal-forgot-password-ok"><div class="modal-content clearfix"><hgroup><h1>Password Reset</h1><h2>Check your email. A temporary password has been sent to you.</h2></hgroup>');
					        } else { // error
					            BRK.hat.valMsg('#bmn-forgotpass-email-val', '<strong>Email does\'t exist</strong>Please check email address', true);
					        }
					    });

					});
                setTimeout(function () {
                    $('#bmn-forgotpass-modal-email').focus()
                }, 0);
            },

            valMsg: function (val, msg, isError) {
                var valClass = isError ? 'error' : 'success';
                var $errorINFO = $(val).find('.error-info').html(msg);

                $(val)
                    .removeClass('error success')
                    .addClass(valClass)
                    .find('.error-info').html(msg).end()
					.closest('.form-item-box,.form-item-box-checkbox,.form-item-box-select').removeClass('error success').addClass(valClass);
                $errorINFO.css('marginTop', '-' + $errorINFO.outerHeight() / 2 + 'px');

                var OK = 0;
                var $form = $(val).closest('.modal-content')
                var $formItems = $form.find('.form-item-box,.form-item-box-checkbox,.form-item-box-select').not('.not-required');
                for (i = 0; i < $formItems.length; i++) {
                    if ($formItems.eq(i).hasClass('success')) {
                        OK++
                    }
                }
                if (OK >= $formItems.length) {
                    $form.find('.form-item-submit-button').addClass('ok')
                } else {
                    $form.find('.form-item-submit-button').removeClass('ok')
                }

            }
        };

        // load up in this order
        BRK.comm.init(function () {
            BRK.hat.setupLogin();
            BRK.hat.verifyRegistration();
            if (typeof(FB) != 'undefined' && FB != null ) {
            BRK.hat.fbConnect();
            }
        });
    });
})();
